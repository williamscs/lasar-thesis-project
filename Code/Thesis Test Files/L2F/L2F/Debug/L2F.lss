
L2F.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a94  00000b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800106  00800106  00000b2e  2**0
                  ALLOC
  3 .stab         000019c8  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007d0  00000000  00000000  000024f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000126  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000046c  00000000  00000000  00002e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f5  00000000  00000000  0000329a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005c0  00000000  00000000  0000348f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00003a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ea  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000049  00000000  00000000  00003d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00003d63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_4>
  14:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  9e:	0c 94 48 05 	jmp	0xa90	; 0xa90 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_default>

000000a6 <initTimer>:
//		 float irradiance;        //Store the Irradiance
char buffer[12];		  

///////////////////////////////		 
void initTimer( int dutycycle )
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <initTimer+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = 130; //cap of Timer0
  b4:	87 e4       	ldi	r24, 0x47	; 71
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	22 e8       	ldi	r18, 0x82	; 130
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	OCR0B = dutycycle;
  be:	88 e4       	ldi	r24, 0x48	; 72
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
        
	//DDRD |= (1 << PORTD6);         
        
	TCCR0A |= (1 << COM0A1);  // set non-inverting mode
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	24 e4       	ldi	r18, 0x44	; 68
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	20 68       	ori	r18, 0x80	; 128
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);   // set CTC (Clear Timer on Compare) Mode
  da:	84 e4       	ldi	r24, 0x44	; 68
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 e4       	ldi	r18, 0x44	; 68
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	22 60       	ori	r18, 0x02	; 2
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
    TCCR0B |= (1 << CS01);    // set prescaler to 8 and starts PWM
  ec:	85 e4       	ldi	r24, 0x45	; 69
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	25 e4       	ldi	r18, 0x45	; 69
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	22 60       	ori	r18, 0x02	; 2
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
    TIMSK0 = (1 << OCIE0A) | (1 << TOIE0);
  fe:	8e e6       	ldi	r24, 0x6E	; 110
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	23 e0       	ldi	r18, 0x03	; 3
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
		
	TCCR1A |= (1 << COM1A0);
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	20 e8       	ldi	r18, 0x80	; 128
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	20 81       	ld	r18, Z
 114:	20 64       	ori	r18, 0x40	; 64
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12) | (1 << CS12);
 11a:	81 e8       	ldi	r24, 0x81	; 129
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	21 e8       	ldi	r18, 0x81	; 129
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	20 81       	ld	r18, Z
 126:	2c 60       	ori	r18, 0x0C	; 12
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
	TIMSK1 |= (1 << OCIE1A);
 12c:	8f e6       	ldi	r24, 0x6F	; 111
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2f e6       	ldi	r18, 0x6F	; 111
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	22 60       	ori	r18, 0x02	; 2
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	OCR1A = 0xF423;
 13e:	88 e8       	ldi	r24, 0x88	; 136
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	23 e2       	ldi	r18, 0x23	; 35
 144:	34 ef       	ldi	r19, 0xF4	; 244
 146:	fc 01       	movw	r30, r24
 148:	31 83       	std	Z+1, r19	; 0x01
 14a:	20 83       	st	Z, r18
    // set prescaler to 8 and starts PWM
        
        TIMSK0 = (1 << OCIE0B);
        //Enable COMPA
        */
}
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	cf 91       	pop	r28
 152:	df 91       	pop	r29
 154:	08 95       	ret

00000156 <__vector_4>:
///////////////////////////
//---------PCINT Counter---
ISR(PCINT1_vect) 
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
 16c:	df 93       	push	r29
 16e:	cf 93       	push	r28
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	if(PINC & (1<<PINC3)) //detect Rising Edge
 174:	86 e2       	ldi	r24, 0x26	; 38
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	88 70       	andi	r24, 0x08	; 8
 182:	90 70       	andi	r25, 0x00	; 0
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	99 f0       	breq	.+38     	; 0x1ae <__vector_4+0x58>
		NumChanges = NumChanges + 1;
 188:	80 91 09 01 	lds	r24, 0x0109
 18c:	90 91 0a 01 	lds	r25, 0x010A
 190:	a0 91 0b 01 	lds	r26, 0x010B
 194:	b0 91 0c 01 	lds	r27, 0x010C
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	a1 1d       	adc	r26, r1
 19c:	b1 1d       	adc	r27, r1
 19e:	80 93 09 01 	sts	0x0109, r24
 1a2:	90 93 0a 01 	sts	0x010A, r25
 1a6:	a0 93 0b 01 	sts	0x010B, r26
 1aa:	b0 93 0c 01 	sts	0x010C, r27
		//PORTD ^= (1<<PORTD6);   //LED Alternates ON and OFF
		////delay_ms(2000);
		//PORTC ^= (1 << PORTC2); //[Follows the Input]		
} 
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_18>:
////////////////////////////
//-----Bluetooth Counter----
ISR(USART_RX_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
 1da:	df 93       	push	r29
 1dc:	cf 93       	push	r28
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSR0A  & (1 << RXC0)) )
 1e2:	00 00       	nop
 1e4:	80 ec       	ldi	r24, 0xC0	; 192
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	d4 f7       	brge	.-12     	; 0x1e4 <__vector_18+0x1c>
	;
	/* Get and return received data from buffer */
	rxflag = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 06 01 	sts	0x0106, r24
}
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <delay_ms>:

///////////////////////////
//-------DELAYS------------
void delay_ms(uint16_t ms)
{
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	df 93       	push	r29
 212:	cf 93       	push	r28
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	60 97       	sbiw	r28, 0x10	; 16
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	98 8b       	std	Y+16, r25	; 0x10
 226:	8f 87       	std	Y+15, r24	; 0x0f
	while( ms ){
 228:	85 c0       	rjmp	.+266    	; 0x334 <delay_ms+0x128>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	a0 e8       	ldi	r26, 0x80	; 128
 230:	bf e3       	ldi	r27, 0x3F	; 63
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	9a 83       	std	Y+2, r25	; 0x02
 236:	ab 83       	std	Y+3, r26	; 0x03
 238:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
 23a:	69 81       	ldd	r22, Y+1	; 0x01
 23c:	7a 81       	ldd	r23, Y+2	; 0x02
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	9c 81       	ldd	r25, Y+4	; 0x04
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	4a e7       	ldi	r20, 0x7A	; 122
 248:	55 e4       	ldi	r21, 0x45	; 69
 24a:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 24e:	dc 01       	movw	r26, r24
 250:	cb 01       	movw	r24, r22
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	9e 83       	std	Y+6, r25	; 0x06
 256:	af 83       	std	Y+7, r26	; 0x07
 258:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 25a:	11 e0       	ldi	r17, 0x01	; 1
 25c:	6d 81       	ldd	r22, Y+5	; 0x05
 25e:	7e 81       	ldd	r23, Y+6	; 0x06
 260:	8f 81       	ldd	r24, Y+7	; 0x07
 262:	98 85       	ldd	r25, Y+8	; 0x08
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e8       	ldi	r20, 0x80	; 128
 26a:	5f e3       	ldi	r21, 0x3F	; 63
 26c:	0e 94 c3 03 	call	0x786	; 0x786 <__cmpsf2>
 270:	88 23       	and	r24, r24
 272:	0c f0       	brlt	.+2      	; 0x276 <delay_ms+0x6a>
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	11 23       	and	r17, r17
 278:	29 f0       	breq	.+10     	; 0x284 <delay_ms+0x78>
		__ticks = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	9a 87       	std	Y+10, r25	; 0x0a
 280:	89 87       	std	Y+9, r24	; 0x09
 282:	46 c0       	rjmp	.+140    	; 0x310 <delay_ms+0x104>
	else if (__tmp > 65535)
 284:	11 e0       	ldi	r17, 0x01	; 1
 286:	6d 81       	ldd	r22, Y+5	; 0x05
 288:	7e 81       	ldd	r23, Y+6	; 0x06
 28a:	8f 81       	ldd	r24, Y+7	; 0x07
 28c:	98 85       	ldd	r25, Y+8	; 0x08
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	3f ef       	ldi	r19, 0xFF	; 255
 292:	4f e7       	ldi	r20, 0x7F	; 127
 294:	57 e4       	ldi	r21, 0x47	; 71
 296:	0e 94 40 04 	call	0x880	; 0x880 <__gesf2>
 29a:	18 16       	cp	r1, r24
 29c:	0c f0       	brlt	.+2      	; 0x2a0 <delay_ms+0x94>
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	11 23       	and	r17, r17
 2a2:	61 f1       	breq	.+88     	; 0x2fc <delay_ms+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2a4:	69 81       	ldd	r22, Y+1	; 0x01
 2a6:	7a 81       	ldd	r23, Y+2	; 0x02
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	9c 81       	ldd	r25, Y+4	; 0x04
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e2       	ldi	r20, 0x20	; 32
 2b2:	51 e4       	ldi	r21, 0x41	; 65
 2b4:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 2b8:	dc 01       	movw	r26, r24
 2ba:	cb 01       	movw	r24, r22
 2bc:	bc 01       	movw	r22, r24
 2be:	cd 01       	movw	r24, r26
 2c0:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 2c4:	dc 01       	movw	r26, r24
 2c6:	cb 01       	movw	r24, r22
 2c8:	9a 87       	std	Y+10, r25	; 0x0a
 2ca:	89 87       	std	Y+9, r24	; 0x09
 2cc:	12 c0       	rjmp	.+36     	; 0x2f2 <delay_ms+0xe6>
 2ce:	80 e9       	ldi	r24, 0x90	; 144
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	9c 87       	std	Y+12, r25	; 0x0c
 2d4:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2d6:	8b 85       	ldd	r24, Y+11	; 0x0b
 2d8:	9c 85       	ldd	r25, Y+12	; 0x0c
 2da:	8c 01       	movw	r16, r24
 2dc:	c8 01       	movw	r24, r16
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <delay_ms+0xd2>
 2e2:	8c 01       	movw	r16, r24
 2e4:	1c 87       	std	Y+12, r17	; 0x0c
 2e6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	89 85       	ldd	r24, Y+9	; 0x09
 2ea:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	9a 87       	std	Y+10, r25	; 0x0a
 2f0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f2:	89 85       	ldd	r24, Y+9	; 0x09
 2f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	51 f7       	brne	.-44     	; 0x2ce <delay_ms+0xc2>
 2fa:	17 c0       	rjmp	.+46     	; 0x32a <delay_ms+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2fc:	6d 81       	ldd	r22, Y+5	; 0x05
 2fe:	7e 81       	ldd	r23, Y+6	; 0x06
 300:	8f 81       	ldd	r24, Y+7	; 0x07
 302:	98 85       	ldd	r25, Y+8	; 0x08
 304:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 308:	dc 01       	movw	r26, r24
 30a:	cb 01       	movw	r24, r22
 30c:	9a 87       	std	Y+10, r25	; 0x0a
 30e:	89 87       	std	Y+9, r24	; 0x09
 310:	89 85       	ldd	r24, Y+9	; 0x09
 312:	9a 85       	ldd	r25, Y+10	; 0x0a
 314:	9e 87       	std	Y+14, r25	; 0x0e
 316:	8d 87       	std	Y+13, r24	; 0x0d
 318:	8d 85       	ldd	r24, Y+13	; 0x0d
 31a:	9e 85       	ldd	r25, Y+14	; 0x0e
 31c:	8c 01       	movw	r16, r24
 31e:	c8 01       	movw	r24, r16
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <delay_ms+0x114>
 324:	8c 01       	movw	r16, r24
 326:	1e 87       	std	Y+14, r17	; 0x0e
 328:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(1);
		ms--;
 32a:	8f 85       	ldd	r24, Y+15	; 0x0f
 32c:	98 89       	ldd	r25, Y+16	; 0x10
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	98 8b       	std	Y+16, r25	; 0x10
 332:	8f 87       	std	Y+15, r24	; 0x0f

///////////////////////////
//-------DELAYS------------
void delay_ms(uint16_t ms)
{
	while( ms ){
 334:	8f 85       	ldd	r24, Y+15	; 0x0f
 336:	98 89       	ldd	r25, Y+16	; 0x10
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	09 f0       	breq	.+2      	; 0x33e <delay_ms+0x132>
 33c:	76 cf       	rjmp	.-276    	; 0x22a <delay_ms+0x1e>
		_delay_ms(1);
		ms--;
	}
}
 33e:	60 96       	adiw	r28, 0x10	; 16
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	cf 91       	pop	r28
 34c:	df 91       	pop	r29
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <main>:
////////////////////////////
//--------MAIN-------------
int main (void)
{ 	
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	df 93       	push	r29
 35a:	cf 93       	push	r28
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	2e 97       	sbiw	r28, 0x0e	; 14
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
	//-------PORTD
	// PD0	 Output		LED
	// Pins   76543210 
	// Values 00000011
	DDRD |= (1 << PORTD2); 
 36c:	8a e2       	ldi	r24, 0x2A	; 42
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	2a e2       	ldi	r18, 0x2A	; 42
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	f9 01       	movw	r30, r18
 376:	20 81       	ld	r18, Z
 378:	24 60       	ori	r18, 0x04	; 4
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
	//-------PORTC 
	// PC3	 Pin26		Input
	// PC2	 Pin25		Output 
	// Pins   543210 
	// Values 001000   
	DDRC |= (1<<DDC0);
 37e:	87 e2       	ldi	r24, 0x27	; 39
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	27 e2       	ldi	r18, 0x27	; 39
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	f9 01       	movw	r30, r18
 388:	20 81       	ld	r18, Z
 38a:	21 60       	ori	r18, 0x01	; 1
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
	////Enable Pin Change Interrupt on TxIn Pin PC3 
	initTimer(1234);
 390:	82 ed       	ldi	r24, 0xD2	; 210
 392:	94 e0       	ldi	r25, 0x04	; 4
 394:	0e 94 53 00 	call	0xa6	; 0xa6 <initTimer>
	
	//PCINT//////////////////////////	
	//Enables PC[23:16] and PC[7:0]
	PCICR = (1 << PCIE2) | (1 << PCIE0);
 398:	88 e6       	ldi	r24, 0x68	; 104
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	25 e0       	ldi	r18, 0x05	; 5
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
	PCMSK2 = (1 << PCINT20);
 3a2:	8d e6       	ldi	r24, 0x6D	; 109
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	20 e1       	ldi	r18, 0x10	; 16
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
	PCMSK0 = (1 << PCINT0);
 3ac:	8b e6       	ldi	r24, 0x6B	; 107
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
	
	//TIMER1/////////////////////////
	TCCR1A |= (1 << COM1A0);				//
 3b6:	80 e8       	ldi	r24, 0x80	; 128
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	20 e8       	ldi	r18, 0x80	; 128
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	20 64       	ori	r18, 0x40	; 64
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12) | (1 << CS12);	//set prescalar to 256
 3c8:	81 e8       	ldi	r24, 0x81	; 129
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	21 e8       	ldi	r18, 0x81	; 129
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	f9 01       	movw	r30, r18
 3d2:	20 81       	ld	r18, Z
 3d4:	2c 60       	ori	r18, 0x0C	; 12
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
	TIMSK1 |= (1 << OCIE1A);				//
 3da:	8f e6       	ldi	r24, 0x6F	; 111
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	2f e6       	ldi	r18, 0x6F	; 111
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	f9 01       	movw	r30, r18
 3e4:	20 81       	ld	r18, Z
 3e6:	22 60       	ori	r18, 0x02	; 2
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
	OCR1A = 0xF423;							//Timer1 CTC @ 1 sec period
 3ec:	88 e8       	ldi	r24, 0x88	; 136
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	23 e2       	ldi	r18, 0x23	; 35
 3f2:	34 ef       	ldi	r19, 0xF4	; 244
 3f4:	fc 01       	movw	r30, r24
 3f6:	31 83       	std	Z+1, r19	; 0x01
 3f8:	20 83       	st	Z, r18
	
	
	////Bluetooth Stuff
	USART_Init(MYUBRR);
 3fa:	87 e6       	ldi	r24, 0x67	; 103
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 44 03 	call	0x688	; 0x688 <USART_Init>
	sei(); 
 402:	78 94       	sei
	//_delay_ms(1000);
   
	while(1)
	{
		if(tInactive >= 15)
 404:	80 91 08 01 	lds	r24, 0x0108
 408:	8f 30       	cpi	r24, 0x0F	; 15
 40a:	48 f0       	brcs	.+18     	; 0x41e <main+0xca>
		{
			PORTC &= ~(1 << PORTC0);
 40c:	88 e2       	ldi	r24, 0x28	; 40
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	28 e2       	ldi	r18, 0x28	; 40
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	f9 01       	movw	r30, r18
 416:	20 81       	ld	r18, Z
 418:	2e 7f       	andi	r18, 0xFE	; 254
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
		}			
		itoa(Freq,buffer,10);
 41e:	80 91 0d 01 	lds	r24, 0x010D
 422:	90 91 0e 01 	lds	r25, 0x010E
 426:	2f e0       	ldi	r18, 0x0F	; 15
 428:	31 e0       	ldi	r19, 0x01	; 1
 42a:	b9 01       	movw	r22, r18
 42c:	4a e0       	ldi	r20, 0x0A	; 10
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	0e 94 03 05 	call	0xa06	; 0xa06 <itoa>
		strcat(buffer,"kHz ");
 434:	8f e0       	ldi	r24, 0x0F	; 15
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <strlen>
 43c:	81 5f       	subi	r24, 0xF1	; 241
 43e:	9e 4f       	sbci	r25, 0xFE	; 254
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	31 e0       	ldi	r19, 0x01	; 1
 444:	b9 01       	movw	r22, r18
 446:	45 e0       	ldi	r20, 0x05	; 5
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <memcpy>
		USART_Print(buffer);
 44e:	8f e0       	ldi	r24, 0x0F	; 15
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 92 03 	call	0x724	; 0x724 <USART_Print>
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	a8 ec       	ldi	r26, 0xC8	; 200
 45c:	b2 e4       	ldi	r27, 0x42	; 66
 45e:	89 83       	std	Y+1, r24	; 0x01
 460:	9a 83       	std	Y+2, r25	; 0x02
 462:	ab 83       	std	Y+3, r26	; 0x03
 464:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
 466:	69 81       	ldd	r22, Y+1	; 0x01
 468:	7a 81       	ldd	r23, Y+2	; 0x02
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	4a e7       	ldi	r20, 0x7A	; 122
 474:	55 e4       	ldi	r21, 0x45	; 69
 476:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 47a:	dc 01       	movw	r26, r24
 47c:	cb 01       	movw	r24, r22
 47e:	8d 83       	std	Y+5, r24	; 0x05
 480:	9e 83       	std	Y+6, r25	; 0x06
 482:	af 83       	std	Y+7, r26	; 0x07
 484:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 486:	11 e0       	ldi	r17, 0x01	; 1
 488:	6d 81       	ldd	r22, Y+5	; 0x05
 48a:	7e 81       	ldd	r23, Y+6	; 0x06
 48c:	8f 81       	ldd	r24, Y+7	; 0x07
 48e:	98 85       	ldd	r25, Y+8	; 0x08
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	40 e8       	ldi	r20, 0x80	; 128
 496:	5f e3       	ldi	r21, 0x3F	; 63
 498:	0e 94 c3 03 	call	0x786	; 0x786 <__cmpsf2>
 49c:	88 23       	and	r24, r24
 49e:	0c f0       	brlt	.+2      	; 0x4a2 <main+0x14e>
 4a0:	10 e0       	ldi	r17, 0x00	; 0
 4a2:	11 23       	and	r17, r17
 4a4:	29 f0       	breq	.+10     	; 0x4b0 <main+0x15c>
		__ticks = 1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	9a 87       	std	Y+10, r25	; 0x0a
 4ac:	89 87       	std	Y+9, r24	; 0x09
 4ae:	46 c0       	rjmp	.+140    	; 0x53c <main+0x1e8>
	else if (__tmp > 65535)
 4b0:	11 e0       	ldi	r17, 0x01	; 1
 4b2:	6d 81       	ldd	r22, Y+5	; 0x05
 4b4:	7e 81       	ldd	r23, Y+6	; 0x06
 4b6:	8f 81       	ldd	r24, Y+7	; 0x07
 4b8:	98 85       	ldd	r25, Y+8	; 0x08
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	3f ef       	ldi	r19, 0xFF	; 255
 4be:	4f e7       	ldi	r20, 0x7F	; 127
 4c0:	57 e4       	ldi	r21, 0x47	; 71
 4c2:	0e 94 40 04 	call	0x880	; 0x880 <__gesf2>
 4c6:	18 16       	cp	r1, r24
 4c8:	0c f0       	brlt	.+2      	; 0x4cc <main+0x178>
 4ca:	10 e0       	ldi	r17, 0x00	; 0
 4cc:	11 23       	and	r17, r17
 4ce:	61 f1       	breq	.+88     	; 0x528 <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4d0:	69 81       	ldd	r22, Y+1	; 0x01
 4d2:	7a 81       	ldd	r23, Y+2	; 0x02
 4d4:	8b 81       	ldd	r24, Y+3	; 0x03
 4d6:	9c 81       	ldd	r25, Y+4	; 0x04
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	40 e2       	ldi	r20, 0x20	; 32
 4de:	51 e4       	ldi	r21, 0x41	; 65
 4e0:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 4e4:	dc 01       	movw	r26, r24
 4e6:	cb 01       	movw	r24, r22
 4e8:	bc 01       	movw	r22, r24
 4ea:	cd 01       	movw	r24, r26
 4ec:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 4f0:	dc 01       	movw	r26, r24
 4f2:	cb 01       	movw	r24, r22
 4f4:	9a 87       	std	Y+10, r25	; 0x0a
 4f6:	89 87       	std	Y+9, r24	; 0x09
 4f8:	12 c0       	rjmp	.+36     	; 0x51e <main+0x1ca>
 4fa:	80 e9       	ldi	r24, 0x90	; 144
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	9c 87       	std	Y+12, r25	; 0x0c
 500:	8b 87       	std	Y+11, r24	; 0x0b
 502:	8b 85       	ldd	r24, Y+11	; 0x0b
 504:	9c 85       	ldd	r25, Y+12	; 0x0c
 506:	8c 01       	movw	r16, r24
 508:	c8 01       	movw	r24, r16
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <main+0x1b6>
 50e:	8c 01       	movw	r16, r24
 510:	1c 87       	std	Y+12, r17	; 0x0c
 512:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 514:	89 85       	ldd	r24, Y+9	; 0x09
 516:	9a 85       	ldd	r25, Y+10	; 0x0a
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	9a 87       	std	Y+10, r25	; 0x0a
 51c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 51e:	89 85       	ldd	r24, Y+9	; 0x09
 520:	9a 85       	ldd	r25, Y+10	; 0x0a
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	51 f7       	brne	.-44     	; 0x4fa <main+0x1a6>
		//USART_Print("Hello");
		//itoa(tInactive, buffer, 10);
		//strcat(buffer, "s ");
		//USART_Print(buffer);
		//_delay_ms(500);
	}
 526:	6e cf       	rjmp	.-292    	; 0x404 <main+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 528:	6d 81       	ldd	r22, Y+5	; 0x05
 52a:	7e 81       	ldd	r23, Y+6	; 0x06
 52c:	8f 81       	ldd	r24, Y+7	; 0x07
 52e:	98 85       	ldd	r25, Y+8	; 0x08
 530:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixunssfsi>
 534:	dc 01       	movw	r26, r24
 536:	cb 01       	movw	r24, r22
 538:	9a 87       	std	Y+10, r25	; 0x0a
 53a:	89 87       	std	Y+9, r24	; 0x09
 53c:	89 85       	ldd	r24, Y+9	; 0x09
 53e:	9a 85       	ldd	r25, Y+10	; 0x0a
 540:	9e 87       	std	Y+14, r25	; 0x0e
 542:	8d 87       	std	Y+13, r24	; 0x0d
 544:	8d 85       	ldd	r24, Y+13	; 0x0d
 546:	9e 85       	ldd	r25, Y+14	; 0x0e
 548:	8c 01       	movw	r16, r24
 54a:	f8 01       	movw	r30, r16
 54c:	31 97       	sbiw	r30, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <main+0x1f8>
 550:	8f 01       	movw	r16, r30
 552:	1e 87       	std	Y+14, r17	; 0x0e
 554:	0d 87       	std	Y+13, r16	; 0x0d
 556:	56 cf       	rjmp	.-340    	; 0x404 <main+0xb0>

00000558 <__vector_11>:
} //end main 



ISR(TIMER1_COMPA_vect)
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
 57a:	df 93       	push	r29
 57c:	cf 93       	push	r28
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
    Freq = NumChanges/1000;
 582:	80 91 09 01 	lds	r24, 0x0109
 586:	90 91 0a 01 	lds	r25, 0x010A
 58a:	a0 91 0b 01 	lds	r26, 0x010B
 58e:	b0 91 0c 01 	lds	r27, 0x010C
 592:	28 ee       	ldi	r18, 0xE8	; 232
 594:	33 e0       	ldi	r19, 0x03	; 3
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	bc 01       	movw	r22, r24
 59c:	cd 01       	movw	r24, r26
 59e:	0e 94 cf 04 	call	0x99e	; 0x99e <__udivmodsi4>
 5a2:	da 01       	movw	r26, r20
 5a4:	c9 01       	movw	r24, r18
 5a6:	90 93 0e 01 	sts	0x010E, r25
 5aa:	80 93 0d 01 	sts	0x010D, r24
	NumChanges = 0;
 5ae:	10 92 09 01 	sts	0x0109, r1
 5b2:	10 92 0a 01 	sts	0x010A, r1
 5b6:	10 92 0b 01 	sts	0x010B, r1
 5ba:	10 92 0c 01 	sts	0x010C, r1
	
	if(!active)
 5be:	80 91 07 01 	lds	r24, 0x0107
 5c2:	88 23       	and	r24, r24
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <__vector_11+0x78>
		tInactive++;
 5c6:	80 91 08 01 	lds	r24, 0x0108
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	80 93 08 01 	sts	0x0108, r24
}
 5d0:	cf 91       	pop	r28
 5d2:	df 91       	pop	r29
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <__vector_5>:
	}
}
*/

ISR(PCINT2_vect)
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	8f 93       	push	r24
 602:	9f 93       	push	r25
 604:	af 93       	push	r26
 606:	bf 93       	push	r27
 608:	ef 93       	push	r30
 60a:	ff 93       	push	r31
 60c:	df 93       	push	r29
 60e:	cf 93       	push	r28
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
	if(PIND & (1<< PORTD4))
 614:	89 e2       	ldi	r24, 0x29	; 41
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	fc 01       	movw	r30, r24
 61a:	80 81       	ld	r24, Z
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	80 71       	andi	r24, 0x10	; 16
 622:	90 70       	andi	r25, 0x00	; 0
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	99 f0       	breq	.+38     	; 0x64e <__vector_5+0x58>
		NumChanges++;
 628:	80 91 09 01 	lds	r24, 0x0109
 62c:	90 91 0a 01 	lds	r25, 0x010A
 630:	a0 91 0b 01 	lds	r26, 0x010B
 634:	b0 91 0c 01 	lds	r27, 0x010C
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	a1 1d       	adc	r26, r1
 63c:	b1 1d       	adc	r27, r1
 63e:	80 93 09 01 	sts	0x0109, r24
 642:	90 93 0a 01 	sts	0x010A, r25
 646:	a0 93 0b 01 	sts	0x010B, r26
 64a:	b0 93 0c 01 	sts	0x010C, r27
	//_delay_ms(50);
	
}
 64e:	cf 91       	pop	r28
 650:	df 91       	pop	r29
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <__vector_default>:

 668:	1f 92       	push	r1
 66a:	0f 92       	push	r0
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	0f 92       	push	r0
 670:	11 24       	eor	r1, r1
 672:	df 93       	push	r29
 674:	cf 93       	push	r28
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
 67a:	cf 91       	pop	r28
 67c:	df 91       	pop	r29
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <USART_Init>:
#include<string.h>
#include"USART.h"


void USART_Init( unsigned int ubrr)
{
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	00 d0       	rcall	.+0      	; 0x68e <USART_Init+0x6>
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
	DDRD |= (1 << PORTD1) | (1 << PORTD0);
 696:	8a e2       	ldi	r24, 0x2A	; 42
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	2a e2       	ldi	r18, 0x2A	; 42
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	f9 01       	movw	r30, r18
 6a0:	20 81       	ld	r18, Z
 6a2:	23 60       	ori	r18, 0x03	; 3
 6a4:	fc 01       	movw	r30, r24
 6a6:	20 83       	st	Z, r18
    UBRR0H = (ubrr >> 8);
 6a8:	85 ec       	ldi	r24, 0xC5	; 197
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	29 81       	ldd	r18, Y+1	; 0x01
 6ae:	3a 81       	ldd	r19, Y+2	; 0x02
 6b0:	23 2f       	mov	r18, r19
 6b2:	33 27       	eor	r19, r19
 6b4:	fc 01       	movw	r30, r24
 6b6:	20 83       	st	Z, r18
    UBRR0L = ubrr;
 6b8:	84 ec       	ldi	r24, 0xC4	; 196
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	29 81       	ldd	r18, Y+1	; 0x01
 6be:	fc 01       	movw	r30, r24
 6c0:	20 83       	st	Z, r18
    
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);      // Enable receiver and transmitter and interrupt receive
 6c2:	81 ec       	ldi	r24, 0xC1	; 193
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	28 e9       	ldi	r18, 0x98	; 152
 6c8:	fc 01       	movw	r30, r24
 6ca:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
 6cc:	82 ec       	ldi	r24, 0xC2	; 194
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	26 e0       	ldi	r18, 0x06	; 6
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
	
	return;
}
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	cf 91       	pop	r28
 6dc:	df 91       	pop	r29
 6de:	08 95       	ret

000006e0 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
 6e0:	df 93       	push	r29
 6e2:	cf 93       	push	r28
 6e4:	0f 92       	push	r0
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for empty transmit buffer */
    while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
 6ec:	00 00       	nop
 6ee:	80 ec       	ldi	r24, 0xC0	; 192
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	fc 01       	movw	r30, r24
 6f4:	80 81       	ld	r24, Z
 6f6:	88 2f       	mov	r24, r24
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	80 72       	andi	r24, 0x20	; 32
 6fc:	90 70       	andi	r25, 0x00	; 0
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	b1 f3       	breq	.-20     	; 0x6ee <USART_Transmit+0xe>

	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 702:	86 ec       	ldi	r24, 0xC6	; 198
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	29 81       	ldd	r18, Y+1	; 0x01
 708:	fc 01       	movw	r30, r24
 70a:	20 83       	st	Z, r18
	return;
}
 70c:	0f 90       	pop	r0
 70e:	cf 91       	pop	r28
 710:	df 91       	pop	r29
 712:	08 95       	ret

00000714 <USART_Receive>:


unsigned char USART_Receive( void )
{
 714:	df 93       	push	r29
 716:	cf 93       	push	r28
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
	return '\0';
 71c:	80 e0       	ldi	r24, 0x00	; 0
}
 71e:	cf 91       	pop	r28
 720:	df 91       	pop	r29
 722:	08 95       	ret

00000724 <USART_Print>:


void USART_Print(char * input)
{
 724:	df 93       	push	r29
 726:	cf 93       	push	r28
 728:	00 d0       	rcall	.+0      	; 0x72a <USART_Print+0x6>
 72a:	00 d0       	rcall	.+0      	; 0x72c <USART_Print+0x8>
 72c:	00 d0       	rcall	.+0      	; 0x72e <USART_Print+0xa>
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	9e 83       	std	Y+6, r25	; 0x06
 734:	8d 83       	std	Y+5, r24	; 0x05
	int length = strlen(input);
 736:	8d 81       	ldd	r24, Y+5	; 0x05
 738:	9e 81       	ldd	r25, Y+6	; 0x06
 73a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <strlen>
 73e:	9c 83       	std	Y+4, r25	; 0x04
 740:	8b 83       	std	Y+3, r24	; 0x03
	
	for(int i = 0; i < length; ++i)
 742:	1a 82       	std	Y+2, r1	; 0x02
 744:	19 82       	std	Y+1, r1	; 0x01
 746:	0f c0       	rjmp	.+30     	; 0x766 <USART_Print+0x42>
	{
		USART_Transmit(input[i]);
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	9a 81       	ldd	r25, Y+2	; 0x02
 74c:	2d 81       	ldd	r18, Y+5	; 0x05
 74e:	3e 81       	ldd	r19, Y+6	; 0x06
 750:	82 0f       	add	r24, r18
 752:	93 1f       	adc	r25, r19
 754:	fc 01       	movw	r30, r24
 756:	80 81       	ld	r24, Z
 758:	0e 94 70 03 	call	0x6e0	; 0x6e0 <USART_Transmit>

void USART_Print(char * input)
{
	int length = strlen(input);
	
	for(int i = 0; i < length; ++i)
 75c:	89 81       	ldd	r24, Y+1	; 0x01
 75e:	9a 81       	ldd	r25, Y+2	; 0x02
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	9a 83       	std	Y+2, r25	; 0x02
 764:	89 83       	std	Y+1, r24	; 0x01
 766:	29 81       	ldd	r18, Y+1	; 0x01
 768:	3a 81       	ldd	r19, Y+2	; 0x02
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	9c 81       	ldd	r25, Y+4	; 0x04
 76e:	28 17       	cp	r18, r24
 770:	39 07       	cpc	r19, r25
 772:	54 f3       	brlt	.-44     	; 0x748 <USART_Print+0x24>
	{
		USART_Transmit(input[i]);
	}
	return;
	
}
 774:	26 96       	adiw	r28, 0x06	; 6
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	f8 94       	cli
 77a:	de bf       	out	0x3e, r29	; 62
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	cd bf       	out	0x3d, r28	; 61
 780:	cf 91       	pop	r28
 782:	df 91       	pop	r29
 784:	08 95       	ret

00000786 <__cmpsf2>:
 786:	2f d0       	rcall	.+94     	; 0x7e6 <__fp_cmp>
 788:	08 f4       	brcc	.+2      	; 0x78c <__cmpsf2+0x6>
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	08 95       	ret

0000078e <__fixunssfsi>:
 78e:	57 d0       	rcall	.+174    	; 0x83e <__fp_splitA>
 790:	88 f0       	brcs	.+34     	; 0x7b4 <__fixunssfsi+0x26>
 792:	9f 57       	subi	r25, 0x7F	; 127
 794:	90 f0       	brcs	.+36     	; 0x7ba <__fixunssfsi+0x2c>
 796:	b9 2f       	mov	r27, r25
 798:	99 27       	eor	r25, r25
 79a:	b7 51       	subi	r27, 0x17	; 23
 79c:	a0 f0       	brcs	.+40     	; 0x7c6 <__fixunssfsi+0x38>
 79e:	d1 f0       	breq	.+52     	; 0x7d4 <__fixunssfsi+0x46>
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	1a f0       	brmi	.+6      	; 0x7b0 <__fixunssfsi+0x22>
 7aa:	ba 95       	dec	r27
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__fixunssfsi+0x12>
 7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <__fixunssfsi+0x46>
 7b0:	b1 30       	cpi	r27, 0x01	; 1
 7b2:	81 f0       	breq	.+32     	; 0x7d4 <__fixunssfsi+0x46>
 7b4:	5e d0       	rcall	.+188    	; 0x872 <__fp_zero>
 7b6:	b1 e0       	ldi	r27, 0x01	; 1
 7b8:	08 95       	ret
 7ba:	5b c0       	rjmp	.+182    	; 0x872 <__fp_zero>
 7bc:	67 2f       	mov	r22, r23
 7be:	78 2f       	mov	r23, r24
 7c0:	88 27       	eor	r24, r24
 7c2:	b8 5f       	subi	r27, 0xF8	; 248
 7c4:	39 f0       	breq	.+14     	; 0x7d4 <__fixunssfsi+0x46>
 7c6:	b9 3f       	cpi	r27, 0xF9	; 249
 7c8:	cc f3       	brlt	.-14     	; 0x7bc <__fixunssfsi+0x2e>
 7ca:	86 95       	lsr	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b3 95       	inc	r27
 7d2:	d9 f7       	brne	.-10     	; 0x7ca <__fixunssfsi+0x3c>
 7d4:	3e f4       	brtc	.+14     	; 0x7e4 <__fixunssfsi+0x56>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	08 95       	ret

000007e6 <__fp_cmp>:
 7e6:	99 0f       	add	r25, r25
 7e8:	00 08       	sbc	r0, r0
 7ea:	55 0f       	add	r21, r21
 7ec:	aa 0b       	sbc	r26, r26
 7ee:	e0 e8       	ldi	r30, 0x80	; 128
 7f0:	fe ef       	ldi	r31, 0xFE	; 254
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	e8 07       	cpc	r30, r24
 7f8:	f9 07       	cpc	r31, r25
 7fa:	c0 f0       	brcs	.+48     	; 0x82c <__fp_cmp+0x46>
 7fc:	12 16       	cp	r1, r18
 7fe:	13 06       	cpc	r1, r19
 800:	e4 07       	cpc	r30, r20
 802:	f5 07       	cpc	r31, r21
 804:	98 f0       	brcs	.+38     	; 0x82c <__fp_cmp+0x46>
 806:	62 1b       	sub	r22, r18
 808:	73 0b       	sbc	r23, r19
 80a:	84 0b       	sbc	r24, r20
 80c:	95 0b       	sbc	r25, r21
 80e:	39 f4       	brne	.+14     	; 0x81e <__fp_cmp+0x38>
 810:	0a 26       	eor	r0, r26
 812:	61 f0       	breq	.+24     	; 0x82c <__fp_cmp+0x46>
 814:	23 2b       	or	r18, r19
 816:	24 2b       	or	r18, r20
 818:	25 2b       	or	r18, r21
 81a:	21 f4       	brne	.+8      	; 0x824 <__fp_cmp+0x3e>
 81c:	08 95       	ret
 81e:	0a 26       	eor	r0, r26
 820:	09 f4       	brne	.+2      	; 0x824 <__fp_cmp+0x3e>
 822:	a1 40       	sbci	r26, 0x01	; 1
 824:	a6 95       	lsr	r26
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	81 1d       	adc	r24, r1
 82a:	81 1d       	adc	r24, r1
 82c:	08 95       	ret

0000082e <__fp_split3>:
 82e:	57 fd       	sbrc	r21, 7
 830:	90 58       	subi	r25, 0x80	; 128
 832:	44 0f       	add	r20, r20
 834:	55 1f       	adc	r21, r21
 836:	59 f0       	breq	.+22     	; 0x84e <__fp_splitA+0x10>
 838:	5f 3f       	cpi	r21, 0xFF	; 255
 83a:	71 f0       	breq	.+28     	; 0x858 <__fp_splitA+0x1a>
 83c:	47 95       	ror	r20

0000083e <__fp_splitA>:
 83e:	88 0f       	add	r24, r24
 840:	97 fb       	bst	r25, 7
 842:	99 1f       	adc	r25, r25
 844:	61 f0       	breq	.+24     	; 0x85e <__fp_splitA+0x20>
 846:	9f 3f       	cpi	r25, 0xFF	; 255
 848:	79 f0       	breq	.+30     	; 0x868 <__fp_splitA+0x2a>
 84a:	87 95       	ror	r24
 84c:	08 95       	ret
 84e:	12 16       	cp	r1, r18
 850:	13 06       	cpc	r1, r19
 852:	14 06       	cpc	r1, r20
 854:	55 1f       	adc	r21, r21
 856:	f2 cf       	rjmp	.-28     	; 0x83c <__fp_split3+0xe>
 858:	46 95       	lsr	r20
 85a:	f1 df       	rcall	.-30     	; 0x83e <__fp_splitA>
 85c:	08 c0       	rjmp	.+16     	; 0x86e <__fp_splitA+0x30>
 85e:	16 16       	cp	r1, r22
 860:	17 06       	cpc	r1, r23
 862:	18 06       	cpc	r1, r24
 864:	99 1f       	adc	r25, r25
 866:	f1 cf       	rjmp	.-30     	; 0x84a <__fp_splitA+0xc>
 868:	86 95       	lsr	r24
 86a:	71 05       	cpc	r23, r1
 86c:	61 05       	cpc	r22, r1
 86e:	08 94       	sec
 870:	08 95       	ret

00000872 <__fp_zero>:
 872:	e8 94       	clt

00000874 <__fp_szero>:
 874:	bb 27       	eor	r27, r27
 876:	66 27       	eor	r22, r22
 878:	77 27       	eor	r23, r23
 87a:	cb 01       	movw	r24, r22
 87c:	97 f9       	bld	r25, 7
 87e:	08 95       	ret

00000880 <__gesf2>:
 880:	b2 df       	rcall	.-156    	; 0x7e6 <__fp_cmp>
 882:	08 f4       	brcc	.+2      	; 0x886 <__gesf2+0x6>
 884:	8f ef       	ldi	r24, 0xFF	; 255
 886:	08 95       	ret

00000888 <__mulsf3>:
 888:	0b d0       	rcall	.+22     	; 0x8a0 <__mulsf3x>
 88a:	78 c0       	rjmp	.+240    	; 0x97c <__fp_round>
 88c:	69 d0       	rcall	.+210    	; 0x960 <__fp_pscA>
 88e:	28 f0       	brcs	.+10     	; 0x89a <__mulsf3+0x12>
 890:	6e d0       	rcall	.+220    	; 0x96e <__fp_pscB>
 892:	18 f0       	brcs	.+6      	; 0x89a <__mulsf3+0x12>
 894:	95 23       	and	r25, r21
 896:	09 f0       	breq	.+2      	; 0x89a <__mulsf3+0x12>
 898:	5a c0       	rjmp	.+180    	; 0x94e <__fp_inf>
 89a:	5f c0       	rjmp	.+190    	; 0x95a <__fp_nan>
 89c:	11 24       	eor	r1, r1
 89e:	ea cf       	rjmp	.-44     	; 0x874 <__fp_szero>

000008a0 <__mulsf3x>:
 8a0:	c6 df       	rcall	.-116    	; 0x82e <__fp_split3>
 8a2:	a0 f3       	brcs	.-24     	; 0x88c <__mulsf3+0x4>

000008a4 <__mulsf3_pse>:
 8a4:	95 9f       	mul	r25, r21
 8a6:	d1 f3       	breq	.-12     	; 0x89c <__mulsf3+0x14>
 8a8:	95 0f       	add	r25, r21
 8aa:	50 e0       	ldi	r21, 0x00	; 0
 8ac:	55 1f       	adc	r21, r21
 8ae:	62 9f       	mul	r22, r18
 8b0:	f0 01       	movw	r30, r0
 8b2:	72 9f       	mul	r23, r18
 8b4:	bb 27       	eor	r27, r27
 8b6:	f0 0d       	add	r31, r0
 8b8:	b1 1d       	adc	r27, r1
 8ba:	63 9f       	mul	r22, r19
 8bc:	aa 27       	eor	r26, r26
 8be:	f0 0d       	add	r31, r0
 8c0:	b1 1d       	adc	r27, r1
 8c2:	aa 1f       	adc	r26, r26
 8c4:	64 9f       	mul	r22, r20
 8c6:	66 27       	eor	r22, r22
 8c8:	b0 0d       	add	r27, r0
 8ca:	a1 1d       	adc	r26, r1
 8cc:	66 1f       	adc	r22, r22
 8ce:	82 9f       	mul	r24, r18
 8d0:	22 27       	eor	r18, r18
 8d2:	b0 0d       	add	r27, r0
 8d4:	a1 1d       	adc	r26, r1
 8d6:	62 1f       	adc	r22, r18
 8d8:	73 9f       	mul	r23, r19
 8da:	b0 0d       	add	r27, r0
 8dc:	a1 1d       	adc	r26, r1
 8de:	62 1f       	adc	r22, r18
 8e0:	83 9f       	mul	r24, r19
 8e2:	a0 0d       	add	r26, r0
 8e4:	61 1d       	adc	r22, r1
 8e6:	22 1f       	adc	r18, r18
 8e8:	74 9f       	mul	r23, r20
 8ea:	33 27       	eor	r19, r19
 8ec:	a0 0d       	add	r26, r0
 8ee:	61 1d       	adc	r22, r1
 8f0:	23 1f       	adc	r18, r19
 8f2:	84 9f       	mul	r24, r20
 8f4:	60 0d       	add	r22, r0
 8f6:	21 1d       	adc	r18, r1
 8f8:	82 2f       	mov	r24, r18
 8fa:	76 2f       	mov	r23, r22
 8fc:	6a 2f       	mov	r22, r26
 8fe:	11 24       	eor	r1, r1
 900:	9f 57       	subi	r25, 0x7F	; 127
 902:	50 40       	sbci	r21, 0x00	; 0
 904:	8a f0       	brmi	.+34     	; 0x928 <__stack+0x29>
 906:	e1 f0       	breq	.+56     	; 0x940 <__stack+0x41>
 908:	88 23       	and	r24, r24
 90a:	4a f0       	brmi	.+18     	; 0x91e <__stack+0x1f>
 90c:	ee 0f       	add	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	bb 1f       	adc	r27, r27
 912:	66 1f       	adc	r22, r22
 914:	77 1f       	adc	r23, r23
 916:	88 1f       	adc	r24, r24
 918:	91 50       	subi	r25, 0x01	; 1
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	a9 f7       	brne	.-22     	; 0x908 <__stack+0x9>
 91e:	9e 3f       	cpi	r25, 0xFE	; 254
 920:	51 05       	cpc	r21, r1
 922:	70 f0       	brcs	.+28     	; 0x940 <__stack+0x41>
 924:	14 c0       	rjmp	.+40     	; 0x94e <__fp_inf>
 926:	a6 cf       	rjmp	.-180    	; 0x874 <__fp_szero>
 928:	5f 3f       	cpi	r21, 0xFF	; 255
 92a:	ec f3       	brlt	.-6      	; 0x926 <__stack+0x27>
 92c:	98 3e       	cpi	r25, 0xE8	; 232
 92e:	dc f3       	brlt	.-10     	; 0x926 <__stack+0x27>
 930:	86 95       	lsr	r24
 932:	77 95       	ror	r23
 934:	67 95       	ror	r22
 936:	b7 95       	ror	r27
 938:	f7 95       	ror	r31
 93a:	e7 95       	ror	r30
 93c:	9f 5f       	subi	r25, 0xFF	; 255
 93e:	c1 f7       	brne	.-16     	; 0x930 <__stack+0x31>
 940:	fe 2b       	or	r31, r30
 942:	88 0f       	add	r24, r24
 944:	91 1d       	adc	r25, r1
 946:	96 95       	lsr	r25
 948:	87 95       	ror	r24
 94a:	97 f9       	bld	r25, 7
 94c:	08 95       	ret

0000094e <__fp_inf>:
 94e:	97 f9       	bld	r25, 7
 950:	9f 67       	ori	r25, 0x7F	; 127
 952:	80 e8       	ldi	r24, 0x80	; 128
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	08 95       	ret

0000095a <__fp_nan>:
 95a:	9f ef       	ldi	r25, 0xFF	; 255
 95c:	80 ec       	ldi	r24, 0xC0	; 192
 95e:	08 95       	ret

00000960 <__fp_pscA>:
 960:	00 24       	eor	r0, r0
 962:	0a 94       	dec	r0
 964:	16 16       	cp	r1, r22
 966:	17 06       	cpc	r1, r23
 968:	18 06       	cpc	r1, r24
 96a:	09 06       	cpc	r0, r25
 96c:	08 95       	ret

0000096e <__fp_pscB>:
 96e:	00 24       	eor	r0, r0
 970:	0a 94       	dec	r0
 972:	12 16       	cp	r1, r18
 974:	13 06       	cpc	r1, r19
 976:	14 06       	cpc	r1, r20
 978:	05 06       	cpc	r0, r21
 97a:	08 95       	ret

0000097c <__fp_round>:
 97c:	09 2e       	mov	r0, r25
 97e:	03 94       	inc	r0
 980:	00 0c       	add	r0, r0
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0xc>
 984:	88 23       	and	r24, r24
 986:	52 f0       	brmi	.+20     	; 0x99c <__fp_round+0x20>
 988:	bb 0f       	add	r27, r27
 98a:	40 f4       	brcc	.+16     	; 0x99c <__fp_round+0x20>
 98c:	bf 2b       	or	r27, r31
 98e:	11 f4       	brne	.+4      	; 0x994 <__fp_round+0x18>
 990:	60 ff       	sbrs	r22, 0
 992:	04 c0       	rjmp	.+8      	; 0x99c <__fp_round+0x20>
 994:	6f 5f       	subi	r22, 0xFF	; 255
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	08 95       	ret

0000099e <__udivmodsi4>:
 99e:	a1 e2       	ldi	r26, 0x21	; 33
 9a0:	1a 2e       	mov	r1, r26
 9a2:	aa 1b       	sub	r26, r26
 9a4:	bb 1b       	sub	r27, r27
 9a6:	fd 01       	movw	r30, r26
 9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <__udivmodsi4_ep>

000009aa <__udivmodsi4_loop>:
 9aa:	aa 1f       	adc	r26, r26
 9ac:	bb 1f       	adc	r27, r27
 9ae:	ee 1f       	adc	r30, r30
 9b0:	ff 1f       	adc	r31, r31
 9b2:	a2 17       	cp	r26, r18
 9b4:	b3 07       	cpc	r27, r19
 9b6:	e4 07       	cpc	r30, r20
 9b8:	f5 07       	cpc	r31, r21
 9ba:	20 f0       	brcs	.+8      	; 0x9c4 <__udivmodsi4_ep>
 9bc:	a2 1b       	sub	r26, r18
 9be:	b3 0b       	sbc	r27, r19
 9c0:	e4 0b       	sbc	r30, r20
 9c2:	f5 0b       	sbc	r31, r21

000009c4 <__udivmodsi4_ep>:
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	1a 94       	dec	r1
 9ce:	69 f7       	brne	.-38     	; 0x9aa <__udivmodsi4_loop>
 9d0:	60 95       	com	r22
 9d2:	70 95       	com	r23
 9d4:	80 95       	com	r24
 9d6:	90 95       	com	r25
 9d8:	9b 01       	movw	r18, r22
 9da:	ac 01       	movw	r20, r24
 9dc:	bd 01       	movw	r22, r26
 9de:	cf 01       	movw	r24, r30
 9e0:	08 95       	ret

000009e2 <memcpy>:
 9e2:	fb 01       	movw	r30, r22
 9e4:	dc 01       	movw	r26, r24
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <memcpy+0xa>
 9e8:	01 90       	ld	r0, Z+
 9ea:	0d 92       	st	X+, r0
 9ec:	41 50       	subi	r20, 0x01	; 1
 9ee:	50 40       	sbci	r21, 0x00	; 0
 9f0:	d8 f7       	brcc	.-10     	; 0x9e8 <memcpy+0x6>
 9f2:	08 95       	ret

000009f4 <strlen>:
 9f4:	fc 01       	movw	r30, r24
 9f6:	01 90       	ld	r0, Z+
 9f8:	00 20       	and	r0, r0
 9fa:	e9 f7       	brne	.-6      	; 0x9f6 <strlen+0x2>
 9fc:	80 95       	com	r24
 9fe:	90 95       	com	r25
 a00:	8e 0f       	add	r24, r30
 a02:	9f 1f       	adc	r25, r31
 a04:	08 95       	ret

00000a06 <itoa>:
 a06:	fb 01       	movw	r30, r22
 a08:	9f 01       	movw	r18, r30
 a0a:	e8 94       	clt
 a0c:	42 30       	cpi	r20, 0x02	; 2
 a0e:	c4 f0       	brlt	.+48     	; 0xa40 <itoa+0x3a>
 a10:	45 32       	cpi	r20, 0x25	; 37
 a12:	b4 f4       	brge	.+44     	; 0xa40 <itoa+0x3a>
 a14:	4a 30       	cpi	r20, 0x0A	; 10
 a16:	29 f4       	brne	.+10     	; 0xa22 <itoa+0x1c>
 a18:	97 fb       	bst	r25, 7
 a1a:	1e f4       	brtc	.+6      	; 0xa22 <itoa+0x1c>
 a1c:	90 95       	com	r25
 a1e:	81 95       	neg	r24
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	64 2f       	mov	r22, r20
 a24:	77 27       	eor	r23, r23
 a26:	0e 94 34 05 	call	0xa68	; 0xa68 <__udivmodhi4>
 a2a:	80 5d       	subi	r24, 0xD0	; 208
 a2c:	8a 33       	cpi	r24, 0x3A	; 58
 a2e:	0c f0       	brlt	.+2      	; 0xa32 <itoa+0x2c>
 a30:	89 5d       	subi	r24, 0xD9	; 217
 a32:	81 93       	st	Z+, r24
 a34:	cb 01       	movw	r24, r22
 a36:	00 97       	sbiw	r24, 0x00	; 0
 a38:	a1 f7       	brne	.-24     	; 0xa22 <itoa+0x1c>
 a3a:	16 f4       	brtc	.+4      	; 0xa40 <itoa+0x3a>
 a3c:	5d e2       	ldi	r21, 0x2D	; 45
 a3e:	51 93       	st	Z+, r21
 a40:	10 82       	st	Z, r1
 a42:	c9 01       	movw	r24, r18
 a44:	0c 94 24 05 	jmp	0xa48	; 0xa48 <strrev>

00000a48 <strrev>:
 a48:	dc 01       	movw	r26, r24
 a4a:	fc 01       	movw	r30, r24
 a4c:	67 2f       	mov	r22, r23
 a4e:	71 91       	ld	r23, Z+
 a50:	77 23       	and	r23, r23
 a52:	e1 f7       	brne	.-8      	; 0xa4c <strrev+0x4>
 a54:	32 97       	sbiw	r30, 0x02	; 2
 a56:	04 c0       	rjmp	.+8      	; 0xa60 <strrev+0x18>
 a58:	7c 91       	ld	r23, X
 a5a:	6d 93       	st	X+, r22
 a5c:	70 83       	st	Z, r23
 a5e:	62 91       	ld	r22, -Z
 a60:	ae 17       	cp	r26, r30
 a62:	bf 07       	cpc	r27, r31
 a64:	c8 f3       	brcs	.-14     	; 0xa58 <strrev+0x10>
 a66:	08 95       	ret

00000a68 <__udivmodhi4>:
 a68:	aa 1b       	sub	r26, r26
 a6a:	bb 1b       	sub	r27, r27
 a6c:	51 e1       	ldi	r21, 0x11	; 17
 a6e:	07 c0       	rjmp	.+14     	; 0xa7e <__udivmodhi4_ep>

00000a70 <__udivmodhi4_loop>:
 a70:	aa 1f       	adc	r26, r26
 a72:	bb 1f       	adc	r27, r27
 a74:	a6 17       	cp	r26, r22
 a76:	b7 07       	cpc	r27, r23
 a78:	10 f0       	brcs	.+4      	; 0xa7e <__udivmodhi4_ep>
 a7a:	a6 1b       	sub	r26, r22
 a7c:	b7 0b       	sbc	r27, r23

00000a7e <__udivmodhi4_ep>:
 a7e:	88 1f       	adc	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	5a 95       	dec	r21
 a84:	a9 f7       	brne	.-22     	; 0xa70 <__udivmodhi4_loop>
 a86:	80 95       	com	r24
 a88:	90 95       	com	r25
 a8a:	bc 01       	movw	r22, r24
 a8c:	cd 01       	movw	r24, r26
 a8e:	08 95       	ret

00000a90 <_exit>:
 a90:	f8 94       	cli

00000a92 <__stop_program>:
 a92:	ff cf       	rjmp	.-2      	; 0xa92 <__stop_program>
