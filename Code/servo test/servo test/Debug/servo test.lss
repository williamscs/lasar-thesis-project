
servo test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000931  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000024  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000011b  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b9  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f7  00000000  00000000  00000b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000bb  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000002b  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 80 00 	call	0x100	; 0x100 <main>
  78:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Wait>:
#define F_CPU 16000000UL
#include <util/delay.h>

//Simple Wait Function
void Wait()
{
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	df 93       	push	r29
  86:	cf 93       	push	r28
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	27 97       	sbiw	r28, 0x07	; 7
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
   uint8_t i;
   for(i=0;i<50;i++)
  98:	19 82       	std	Y+1, r1	; 0x01
  9a:	24 c0       	rjmp	.+72     	; 0xe4 <Wait+0x64>
  9c:	1b 82       	std	Y+3, r1	; 0x03
  9e:	1a 82       	std	Y+2, r1	; 0x02
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	9b 81       	ldd	r25, Y+3	; 0x03
  a4:	8c 01       	movw	r16, r24
  a6:	c8 01       	movw	r24, r16
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <Wait+0x28>
  ac:	8c 01       	movw	r16, r24
  ae:	1b 83       	std	Y+3, r17	; 0x03
  b0:	0a 83       	std	Y+2, r16	; 0x02
  b2:	1d 82       	std	Y+5, r1	; 0x05
  b4:	1c 82       	std	Y+4, r1	; 0x04
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	8c 01       	movw	r16, r24
  bc:	c8 01       	movw	r24, r16
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <Wait+0x3e>
  c2:	8c 01       	movw	r16, r24
  c4:	1d 83       	std	Y+5, r17	; 0x05
  c6:	0c 83       	std	Y+4, r16	; 0x04
  c8:	1f 82       	std	Y+7, r1	; 0x07
  ca:	1e 82       	std	Y+6, r1	; 0x06
  cc:	8e 81       	ldd	r24, Y+6	; 0x06
  ce:	9f 81       	ldd	r25, Y+7	; 0x07
  d0:	8c 01       	movw	r16, r24
  d2:	c8 01       	movw	r24, r16
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <Wait+0x54>
  d8:	8c 01       	movw	r16, r24
  da:	1f 83       	std	Y+7, r17	; 0x07
  dc:	0e 83       	std	Y+6, r16	; 0x06
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	82 33       	cpi	r24, 0x32	; 50
  e8:	c8 f2       	brcs	.-78     	; 0x9c <Wait+0x1c>
   {
      _delay_loop_2(0);
      _delay_loop_2(0);
      _delay_loop_2(0);
   }
}
  ea:	27 96       	adiw	r28, 0x07	; 7
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <main>:

int main(void)
{
 100:	df 93       	push	r29
 102:	cf 93       	push	r28
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62

	//Port D pins as input
	DDRD=0x00;
 108:	8a e2       	ldi	r24, 0x2A	; 42
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	10 82       	st	Z, r1

	//Enable internal pull ups
	PORTD=0xFF;
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18

	//Set PORTB1 pin as output
	DDRB=0xFF;
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
	//Output compare OC1A 8 bit non inverted PWM
	//Clear OC1A on Compare Match, set OC1A at TOP
	//Fast PWM
	//ICR1=20000 defines 50Hz PWM

	ICR1=20000;
 124:	86 e8       	ldi	r24, 0x86	; 134
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	20 e2       	ldi	r18, 0x20	; 32
 12a:	3e e4       	ldi	r19, 0x4E	; 78
 12c:	fc 01       	movw	r30, r24
 12e:	31 83       	std	Z+1, r19	; 0x01
 130:	20 83       	st	Z, r18
	//TCCR1A = 01000010
	TCCR1A = 0;
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	10 82       	st	Z, r1
	TCCR1A|=(1<<COM1A1) | (1<<WGM11);
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	20 e8       	ldi	r18, 0x80	; 128
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	f9 01       	movw	r30, r18
 144:	20 81       	ld	r18, Z
 146:	22 68       	ori	r18, 0x82	; 130
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
	//TCCR1B = 00011010
	TCCR1B = 0;
 14c:	81 e8       	ldi	r24, 0x81	; 129
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	10 82       	st	Z, r1
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11);
 154:	81 e8       	ldi	r24, 0x81	; 129
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	21 e8       	ldi	r18, 0x81	; 129
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	2a 61       	ori	r18, 0x1A	; 26
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
	//start timer with prescaler 8  //16Mhz/8 = 2MHz

	 for (;;) 
	 {
		 Wait();  
 166:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
		 OCR1A = 0x3FFF;
 16a:	88 e8       	ldi	r24, 0x88	; 136
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	3f e3       	ldi	r19, 0x3F	; 63
 172:	fc 01       	movw	r30, r24
 174:	31 83       	std	Z+1, r19	; 0x01
 176:	20 83       	st	Z, r18
			// set PWM for 25% duty cycle @ 16bit

		OCR1B = 0xBFFF;
 178:	8a e8       	ldi	r24, 0x8A	; 138
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	3f eb       	ldi	r19, 0xBF	; 191
 180:	fc 01       	movw	r30, r24
 182:	31 83       	std	Z+1, r19	; 0x01
 184:	20 83       	st	Z, r18
			 //decease duty cycle
			 OCR1A-=10;
			 loop_until_bit_is_set(PIND, 1);
		 }
		 */
	}
 186:	ef cf       	rjmp	.-34     	; 0x166 <main+0x66>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
