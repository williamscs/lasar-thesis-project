
Remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  000122b8  0001234c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000122b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026c  008001b4  008001b4  00012400  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00012400  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00012acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00012b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001e07  00000000  00000000  00012bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008965  00000000  00000000  000149f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008fa  00000000  00000000  0001d35d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000041ff  00000000  00000000  0001dc57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005b0  00000000  00000000  00021e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ae5  00000000  00000000  00022408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000242  00000000  00000000  00023eed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 50 	jmp	0xa056	; 0xa056 <__ctors_end>
       4:	0c 94 38 90 	jmp	0x12070	; 0x12070 <__vector_1>
       8:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
       c:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      10:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      14:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      18:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      1c:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      20:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      24:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      28:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      2c:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      30:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      34:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      38:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      3c:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      40:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      44:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      48:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      4c:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      50:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      54:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      58:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      5c:	0c 94 48 90 	jmp	0x12090	; 0x12090 <__vector_23>
      60:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      64:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      68:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      6c:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      70:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      74:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      78:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      7c:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      80:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      84:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      88:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      8c:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      90:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>
      94:	0c 94 4a 50 	jmp	0xa094	; 0xa094 <__bad_interrupt>

00000098 <widtbl_M>:
      98:	05 02 03 08 07 08 08 02 06 06 07 05 02 05 04 06     ................
      a8:	07 07 07 07 07 07 07 07 07 07 02 02 05 05 05 07     ................
      b8:	08 07 07 07 07 07 07 07 06 03 07 07 06 09 07 07     ................
      c8:	07 07 07 07 07 07 07 09 07 07 07 03 06 03 10 10     ................
      d8:	03 06 06 06 06 06 05 06 06 04 04 05 04 07 06 07     ................
      e8:	06 07 05 05 04 06 07 07 05 06 06 0b 10 08 02 0d     ................
      f8:	0f 07 10 10 0b 10 03 05 0d 0d 0d 0d 0d 0d 0d 0d     ................

00000108 <chr_M_20>:
	...

00000112 <chr_M_21>:
     112:	00 00 f8 17                                         ....

00000116 <chr_M_22>:
     116:	1c 00 00 00 1c 00                                   ......

0000011c <chr_M_23>:
     11c:	40 02 40 02 f8 1f 40 02 40 02 f8 1f 40 02 40 02     @.@...@.@...@.@.

0000012c <chr_M_24>:
     12c:	c0 08 20 11 10 11 f8 3f 10 11 10 09 20 06           .. ....?.... .

0000013a <chr_M_25>:
     13a:	30 18 48 04 48 02 30 01 80 0c 40 12 20 12 18 0c     0.H.H.0...@. ...

0000014a <chr_M_26>:
     14a:	60 0c 90 12 08 11 90 12 60 0c 00 0c 00 12 00 10     `.......`.......

0000015a <chr_M_27>:
     15a:	20 00 1c 00                                          ...

0000015e <chr_M_28>:
     15e:	c0 07 30 18 08 20 04 40 02 80 02 80                 ..0.. .@....

0000016a <chr_M_29>:
     16a:	02 80 02 80 04 40 08 20 30 18 c0 07                 .....@. 0...

00000176 <chr_M_2A>:
     176:	20 02 40 01 80 00 f0 07 80 00 40 01 20 02            .@.......@. .

00000184 <chr_M_2B>:
     184:	00 01 00 01 c0 07 00 01 00 01                       ..........

0000018e <chr_M_2C>:
     18e:	00 58 00 38                                         .X.8

00000192 <chr_M_2D>:
     192:	00 01 00 01 00 01 00 01 00 01                       ..........

0000019c <chr_M_2E>:
     19c:	00 18 00 18 00 00 00 00                             ........

000001a4 <chr_M_2F>:
     1a4:	00 30 00 0c 00 03 c0 00 30 00 0c 00                 .0......0...

000001b0 <chr_M_30>:
     1b0:	c0 03 30 0c 08 10 08 10 08 10 30 0c c0 03           ..0.......0...

000001be <chr_M_31>:
     1be:	00 00 20 10 10 10 f8 1f 00 10 00 10 00 00           .. ...........

000001cc <chr_M_32>:
     1cc:	20 18 10 14 08 12 08 11 08 11 90 10 60 10            ...........`.

000001da <chr_M_33>:
     1da:	10 08 08 10 88 10 88 10 88 10 50 09 20 06           ..........P. .

000001e8 <chr_M_34>:
     1e8:	00 03 80 02 40 02 20 02 10 02 f8 1f 00 02           ....@. .......

000001f6 <chr_M_35>:
     1f6:	f8 08 88 10 88 10 88 10 88 10 08 09 00 06           ..............

00000204 <chr_M_36>:
     204:	e0 07 10 09 88 10 88 10 88 10 08 09 00 06           ..............

00000212 <chr_M_37>:
     212:	00 00 08 00 08 00 08 1c 08 03 c8 00 38 00           ............8.

00000220 <chr_M_38>:
     220:	20 06 50 09 88 10 88 10 88 10 50 09 20 06            .P.......P. .

0000022e <chr_M_39>:
     22e:	60 00 90 10 08 11 08 11 08 11 90 08 e0 07           `.............

0000023c <chr_M_3A>:
     23c:	c0 06 c0 06                                         ....

00000240 <chr_M_3B>:
     240:	c0 16 c0 0e                                         ....

00000244 <chr_M_3C>:
     244:	00 01 80 02 40 04 20 08 10 10                       ....@. ...

0000024e <chr_M_3D>:
     24e:	80 02 80 02 80 02 80 02 80 02                       ..........

00000258 <chr_M_3E>:
     258:	10 10 20 08 40 04 80 02 00 01                       .. .@.....

00000262 <chr_M_3F>:
     262:	20 00 10 00 08 00 08 16 08 01 90 00 60 00            ...........`.

00000270 <chr_M_40>:
     270:	e0 07 10 08 c8 13 28 14 28 14 c8 17 10 14 e0 03     ......(.(.......

00000280 <chr_M_41>:
     280:	00 1c 80 03 60 02 18 02 60 02 80 03 00 1c           ....`...`.....

0000028e <chr_M_42>:
     28e:	f8 1f 88 10 88 10 88 10 88 10 50 09 20 06           ..........P. .

0000029c <chr_M_43>:
     29c:	e0 07 10 08 08 10 08 10 08 10 08 10 10 08           ..............

000002aa <chr_M_44>:
     2aa:	f8 1f 08 10 08 10 08 10 08 10 10 08 e0 07           ..............

000002b8 <chr_M_45>:
     2b8:	f8 1f 88 10 88 10 88 10 88 10 88 10 08 10           ..............

000002c6 <chr_M_46>:
     2c6:	f8 1f 88 00 88 00 88 00 88 00 08 00 08 00           ..............

000002d4 <chr_M_47>:
     2d4:	e0 07 10 08 08 10 08 11 08 11 08 11 10 0e           ..............

000002e2 <chr_M_48>:
     2e2:	f8 1f 80 00 80 00 80 00 80 00 f8 1f                 ............

000002ee <chr_M_49>:
     2ee:	08 10 f8 1f 08 10                                   ......

000002f4 <chr_M_4A>:
     2f4:	00 04 00 08 00 10 00 10 00 10 00 08 f8 07           ..............

00000302 <chr_M_4B>:
     302:	f8 1f 80 00 40 01 20 02 10 04 08 08 00 10           ....@. .......

00000310 <chr_M_4C>:
     310:	f8 1f 00 10 00 10 00 10 00 10 00 10                 ............

0000031c <chr_M_4D>:
     31c:	f8 1f 18 00 60 00 80 01 00 06 80 01 60 00 18 00     ....`.......`...
     32c:	f8 1f                                               ..

0000032e <chr_M_4E>:
     32e:	f8 1f 18 00 60 00 80 01 00 06 00 18 f8 1f           ....`.........

0000033c <chr_M_4F>:
     33c:	e0 07 10 08 08 10 08 10 08 10 10 08 e0 07           ..............

0000034a <chr_M_50>:
     34a:	f8 1f 08 02 08 02 08 02 08 02 10 01 e0 00           ..............

00000358 <chr_M_51>:
     358:	e0 07 10 08 08 10 08 10 08 30 10 48 e0 47           .........0.H.G

00000366 <chr_M_52>:
     366:	f8 1f 08 01 08 01 08 03 08 05 90 08 60 10           ............`.

00000374 <chr_M_53>:
     374:	60 04 90 08 88 10 08 11 08 11 10 09 20 06           `........... .

00000382 <chr_M_54>:
     382:	08 00 08 00 08 00 f8 1f 08 00 08 00 08 00           ..............

00000390 <chr_M_55>:
     390:	f8 07 00 08 00 10 00 10 00 10 00 08 f8 07           ..............

0000039e <chr_M_56>:
     39e:	78 00 80 01 00 06 00 18 00 06 80 01 78 00           x...........x.

000003ac <chr_M_57>:
     3ac:	f8 00 00 07 00 18 00 06 c0 01 00 06 00 18 00 07     ................
     3bc:	f8 00                                               ..

000003be <chr_M_58>:
     3be:	18 18 20 04 40 02 80 01 40 02 20 04 18 18           .. .@...@. ...

000003cc <chr_M_59>:
     3cc:	38 00 40 00 80 00 00 1f 80 00 40 00 38 00           8.@.......@.8.

000003da <chr_M_5A>:
     3da:	08 18 08 14 08 12 88 11 48 10 28 10 18 10           ........H.(...

000003e8 <chr_M_5B>:
     3e8:	fc 3f 04 20 04 20                                   .?. . 

000003ee <chr_M_5C>:
     3ee:	00 30 00 0c 00 03 c0 00 30 00 0c 00                 .0......0...

000003fa <chr_M_5D>:
     3fa:	04 20 04 20 fc 3f                                   . . .?

00000400 <chr_M_5E>:
     400:	f0 3f 08 00 08 00 08 00 08 00 f0 3f 08 00 08 00     .?.........?....
     410:	08 00 08 00 f0 3f 08 00 08 00 08 00 08 00 f0 3f     .....?.........?

00000420 <chr_M_5F>:
     420:	c0 00 30 00 08 30 10 0c 20 03 c0 00 30 00 08 30     ..0..0.. ...0..0
     430:	10 0c 20 03 c0 00 30 00 08 30 10 0c 20 03 c0 00     .. ...0..0.. ...

00000440 <chr_M_60>:
     440:	00 00 38 00 40 00                                   ..8.@.

00000446 <chr_M_61>:
     446:	00 0c 40 12 40 12 40 12 80 0c 00 1f                 ..@.@.@.....

00000452 <chr_M_62>:
     452:	f0 1f 80 08 40 10 40 10 80 08 00 07                 ....@.@.....

0000045e <chr_M_63>:
     45e:	00 07 80 08 40 10 40 10 40 10 80 08                 ....@.@.@...

0000046a <chr_M_64>:
     46a:	00 07 80 08 40 10 40 10 80 08 f0 1f                 ....@.@.....

00000476 <chr_M_65>:
     476:	00 07 80 0a 40 12 40 12 40 12 80 09                 ....@.@.@...

00000482 <chr_M_66>:
     482:	00 01 f0 1f 08 01 08 00 10 00                       ..........

0000048c <chr_M_67>:
     48c:	00 07 80 88 40 90 40 90 80 48 80 3f                 ....@.@..H.?

00000498 <chr_M_68>:
     498:	f8 1f 80 00 40 00 40 00 80 00 00 1f                 ....@.@.....

000004a4 <chr_M_69>:
     4a4:	00 00 d0 1f 00 00 00 00                             ........

000004ac <chr_M_6A>:
     4ac:	00 40 00 80 40 80 d0 7f                             .@..@...

000004b4 <chr_M_6B>:
     4b4:	f8 1f 00 02 00 05 80 08 40 10                       ........@.

000004be <chr_M_6C>:
     4be:	08 00 f8 1f 00 00 00 00                             ........

000004c6 <chr_M_6D>:
     4c6:	c0 1f 80 00 40 00 80 1f 40 00 40 00 80 1f           ....@...@.@...

000004d4 <chr_M_6E>:
     4d4:	c0 1f 80 00 40 00 40 00 80 00 00 1f                 ....@.@.....

000004e0 <chr_M_6F>:
     4e0:	00 07 80 08 40 10 40 10 40 10 80 08 00 07           ....@.@.@.....

000004ee <chr_M_70>:
     4ee:	c0 ff 80 08 40 10 40 10 80 08 00 07                 ....@.@.....

000004fa <chr_M_71>:
     4fa:	00 07 80 08 40 10 40 10 80 08 c0 ff 00 80           ....@.@.......

00000508 <chr_M_72>:
     508:	c0 1f 80 00 40 00 40 00 80 00                       ....@.@...

00000512 <chr_M_73>:
     512:	80 09 40 12 40 12 40 12 80 0c                       ..@.@.@...

0000051c <chr_M_74>:
     51c:	40 00 f0 0f 40 10 00 10                             @...@...

00000524 <chr_M_75>:
     524:	c0 07 00 08 00 10 00 10 00 08 c0 1f                 ............

00000530 <chr_M_76>:
     530:	c0 03 00 04 00 08 00 10 00 08 00 04 c0 03           ..............

0000053e <chr_M_77>:
     53e:	c0 0f 00 10 00 08 00 06 00 08 00 10 c0 0f           ..............

0000054c <chr_M_78>:
     54c:	c0 18 00 05 00 02 00 05 c0 18                       ..........

00000556 <chr_M_79>:
     556:	c0 07 00 88 00 90 00 90 00 48 c0 3f                 .........H.?

00000562 <chr_M_7A>:
     562:	40 18 40 14 40 12 40 12 40 11 c0 10                 @.@.@.@.@...

0000056e <chr_M_7B>:
     56e:	e0 03 10 04 c8 09 28 0a 28 0a 28 0a 08 08 10 04     ......(.(.(.....
     57e:	e0 03 00 00 00 00                                   ......

00000584 <chr_M_7C>:
     584:	fe 00 12 00 32 00 52 00 8c 00 00 00 e0 0f 20 01     ....2.R....... .
     594:	20 01 20 01 c0 00 00 7c 00 12 00 11 00 12 00 7c      . ....|.......|

000005a4 <chr_M_7D>:
     5a4:	00 80 00 40 c0 3f 00 08 00 10 00 10 00 08 c0 07     ...@.?..........

000005b4 <chr_M_7E>:
     5b4:	00 00 00 00                                         ....

000005b8 <chr_M_7F>:
     5b8:	00 00 00 00 80 1f 80 00 00 1f 80 00 00 1f 00 00     ................
     5c8:	80 1f 80 00 00 1f 80 00 00 1f                       ..........

000005d2 <chr_M_80>:
     5d2:	20 18 20 14 20 12 20 11 a0 10 60 10 00 00 80 18      . . . ...`.....
     5e2:	80 14 80 12 80 11 00 00 00 12 00 1a 00 16           ..............

000005f0 <chr_M_81>:
     5f0:	fe ff 02 80 03 80 03 80 03 80 02 80 fe ff           ..............

000005fe <chr_M_82>:
     5fe:	ff ff 03 c0 05 a0 09 90 11 88 21 84 41 82 81 81     ..........!.A...
     60e:	81 81 41 82 21 84 11 88 09 90 05 a0 03 c0 ff ff     ..A.!...........

0000061e <chr_M_83>:
     61e:	00 00 00 00 00 00 fc 7f 04 40 04 40 04 40 04 40     .........@.@.@.@
     62e:	04 40 04 40 04 40 04 40 04 40 04 40 04 40 04 40     .@.@.@.@.@.@.@.@

0000063e <chr_M_84>:
     63e:	04 40 04 40 04 40 04 40 04 41 84 43 c4 47 e4 4f     .@.@.@.@.A.C.G.O
     64e:	f4 5f 04 40 fc 7f                                   ._.@..

00000654 <chr_M_85>:
     654:	04 40 04 40 04 40 04 40 04 40 04 40 04 40 04 40     .@.@.@.@.@.@.@.@
     664:	04 40 04 40 fc 7f 00 01 80 03 c0 07 e0 0f f0 1f     .@.@............

00000674 <chr_M_86>:
     674:	40 02 e0 02 40 02                                   @...@.

0000067a <chr_M_87>:
     67a:	c0 03 40 00 80 03 40 00 80 03                       ..@...@...

00000684 <chr_M_88>:
     684:	00 07 c0 18 20 20 10 40 10 40 08 80 f8 83 08 80     ....  .@.@......
     694:	10 40 10 40 20 20 c0 18 00 07                       .@.@  ....

0000069e <chr_M_89>:
     69e:	00 07 c0 18 20 20 50 40 90 40 08 81 08 82 08 80     ....  P@.@......
     6ae:	10 40 10 40 20 20 c0 18 00 07                       .@.@  ....

000006b8 <chr_M_8A>:
     6b8:	00 07 c0 1a 20 22 10 42 10 42 08 82 08 82 08 80     .... ".B.B......
     6c8:	10 40 10 40 20 20 c0 18 00 07                       .@.@  ....

000006d2 <chr_M_8B>:
     6d2:	00 07 c0 18 20 20 10 50 10 48 08 84 08 82 08 80     ....  .P.H......
     6e2:	10 40 10 40 20 20 c0 18 00 07                       .@.@  ....

000006ec <chr_M_8C>:
     6ec:	00 07 c0 18 20 20 10 40 10 40 08 80 08 fe 08 80     ....  .@.@......
     6fc:	10 40 10 40 20 20 c0 18 00 07                       .@.@  ....

00000706 <chr_M_8D>:
     706:	00 07 c0 18 20 20 10 40 10 40 08 80 08 82 08 84     ....  .@.@......
     716:	10 48 10 50 20 20 c0 18 00 07                       .H.P  ....

00000720 <chr_M_8E>:
     720:	00 07 c0 18 20 20 10 40 10 40 08 80 08 82 08 82     ....  .@.@......
     730:	10 42 10 42 20 22 c0 1a 00 07                       .B.B "....

0000073a <chr_M_8F>:
     73a:	00 07 c0 18 20 20 10 40 10 40 08 80 08 82 08 81     ....  .@.@......
     74a:	90 40 50 40 20 20 c0 18 00 07                       .@P@  ....

00000754 <chrtbl_M>:
     754:	08 01 12 01 16 01 1c 01 2c 01 3a 01 4a 01 5a 01     ........,.:.J.Z.
     764:	5e 01 6a 01 76 01 84 01 8e 01 92 01 9c 01 a4 01     ^.j.v...........
     774:	b0 01 be 01 cc 01 da 01 e8 01 f6 01 04 02 12 02     ................
     784:	20 02 2e 02 3c 02 40 02 44 02 4e 02 58 02 62 02      ...<.@.D.N.X.b.
     794:	70 02 80 02 8e 02 9c 02 aa 02 b8 02 c6 02 d4 02     p...............
     7a4:	e2 02 ee 02 f4 02 02 03 10 03 1c 03 2e 03 3c 03     ..............<.
     7b4:	4a 03 58 03 66 03 74 03 82 03 90 03 9e 03 ac 03     J.X.f.t.........
     7c4:	be 03 cc 03 da 03 e8 03 ee 03 fa 03 00 04 20 04     .............. .
     7d4:	40 04 46 04 52 04 5e 04 6a 04 76 04 82 04 8c 04     @.F.R.^.j.v.....
     7e4:	98 04 a4 04 ac 04 b4 04 be 04 c6 04 d4 04 e0 04     ................
     7f4:	ee 04 fa 04 08 05 12 05 1c 05 24 05 30 05 3e 05     ..........$.0.>.
     804:	4c 05 56 05 62 05 6e 05 84 05 a4 05 b4 05 b8 05     L.V.b.n.........
     814:	d2 05 f0 05 fe 05 1e 06 3e 06 54 06 74 06 7a 06     ........>.T.t.z.
     824:	84 06 9e 06 b8 06 d2 06 ec 06 06 07 20 07 3a 07     ............ .:.

00000834 <widtbl_S>:
     834:	03 03 03 05 05 05 05 03 03 03 05 05 02 05 01 05     ................
     844:	05 05 05 05 05 05 05 05 05 05 01 02 04 04 04 05     ................
     854:	05 05 05 05 05 05 05 05 05 03 05 05 04 05 05 05     ................
     864:	05 05 05 05 05 05 05 07 05 05 05 03 05 03 05 05     ................
     874:	03 04 05 04 05 04 04 04 05 02 03 04 03 06 05 04     ................
     884:	05 05 05 04 03 05 05 05 05 04 04 03 03 03 02 00     ................
     894:	07 07 07 07 07 07 07 07                             ........

0000089c <chr_S_20>:
     89c:	00 00 00                                            ...

0000089f <chr_S_21>:
     89f:	00 5f 00                                            ._.

000008a2 <chr_S_22>:
     8a2:	07 00 07                                            ...

000008a5 <chr_S_23>:
     8a5:	14 7f 14 7f 14                                      .....

000008aa <chr_S_24>:
     8aa:	26 49 7f 49 32                                      &I.I2

000008af <chr_S_25>:
     8af:	63 13 08 64 63                                      c..dc

000008b4 <chr_S_26>:
     8b4:	36 49 00 00 00                                      6I...

000008b9 <chr_S_27>:
     8b9:	04 03 00                                            ...

000008bc <chr_S_28>:
     8bc:	1c 22 41                                            ."A

000008bf <chr_S_29>:
     8bf:	41 22 1c                                            A".

000008c2 <chr_S_2A>:
     8c2:	08 2a 1c 2a 08                                      .*.*.

000008c7 <chr_S_2B>:
     8c7:	08 08 3e 08 08                                      ..>..

000008cc <chr_S_2C>:
     8cc:	80 60                                               .`

000008ce <chr_S_2D>:
     8ce:	08 08 08 08 08                                      .....

000008d3 <chr_S_2E>:
     8d3:	40                                                  @

000008d4 <chr_S_2F>:
     8d4:	60 10 08 04 03                                      `....

000008d9 <chr_S_30>:
     8d9:	3e 51 49 45 3e                                      >QIE>

000008de <chr_S_31>:
     8de:	00 42 7f 40 00                                      .B.@.

000008e3 <chr_S_32>:
     8e3:	62 51 49 49 46                                      bQIIF

000008e8 <chr_S_33>:
     8e8:	22 41 49 49 36                                      "AII6

000008ed <chr_S_34>:
     8ed:	18 14 12 7f 10                                      .....

000008f2 <chr_S_35>:
     8f2:	27 49 49 49 31                                      'III1

000008f7 <chr_S_36>:
     8f7:	3c 4a 49 49 30                                      <JII0

000008fc <chr_S_37>:
     8fc:	01 71 09 05 03                                      .q...

00000901 <chr_S_38>:
     901:	36 49 49 49 36                                      6III6

00000906 <chr_S_39>:
     906:	06 49 49 29 1e                                      .II).

0000090b <chr_S_3A>:
     90b:	14                                                  .

0000090c <chr_S_3B>:
     90c:	80 68                                               .h

0000090e <chr_S_3C>:
     90e:	08 14 22 41                                         .."A

00000912 <chr_S_3D>:
     912:	14 14 14 14                                         ....

00000916 <chr_S_3E>:
     916:	41 22 14 08                                         A"..

0000091a <chr_S_3F>:
     91a:	02 01 51 09 06                                      ..Q..

0000091f <chr_S_40>:
     91f:	3e 41 5d 00 00                                      >A]..

00000924 <chr_S_41>:
     924:	7c 12 11 12 7c                                      |...|

00000929 <chr_S_42>:
     929:	7f 49 49 49 36                                      .III6

0000092e <chr_S_43>:
     92e:	3e 41 41 41 22                                      >AAA"

00000933 <chr_S_44>:
     933:	7f 41 41 22 1c                                      .AA".

00000938 <chr_S_45>:
     938:	7f 49 49 49 41                                      .IIIA

0000093d <chr_S_46>:
     93d:	7f 09 09 09 01                                      .....

00000942 <chr_S_47>:
     942:	3e 41 49 29 72                                      >AI)r

00000947 <chr_S_48>:
     947:	7f 08 08 08 7f                                      .....

0000094c <chr_S_49>:
     94c:	41 7f 41                                            A.A

0000094f <chr_S_4A>:
     94f:	20 40 41 3f 01                                       @A?.

00000954 <chr_S_4B>:
     954:	7f 08 14 22 41                                      ..."A

00000959 <chr_S_4C>:
     959:	7f 40 40 40                                         .@@@

0000095d <chr_S_4D>:
     95d:	7f 02 0c 02 7f                                      .....

00000962 <chr_S_4E>:
     962:	7f 06 08 30 7f                                      ...0.

00000967 <chr_S_4F>:
     967:	3e 41 41 41 3e                                      >AAA>

0000096c <chr_S_50>:
     96c:	7f 09 09 09 06                                      .....

00000971 <chr_S_51>:
     971:	3e 41 51 21 5e                                      >AQ!^

00000976 <chr_S_52>:
     976:	7f 09 19 29 46                                      ...)F

0000097b <chr_S_53>:
     97b:	26 49 49 49 32                                      &III2

00000980 <chr_S_54>:
     980:	01 01 7f 01 01                                      .....

00000985 <chr_S_55>:
     985:	3f 40 40 40 3f                                      ?@@@?

0000098a <chr_S_56>:
     98a:	0f 30 40 30 0f                                      .0@0.

0000098f <chr_S_57>:
     98f:	0f 30 40 38 40 30 0f                                .0@8@0.

00000996 <chr_S_58>:
     996:	63 14 08 14 63                                      c...c

0000099b <chr_S_59>:
     99b:	07 08 70 08 07                                      ..p..

000009a0 <chr_S_5A>:
     9a0:	61 51 49 45 43                                      aQIEC

000009a5 <chr_S_5B>:
     9a5:	7f 41 41                                            .AA

000009a8 <chr_S_5C>:
     9a8:	03 04 08 10 60                                      ....`

000009ad <chr_S_5D>:
     9ad:	41 41 7f                                            AA.

000009b0 <chr_S_5E>:
     9b0:	08 04 02 04 08                                      .....

000009b5 <chr_S_5F>:
     9b5:	40 40 40 40 40                                      @@@@@

000009ba <chr_S_60>:
     9ba:	03 04 00                                            ...

000009bd <chr_S_61>:
     9bd:	20 54 54 78                                          TTx

000009c1 <chr_S_62>:
     9c1:	7f 28 44 44 38                                      .(DD8

000009c6 <chr_S_63>:
     9c6:	38 44 44 28                                         8DD(

000009ca <chr_S_64>:
     9ca:	38 44 44 28 7f                                      8DD(.

000009cf <chr_S_65>:
     9cf:	38 54 54 48                                         8TTH

000009d3 <chr_S_66>:
     9d3:	08 7e 09 02                                         .~..

000009d7 <chr_S_67>:
     9d7:	98 a4 a4 58                                         ...X

000009db <chr_S_68>:
     9db:	7f 08 04 04 78                                      ....x

000009e0 <chr_S_69>:
     9e0:	3d 40                                               =@

000009e2 <chr_S_6A>:
     9e2:	80 84 7d                                            ..}

000009e5 <chr_S_6B>:
     9e5:	7f 10 28 44                                         ..(D

000009e9 <chr_S_6C>:
     9e9:	01 7f 00                                            ...

000009ec <chr_S_6D>:
     9ec:	7c 08 04 78 04 78                                   |..x.x

000009f2 <chr_S_6E>:
     9f2:	7c 08 04 04 78                                      |...x

000009f7 <chr_S_6F>:
     9f7:	38 44 44 38                                         8DD8

000009fb <chr_S_70>:
     9fb:	fc 18 24 24 18                                      ..$$.

00000a00 <chr_S_71>:
     a00:	18 24 24 18 fc                                      .$$..

00000a05 <chr_S_72>:
     a05:	7c 08 04 04 08                                      |....

00000a0a <chr_S_73>:
     a0a:	48 54 54 24                                         HTT$

00000a0e <chr_S_74>:
     a0e:	04 3e 44                                            .>D

00000a11 <chr_S_75>:
     a11:	3c 40 40 20 7c                                      <@@ |

00000a16 <chr_S_76>:
     a16:	1c 20 40 20 1c                                      . @ .

00000a1b <chr_S_77>:
     a1b:	3c 40 30 40 3c                                      <@0@<

00000a20 <chr_S_78>:
     a20:	44 28 10 28 44                                      D(.(D

00000a25 <chr_S_79>:
     a25:	1c a0 a0 7c                                         ...|

00000a29 <chr_S_7A>:
     a29:	64 54 54 4c                                         dTTL

00000a2d <chr_S_7B>:
     a2d:	08 36 41                                            .6A

00000a30 <chr_S_7C>:
     a30:	00 7f 00                                            ...

00000a33 <chr_S_7D>:
     a33:	41 36 08                                            A6.

00000a36 <chr_S_7E>:
	...

00000a38 <chr_S_7F>:
	...

00000a39 <chr_S_80>:
     a39:	1c 22 41 4f 41 22 1c                                ."AOA".

00000a40 <chr_S_81>:
     a40:	1c 22 41 49 45 22 1c                                ."AIE".

00000a47 <chr_S_82>:
     a47:	1c 22 41 49 49 2a 1c                                ."AII*.

00000a4e <chr_S_83>:
     a4e:	1c 22 41 49 51 22 1c                                ."AIQ".

00000a55 <chr_S_84>:
     a55:	1c 22 41 79 41 22 1c                                ."AyA".

00000a5c <chr_S_85>:
     a5c:	1c 22 51 49 41 22 1c                                ."QIA".

00000a63 <chr_S_86>:
     a63:	1c 2a 49 49 41 22 1c                                .*IIA".

00000a6a <chr_S_87>:
     a6a:	1c 22 45 49 41 22 1c                                ."EIA".

00000a71 <chrtbl_S>:
     a71:	9c 08 9f 08 a2 08 a5 08 aa 08 af 08 b4 08 b9 08     ................
     a81:	bc 08 bf 08 c2 08 c7 08 cc 08 ce 08 d3 08 d4 08     ................
     a91:	d9 08 de 08 e3 08 e8 08 ed 08 f2 08 f7 08 fc 08     ................
     aa1:	01 09 06 09 0b 09 0c 09 0e 09 12 09 16 09 1a 09     ................
     ab1:	1f 09 24 09 29 09 2e 09 33 09 38 09 3d 09 42 09     ..$.)...3.8.=.B.
     ac1:	47 09 4c 09 4f 09 54 09 59 09 5d 09 62 09 67 09     G.L.O.T.Y.].b.g.
     ad1:	6c 09 71 09 76 09 7b 09 80 09 85 09 8a 09 8f 09     l.q.v.{.........
     ae1:	96 09 9b 09 a0 09 a5 09 a8 09 ad 09 b0 09 b5 09     ................
     af1:	ba 09 bd 09 c1 09 c6 09 ca 09 cf 09 d3 09 d7 09     ................
     b01:	db 09 e0 09 e2 09 e5 09 e9 09 ec 09 f2 09 f7 09     ................
     b11:	fb 09 00 0a 05 0a 0a 0a 0e 0a 11 0a 16 0a 1b 0a     ................
     b21:	20 0a 25 0a 29 0a 2d 0a 30 0a 33 0a 36 0a 38 0a      .%.).-.0.3.6.8.
     b31:	39 0a 40 0a 47 0a 4e 0a 55 0a 5c 0a 63 0a 6a 0a     9.@.G.N.U.\.c.j.

00000b41 <widtbl_G>:
     b41:	0d 0a 0b 1f 16 22 1c 09 0f 0c 14 21 09 0d 09 0d     .....".....!....
     b51:	16 11 16 16 17 16 17 16 16 16 0a 0a 20 21 21 15     ............ !!.
     b61:	27 1c 1b 1d 1c 19 18 1d 1b 09 14 1d 18 21 1b 1f     '............!..
     b71:	19 1f 1b 19 19 1a 1b 26 1b 1a 19 0f 14 0b 21 15     .......&......!.
     b81:	09 15 18 16 16 16 0d 16 17 09 09 17 09 23 17 18     .............#..
     b91:	18 16 0f 15 0c 17 17 20 15 16 15 13 0c 13 20        ....... ...... 

00000ba0 <chr_G_20>:
	...

00000bee <chr_G_21>:
	...
     c06:	00 ff 1f 00 3f 00 00 ff ff 3f 3f 00 00 ff ff 3f     ....?....??....?
     c16:	3f 00 00 ff ff 3f 3f 00 00 ff ff 3f 3f 00 00 ff     ?....??....??...
     c26:	3f 00 3f 00                                         ?.?.

00000c2a <chr_G_22>:
     c2a:	00 00 00 00 00 00 00 fc 1f 00 00 00 00 fc 1f 00     ................
     c3a:	00 00 00 fc 1f 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     c5a:	00 fc 1f 00 00 00 00 fc 1f 00 00 00 00 fc 1f 00     ................
	...

00000c6c <chr_G_23>:
	...
     c74:	00 80 00 00 00 00 00 f0 00 00 00 00 00 f0 00 00     ................
     c84:	00 00 40 f0 c0 00 00 00 78 f0 f0 00 00 00 78 f0     ..@.....x.....x.
     c94:	fe 00 00 00 78 f0 ff 00 00 00 78 f0 3f 00 00 00     ....x.....x.?...
     ca4:	78 fe 0f 00 00 00 f8 ff 01 00 00 00 f8 ff 00 00     x...............
     cb4:	00 00 ff ff 00 00 00 c0 ff f1 00 00 00 f8 7f f0     ................
     cc4:	e0 00 00 f8 7f f0 f8 00 00 f8 78 f0 ff 00 00 38     ..........x....8
     cd4:	78 f0 ff 00 00 00 78 fc 1f 00 00 00 78 ff 07 00     x.....x.....x...
     ce4:	00 00 f8 ff 00 00 00 00 fc ff 00 00 00 80 ff f3     ................
     cf4:	00 00 00 e0 ff f0 00 00 00 f8 7f f0 00 00 00 f8     ................
     d04:	7b f0 00 00 00 78 78 f0 00 00 00 18 78 10 00 00     {....xx.....x...
     d14:	00 00 78 00 00 00 00 00 78 00 00 00 00 00 18 00     ..x.....x.......
	...

00000d26 <chr_G_24>:
	...
     d32:	00 00 1f e0 01 00 00 c0 7f e0 07 00 00 e0 ff e0     ................
     d42:	0f 00 00 f0 ff e0 1f 00 00 f8 ff e1 1f 00 00 f8     ................
     d52:	ff c1 3f 00 00 fc f0 03 3e 00 00 7c e0 03 7e 00     ..?.....>..|..~.
     d62:	00 7c e0 03 7c 00 80 ff ff ff ff 07 80 ff ff ff     .|..|...........
     d72:	ff 07 00 7c c0 07 7c 00 00 fc c0 0f 7c 00 00 fc     ...|..|.....|...
     d82:	81 1f 3e 00 00 f8 87 ff 3f 00 00 f8 07 ff 1f 00     ..>.....?.......
     d92:	00 f0 07 ff 1f 00 00 e0 07 fe 0f 00 00 80 07 fc     ................
     da2:	07 00 00 00 00 f8 01 00                             ........

00000daa <chr_G_25>:
	...
     db6:	00 c0 0f 00 00 00 00 f0 3f 00 00 00 00 f8 7f 00     ........?.......
     dc6:	00 00 00 f8 7f 00 00 00 00 7c f8 00 00 00 00 3c     .........|.....<
     dd6:	f0 00 00 00 00 3c f0 00 20 00 00 3c f0 00 30 00     .....<.. ..<..0.
     de6:	00 3c f0 00 3c 00 00 7c f8 00 3e 00 00 f8 7f 80     .<..<..|..>.....
     df6:	1f 00 00 f8 7f c0 07 00 00 f0 3f f0 01 00 00 c0     ..........?.....
     e06:	0f fc 00 00 00 00 00 3f 00 00 00 00 80 0f 00 00     .......?........
     e16:	00 00 e0 07 00 00 00 00 f0 01 00 00 00 00 fc f0     ................
     e26:	03 00 00 00 3f fc 0f 00 00 c0 0f fe 1f 00 00 e0     ....?...........
     e36:	03 fe 1f 00 00 f8 00 1f 3e 00 00 7c 00 0f 3c 00     ........>..|..<.
     e46:	00 1c 00 0f 3c 00 00 0c 00 0f 3c 00 00 04 00 0f     ....<.....<.....
     e56:	3c 00 00 00 00 1f 3e 00 00 00 00 fe 1f 00 00 00     <.....>.........
     e66:	00 fe 1f 00 00 00 00 fc 0f 00 00 00 00 f0 03 00     ................

00000e76 <chr_G_26>:
	...
     e82:	00 00 00 f8 01 00 00 00 00 fe 07 00 00 00 00 ff     ................
     e92:	0f 00 00 00 80 ff 1f 00 00 f0 c1 ff 3f 00 00 fc     ............?...
     ea2:	cf ff 3f 00 00 fe ff 0f 3f 00 00 fe ff 03 7e 00     ..?.....?.....~.
     eb2:	00 ff ff 03 7c 00 00 1f fe 01 7c 00 00 0f fc 07     ....|.....|.....
     ec2:	7c 00 00 0f fc 0f 7c 00 00 0f fe 1f 3e 00 00 1f     |.....|.....>...
     ed2:	ff 3f 3e 00 00 fe 9f 7f 3f 00 00 fe 0f ff 1f 00     .?>.....?.......
     ee2:	00 fc 07 fc 0f 00 00 f0 01 f8 0f 00 00 00 00 fc     ................
     ef2:	1f 00 00 00 c0 ff 3f 00 00 00 c0 ff 3f 00 00 00     ......?.....?...
     f02:	c0 7f 3f 00 00 00 c0 1f 3c 00 00 00 c0 03 38 00     ..?.....<.....8.
     f12:	00 00 00 00 30 00 00 00 00 00 20 00                 ....0..... .

00000f1e <chr_G_27>:
	...
     f2e:	00 00 00 1f 06 00 00 00 00 1f 06 00 00 00 00 1f     ................
     f3e:	07 00 00 00 00 ff 03 00 00 00 00 ff 01 00 00 00     ................
     f4e:	00 7f 00 00 00 00                                   ......

00000f54 <chr_G_28>:
	...
     f6c:	00 00 c0 ff 00 00 00 00 fc ff 0f 00 00 00 ff ff     ................
     f7c:	3f 00 00 e0 ff ff ff 01 00 f8 ff ff ff 07 00 fc     ?...............
     f8c:	ff ff ff 0f 00 ff 0f 00 fc 3f 80 ff 00 00 c0 7f     .........?......
     f9c:	80 0f 00 00 00 7c 80 03 00 00 00 70 80 00 00 00     .....|.....p....
     fac:	00 40                                               .@

00000fae <chr_G_29>:
     fae:	00 00 00 00 00 00 80 00 00 00 00 40 80 03 00 00     ...........@....
     fbe:	00 70 80 1f 00 00 00 7e 80 ff 00 00 c0 7f 00 ff     .p.....~........
     fce:	0f 00 fc 3f 00 fc ff ff ff 0f 00 f8 ff ff ff 07     ...?............
     fde:	00 e0 ff ff ff 01 00 00 ff ff 3f 00 00 00 fc ff     ..........?.....
     fee:	0f 00 00 00 c0 ff 00 00                             ........

00000ff6 <chr_G_2A>:
	...
    1002:	00 80 00 00 00 00 00 f0 00 00 00 00 00 f0 41 00     ..............A.
    1012:	00 00 00 e0 e1 00 00 00 00 e0 f9 00 00 00 00 e0     ................
    1022:	ff 01 00 00 00 c0 7f 00 00 00 00 ff 3f 00 00 00     ............?...
    1032:	00 ff 1f 00 00 00 00 ff 1f 00 00 00 00 ff 3f 00     ..............?.
    1042:	00 00 00 c0 ff 00 00 00 00 e0 ff 01 00 00 00 e0     ................
    1052:	f9 00 00 00 00 e0 e1 00 00 00 00 f0 41 00 00 00     ............A...
    1062:	00 f0 01 00 00 00 00 80 00 00 00 00                 ............

0000106e <chr_G_2B>:
	...
    10a6:	00 0f 00 00 00 00 00 0f 00 00 00 00 00 0f 00 00     ................
    10b6:	00 00 00 0f 00 00 00 00 00 0f 00 00 00 00 00 0f     ................
    10c6:	00 00 00 00 00 0f 00 00 00 00 00 0f 00 00 00 00     ................
    10d6:	00 0f 00 00 00 00 00 0f 00 00 00 e0 ff ff 7f 00     ................
    10e6:	00 e0 ff ff 7f 00 00 e0 ff ff 7f 00 00 e0 ff ff     ................
    10f6:	7f 00 00 00 00 0f 00 00 00 00 00 0f 00 00 00 00     ................
    1106:	00 0f 00 00 00 00 00 0f 00 00 00 00 00 0f 00 00     ................
    1116:	00 00 00 0f 00 00 00 00 00 0f 00 00 00 00 00 0f     ................
    1126:	00 00 00 00 00 0f 00 00 00 00 00 0f 00 00           ..............

00001134 <chr_G_2C>:
	...
    1148:	00 00 3f 1c 00 00 00 00 3f 1c 00 00 00 00 3f 0e     ..?.....?.....?.
    1158:	00 00 00 00 ff 07 00 00 00 00 ff 03 00 00 00 00     ................
    1168:	ff 00                                               ..

0000116a <chr_G_2D>:
	...
    1172:	00 3e 00 00 00 00 00 3e 00 00 00 00 00 3e 00 00     .>.....>.....>..
    1182:	00 00 00 3e 00 00 00 00 00 3e 00 00 00 00 00 3e     ...>.....>.....>
    1192:	00 00 00 00 00 3e 00 00 00 00 00 3e 00 00 00 00     .....>.....>....
    11a2:	00 3e 00 00 00 00 00 3e 00 00 00 00 00 3e 00 00     .>.....>.....>..
    11b2:	00 00 00 3e 00 00                                   ...>..

000011b8 <chr_G_2E>:
	...
    11cc:	00 00 3f 00 00 00 00 00 3f 00 00 00 00 00 3f 00     ..?.....?.....?.
    11dc:	00 00 00 00 3f 00 00 00 00 00 3f 00 00 00 00 00     ....?.....?.....
    11ec:	3f 00                                               ?.

000011ee <chr_G_2F>:
    11ee:	00 00 00 00 00 02 00 00 00 00 c0 03 00 00 00 00     ................
    11fe:	fc 03 00 00 00 80 ff 00 00 00 00 f8 0f 00 00 00     ................
    120e:	00 ff 01 00 00 00 f0 3f 00 00 00 00 fe 03 00 00     .......?........
    121e:	00 c0 7f 00 00 00 00 fc 07 00 00 00 00 ff 00 00     ................
    122e:	00 00 00 1f 00 00 00 00 00 01 00 00 00 00           ..............

0000123c <chr_G_30>:
	...
    1248:	00 00 f8 3f 00 00 00 00 ff ff 01 00 00 c0 ff ff     ...?............
    1258:	07 00 00 e0 ff ff 0f 00 00 f0 ff ff 1f 00 00 f8     ................
    1268:	ff ff 3f 00 00 f8 07 c0 3f 00 00 fc 00 00 7e 00     ..?.....?.....~.
    1278:	00 7c 00 00 7c 00 00 7c 00 00 7c 00 00 7c 00 00     .|..|..|..|..|..
    1288:	7c 00 00 7c 00 00 7c 00 00 fc 00 00 7e 00 00 f8     |..|..|.....~...
    1298:	07 c0 3f 00 00 f8 ff ff 3f 00 00 f0 ff ff 1f 00     ..?.....?.......
    12a8:	00 e0 ff ff 0f 00 00 c0 ff ff 07 00 00 00 ff ff     ................
    12b8:	01 00 00 00 f8 3f 00 00                             .....?..

000012c0 <chr_G_31>:
	...
    12dc:	00 00 00 80 07 00 00 00 00 80 07 00 00 00 00 80     ................
    12ec:	07 00 00 00 00 80 07 00 00 00 00 c0 07 00 00 00     ................
    12fc:	00 c0 07 00 00 00 00 f0 ff ff 3f 00 00 fc ff ff     ..........?.....
    130c:	3f 00 00 fc ff ff 3f 00 00 fc ff ff 3f 00 00 fc     ?.....?.....?...
    131c:	ff ff 3f 00 00 fc ff ff 3f 00                       ..?.....?.

00001326 <chr_G_32>:
	...
    1332:	00 00 0e 00 3e 00 00 80 0f 80 3f 00 00 e0 0f c0     ....>.....?.....
    1342:	3f 00 00 f0 0f e0 3f 00 00 f0 0f f0 3f 00 00 f8     ?.....?.....?...
    1352:	0f f0 3f 00 00 f8 01 f8 3f 00 00 fc 00 fc 3e 00     ..?.....?.....>.
    1362:	00 7c 00 7e 3e 00 00 7c 00 7e 3e 00 00 7c 00 3f     .|.~>..|.~>..|.?
    1372:	3e 00 00 7c 80 1f 3e 00 00 fc c0 0f 3e 00 00 fc     >..|..>.....>...
    1382:	e1 0f 3e 00 00 f8 ff 07 3e 00 00 f8 ff 03 3e 00     ..>.....>.....>.
    1392:	00 f0 ff 03 3e 00 00 e0 ff 01 3e 00 00 c0 ff 00     ....>.....>.....
    13a2:	3e 00 00 00 3f 00 3e 00                             >...?.>.

000013aa <chr_G_33>:
	...
    13b6:	00 00 00 c0 01 00 00 80 07 c0 07 00 00 e0 07 c0     ................
    13c6:	0f 00 00 f0 07 c0 1f 00 00 f8 07 c0 3f 00 00 f8     ............?...
    13d6:	07 c0 3f 00 00 f8 00 00 3f 00 00 7c 00 00 7e 00     ..?.....?..|..~.
    13e6:	00 7c c0 03 7c 00 00 7c c0 03 7c 00 00 7c c0 03     .|..|..|..|..|..
    13f6:	7c 00 00 7c c0 03 7c 00 00 fc e0 07 7e 00 00 f8     |..|..|.....~...
    1406:	ff 0f 3f 00 00 f8 ff ff 3f 00 00 f0 ff ff 3f 00     ..?.....?.....?.
    1416:	00 f0 7f ff 1f 00 00 e0 3f ff 0f 00 00 80 0f fe     ........?.......
    1426:	07 00 00 00 00 f8 01 00                             ........

0000142e <chr_G_34>:
	...
    143a:	00 00 00 fc 00 00 00 00 00 fe 00 00 00 00 80 ff     ................
    144a:	00 00 00 00 e0 ff 00 00 00 00 f0 ff 00 00 00 00     ................
    145a:	fc f3 00 00 00 00 ff f0 00 00 00 80 7f f0 00 00     ................
    146a:	00 e0 1f f0 00 00 00 f8 07 f0 00 00 00 fc 03 f0     ................
    147a:	00 00 00 fc 00 f0 00 00 00 fc ff ff 3f 00 00 fc     ............?...
    148a:	ff ff 3f 00 00 fc ff ff 3f 00 00 fc ff ff 3f 00     ..?.....?.....?.
    149a:	00 fc ff ff 3f 00 00 fc ff ff 3f 00 00 00 00 f0     ....?.....?.....
    14aa:	00 00 00 00 00 f0 00 00 00 00 00 f0 00 00           ..............

000014b8 <chr_G_35>:
	...
    14c4:	00 00 00 c0 01 00 00 00 e0 c3 07 00 00 e0 ff c3     ................
    14d4:	0f 00 00 fc ff c3 1f 00 00 fc ff c3 3f 00 00 fc     ............?...
    14e4:	ff c3 3f 00 00 fc f7 03 7f 00 00 7c f0 01 7e 00     ..?........|..~.
    14f4:	00 7c f8 00 7c 00 00 7c f8 00 7c 00 00 7c f8 00     .|..|..|..|..|..
    1504:	7c 00 00 7c f8 00 7c 00 00 7c f8 01 7e 00 00 7c     |..|..|..|..~..|
    1514:	f8 03 3f 00 00 7c f0 ff 3f 00 00 7c f0 ff 1f 00     ..?..|..?..|....
    1524:	00 7c e0 ff 1f 00 00 7c c0 ff 0f 00 00 7c 80 ff     .|.....|.....|..
    1534:	03 00 00 00 00 fc 00 00                             ........

0000153c <chr_G_36>:
	...
    1548:	00 00 f0 3f 00 00 00 00 fe ff 01 00 00 80 ff ff     ...?............
    1558:	07 00 00 e0 ff ff 0f 00 00 f0 ff ff 1f 00 00 f0     ................
    1568:	ff ff 3f 00 00 f8 c3 07 3f 00 00 f8 e0 03 7e 00     ..?.....?.....~.
    1578:	00 fc f0 01 7c 00 00 7c f0 01 7c 00 00 7c f0 01     ....|..|..|..|..
    1588:	7c 00 00 7c f0 01 7c 00 00 7c f0 01 7c 00 00 fc     |..|..|..|..|...
    1598:	f0 03 7e 00 00 fc f3 07 3f 00 00 f8 e3 ff 3f 00     ..~.....?.....?.
    15a8:	00 f8 e3 ff 1f 00 00 f0 c3 ff 1f 00 00 e0 83 ff     ................
    15b8:	0f 00 00 80 03 ff 03 00 00 00 00 fc 00 00           ..............

000015c6 <chr_G_37>:
	...
    15d2:	00 7c 00 00 00 00 00 7c 00 00 00 00 00 7c 00 00     .|.....|.....|..
    15e2:	00 00 00 7c 00 00 00 00 00 7c 00 00 3c 00 00 7c     ...|.....|..<..|
    15f2:	00 c0 3f 00 00 7c 00 f8 3f 00 00 7c 00 fe 3f 00     ..?..|..?..|..?.
    1602:	00 7c 80 ff 3f 00 00 7c e0 ff 3f 00 00 7c f0 ff     .|..?..|..?..|..
    1612:	03 00 00 7c fc 3f 00 00 00 7c fe 07 00 00 00 7c     ...|.?...|.....|
    1622:	ff 00 00 00 00 fc 3f 00 00 00 00 fc 1f 00 00 00     ......?.........
    1632:	00 fc 07 00 00 00 00 fc 03 00 00 00 00 fc 00 00     ................
    1642:	00 00 00 7c 00 00 00 00                             ...|....

0000164a <chr_G_38>:
	...
    1656:	00 00 00 f8 01 00 00 80 1f fc 07 00 00 e0 3f fe     ..............?.
    1666:	0f 00 00 f0 7f ff 1f 00 00 f8 ff ff 3f 00 00 f8     ............?...
    1676:	ff ff 3f 00 00 f8 f9 0f 7f 00 00 fc f0 07 7e 00     ..?...........~.
    1686:	00 7c e0 03 7c 00 00 7c e0 03 7c 00 00 7c e0 03     .|..|..|..|..|..
    1696:	7c 00 00 7c e0 03 7c 00 00 fc f0 07 7e 00 00 f8     |..|..|.....~...
    16a6:	f9 0f 7f 00 00 f8 ff ff 3f 00 00 f8 ff ff 3f 00     ........?.....?.
    16b6:	00 f0 7f ff 1f 00 00 e0 3f fe 0f 00 00 80 0f fc     ........?.......
    16c6:	07 00 00 00 00 f8 01 00                             ........

000016ce <chr_G_39>:
	...
    16da:	00 00 7e 00 00 00 00 80 ff 81 03 00 00 e0 ff 83     ..~.............
    16ea:	0f 00 00 f0 ff 87 1f 00 00 f0 ff 8f 3f 00 00 f8     ............?...
    16fa:	ff 8f 3f 00 00 f8 c1 9f 7f 00 00 fc 80 1f 7e 00     ..?...........~.
    170a:	00 7c 00 1f 7c 00 00 7c 00 1f 7c 00 00 7c 00 1f     .|..|..|..|..|..
    171a:	7c 00 00 7c 00 1f 7e 00 00 fc 80 0f 3e 00 00 f8     |..|..~.....>...
    172a:	c1 87 3f 00 00 f8 ff ff 1f 00 00 f0 ff ff 1f 00     ..?.............
    173a:	00 e0 ff ff 07 00 00 c0 ff ff 03 00 00 00 ff ff     ................
    174a:	00 00 00 00 f8 1f 00 00                             ........

00001752 <chr_G_3A>:
	...
    176a:	00 00 3f 00 3f 00 00 00 3f 00 3f 00 00 00 3f 00     ..?.?...?.?...?.
    177a:	3f 00 00 00 3f 00 3f 00 00 00 3f 00 3f 00 00 00     ?...?.?...?.?...
    178a:	3f 00 3f 00                                         ?.?.

0000178e <chr_G_3B>:
	...
    17a6:	00 00 3f 00 3f 1c 00 00 3f 00 3f 1c 00 00 3f 00     ..?.?...?.?...?.
    17b6:	3f 0e 00 00 3f 00 ff 07 00 00 3f 00 ff 03 00 00     ?...?.....?.....
    17c6:	3f 00 ff 00                                         ?...

000017ca <chr_G_3C>:
	...
    17fa:	00 00 00 0f 00 00 00 00 80 0f 00 00 00 00 80 0f     ................
    180a:	00 00 00 00 c0 1f 00 00 00 00 c0 1f 00 00 00 00     ................
    181a:	c0 3d 00 00 00 00 e0 3d 00 00 00 00 e0 3d 00 00     .=.....=.....=..
    182a:	00 00 f0 78 00 00 00 00 f0 78 00 00 00 00 70 f0     ...x.....x....p.
    183a:	00 00 00 00 78 f0 00 00 00 00 78 f0 00 00 00 00     ....x.....x.....
    184a:	3c e0 01 00 00 00 3c e0 01 00 00 00 1e c0 03 00     <.....<.........
    185a:	00 00 1e c0 03 00 00 00 1e c0 03 00 00 00 0f 80     ................
    186a:	07 00 00 00 0f 80 07 00 00 80 0f 00 0f 00 00 80     ................
    187a:	07 00 0f 00 00 80 07 00 0f 00 00 c0 03 00 1e 00     ................

0000188a <chr_G_3D>:
	...
    18ba:	00 00 78 f0 00 00 00 00 78 f0 00 00 00 00 78 f0     ..x.....x.....x.
    18ca:	00 00 00 00 78 f0 00 00 00 00 78 f0 00 00 00 00     ....x.....x.....
    18da:	78 f0 00 00 00 00 78 f0 00 00 00 00 78 f0 00 00     x.....x.....x...
    18ea:	00 00 78 f0 00 00 00 00 78 f0 00 00 00 00 78 f0     ..x.....x.....x.
    18fa:	00 00 00 00 78 f0 00 00 00 00 78 f0 00 00 00 00     ....x.....x.....
    190a:	78 f0 00 00 00 00 78 f0 00 00 00 00 78 f0 00 00     x.....x.....x...
    191a:	00 00 78 f0 00 00 00 00 78 f0 00 00 00 00 78 f0     ..x.....x.....x.
    192a:	00 00 00 00 78 f0 00 00 00 00 78 f0 00 00 00 00     ....x.....x.....
    193a:	78 f0 00 00 00 00 78 f0 00 00 00 00 78 f0 00 00     x.....x.....x...
    194a:	00 00 78 f0 00 00                                   ..x...

00001950 <chr_G_3E>:
	...
    1984:	00 00 00 c0 03 00 1e 00 00 80 07 00 0f 00 00 80     ................
    1994:	07 00 0f 00 00 80 0f 80 0f 00 00 00 0f 80 07 00     ................
    19a4:	00 00 0f 80 07 00 00 00 1e c0 03 00 00 00 1e c0     ................
    19b4:	03 00 00 00 1e c0 03 00 00 00 3c e0 01 00 00 00     ..........<.....
    19c4:	3c e0 01 00 00 00 78 f0 00 00 00 00 78 f0 00 00     <.....x.....x...
    19d4:	00 00 78 f0 00 00 00 00 f0 78 00 00 00 00 f0 78     ..x......x.....x
    19e4:	00 00 00 00 e0 3d 00 00 00 00 e0 3d 00 00 00 00     .....=.....=....
    19f4:	e0 3d 00 00 00 00 c0 1f 00 00 00 00 c0 1f 00 00     .=..............
    1a04:	00 00 80 0f 00 00 00 00 80 0f 00 00 00 00 80 0f     ................
	...

00001a16 <chr_G_3F>:
    1a16:	00 00 00 00 00 00 00 e0 01 00 00 00 00 f8 01 00     ................
    1a26:	00 00 00 fc 01 00 00 00 00 fe 01 00 00 00 00 ff     ................
    1a36:	01 00 00 00 00 ff 01 00 00 00 80 3f 00 00 00 00     ...........?....
    1a46:	80 1f 00 1e 3f 00 80 0f 80 1f 3f 00 80 0f c0 1f     ....?.....?.....
    1a56:	3f 00 80 0f e0 1f 3f 00 80 0f f0 1f 3f 00 80 1f     ?.....?.....?...
    1a66:	f8 1f 3f 00 80 3f fc 01 00 00 00 ff ff 00 00 00     ..?..?..........
    1a76:	00 ff ff 00 00 00 00 fe 7f 00 00 00 00 fc 3f 00     ..............?.
    1a86:	00 00 00 f8 1f 00 00 00 00 e0 07 00 00 00           ..............

00001a94 <chr_G_40>:
	...
    1aa0:	00 00 00 ff 01 00 00 00 e0 ff 0f 00 00 00 f8 ff     ................
    1ab0:	3f 00 00 00 fe 00 7f 00 00 00 1f 00 f8 00 00 80     ?...............
    1ac0:	07 00 e0 01 00 c0 03 00 c0 03 00 e0 01 00 80 03     ................
    1ad0:	00 f0 00 00 80 07 00 70 00 fc 01 07 00 78 80 ff     .......p.....x..
    1ae0:	07 0f 00 38 c0 ff 0f 0e 00 3c e0 ff 0f 0e 00 1c     ...8.....<......
    1af0:	f0 07 1f 0e 00 1c f8 00 1c 1c 00 1e 78 00 1c 1c     ............x...
    1b00:	00 0e 3c 00 1c 1c 00 0e 1c 00 1c 1c 00 0e 1c 00     ..<.............
    1b10:	0e 1c 00 0e 1c 00 0e 1c 00 0e 1c 00 07 1c 00 0e     ................
    1b20:	38 c0 03 1c 00 0e 78 fc 0f 1c 00 0e f0 ff 0f 1e     8.....x.........
    1b30:	00 0e f0 ff 1f 0e 00 1c f8 3f 1c 0e 00 1c f8 03     .........?......
    1b40:	1c 0e 00 1c 38 00 1c 07 00 38 00 00 1c 07 00 38     ....8....8.....8
    1b50:	00 00 8e 03 00 70 00 00 8f 03 00 f0 00 80 c7 01     .....p..........
    1b60:	00 e0 01 e0 03 00 00 c0 07 f8 01 00 00 80 ff ff     ................
    1b70:	00 00 00 00 fe 3f 00 00 00 00 f8 07 00 00           .....?........

00001b7e <chr_G_41>:
    1b7e:	00 00 00 00 20 00 00 00 00 00 3c 00 00 00 00 80     .... .....<.....
    1b8e:	3f 00 00 00 00 f0 3f 00 00 00 00 fe 3f 00 00 00     ?.....?.....?...
    1b9e:	c0 ff 3f 00 00 00 f8 ff 1f 00 00 00 ff ff 03 00     ..?.............
    1bae:	00 c0 ff ff 00 00 00 f8 ff ff 00 00 00 ff ff f9     ................
    1bbe:	00 00 00 ff 3f f8 00 00 00 ff 03 f8 00 00 00 7f     ....?...........
    1bce:	00 f8 00 00 00 7f 00 f8 00 00 00 ff 03 f8 00 00     ................
    1bde:	00 ff 3f f8 00 00 00 ff ff f9 00 00 00 f8 ff ff     ..?.............
    1bee:	00 00 00 c0 ff ff 00 00 00 00 ff ff 03 00 00 00     ................
    1bfe:	f8 ff 1f 00 00 00 c0 ff 3f 00 00 00 00 fe 3f 00     ........?.....?.
    1c0e:	00 00 00 f0 3f 00 00 00 00 80 3f 00 00 00 00 00     ....?.....?.....
    1c1e:	3c 00 00 00 00 00 20 00                             <..... .

00001c26 <chr_G_42>:
	...
    1c36:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    1c46:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    1c56:	00 ff ff ff 3f 00 00 1f f0 01 3e 00 00 1f f0 01     ....?.....>.....
    1c66:	3e 00 00 1f f0 01 3e 00 00 1f f0 01 3e 00 00 1f     >.....>.....>...
    1c76:	f0 01 3e 00 00 1f f0 01 3e 00 00 1f f0 01 3e 00     ..>.....>.....>.
    1c86:	00 1f f0 01 3e 00 00 1f f0 01 3e 00 00 1f f0 01     ....>.....>.....
    1c96:	3e 00 00 3f f8 03 3f 00 00 ff ff 87 3f 00 00 fe     >..?..?.....?...
    1ca6:	ff ff 1f 00 00 fe ff ff 1f 00 00 fc bf ff 0f 00     ................
    1cb6:	00 f8 9f ff 0f 00 00 f0 07 ff 03 00 00 00 00 fc     ................
    1cc6:	01 00                                               ..

00001cc8 <chr_G_43>:
	...
    1cd4:	00 00 fc 0f 00 00 00 c0 ff ff 00 00 00 f0 ff ff     ................
    1ce4:	03 00 00 f8 ff ff 07 00 00 fc ff ff 0f 00 00 fe     ................
    1cf4:	ff ff 1f 00 00 fe 03 f0 1f 00 00 ff 00 c0 3f 00     ..............?.
    1d04:	00 3f 00 00 3f 00 80 1f 00 00 7e 00 80 1f 00 00     .?..?.....~.....
    1d14:	7e 00 80 0f 00 00 7c 00 80 0f 00 00 7c 00 80 0f     ~.....|.....|...
    1d24:	00 00 7c 00 80 0f 00 00 7c 00 80 0f 00 00 7c 00     ..|.....|.....|.
    1d34:	80 0f 00 00 7c 00 80 1f 00 00 7e 00 80 1f 00 00     ....|.....~.....
    1d44:	3e 00 00 3f 00 00 3f 00 00 ff 00 c0 3f 00 00 ff     >..?..?.....?...
    1d54:	03 f0 1f 00 00 fe 03 f0 1f 00 00 fc 03 f0 0f 00     ................
    1d64:	00 f8 03 f0 07 00 00 f0 03 f0 03 00 00 80 03 70     ...............p
	...

00001d76 <chr_G_44>:
	...
    1d86:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    1d96:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    1da6:	00 ff ff ff 3f 00 00 1f 00 00 3e 00 00 1f 00 00     ....?.....>.....
    1db6:	3e 00 00 1f 00 00 3e 00 00 1f 00 00 3e 00 00 1f     >.....>.....>...
    1dc6:	00 00 3e 00 00 1f 00 00 3e 00 00 1f 00 00 3e 00     ..>.....>.....>.
    1dd6:	00 1f 00 00 3e 00 00 1f 00 00 3e 00 00 3f 00 00     ....>.....>..?..
    1de6:	3f 00 00 7f 00 80 1f 00 00 fe 00 c0 1f 00 00 fe     ?...............
    1df6:	07 f0 1f 00 00 fc ff ff 0f 00 00 fc ff ff 07 00     ................
    1e06:	00 f8 ff ff 07 00 00 e0 ff ff 01 00 00 c0 ff 7f     ................
    1e16:	00 00 00 00 fc 0f 00 00                             ........

00001e1e <chr_G_45>:
	...
    1e2e:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    1e3e:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    1e4e:	00 ff ff ff 3f 00 00 1f f0 01 3e 00 00 1f f0 01     ....?.....>.....
    1e5e:	3e 00 00 1f f0 01 3e 00 00 1f f0 01 3e 00 00 1f     >.....>.....>...
    1e6e:	f0 01 3e 00 00 1f f0 01 3e 00 00 1f f0 01 3e 00     ..>.....>.....>.
    1e7e:	00 1f f0 01 3e 00 00 1f f0 01 3e 00 00 1f f0 01     ....>.....>.....
    1e8e:	3e 00 00 1f f0 01 3e 00 00 1f f0 01 3e 00 00 1f     >.....>.....>...
    1e9e:	f0 01 3e 00 00 1f f0 01 3e 00 00 1f 00 00 3e 00     ..>.....>.....>.
    1eae:	00 00 00 00 3e 00                                   ....>.

00001eb4 <chr_G_46>:
	...
    1ec4:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    1ed4:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    1ee4:	00 ff ff ff 3f 00 00 1f f0 01 00 00 00 1f f0 01     ....?...........
    1ef4:	00 00 00 1f f0 01 00 00 00 1f f0 01 00 00 00 1f     ................
    1f04:	f0 01 00 00 00 1f f0 01 00 00 00 1f f0 01 00 00     ................
    1f14:	00 1f f0 01 00 00 00 1f f0 01 00 00 00 1f f0 01     ................
    1f24:	00 00 00 1f f0 01 00 00 00 1f f0 01 00 00 00 1f     ................
    1f34:	f0 01 00 00 00 1f 00 00 00 00 00 1f 00 00 00 00     ................

00001f44 <chr_G_47>:
	...
    1f50:	00 00 fc 0f 00 00 00 80 ff 7f 00 00 00 e0 ff ff     ................
    1f60:	01 00 00 f8 ff ff 07 00 00 fc ff ff 0f 00 00 fe     ................
    1f70:	ff ff 1f 00 00 fe 03 f8 1f 00 00 ff 00 c0 3f 00     ..............?.
    1f80:	00 3f 00 00 3f 00 80 1f 00 00 7e 00 80 1f 00 00     .?..?.....~.....
    1f90:	7e 00 80 0f 00 00 7c 00 80 0f 00 00 7c 00 80 0f     ~.....|.....|...
    1fa0:	00 00 7c 00 80 0f 00 00 7c 00 80 0f c0 07 7c 00     ..|.....|.....|.
    1fb0:	80 1f c0 07 7c 00 80 1f c0 07 3e 00 00 3f c0 07     ....|.....>..?..
    1fc0:	3e 00 00 7f c0 87 1f 00 00 ff c1 e7 0f 00 00 fe     >...............
    1fd0:	c1 ff 07 00 00 fc c1 ff 3f 00 00 fc c1 ff 3f 00     ........?.....?.
    1fe0:	00 f8 c1 ff 3f 00 00 e0 c1 ff 3f 00 00 80 c1 ff     ....?.....?.....
    1ff0:	3f 00                                               ?.

00001ff2 <chr_G_48>:
	...
    2002:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    2012:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    2022:	00 ff ff ff 3f 00 00 00 f8 00 00 00 00 00 f8 00     ....?...........
    2032:	00 00 00 00 f8 00 00 00 00 00 f8 00 00 00 00 00     ................
    2042:	f8 00 00 00 00 00 f8 00 00 00 00 00 f8 00 00 00     ................
    2052:	00 00 f8 00 00 00 00 00 f8 00 00 00 00 00 f8 00     ................
    2062:	00 00 00 00 f8 00 00 00 00 00 f8 00 00 00 00 ff     ................
    2072:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    2082:	00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff     ....?.....?.....
    2092:	3f 00                                               ?.

00002094 <chr_G_49>:
	...
    20a4:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    20b4:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    20c4:	00 ff ff ff 3f 00                                   ....?.

000020ca <chr_G_4A>:
	...
    20d2:	00 f8 03 00 00 00 00 f8 0f 00 00 00 00 f8 1f 00     ................
    20e2:	00 00 00 f8 3f 00 00 00 00 f8 3f 00 00 00 00 f8     ....?.....?.....
    20f2:	3f 00 00 00 00 00 7e 00 00 00 00 00 7c 00 00 00     ?.....~.....|...
    2102:	00 00 7c 00 00 00 00 00 7c 00 00 00 00 00 7c 00     ..|.....|.....|.
    2112:	00 00 00 00 7c 00 00 00 00 00 7e 00 00 ff ff ff     ....|.....~.....
    2122:	7f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    2132:	ff ff 1f 00 00 ff ff ff 0f 00 00 ff ff ff 03 00     ................

00002142 <chr_G_4B>:
	...
    2152:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    2162:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    2172:	00 ff ff ff 3f 00 00 00 f0 07 00 00 00 00 f8 03     ....?...........
    2182:	00 00 00 00 fc 01 00 00 00 00 fe 01 00 00 00 80     ................
    2192:	ff 03 00 00 00 c0 ff 0f 00 00 00 e0 ff 1f 00 00     ................
    21a2:	00 f0 ff 7f 00 00 00 f8 c7 ff 00 00 00 fc 83 ff     ................
    21b2:	01 00 00 fe 01 fe 07 00 00 ff 00 fc 0f 00 00 7f     ................
    21c2:	00 f0 3f 00 00 3f 00 e0 3f 00 00 1f 00 c0 3f 00     ..?..?..?.....?.
    21d2:	00 0f 00 00 3f 00 00 07 00 00 3e 00 00 01 00 00     ....?.....>.....
    21e2:	38 00 00 00 00 00 30 00 00 00 00 00 20 00           8.....0..... .

000021f0 <chr_G_4C>:
	...
    2200:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    2210:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    2220:	00 ff ff ff 3f 00 00 00 00 00 3e 00 00 00 00 00     ....?.....>.....
    2230:	3e 00 00 00 00 00 3e 00 00 00 00 00 3e 00 00 00     >.....>.....>...
    2240:	00 00 3e 00 00 00 00 00 3e 00 00 00 00 00 3e 00     ..>.....>.....>.
    2250:	00 00 00 00 3e 00 00 00 00 00 3e 00 00 00 00 00     ....>.....>.....
    2260:	3e 00 00 00 00 00 3e 00 00 00 00 00 3e 00 00 00     >.....>.....>...
    2270:	00 00 3e 00 00 00 00 00 3e 00 00 00 00 00 3e 00     ..>.....>.....>.

00002280 <chr_G_4D>:
	...
    2290:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    22a0:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    22b0:	00 ff ff ff 3f 00 00 ff 00 00 00 00 00 ff 0f 00     ....?...........
    22c0:	00 00 00 ff ff 00 00 00 00 fe ff 0f 00 00 00 e0     ................
    22d0:	ff ff 00 00 00 00 fe ff 1f 00 00 00 c0 ff 3f 00     ..............?.
    22e0:	00 00 00 fc 3f 00 00 00 00 e0 3f 00 00 00 00 e0     ....?.....?.....
    22f0:	3f 00 00 00 00 fc 3f 00 00 00 c0 ff 3f 00 00 00     ?.....?.....?...
    2300:	fc ff 1f 00 00 e0 ff ff 01 00 00 fe ff 1f 00 00     ................
    2310:	00 ff ff 00 00 00 00 ff 0f 00 00 00 00 ff 00 00     ................
    2320:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    2330:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    2340:	00 ff ff ff 3f 00                                   ....?.

00002346 <chr_G_4E>:
	...
    2356:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    2366:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    2376:	00 ff ff ff 3f 00 00 ff 03 00 00 00 00 fc 0f 00     ....?...........
    2386:	00 00 00 f0 3f 00 00 00 00 c0 ff 00 00 00 00 80     ....?...........
    2396:	ff 01 00 00 00 00 fe 07 00 00 00 00 f8 1f 00 00     ................
    23a6:	00 00 e0 7f 00 00 00 00 c0 ff 00 00 00 00 00 ff     ................
    23b6:	03 00 00 00 00 fc 0f 00 00 00 00 f0 3f 00 00 ff     ............?...
    23c6:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    23d6:	00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff     ....?.....?.....
    23e6:	3f 00                                               ?.

000023e8 <chr_G_4F>:
	...
    23f4:	00 00 fc 0f 00 00 00 80 ff 7f 00 00 00 e0 ff ff     ................
    2404:	01 00 00 f8 ff ff 07 00 00 fc ff ff 0f 00 00 fe     ................
    2414:	ff ff 1f 00 00 fe 07 f8 1f 00 00 ff 00 c0 3f 00     ..............?.
    2424:	00 3f 00 00 3f 00 80 3f 00 00 7f 00 80 1f 00 00     .?..?..?........
    2434:	7e 00 80 1f 00 00 7e 00 80 0f 00 00 7c 00 80 0f     ~.....~.....|...
    2444:	00 00 7c 00 80 0f 00 00 7c 00 80 0f 00 00 7c 00     ..|.....|.....|.
    2454:	80 0f 00 00 7c 00 80 1f 00 00 7e 00 80 1f 00 00     ....|.....~.....
    2464:	7e 00 80 3f 00 00 7f 00 00 3f 00 00 3f 00 00 ff     ~..?.....?..?...
    2474:	00 c0 3f 00 00 fe 07 f8 1f 00 00 fe ff ff 1f 00     ..?.............
    2484:	00 fc ff ff 0f 00 00 f8 ff ff 07 00 00 e0 ff ff     ................
    2494:	01 00 00 80 ff 7f 00 00 00 00 fc 0f 00 00           ..............

000024a2 <chr_G_50>:
	...
    24b2:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    24c2:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    24d2:	00 ff ff ff 3f 00 00 1f c0 07 00 00 00 1f c0 07     ....?...........
    24e2:	00 00 00 1f c0 07 00 00 00 1f c0 07 00 00 00 1f     ................
    24f2:	c0 07 00 00 00 1f c0 07 00 00 00 1f c0 07 00 00     ................
    2502:	00 1f c0 07 00 00 00 3f e0 07 00 00 00 7f f0 07     .......?........
    2512:	00 00 00 ff ff 07 00 00 00 fe ff 03 00 00 00 fe     ................
    2522:	ff 03 00 00 00 fc ff 01 00 00 00 f8 ff 00 00 00     ................
    2532:	00 c0 3f 00 00 00                                   ..?...

00002538 <chr_G_51>:
	...
    2544:	00 00 fc 0f 00 00 00 80 ff 7f 00 00 00 e0 ff ff     ................
    2554:	01 00 00 f8 ff ff 07 00 00 fc ff ff 0f 00 00 fe     ................
    2564:	ff ff 1f 00 00 fe 07 f8 1f 00 00 ff 00 c0 3f 00     ..............?.
    2574:	00 3f 00 00 3f 00 80 3f 00 00 7f 00 80 1f 00 00     .?..?..?........
    2584:	7e 00 80 1f 00 00 7e 00 80 0f 00 00 7c 00 80 0f     ~.....~.....|...
    2594:	00 00 7c 00 80 0f 00 00 7c 00 80 0f 00 20 7c 00     ..|.....|.... |.
    25a4:	80 0f 00 70 7c 00 80 1f 00 f8 7c 00 80 1f 00 fc     ...p|.....|.....
    25b4:	7e 00 80 3f 00 f8 3f 00 00 3f 00 f0 3f 00 00 ff     ~..?..?..?..?...
    25c4:	00 e0 3f 00 00 fe 07 f8 1f 00 00 fc ff ff 3f 00     ..?...........?.
    25d4:	00 fc ff ff 7f 00 00 f8 ff ff ff 00 00 e0 ff ff     ................
    25e4:	f9 00 00 80 ff 7f 38 00 00 00 fc 0f 10 00           ......8.......

000025f2 <chr_G_52>:
	...
    2602:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    2612:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    2622:	00 ff ff ff 3f 00 00 1f e0 03 00 00 00 1f e0 03     ....?...........
    2632:	00 00 00 1f e0 03 00 00 00 1f e0 03 00 00 00 1f     ................
    2642:	e0 03 00 00 00 1f e0 03 00 00 00 1f e0 03 00 00     ................
    2652:	00 1f e0 03 00 00 00 1f e0 03 00 00 00 1f e0 07     ................
    2662:	00 00 00 3f f0 0f 00 00 00 7f f8 ff 1f 00 00 ff     ...?............
    2672:	ff ff 3f 00 00 fe ff ff 3f 00 00 fe 7f ff 3f 00     ..?.....?.....?.
    2682:	00 fc 3f ff 3f 00 00 f8 3f fc 3f 00 00 e0 0f 00     ..?.?...?.?.....
    2692:	38 00                                               8.

00002694 <chr_G_53>:
	...
    26a0:	00 e0 0f e0 01 00 00 f8 1f e0 07 00 00 fc 7f e0     ................
    26b0:	0f 00 00 fe 7f e0 1f 00 00 ff ff e0 1f 00 00 ff     ................
    26c0:	ff e0 3f 00 00 3f fc 01 3f 00 80 1f fc 01 7e 00     ..?..?..?.....~.
    26d0:	80 0f f8 01 7e 00 80 0f f8 01 7c 00 80 0f f8 03     ....~.....|.....
    26e0:	7c 00 80 0f f0 03 7c 00 80 0f f0 03 7c 00 80 0f     |.....|.....|...
    26f0:	f0 03 7c 00 80 1f f0 07 7c 00 00 3f e0 07 7e 00     ..|.....|..?..~.
    2700:	00 ff e1 0f 3f 00 00 fe e1 ff 3f 00 00 fe c1 ff     ....?.....?.....
    2710:	1f 00 00 fc c1 ff 1f 00 00 f8 81 ff 0f 00 00 c0     ................
    2720:	01 ff 07 00 00 00 00 fc 01 00                       ..........

0000272a <chr_G_54>:
    272a:	00 00 00 00 00 00 00 1f 00 00 00 00 00 1f 00 00     ................
    273a:	00 00 00 1f 00 00 00 00 00 1f 00 00 00 00 00 1f     ................
    274a:	00 00 00 00 00 1f 00 00 00 00 00 1f 00 00 00 00     ................
    275a:	00 1f 00 00 00 00 00 1f 00 00 00 00 00 ff ff ff     ................
    276a:	3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ?.....?.....?...
    277a:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    278a:	00 1f 00 00 00 00 00 1f 00 00 00 00 00 1f 00 00     ................
    279a:	00 00 00 1f 00 00 00 00 00 1f 00 00 00 00 00 1f     ................
    27aa:	00 00 00 00 00 1f 00 00 00 00 00 1f 00 00 00 00     ................
    27ba:	00 1f 00 00 00 00                                   ......

000027c0 <chr_G_55>:
	...
    27d0:	00 00 00 ff ff ff 00 00 00 ff ff ff 07 00 00 ff     ................
    27e0:	ff ff 0f 00 00 ff ff ff 1f 00 00 ff ff ff 1f 00     ................
    27f0:	00 ff ff ff 3f 00 00 00 00 80 3f 00 00 00 00 00     ....?.....?.....
    2800:	7e 00 00 00 00 00 7e 00 00 00 00 00 7c 00 00 00     ~.....~.....|...
    2810:	00 00 7c 00 00 00 00 00 7c 00 00 00 00 00 7c 00     ..|.....|.....|.
    2820:	00 00 00 00 7c 00 00 00 00 00 7e 00 00 00 00 00     ....|.....~.....
    2830:	7e 00 00 00 00 80 3f 00 00 ff ff ff 3f 00 00 ff     ~.....?.....?...
    2840:	ff ff 1f 00 00 ff ff ff 1f 00 00 ff ff ff 0f 00     ................
    2850:	00 ff ff ff 07 00 00 ff ff ff 00 00                 ............

0000285c <chr_G_56>:
    285c:	00 03 00 00 00 00 00 0f 00 00 00 00 00 7f 00 00     ................
    286c:	00 00 00 ff 03 00 00 00 00 ff 1f 00 00 00 00 ff     ................
    287c:	7f 00 00 00 00 ff ff 03 00 00 00 fc ff 1f 00 00     ................
    288c:	00 e0 ff ff 00 00 00 00 ff ff 07 00 00 00 f8 ff     ................
    289c:	3f 00 00 00 80 ff 3f 00 00 00 00 fc 3f 00 00 00     ?.....?.....?...
    28ac:	00 c0 3f 00 00 00 00 fc 3f 00 00 00 80 ff 3f 00     ..?.....?.....?.
    28bc:	00 00 f0 ff 3f 00 00 00 ff ff 07 00 00 e0 ff ff     ....?...........
    28cc:	00 00 00 fc ff 1f 00 00 00 ff ff 03 00 00 00 ff     ................
    28dc:	ff 00 00 00 00 ff 1f 00 00 00 00 ff 03 00 00 00     ................
    28ec:	00 7f 00 00 00 00 00 0f 00 00 00 00 00 03 00 00     ................
	...

000028fe <chr_G_57>:
    28fe:	00 00 00 00 00 00 00 03 00 00 00 00 00 1f 00 00     ................
    290e:	00 00 00 ff 00 00 00 00 00 ff 0f 00 00 00 00 ff     ................
    291e:	7f 00 00 00 00 ff ff 07 00 00 00 ff ff 3f 00 00     .............?..
    292e:	00 f0 ff ff 03 00 00 00 ff ff 1f 00 00 00 f0 ff     ................
    293e:	3f 00 00 00 00 ff 3f 00 00 00 00 e0 3f 00 00 00     ?.....?.....?...
    294e:	00 ff 3f 00 00 00 f8 ff 3f 00 00 e0 ff ff 1f 00     ..?.....?.......
    295e:	00 ff ff 7f 00 00 00 ff ff 03 00 00 00 ff 1f 00     ................
    296e:	00 00 00 7f 00 00 00 00 00 ff 1f 00 00 00 00 ff     ................
    297e:	ff 03 00 00 00 ff ff 7f 00 00 00 e0 ff ff 1f 00     ................
    298e:	00 00 f8 ff 3f 00 00 00 00 ff 3f 00 00 00 00 e0     ....?.....?.....
    299e:	3f 00 00 00 00 ff 3f 00 00 00 f0 ff 3f 00 00 00     ?.....?.....?...
    29ae:	ff ff 1f 00 00 f0 ff ff 03 00 00 ff ff 3f 00 00     .............?..
    29be:	00 ff ff 07 00 00 00 ff 7f 00 00 00 00 ff 0f 00     ................
    29ce:	00 00 00 ff 00 00 00 00 00 1f 00 00 00 00 00 03     ................
    29de:	00 00 00 00                                         ....

000029e2 <chr_G_58>:
    29e2:	00 01 00 00 20 00 00 03 00 00 38 00 00 0f 00 00     .... .....8.....
    29f2:	3c 00 00 1f 00 00 3f 00 00 7f 00 80 3f 00 00 ff     <.....?.....?...
    2a02:	00 e0 3f 00 00 ff 03 f0 3f 00 00 ff 07 fc 3f 00     ..?.....?.....?.
    2a12:	00 fc 1f ff 0f 00 00 f0 bf ff 03 00 00 e0 ff ff     ................
    2a22:	01 00 00 80 ff 7f 00 00 00 00 fe 1f 00 00 00 00     ................
    2a32:	fc 0f 00 00 00 00 fe 1f 00 00 00 80 ff 7f 00 00     ................
    2a42:	00 e0 ff ff 01 00 00 f0 bf ff 03 00 00 fc 1f fe     ................
    2a52:	0f 00 00 ff 07 fc 3f 00 00 ff 03 f0 3f 00 00 ff     ......?.....?...
    2a62:	00 e0 3f 00 00 7f 00 80 3f 00 00 1f 00 00 3f 00     ..?.....?.....?.
    2a72:	00 0f 00 00 3c 00 00 03 00 00 30 00 00 01 00 00     ....<.....0.....
    2a82:	20 00                                                .

00002a84 <chr_G_59>:
    2a84:	00 01 00 00 00 00 00 07 00 00 00 00 00 1f 00 00     ................
    2a94:	00 00 00 7f 00 00 00 00 00 ff 01 00 00 00 00 ff     ................
    2aa4:	03 00 00 00 00 ff 0f 00 00 00 00 fe 3f 00 00 00     ............?...
    2ab4:	00 f8 ff 00 00 00 00 c0 ff 03 00 00 00 00 ff ff     ................
    2ac4:	3f 00 00 00 fc ff 3f 00 00 00 f0 ff 3f 00 00 00     ?.....?.....?...
    2ad4:	f0 ff 3f 00 00 00 fc ff 3f 00 00 80 ff ff 3f 00     ..?.....?.....?.
    2ae4:	00 e0 ff 03 00 00 00 f8 ff 00 00 00 00 fe 3f 00     ..............?.
    2af4:	00 00 00 ff 0f 00 00 00 00 ff 03 00 00 00 00 ff     ................
    2b04:	01 00 00 00 00 7f 00 00 00 00 00 1f 00 00 00 00     ................
    2b14:	00 07 00 00 00 00 00 01 00 00 00 00                 ............

00002b20 <chr_G_5A>:
    2b20:	00 00 00 00 00 00 00 1f 00 00 3e 00 00 1f 00 80     ..........>.....
    2b30:	3f 00 00 1f 00 c0 3f 00 00 1f 00 e0 3f 00 00 1f     ?.....?.....?...
    2b40:	00 f0 3f 00 00 1f 00 fc 3f 00 00 1f 00 fe 3f 00     ..?.....?.....?.
    2b50:	00 1f 00 ff 3f 00 00 1f 80 ff 3e 00 00 1f c0 7f     ....?.....>.....
    2b60:	3e 00 00 1f f0 1f 3e 00 00 1f f8 0f 3e 00 00 1f     >.....>.....>...
    2b70:	fc 07 3e 00 00 1f fe 03 3e 00 00 9f ff 00 3e 00     ..>.....>.....>.
    2b80:	00 df 7f 00 3e 00 00 ff 3f 00 3e 00 00 ff 1f 00     ....>...?.>.....
    2b90:	3e 00 00 ff 0f 00 3e 00 00 ff 03 00 3e 00 00 ff     >.....>.....>...
    2ba0:	01 00 3e 00 00 ff 00 00 3e 00 00 7f 00 00 3e 00     ..>.....>.....>.
    2bb0:	00 1f 00 00 3e 00                                   ....>.

00002bb6 <chr_G_5B>:
	...
    2bd2:	00 00 00 ff ff ff ff 7f 00 ff ff ff ff 7f 00 ff     ................
    2be2:	ff ff ff 7f 00 ff ff ff ff 7f 00 ff ff ff ff 7f     ................
    2bf2:	00 ff ff ff ff 7f 00 0f 00 00 00 78 00 0f 00 00     ...........x....
    2c02:	00 78 00 0f 00 00 00 78 00 0f 00 00 00 78           .x.....x.....x

00002c10 <chr_G_5C>:
    2c10:	00 00 00 00 00 00 00 03 00 00 00 00 00 0f 00 00     ................
    2c20:	00 00 80 7f 00 00 00 00 80 ff 01 00 00 00 00 fc     ................
    2c30:	0f 00 00 00 00 f0 7f 00 00 00 00 80 ff 01 00 00     ................
    2c40:	00 00 fe 0f 00 00 00 00 f0 7f 00 00 00 00 c0 ff     ................
    2c50:	01 00 00 00 00 fe 0f 00 00 00 00 f8 7f 00 00 00     ................
    2c60:	00 c0 ff 01 00 00 00 00 fe 0f 00 00 00 00 f8 3f     ...............?
    2c70:	00 00 00 00 c0 ff 00 00 00 00 00 7f 00 00 00 00     ................
    2c80:	00 78 00 00 00 00 00 60                             .x.....`

00002c88 <chr_G_5D>:
    2c88:	00 00 00 00 00 00 00 0f 00 00 00 78 00 0f 00 00     ...........x....
    2c98:	00 78 00 0f 00 00 00 78 00 0f 00 00 00 78 00 ff     .x.....x.....x..
    2ca8:	ff ff ff 7f 00 ff ff ff ff 7f 00 ff ff ff ff 7f     ................
    2cb8:	00 ff ff ff ff 7f 00 ff ff ff ff 7f 00 ff ff ff     ................
    2cc8:	ff 7f                                               ..

00002cca <chr_G_5E>:
	...
    2d02:	08 00 00 00 00 00 0c 00 00 00 00 00 0e 00 00 00     ................
    2d12:	00 00 0f 00 00 00 00 80 0f 00 00 00 00 c0 07 00     ................
    2d22:	00 00 00 e0 03 00 00 00 00 f0 01 00 00 00 00 f8     ................
    2d32:	00 00 00 00 00 7e 00 00 00 00 00 3e 00 00 00 00     .....~.....>....
    2d42:	00 1e 00 00 00 00 00 1e 00 00 00 00 00 3e 00 00     .............>..
    2d52:	00 00 00 7e 00 00 00 00 00 f8 00 00 00 00 00 f0     ...~............
    2d62:	01 00 00 00 00 e0 03 00 00 00 00 c0 07 00 00 00     ................
    2d72:	00 80 0f 00 00 00 00 00 0f 00 00 00 00 00 0e 00     ................
    2d82:	00 00 00 00 0c 00 00 00 00 00 08 00 00 00           ..............

00002d90 <chr_G_5F>:
    2d90:	00 00 00 00 00 f0 00 00 00 00 00 f0 00 00 00 00     ................
    2da0:	00 f0 00 00 00 00 00 f0 00 00 00 00 00 f0 00 00     ................
    2db0:	00 00 00 f0 00 00 00 00 00 f0 00 00 00 00 00 f0     ................
    2dc0:	00 00 00 00 00 f0 00 00 00 00 00 f0 00 00 00 00     ................
    2dd0:	00 f0 00 00 00 00 00 f0 00 00 00 00 00 f0 00 00     ................
    2de0:	00 00 00 f0 00 00 00 00 00 f0 00 00 00 00 00 f0     ................
    2df0:	00 00 00 00 00 f0 00 00 00 00 00 f0 00 00 00 00     ................
    2e00:	00 f0 00 00 00 00 00 f0 00 00 00 00 00 f0           ..............

00002e0e <chr_G_60>:
	...
    2e1e:	00 00 00 f8 07 00 00 00 00 fe 07 00 00 00 00 ff     ................
    2e2e:	07 00 00 00 80 e3 07 00 00 00 80 e1 07 00 00 00     ................
    2e3e:	80 e1 07 00 00 00                                   ......

00002e44 <chr_G_61>:
	...
    2e4c:	00 e0 07 00 00 00 70 f0 1f 00 00 00 7c fc 3f 00     ......p.....|.?.
    2e5c:	00 00 7e fc 3f 00 00 00 7f fe 7f 00 00 00 7f fe     ..~.?...........
    2e6c:	7f 00 00 80 7f 3e 7e 00 00 80 1f 1f 7c 00 00 80     .....>~.....|...
    2e7c:	0f 1f 7c 00 00 80 0f 1f 7c 00 00 80 0f 1f 3c 00     ..|.....|.....<.
    2e8c:	00 80 0f 0f 1e 00 00 80 9f 0f 0f 00 00 00 ff ff     ................
    2e9c:	1f 00 00 00 ff ff 3f 00 00 00 ff ff 3f 00 00 00     ......?.....?...
    2eac:	fe ff 3f 00 00 00 fc ff 3f 00 00 00 f8 ff 3f 00     ..?.....?.....?.
    2ebc:	00 00 00 00 30 00                                   ....0.

00002ec2 <chr_G_62>:
	...
    2ed2:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    2ee2:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    2ef2:	00 ff ff ff 3f 00 00 00 7c 80 0f 00 00 00 1e 00     ....?...|.......
    2f02:	1e 00 00 00 1f 00 3e 00 00 80 0f 00 7c 00 00 80     ......>.....|...
    2f12:	0f 00 7c 00 00 80 0f 00 7c 00 00 80 1f 00 7e 00     ..|.....|.....~.
    2f22:	00 80 1f 00 7e 00 00 80 7f 80 7f 00 00 00 ff ff     ....~...........
    2f32:	3f 00 00 00 ff ff 3f 00 00 00 fe ff 1f 00 00 00     ?.....?.........
    2f42:	fc ff 0f 00 00 00 f0 ff 03 00 00 00 80 7f 00 00     ................

00002f52 <chr_G_63>:
	...
    2f5e:	00 00 80 ff 00 00 00 00 f0 ff 03 00 00 00 fc ff     ................
    2f6e:	0f 00 00 00 fe ff 1f 00 00 00 fe ff 3f 00 00 00     ............?...
    2f7e:	ff ff 3f 00 00 00 7f 80 7f 00 00 80 1f 00 7e 00     ..?...........~.
    2f8e:	00 80 0f 00 7c 00 00 80 0f 00 7c 00 00 80 0f 00     ....|.....|.....
    2f9e:	7c 00 00 80 0f 00 7c 00 00 80 1f 00 7e 00 00 80     |.....|.....~...
    2fae:	3f 00 3f 00 00 00 ff c0 3f 00 00 00 ff c0 3f 00     ?.?.....?.....?.
    2fbe:	00 00 fe c0 1f 00 00 00 fc c0 0f 00 00 00 f8 c0     ................
    2fce:	07 00 00 00 e0 c0 01 00                             ........

00002fd6 <chr_G_64>:
	...
    2fde:	80 7f 00 00 00 00 f0 ff 03 00 00 00 fc ff 0f 00     ................
    2fee:	00 00 fe ff 1f 00 00 00 ff ff 3f 00 00 00 ff ff     ..........?.....
    2ffe:	3f 00 00 80 7f 80 7f 00 00 80 1f 00 7e 00 00 80     ?...........~...
    300e:	1f 00 7e 00 00 80 0f 00 7c 00 00 80 0f 00 7c 00     ..~.....|.....|.
    301e:	00 80 0f 00 7c 00 00 00 1f 00 3e 00 00 00 1e 00     ....|.....>.....
    302e:	1e 00 00 00 7c 80 0f 00 00 ff ff ff 3f 00 00 ff     ....|.......?...
    303e:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    304e:	00 ff ff ff 3f 00 00 ff ff ff 3f 00                 ....?.....?.

0000305a <chr_G_65>:
	...
    3066:	00 00 80 ff 00 00 00 00 f0 ff 03 00 00 00 fc ff     ................
    3076:	07 00 00 00 fe ff 1f 00 00 00 fe ff 1f 00 00 00     ................
    3086:	ff ff 3f 00 00 00 7f 1e 3f 00 00 80 1f 1e 7e 00     ..?.....?.....~.
    3096:	00 80 0f 1e 7c 00 00 80 0f 1e 7c 00 00 80 0f 1e     ....|.....|.....
    30a6:	7c 00 00 80 0f 1e 7c 00 00 80 1f 1e 7c 00 00 00     |.....|.....|...
    30b6:	3f 1e 3e 00 00 00 ff 1f 3f 00 00 00 fe 1f 1f 00     ?.>.....?.......
    30c6:	00 00 fe 1f 1f 00 00 00 fc 1f 0f 00 00 00 f0 1f     ................
    30d6:	07 00 00 00 c0 1f 01 00                             ........

000030de <chr_G_66>:
	...
    30e6:	0f 00 00 00 00 00 0f 00 00 00 00 00 0f 00 00 00     ................
    30f6:	00 f8 ff ff 3f 00 00 fc ff ff 3f 00 00 fe ff ff     ....?.....?.....
    3106:	3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ?.....?.....?...
    3116:	ff ff 3f 00 00 1f 0f 00 00 00 00 1f 0f 00 00 00     ..?.............
    3126:	00 1f 0f 00 00 00                                   ......

0000312c <chr_G_67>:
	...
    3134:	80 7f 00 00 00 00 f0 ff 01 07 00 00 fc ff 07 0f     ................
    3144:	00 00 fe ff 0f 1f 00 00 ff ff 1f 3f 00 00 ff ff     ...........?....
    3154:	1f 3f 00 80 7f c0 3f 3f 00 80 1f 00 3f 7e 00 80     .?....??....?~..
    3164:	0f 00 3e 7c 00 80 0f 00 3e 7c 00 80 0f 00 3e 7c     ..>|....>|....>|
    3174:	00 80 0f 00 3e 7c 00 00 0f 00 1e 7c 00 00 1f 00     ....>|.....|....
    3184:	1f 7e 00 00 7e c0 0f 3f 00 00 ff ff ff 3f 00 00     .~..~..?.....?..
    3194:	ff ff ff 3f 00 00 ff ff ff 1f 00 00 ff ff ff 0f     ...?............
    31a4:	00 00 ff ff ff 07 00 00 ff ff ff 01                 ............

000031b0 <chr_G_68>:
	...
    31c0:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    31d0:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    31e0:	00 ff ff ff 3f 00 00 00 3e 00 00 00 00 00 1e 00     ....?...>.......
    31f0:	00 00 00 00 0f 00 00 00 00 00 0f 00 00 00 00 80     ................
    3200:	0f 00 00 00 00 80 0f 00 00 00 00 80 0f 00 00 00     ................
    3210:	00 80 1f 00 00 00 00 80 ff ff 3f 00 00 80 ff ff     ..........?.....
    3220:	3f 00 00 00 ff ff 3f 00 00 00 ff ff 3f 00 00 00     ?.....?.....?...
    3230:	fe ff 3f 00 00 00 f8 ff 3f 00                       ..?.....?.

0000323a <chr_G_69>:
	...
    324a:	00 00 00 1f ff ff 3f 00 00 1f ff ff 3f 00 00 1f     ......?.....?...
    325a:	ff ff 3f 00 00 1f ff ff 3f 00 00 1f ff ff 3f 00     ..?.....?.....?.
    326a:	00 1f ff ff 3f 00                                   ....?.

00003270 <chr_G_6A>:
    3270:	00 00 00 00 00 7c 00 00 00 00 00 7c 00 00 00 00     .....|.....|....
    3280:	00 7c 00 1f ff ff ff 7f 00 1f ff ff ff 7f 00 1f     .|..............
    3290:	ff ff ff 7f 00 1f ff ff ff 3f 00 1f ff ff ff 3f     .........?.....?
    32a0:	00 1f ff ff ff 0f                                   ......

000032a6 <chr_G_6B>:
	...
    32b6:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    32c6:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    32d6:	00 ff ff ff 3f 00 00 00 80 3f 00 00 00 00 c0 1f     ....?....?......
    32e6:	00 00 00 00 e0 1f 00 00 00 00 f0 7f 00 00 00 00     ................
    32f6:	f8 ff 01 00 00 00 fe ff 07 00 00 00 ff fe 1f 00     ................
    3306:	00 00 7f f8 3f 00 00 00 3f f0 3f 00 00 00 0f c0     ....?...?.?.....
    3316:	3f 00 00 00 07 00 3f 00 00 00 03 00 3c 00 00 00     ?.....?.....<...
    3326:	01 00 38 00 00 00 00 00 20 00                       ..8..... .

00003330 <chr_G_6C>:
	...
    3340:	00 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00 00 ff     ......?.....?...
    3350:	ff ff 3f 00 00 ff ff ff 3f 00 00 ff ff ff 3f 00     ..?.....?.....?.
    3360:	00 ff ff ff 3f 00                                   ....?.

00003366 <chr_G_6D>:
	...
    337a:	ff ff 3f 00 00 00 ff ff 3f 00 00 00 ff ff 3f 00     ..?.....?.....?.
    338a:	00 00 ff ff 3f 00 00 00 ff ff 3f 00 00 00 ff ff     ....?.....?.....
    339a:	3f 00 00 00 3e 00 00 00 00 00 1f 00 00 00 00 00     ?...>...........
    33aa:	0f 00 00 00 00 80 0f 00 00 00 00 80 0f 00 00 00     ................
    33ba:	00 80 0f 00 00 00 00 80 1f 00 00 00 00 80 ff ff     ................
    33ca:	3f 00 00 80 ff ff 3f 00 00 00 ff ff 3f 00 00 00     ?.....?.....?...
    33da:	ff ff 3f 00 00 00 fe ff 3f 00 00 00 fc ff 3f 00     ..?.....?.....?.
    33ea:	00 00 3e 00 00 00 00 00 1f 00 00 00 00 00 0f 00     ..>.............
    33fa:	00 00 00 80 0f 00 00 00 00 80 0f 00 00 00 00 80     ................
    340a:	0f 00 00 00 00 80 1f 00 00 00 00 80 ff ff 3f 00     ..............?.
    341a:	00 80 ff ff 3f 00 00 00 ff ff 3f 00 00 00 fe ff     ....?.....?.....
    342a:	3f 00 00 00 fe ff 3f 00 00 00 f8 ff 3f 00           ?.....?.....?.

00003438 <chr_G_6E>:
	...
    344c:	ff ff 3f 00 00 00 ff ff 3f 00 00 00 ff ff 3f 00     ..?.....?.....?.
    345c:	00 00 ff ff 3f 00 00 00 ff ff 3f 00 00 00 ff ff     ....?.....?.....
    346c:	3f 00 00 00 3c 00 00 00 00 00 1e 00 00 00 00 00     ?...<...........
    347c:	0f 00 00 00 00 00 0f 00 00 00 00 80 0f 00 00 00     ................
    348c:	00 80 0f 00 00 00 00 80 0f 00 00 00 00 80 1f 00     ................
    349c:	00 00 00 80 ff ff 3f 00 00 80 ff ff 3f 00 00 00     ......?.....?...
    34ac:	ff ff 3f 00 00 00 ff ff 3f 00 00 00 fe ff 3f 00     ..?.....?.....?.
    34bc:	00 00 f8 ff 3f 00                                   ....?.

000034c2 <chr_G_6F>:
	...
    34ce:	00 00 80 7f 00 00 00 00 e0 ff 01 00 00 00 f8 ff     ................
    34de:	07 00 00 00 fc ff 0f 00 00 00 fe ff 1f 00 00 00     ................
    34ee:	ff ff 3f 00 00 00 7f 80 3f 00 00 80 1f 00 7e 00     ..?.....?.....~.
    34fe:	00 80 1f 00 7e 00 00 80 0f 00 7c 00 00 80 0f 00     ....~.....|.....
    350e:	7c 00 00 80 0f 00 7c 00 00 80 0f 00 7c 00 00 80     |.....|.....|...
    351e:	1f 00 7e 00 00 80 1f 00 7e 00 00 00 7f 80 3f 00     ..~.....~.....?.
    352e:	00 00 ff ff 3f 00 00 00 fe ff 1f 00 00 00 fc ff     ....?...........
    353e:	0f 00 00 00 f8 ff 07 00 00 00 e0 ff 01 00 00 00     ................
    354e:	80 7f 00 00                                         ....

00003552 <chr_G_70>:
	...
    3566:	ff ff ff 7f 00 00 ff ff ff 7f 00 00 ff ff ff 7f     ................
    3576:	00 00 ff ff ff 7f 00 00 ff ff ff 7f 00 00 ff ff     ................
    3586:	ff 7f 00 00 7c 80 0f 00 00 00 1e 00 1e 00 00 00     ....|...........
    3596:	1f 00 3e 00 00 80 0f 00 7c 00 00 80 0f 00 7c 00     ..>.....|.....|.
    35a6:	00 80 0f 00 7c 00 00 80 1f 00 7e 00 00 80 1f 00     ....|.....~.....
    35b6:	7e 00 00 80 7f 80 7f 00 00 00 ff ff 3f 00 00 00     ~...........?...
    35c6:	ff ff 3f 00 00 00 fe ff 1f 00 00 00 fc ff 0f 00     ..?.............
    35d6:	00 00 f0 ff 03 00 00 00 80 7f 00 00                 ............

000035e2 <chr_G_71>:
	...
    35ea:	80 7f 00 00 00 00 f0 ff 03 00 00 00 fc ff 0f 00     ................
    35fa:	00 00 fe ff 1f 00 00 00 ff ff 3f 00 00 00 ff ff     ..........?.....
    360a:	3f 00 00 80 7f 80 7f 00 00 80 1f 00 7e 00 00 80     ?...........~...
    361a:	1f 00 7e 00 00 80 0f 00 7c 00 00 80 0f 00 7c 00     ..~.....|.....|.
    362a:	00 80 0f 00 7c 00 00 00 1f 00 3e 00 00 00 1e 00     ....|.....>.....
    363a:	1e 00 00 00 7c 80 0f 00 00 00 ff ff ff 7f 00 00     ....|...........
    364a:	ff ff ff 7f 00 00 ff ff ff 7f 00 00 ff ff ff 7f     ................
    365a:	00 00 ff ff ff 7f 00 00 ff ff ff 7f                 ............

00003666 <chr_G_72>:
	...
    3672:	00 00 ff ff 3f 00 00 00 ff ff 3f 00 00 00 ff ff     ....?.....?.....
    3682:	3f 00 00 00 ff ff 3f 00 00 00 ff ff 3f 00 00 00     ?.....?.....?...
    3692:	ff ff 3f 00 00 00 7c 00 00 00 00 00 3e 00 00 00     ..?...|.....>...
    36a2:	00 00 1f 00 00 00 00 80 1f 00 00 00 00 80 1f 00     ................
    36b2:	00 00 00 80 1f 00 00 00 00 80 1f 00 00 00           ..............

000036c0 <chr_G_73>:
	...
    36cc:	00 00 f0 81 03 00 00 00 fc 83 0f 00 00 00 fe 87     ................
    36dc:	1f 00 00 00 ff 8f 3f 00 00 00 ff 8f 3f 00 00 80     ......?.....?...
    36ec:	ff 9f 7f 00 00 80 9f 1f 7e 00 00 80 0f 1f 7c 00     ........~.....|.
    36fc:	00 80 0f 1f 7c 00 00 80 0f 3f 7c 00 00 80 0f 3f     ....|....?|....?
    370c:	7c 00 00 80 1f 3e 7c 00 00 00 7f 7e 7e 00 00 00     |....>|....~~...
    371c:	7f fe 3f 00 00 00 7f fe 3f 00 00 00 7e fc 3f 00     ..?.....?...~.?.
    372c:	00 00 7c fc 1f 00 00 00 78 f8 0f 00 00 00 00 f0     ..|.....x.......
    373c:	03 00                                               ..

0000373e <chr_G_74>:
    373e:	00 00 0f 00 00 00 00 00 0f 00 00 00 00 00 0f 00     ................
    374e:	00 00 00 fc ff ff 07 00 00 fc ff ff 1f 00 00 fc     ................
    375e:	ff ff 1f 00 00 fc ff ff 3f 00 00 fc ff ff 3f 00     ........?.....?.
    376e:	00 fc ff ff 3f 00 00 00 0f 00 3e 00 00 00 0f 00     ....?.....>.....
    377e:	3e 00 00 00 0f 00 3e 00                             >.....>.

00003786 <chr_G_75>:
	...
    379a:	ff ff 07 00 00 00 ff ff 1f 00 00 00 ff ff 3f 00     ..............?.
    37aa:	00 00 ff ff 3f 00 00 00 ff ff 7f 00 00 00 ff ff     ....?...........
    37ba:	7f 00 00 00 00 00 7e 00 00 00 00 00 7c 00 00 00     ......~.....|...
    37ca:	00 00 7c 00 00 00 00 00 7c 00 00 00 00 00 3c 00     ..|.....|.....<.
    37da:	00 00 00 00 3c 00 00 00 00 00 1e 00 00 00 00 00     ....<...........
    37ea:	0f 00 00 00 ff ff 3f 00 00 00 ff ff 3f 00 00 00     ......?.....?...
    37fa:	ff ff 3f 00 00 00 ff ff 3f 00 00 00 ff ff 3f 00     ..?.....?.....?.
    380a:	00 00 ff ff 3f 00                                   ....?.

00003810 <chr_G_76>:
	...
    3818:	01 00 00 00 00 00 0f 00 00 00 00 00 3f 00 00 00     ............?...
    3828:	00 00 ff 01 00 00 00 00 ff 0f 00 00 00 00 ff 3f     ...............?
    3838:	00 00 00 00 ff ff 01 00 00 00 fc ff 0f 00 00 00     ................
    3848:	e0 ff 3f 00 00 00 00 fe 3f 00 00 00 00 f0 3f 00     ..?.....?.....?.
    3858:	00 00 00 00 3f 00 00 00 00 f0 3f 00 00 00 00 ff     ....?.....?.....
    3868:	3f 00 00 00 e0 ff 1f 00 00 00 fe ff 03 00 00 00     ?...............
    3878:	ff ff 00 00 00 00 ff 1f 00 00 00 00 ff 03 00 00     ................
    3888:	00 00 7f 00 00 00 00 00 0f 00 00 00 00 00 01 00     ................
	...

0000389a <chr_G_77>:
	...
    38a2:	03 00 00 00 00 00 1f 00 00 00 00 00 ff 01 00 00     ................
    38b2:	00 00 ff 0f 00 00 00 00 ff ff 00 00 00 00 ff ff     ................
    38c2:	07 00 00 00 fc ff 3f 00 00 00 c0 ff 3f 00 00 00     ......?.....?...
    38d2:	00 f8 3f 00 00 00 00 80 3f 00 00 00 00 fc 3f 00     ..?.....?.....?.
    38e2:	00 00 e0 ff 3f 00 00 00 ff ff 0f 00 00 00 ff ff     ....?...........
    38f2:	00 00 00 00 ff 07 00 00 00 00 3f 00 00 00 00 00     ..........?.....
    3902:	ff 07 00 00 00 00 ff ff 00 00 00 00 fe ff 0f 00     ................
    3912:	00 00 c0 ff 3f 00 00 00 00 fc 3f 00 00 00 00 80     ....?.....?.....
    3922:	3f 00 00 00 00 f8 3f 00 00 00 80 ff 3f 00 00 00     ?.....?.....?...
    3932:	fc ff 3f 00 00 00 ff ff 07 00 00 00 ff 7f 00 00     ..?.............
    3942:	00 00 ff 0f 00 00 00 00 ff 00 00 00 00 00 1f 00     ................
    3952:	00 00 00 00 01 00 00 00                             ........

0000395a <chr_G_78>:
    395a:	00 00 00 00 20 00 00 00 03 00 30 00 00 00 07 00     .... .....0.....
    396a:	3c 00 00 00 1f 00 3e 00 00 00 3f 80 3f 00 00 00     <.....>...?.?...
    397a:	ff c0 3f 00 00 00 ff f3 3f 00 00 00 fe ff 0f 00     ..?.....?.......
    398a:	00 00 f8 ff 07 00 00 00 f0 ff 01 00 00 00 80 7f     ................
    399a:	00 00 00 00 e0 ff 01 00 00 00 f8 ff 07 00 00 00     ................
    39aa:	fe ff 1f 00 00 00 ff f3 3f 00 00 00 ff e0 3f 00     ........?.....?.
    39ba:	00 00 3f 80 3f 00 00 00 1f 00 3e 00 00 00 07 00     ..?.?.....>.....
    39ca:	3c 00 00 00 03 00 30 00 00 00 00 00 20 00           <.....0..... .

000039d8 <chr_G_79>:
	...
    39e0:	03 00 00 00 00 00 1f 00 00 00 00 00 ff 00 00 00     ................
    39f0:	00 00 ff 07 00 7c 00 00 ff 1f 00 7c 00 00 ff ff     .....|.....|....
    3a00:	00 7c 00 00 fe ff 07 7c 00 00 e0 ff 3f 7f 00 00     .|.....|....?...
    3a10:	00 ff ff 7f 00 00 00 f0 ff 3f 00 00 00 00 ff 1f     .........?......
    3a20:	00 00 00 f0 ff 07 00 00 00 ff ff 01 00 00 e0 ff     ................
    3a30:	3f 00 00 00 fe ff 07 00 00 00 ff ff 00 00 00 00     ?...............
    3a40:	ff 1f 00 00 00 00 ff 03 00 00 00 00 7f 00 00 00     ................
    3a50:	00 00 0f 00 00 00 00 00 03 00 00 00                 ............

00003a5c <chr_G_7A>:
	...
    3a64:	00 00 3e 00 00 00 1f 00 3f 00 00 00 1f 80 3f 00     ..>.....?.....?.
    3a74:	00 00 1f c0 3f 00 00 00 1f e0 3f 00 00 00 1f f0     ....?.....?.....
    3a84:	3f 00 00 00 1f f8 3f 00 00 00 1f fc 3f 00 00 00     ?.....?.....?...
    3a94:	1f fe 3e 00 00 00 1f 7f 3e 00 00 00 9f 3f 3e 00     ..>.....>....?>.
    3aa4:	00 00 df 1f 3e 00 00 00 ff 0f 3e 00 00 00 ff 07     ....>.....>.....
    3ab4:	3e 00 00 00 ff 03 3e 00 00 00 ff 01 3e 00 00 00     >.....>.....>...
    3ac4:	ff 00 3e 00 00 00 7f 00 3e 00 00 00 3f 00 3e 00     ..>.....>...?.>.
    3ad4:	00 00 1f 00 3e 00                                   ....>.

00003ada <chr_G_7B>:
	...
    3af2:	00 00 00 1c 00 00 00 00 00 1c 00 00 00 00 00 1c     ................
    3b02:	00 00 00 00 00 1c 00 00 00 00 00 3e 00 00 00 00     ...........>....
    3b12:	00 7f 00 00 00 fc ff f7 ff 1f 00 fe ff f7 ff 3f     ...............?
    3b22:	00 ff ff f7 ff 7f 00 ff ff e3 ff 7f 80 ff ff 80     ................
    3b32:	ff ff 80 07 00 00 00 f0 80 03 00 00 00 e0 80 03     ................
    3b42:	00 00 00 e0 80 03 00 00 00 e0                       ..........

00003b4c <chr_G_7C>:
	...
    3b7c:	80 ff ff ff ff ff 80 ff ff ff ff ff 80 ff ff ff     ................
    3b8c:	ff ff 80 ff ff ff ff ff                             ........

00003b94 <chr_G_7D>:
	...
    3bac:	80 03 00 00 00 e0 80 03 00 00 00 e0 80 03 00 00     ................
    3bbc:	00 e0 80 07 00 00 00 f0 80 ff ff c1 ff ff 00 ff     ................
    3bcc:	ff e3 ff 7f 00 ff ff f7 ff 7f 00 fe ff f7 ff 3f     ...............?
    3bdc:	00 fc ff f7 ff 1f 00 00 00 7f 00 00 00 00 00 3e     ...............>
    3bec:	00 00 00 00 00 1c 00 00 00 00 00 1c 00 00 00 00     ................
    3bfc:	00 1c 00 00 00 00 00 1c 00 00                       ..........

00003c06 <chr_G_7E>:
	...
    3c36:	00 c0 07 00 00 00 00 f0 07 00 00 00 00 f8 07 00     ................
    3c46:	00 00 00 fc 07 00 00 00 00 7c 00 00 00 00 00 3e     .........|.....>
    3c56:	00 00 00 00 00 1e 00 00 00 00 00 1e 00 00 00 00     ................
    3c66:	00 1e 00 00 00 00 00 3e 00 00 00 00 00 7c 00 00     .......>.....|..
    3c76:	00 00 00 fc 00 00 00 00 00 f8 01 00 00 00 00 e0     ................
    3c86:	03 00 00 00 00 c0 07 00 00 00 00 80 07 00 00 00     ................
    3c96:	00 80 07 00 00 00 00 80 07 00 00 00 00 c0 07 00     ................
    3ca6:	00 00 00 e0 03 00 00 00 00 fe 03 00 00 00 00 fe     ................
    3cb6:	01 00 00 00 00 fe 00 00 00 00 00 3e 00 00 00 00     ...........>....

00003cc6 <chrtbl_G>:
    3cc6:	a0 0b ee 0b 2a 0c 6c 0c 26 0d aa 0d 76 0e 1e 0f     ....*.l.&...v...
    3cd6:	54 0f ae 0f f6 0f 6e 10 34 11 6a 11 b8 11 ee 11     T.....n.4.j.....
    3ce6:	3c 12 c0 12 26 13 aa 13 2e 14 b8 14 3c 15 c6 15     <...&.......<...
    3cf6:	4a 16 ce 16 52 17 8e 17 ca 17 8a 18 50 19 16 1a     J...R.......P...
    3d06:	94 1a 7e 1b 26 1c c8 1c 76 1d 1e 1e b4 1e 44 1f     ..~.&...v.....D.
    3d16:	f2 1f 94 20 ca 20 42 21 f0 21 80 22 46 23 e8 23     ... . B!.!."F#.#
    3d26:	a2 24 38 25 f2 25 94 26 2a 27 c0 27 5c 28 fe 28     .$8%.%.&*'.'\(.(
    3d36:	e2 29 84 2a 20 2b b6 2b 10 2c 88 2c ca 2c 90 2d     .).* +.+.,.,.,.-
    3d46:	0e 2e 44 2e c2 2e 52 2f d6 2f 5a 30 de 30 2c 31     ..D...R/./Z0.0,1
    3d56:	b0 31 3a 32 70 32 a6 32 30 33 66 33 38 34 c2 34     .1:2p2.203f384.4
    3d66:	52 35 e2 35 66 36 c0 36 3e 37 86 37 10 38 9a 38     R5.5f6.6>7.7.8.8
    3d76:	5a 39 d8 39 5c 3a da 3a 4c 3b 94 3b 06 3c           Z9.9\:.:L;.;.<

00003d84 <widtbl_L>:
    3d84:	08 05 06 11 0d 15 11 04 08 05 0b 14 05 07 05 08     ................
    3d94:	0d 09 0d 0d 0d 0d 0d 0d 0d 0d 05 05 13 14 14 0c     ................
    3da4:	18 10 10 11 11 0f 0e 11 10 04 0b 11 0d 13 10 12     ................
    3db4:	0f 12 10 0f 0e 10 0f 17 0f 10 0f 08 0b 06 14 0d     ................
    3dc4:	04 0e 0e 0c 0d 0d 07 0d 0d 04 04 0c 04 14 0d 0e     ................
    3dd4:	0e 0d 08 0b 06 0d 0b 11 0c 0d 0b 0b 07 0a 14        ...............

00003de3 <chr_L_20>:
	...

00003e03 <chr_L_21>:
	...
    3e0f:	80 ff cf 01 80 ff cf 01                             ........

00003e17 <chr_L_22>:
	...
    3e1f:	80 3f 00 00 00 00 00 00 00 00 00 00 80 3f 00 00     .?...........?..

00003e2f <chr_L_23>:
	...
    3e37:	00 00 04 00 00 40 04 00 00 40 04 01 00 40 e4 01     .....@...@...@..
    3e47:	00 40 3c 00 00 c0 07 00 00 78 04 01 00 4f e4 01     .@<......x...O..
    3e57:	00 41 3c 00 00 c0 07 00 00 78 04 00 00 4f 04 00     .A<......x...O..
    3e67:	00 41 04 00 00 40 04 00 00 40 00 00                 .A...@...@..

00003e73 <chr_L_24>:
    3e73:	00 00 00 00 00 7c 78 00 00 fe f8 00 00 c6 c0 00     .....|x.........
    3e83:	00 83 81 01 00 83 81 01 c0 ff ff 07 00 83 81 01     ................
    3e93:	00 03 83 01 00 06 83 01 00 0e c7 00 00 0c fe 00     ................
    3ea3:	00 00 7c 00                                         ..|.

00003ea7 <chr_L_25>:
    3ea7:	00 00 00 00 00 38 00 00 00 fe 00 00 00 c6 00 00     .....8..........
    3eb7:	00 83 01 00 00 83 01 03 00 83 c1 01 00 c6 60 00     ..............`.
    3ec7:	00 fe 38 00 00 38 0c 00 00 00 03 00 00 80 01 00     ..8..8..........
    3ed7:	00 60 38 00 00 38 fe 00 00 0c c6 00 00 07 83 01     .`8..8..........
    3ee7:	00 01 83 01 00 00 83 01 00 00 c6 00 00 00 fe 00     ................
    3ef7:	00 00 38 00                                         ..8.

00003efb <chr_L_26>:
    3efb:	00 00 00 00 00 00 7c 00 00 00 fe 00 00 1e c7 01     ......|.........
    3f0b:	00 bf 83 01 80 e3 81 01 80 c1 81 01 80 c1 83 01     ................
    3f1b:	80 61 87 01 80 73 ce 00 00 3f dc 00 00 1e 78 00     .a...s...?....x.
    3f2b:	00 00 78 00 00 00 df 00 00 00 c7 01 00 00 80 01     ..x.............
    3f3b:	00 00 00 01                                         ....

00003f3f <chr_L_27>:
    3f3f:	00 00 00 00 80 13 00 00 80 1b 00 00 80 0f 00 00     ................

00003f4f <chr_L_28>:
	...
    3f5b:	00 c0 ff 00 00 f8 ff 07 00 3e 00 1f 80 03 00 70     .........>.....p
    3f6b:	80 00 00 40                                         ...@

00003f6f <chr_L_29>:
    3f6f:	80 00 00 40 80 03 00 70 00 3e 00 1f 00 f8 ff 07     ...@...p.>......
    3f7f:	00 c0 ff 00                                         ....

00003f83 <chr_L_2A>:
    3f83:	00 00 00 00 00 08 00 00 00 8c 00 00 00 d8 01 00     ................
    3f93:	00 f8 00 00 80 3f 00 00 80 3f 00 00 00 f8 00 00     .....?...?......
    3fa3:	00 d8 01 00 00 8c 00 00 00 08 00 00                 ............

00003faf <chr_L_2B>:
	...
    3fc3:	00 00 02 00 00 00 02 00 00 00 02 00 00 00 02 00     ................
    3fd3:	00 00 02 00 00 00 02 00 00 00 02 00 00 fc ff 01     ................
    3fe3:	00 00 02 00 00 00 02 00 00 00 02 00 00 00 02 00     ................
    3ff3:	00 00 02 00 00 00 02 00 00 00 02 00                 ............

00003fff <chr_L_2C>:
	...
    4007:	00 00 c0 11 00 00 c0 1d 00 00 c0 07                 ............

00004013 <chr_L_2D>:
    4013:	00 00 00 00 00 00 06 00 00 00 06 00 00 00 06 00     ................
    4023:	00 00 06 00 00 00 06 00 00 00 06 00                 ............

0000402f <chr_L_2E>:
	...
    4037:	00 00 c0 01 00 00 c0 01 00 00 c0 01                 ............

00004043 <chr_L_2F>:
    4043:	00 00 00 06 00 00 c0 07 00 00 f8 00 00 00 1f 00     ................
    4053:	00 e0 03 00 00 7c 00 00 80 0f 00 00 80 01 00 00     .....|..........

00004063 <chr_L_30>:
    4063:	00 00 00 00 00 f0 1f 00 00 fc 7f 00 00 1e f0 00     ................
    4073:	00 06 c0 00 00 07 c0 01 00 03 80 01 00 03 80 01     ................
    4083:	00 07 c0 01 00 06 c0 00 00 1e f0 00 00 fc 7f 00     ................
    4093:	00 f0 1f 00                                         ....

00004097 <chr_L_31>:
	...
    40a3:	00 18 00 00 00 18 00 00 00 18 00 00 00 1c 00 00     ................
    40b3:	00 ff ff 01 00 ff ff 01                             ........

000040bb <chr_L_32>:
    40bb:	00 00 00 00 00 38 e0 01 00 3e f0 01 00 0e b8 01     .....8...>......
    40cb:	00 07 9c 01 00 03 8c 01 00 03 8e 01 00 03 86 01     ................
    40db:	00 03 87 01 00 07 83 01 00 86 83 01 00 fe 81 01     ................
    40eb:	00 f8 80 01                                         ....

000040ef <chr_L_33>:
    40ef:	00 00 00 00 00 10 38 00 00 1c f8 00 00 1e e0 00     ......8.........
    40ff:	00 07 c0 01 00 03 80 01 00 83 81 01 00 83 81 01     ................
    410f:	00 83 81 01 00 c7 c1 01 00 fe e3 00 00 7c ff 00     .............|..
    411f:	00 00 3e 00                                         ..>.

00004123 <chr_L_34>:
    4123:	00 00 00 00 00 00 1c 00 00 00 1e 00 00 00 1b 00     ................
    4133:	00 c0 19 00 00 e0 18 00 00 30 18 00 00 1c 18 00     .........0......
    4143:	00 0e 18 00 00 ff ff 01 00 ff ff 01 00 00 18 00     ................
    4153:	00 00 18 00                                         ....

00004157 <chr_L_35>:
    4157:	00 00 00 00 00 80 31 00 00 ff f1 00 00 ff e0 00     ......1.........
    4167:	00 c3 c0 01 00 63 80 01 00 63 80 01 00 63 80 01     .....c...c...c..
    4177:	00 63 80 01 00 e3 c0 01 00 c3 e1 00 00 c3 ff 00     .c..............
    4187:	00 00 3f 00                                         ..?.

0000418b <chr_L_36>:
    418b:	00 00 00 00 00 e0 1f 00 00 fc 7f 00 00 9e e3 00     ................
    419b:	00 86 c1 01 00 c3 80 01 00 c3 80 01 00 c3 80 01     ................
    41ab:	00 c3 80 01 00 c3 c1 01 00 86 e3 00 00 9e ff 00     ................
    41bb:	00 18 3e 00                                         ..>.

000041bf <chr_L_37>:
    41bf:	00 00 00 00 00 03 00 00 00 03 00 00 00 03 00 00     ................
    41cf:	00 03 c0 01 00 03 fc 01 00 03 3f 00 00 c3 07 00     ..........?.....
    41df:	00 f3 00 00 00 7b 00 00 00 1f 00 00 00 0f 00 00     .....{..........
    41ef:	00 03 00 00                                         ....

000041f3 <chr_L_38>:
    41f3:	00 00 00 00 00 00 3c 00 00 38 fe 00 00 7e c3 00     ......<..8...~..
    4203:	00 c6 c3 01 00 83 81 01 00 83 81 01 00 83 81 01     ................
    4213:	00 83 81 01 00 c6 c3 01 00 7e c3 00 00 38 fe 00     .........~...8..
    4223:	00 00 3c 00                                         ..<.

00004227 <chr_L_39>:
    4227:	00 00 00 00 00 f8 30 00 00 fe f3 00 00 8e c3 01     ......0.........
    4237:	00 07 87 01 00 03 86 01 00 03 86 01 00 03 86 01     ................
    4247:	00 03 86 01 00 07 c3 01 00 8e f3 00 00 fc 7f 00     ................
    4257:	00 f0 0f 00                                         ....

0000425b <chr_L_3A>:
	...
    4263:	00 70 c0 01 00 70 c0 01 00 70 c0 01                 .p...p...p..

0000426f <chr_L_3B>:
	...
    4277:	00 70 c0 11 00 70 c0 1d 00 70 c0 07                 .p...p...p..

00004283 <chr_L_3C>:
	...
    4297:	00 00 02 00 00 00 07 00 00 00 05 00 00 80 0d 00     ................
    42a7:	00 80 08 00 00 80 08 00 00 c0 18 00 00 40 10 00     .............@..
    42b7:	00 60 30 00 00 20 20 00 00 20 20 00 00 30 60 00     .`0..  ..  ..0`.
    42c7:	00 10 40 00 00 18 c0 00                             ..@.....

000042cf <chr_L_3D>:
	...
    42e3:	00 80 08 00 00 80 08 00 00 80 08 00 00 80 08 00     ................
    42f3:	00 80 08 00 00 80 08 00 00 80 08 00 00 80 08 00     ................
    4303:	00 80 08 00 00 80 08 00 00 80 08 00 00 80 08 00     ................
    4313:	00 80 08 00 00 80 08 00 00 80 08 00                 ............

0000431f <chr_L_3E>:
	...
    4337:	00 18 c0 00 00 10 40 00 00 30 60 00 00 20 20 00     ......@..0`..  .
    4347:	00 20 20 00 00 60 30 00 00 40 10 00 00 c0 18 00     .  ..`0..@......
    4357:	00 80 08 00 00 80 08 00 00 80 0d 00 00 00 05 00     ................
    4367:	00 00 07 00 00 00 02 00                             ........

0000436f <chr_L_3F>:
    436f:	00 00 00 00 00 1c 00 00 00 1f 00 00 00 07 00 00     ................
    437f:	80 03 00 00 80 01 cc 01 80 01 cf 01 80 81 cf 01     ................
    438f:	80 c1 01 00 80 e3 00 00 00 7f 00 00 00 3e 00 00     .............>..

0000439f <chr_L_40>:
    439f:	00 00 00 00 00 80 1f 00 00 e0 7f 00 00 78 e0 00     .............x..
    43af:	00 0c 80 01 00 06 00 03 00 02 00 06 00 03 1f 04     ................
    43bf:	00 c1 3f 0c 80 e1 60 08 80 20 40 08 80 10 40 08     ..?...`.. @...@.
    43cf:	80 10 40 08 80 10 20 08 80 30 3c 08 80 e0 7f 0c     ..@... ..0<.....
    43df:	80 e0 43 04 80 31 40 04 00 01 40 04 00 03 60 02     ..C..1@...@...`.
    43ef:	00 06 30 02 00 0c 1c 00 00 f8 0f 00 00 f0 03 00     ..0.............

000043ff <chr_L_41>:
    43ff:	00 00 00 01 00 00 c0 01 00 00 f8 01 00 00 3f 00     ..............?.
    440f:	00 e0 0f 00 00 fc 0c 00 80 1f 0c 00 80 03 0c 00     ................
    441f:	80 03 0c 00 80 1f 0c 00 00 fc 0c 00 00 e0 0f 00     ................
    442f:	00 00 3f 00 00 00 f8 01 00 00 c0 01 00 00 00 01     ..?.............

0000443f <chr_L_42>:
	...
    4447:	80 ff ff 01 80 ff ff 01 80 81 81 01 80 81 81 01     ................
    4457:	80 81 81 01 80 81 81 01 80 81 81 01 80 81 81 01     ................
    4467:	80 81 81 01 80 81 81 01 80 c3 c3 01 00 7f c3 00     ................
    4477:	00 7f ff 00 00 00 3c 00                             ......<.

0000447f <chr_L_43>:
    447f:	00 00 00 00 00 f0 0f 00 00 fc 3f 00 00 1e 78 00     ..........?...x.
    448f:	00 07 e0 00 00 03 c0 00 80 03 c0 01 80 01 80 01     ................
    449f:	80 01 80 01 80 01 80 01 80 01 80 01 80 01 80 01     ................
    44af:	80 03 c0 01 00 03 c0 00 00 07 f0 00 00 1e 7c 00     ..............|.
    44bf:	00 18 1c 00                                         ....

000044c3 <chr_L_44>:
	...
    44cb:	80 ff ff 01 80 ff ff 01 80 01 80 01 80 01 80 01     ................
    44db:	80 01 80 01 80 01 80 01 80 01 80 01 80 01 80 01     ................
    44eb:	80 01 80 01 80 03 c0 01 00 03 c0 00 00 07 e0 00     ................
    44fb:	00 1e 78 00 00 fc 3f 00 00 f0 0f 00                 ..x...?.....

00004507 <chr_L_45>:
	...
    450f:	80 ff ff 01 80 ff ff 01 80 81 81 01 80 81 81 01     ................
    451f:	80 81 81 01 80 81 81 01 80 81 81 01 80 81 81 01     ................
    452f:	80 81 81 01 80 81 81 01 80 81 81 01 80 81 81 01     ................
    453f:	80 01 80 01                                         ....

00004543 <chr_L_46>:
	...
    454b:	80 ff ff 01 80 ff ff 01 80 81 01 00 80 81 01 00     ................
    455b:	80 81 01 00 80 81 01 00 80 81 01 00 80 81 01 00     ................
    456b:	80 81 01 00 80 81 01 00 80 81 01 00 80 01 00 00     ................

0000457b <chr_L_47>:
    457b:	00 00 00 00 00 f0 0f 00 00 fc 3f 00 00 1e 78 00     ..........?...x.
    458b:	00 07 e0 00 00 03 c0 00 80 01 c0 01 80 01 80 01     ................
    459b:	80 01 80 01 80 81 81 01 80 81 81 01 80 81 81 01     ................
    45ab:	80 83 c1 00 00 83 e1 00 00 8f 71 00 00 8e ff 00     ..........q.....
    45bb:	00 88 ff 01                                         ....

000045bf <chr_L_48>:
	...
    45c7:	80 ff ff 01 80 ff ff 01 00 c0 00 00 00 c0 00 00     ................
    45d7:	00 c0 00 00 00 c0 00 00 00 c0 00 00 00 c0 00 00     ................
    45e7:	00 c0 00 00 00 c0 00 00 00 c0 00 00 00 c0 00 00     ................
    45f7:	80 ff ff 01 80 ff ff 01                             ........

000045ff <chr_L_49>:
	...
    4607:	80 ff ff 01 80 ff ff 01                             ........

0000460f <chr_L_4A>:
    460f:	00 00 78 00 00 00 f8 00 00 00 c0 01 00 00 80 01     ..x.............
    461f:	00 00 80 01 00 00 80 01 00 00 80 01 00 00 80 01     ................
    462f:	00 00 c0 01 80 ff ff 00 80 ff 7f 00                 ............

0000463b <chr_L_4B>:
	...
    4643:	80 ff ff 01 80 ff ff 01 00 00 07 00 00 80 03 00     ................
    4653:	00 c0 01 00 00 e0 01 00 00 f0 03 00 00 38 07 00     .............8..
    4663:	00 1c 1e 00 00 0e 3c 00 00 07 70 00 80 03 e0 00     ......<...p.....
    4673:	80 01 c0 01 80 00 80 01 00 00 00 01                 ............

0000467f <chr_L_4C>:
	...
    4687:	80 ff ff 01 80 ff ff 01 00 00 80 01 00 00 80 01     ................
    4697:	00 00 80 01 00 00 80 01 00 00 80 01 00 00 80 01     ................
    46a7:	00 00 80 01 00 00 80 01 00 00 80 01                 ............

000046b3 <chr_L_4D>:
	...
    46bb:	80 ff ff 01 80 ff ff 01 80 07 00 00 00 3f 00 00     .............?..
    46cb:	00 f8 01 00 00 c0 0f 00 00 00 7e 00 00 00 f0 01     ..........~.....
    46db:	00 00 c0 01 00 00 f0 01 00 00 7e 00 00 c0 0f 00     ..........~.....
    46eb:	00 f8 01 00 00 3f 00 00 80 07 00 00 80 ff ff 01     .....?..........
    46fb:	80 ff ff 01                                         ....

000046ff <chr_L_4E>:
	...
    4707:	80 ff ff 01 80 ff ff 01 80 07 00 00 00 1e 00 00     ................
    4717:	00 3c 00 00 00 f0 00 00 00 e0 01 00 00 80 07 00     .<..............
    4727:	00 00 0f 00 00 00 3c 00 00 00 78 00 00 00 e0 01     ......<...x.....
    4737:	80 ff ff 01 80 ff ff 01                             ........

0000473f <chr_L_4F>:
    473f:	00 00 00 00 00 f0 0f 00 00 fc 3f 00 00 1e 78 00     ..........?...x.
    474f:	00 07 e0 00 00 03 c0 00 80 03 c0 01 80 01 80 01     ................
    475f:	80 01 80 01 80 01 80 01 80 01 80 01 80 01 80 01     ................
    476f:	80 03 c0 01 00 03 c0 00 00 07 e0 00 00 1e 78 00     ..............x.
    477f:	00 fc 3f 00 00 f0 0f 00                             ..?.....

00004787 <chr_L_50>:
	...
    478f:	80 ff ff 01 80 ff ff 01 80 81 01 00 80 81 01 00     ................
    479f:	80 81 01 00 80 81 01 00 80 81 01 00 80 81 01 00     ................
    47af:	80 81 01 00 80 81 01 00 80 c3 01 00 00 ff 00 00     ................
    47bf:	00 7e 00 00                                         .~..

000047c3 <chr_L_51>:
    47c3:	00 00 00 00 00 f0 0f 00 00 fc 3f 00 00 1e 78 00     ..........?...x.
    47d3:	00 07 e0 00 00 03 c0 00 80 03 c0 01 80 01 80 01     ................
    47e3:	80 01 80 01 80 01 80 01 80 01 90 01 80 01 b8 01     ................
    47f3:	80 03 f0 01 00 03 e0 00 00 07 e0 00 00 1e f8 01     ................
    4803:	00 fc bf 03 00 f0 0f 01                             ........

0000480b <chr_L_52>:
	...
    4813:	80 ff ff 01 80 ff ff 01 80 81 01 00 80 81 01 00     ................
    4823:	80 81 01 00 80 81 01 00 80 81 01 00 80 81 01 00     ................
    4833:	80 81 01 00 80 81 01 00 80 81 03 00 80 c3 0f 00     ................
    4843:	00 ff fe 01 00 3e f8 01                             .....>..

0000484b <chr_L_53>:
    484b:	00 00 00 00 00 00 08 00 00 3e 78 00 00 7f f8 00     .........>x.....
    485b:	00 e3 c0 00 80 c1 c0 01 80 c1 80 01 80 c1 81 01     ................
    486b:	80 81 81 01 80 81 81 01 80 81 83 01 00 03 83 01     ................
    487b:	00 1f c7 00 00 1e fe 00 00 10 7c 00                 ..........|.

00004887 <chr_L_54>:
    4887:	80 01 00 00 80 01 00 00 80 01 00 00 80 01 00 00     ................
    4897:	80 01 00 00 80 01 00 00 80 ff ff 01 80 ff ff 01     ................
    48a7:	80 01 00 00 80 01 00 00 80 01 00 00 80 01 00 00     ................
    48b7:	80 01 00 00 80 01 00 00                             ........

000048bf <chr_L_55>:
	...
    48c7:	80 ff 3f 00 80 ff 7f 00 00 00 e0 00 00 00 c0 01     ..?.............
    48d7:	00 00 80 01 00 00 80 01 00 00 80 01 00 00 80 01     ................
    48e7:	00 00 80 01 00 00 80 01 00 00 c0 01 00 00 e0 00     ................
    48f7:	80 ff 7f 00 80 ff 3f 00                             ......?.

000048ff <chr_L_56>:
    48ff:	80 00 00 00 80 07 00 00 80 3f 00 00 00 f8 01 00     .........?......
    490f:	00 c0 0f 00 00 00 7e 00 00 00 f0 01 00 00 c0 01     ......~.........
    491f:	00 00 f0 01 00 00 7e 00 00 c0 0f 00 00 f8 01 00     ......~.........
    492f:	80 3f 00 00 80 07 00 00 80 00 00 00                 .?..........

0000493b <chr_L_57>:
    493b:	80 00 00 00 80 07 00 00 80 7f 00 00 00 fc 07 00     ................
    494b:	00 c0 7f 00 00 00 fc 01 00 00 c0 01 00 00 fc 01     ................
    495b:	00 c0 3f 00 00 fc 03 00 80 3f 00 00 80 03 00 00     ..?......?......
    496b:	80 3f 00 00 00 fc 03 00 00 c0 3f 00 00 00 fc 01     .?........?.....
    497b:	00 00 c0 01 00 00 fc 01 00 c0 7f 00 00 fc 07 00     ................
    498b:	80 7f 00 00 80 07 00 00 80 00 00 00                 ............

00004997 <chr_L_58>:
    4997:	00 00 00 01 80 01 80 01 80 03 e0 01 00 0f f0 00     ................
    49a7:	00 1c 3c 00 00 78 0e 00 00 e0 07 00 00 c0 01 00     ..<..x..........
    49b7:	00 e0 07 00 00 78 0e 00 00 1c 3c 00 00 0f f0 00     .....x....<.....
    49c7:	80 03 e0 01 80 01 80 01 00 00 00 01                 ............

000049d3 <chr_L_59>:
    49d3:	80 00 00 00 80 01 00 00 80 07 00 00 00 0f 00 00     ................
    49e3:	00 3c 00 00 00 70 00 00 00 e0 01 00 00 80 ff 01     .<...p..........
    49f3:	00 80 ff 01 00 e0 01 00 00 70 00 00 00 3c 00 00     .........p...<..
    4a03:	00 0f 00 00 80 07 00 00 80 01 00 00 80 00 00 00     ................

00004a13 <chr_L_5A>:
    4a13:	00 00 00 00 00 00 c0 01 80 01 e0 01 80 01 f0 01     ................
    4a23:	80 01 b8 01 80 01 9c 01 80 01 8f 01 80 81 83 01     ................
    4a33:	80 c1 81 01 80 e1 80 01 80 79 80 01 80 1d 80 01     .........y......
    4a43:	80 0f 80 01 80 07 80 01 80 03 80 01                 ............

00004a4f <chr_L_5B>:
	...
    4a5b:	80 ff ff 3f 80 ff ff 3f 80 01 00 30 80 01 00 30     ...?...?...0...0
    4a6b:	80 01 00 30                                         ...0

00004a6f <chr_L_5C>:
	...
    4a77:	c0 01 00 00 00 0f 00 00 00 78 00 00 00 c0 03 00     .........x......
    4a87:	00 00 1e 00 00 00 f0 00 00 00 80 07 00 00 00 3c     ...............<
    4a97:	00 00 00 60                                         ...`

00004a9b <chr_L_5D>:
    4a9b:	00 00 00 00 80 01 00 30 80 01 00 30 80 01 00 30     .......0...0...0
    4aab:	80 ff ff 3f 80 ff ff 3f                             ...?...?

00004ab3 <chr_L_5E>:
	...
    4ac7:	00 20 00 00 00 30 00 00 00 18 00 00 00 0c 00 00     . ...0..........
    4ad7:	00 06 00 00 00 03 00 00 80 01 00 00 80 00 00 00     ................
    4ae7:	80 01 00 00 00 03 00 00 00 06 00 00 00 0c 00 00     ................
    4af7:	00 18 00 00 00 30 00 00 00 20 00 00                 .....0... ..

00004b03 <chr_L_5F>:
    4b03:	00 00 00 40 00 00 00 40 00 00 00 40 00 00 00 40     ...@...@...@...@
    4b13:	00 00 00 40 00 00 00 40 00 00 00 40 00 00 00 40     ...@...@...@...@
    4b23:	00 00 00 40 00 00 00 40 00 00 00 40 00 00 00 40     ...@...@...@...@
    4b33:	00 00 00 40                                         ...@

00004b37 <chr_L_60>:
    4b37:	00 00 00 00 00 1f 00 00 80 1d 00 00 80 1c 00 00     ................

00004b47 <chr_L_61>:
    4b47:	00 00 00 00 00 00 78 00 00 e0 fc 00 00 e0 cc 01     ......x.........
    4b57:	00 30 86 01 00 30 86 01 00 30 86 01 00 30 86 01     .0...0...0...0..
    4b67:	00 30 c6 00 00 70 46 00 00 e0 ff 00 00 c0 ff 01     .0...pF.........
    4b77:	00 00 80 01 00 00 80 01                             ........

00004b7f <chr_L_62>:
	...
    4b87:	80 ff ff 01 80 ff ff 01 00 c0 60 00 00 60 c0 00     ..........`..`..
    4b97:	00 70 c0 01 00 30 80 01 00 30 80 01 00 70 c0 01     .p...0...0...p..
    4ba7:	00 60 c0 00 00 e0 f1 00 00 c0 7f 00 00 00 1f 00     .`..............

00004bb7 <chr_L_63>:
    4bb7:	00 00 00 00 00 00 1f 00 00 c0 7f 00 00 e0 f1 00     ................
    4bc7:	00 60 c0 00 00 70 c0 01 00 30 80 01 00 30 80 01     .`...p...0...0..
    4bd7:	00 70 c0 01 00 60 c0 00 00 e0 f0 00 00 80 30 00     .p...`........0.

00004be7 <chr_L_64>:
    4be7:	00 00 00 00 00 00 1f 00 00 c0 7f 00 00 e0 f1 00     ................
    4bf7:	00 60 c0 00 00 70 c0 01 00 30 80 01 00 30 80 01     .`...p...0...0..
    4c07:	00 70 c0 01 00 60 c0 00 00 c0 60 00 80 ff ff 01     .p...`....`.....
    4c17:	80 ff ff 01                                         ....

00004c1b <chr_L_65>:
    4c1b:	00 00 00 00 00 00 1f 00 00 c0 7f 00 00 e0 f7 00     ................
    4c2b:	00 60 c6 00 00 70 c6 01 00 30 86 01 00 30 86 01     .`...p...0...0..
    4c3b:	00 70 c6 01 00 60 c6 00 00 e0 e6 00 00 c0 67 00     .p...`........g.
    4c4b:	00 00 27 00                                         ..'.

00004c4f <chr_L_66>:
    4c4f:	00 30 00 00 00 30 00 00 00 ff ff 01 80 ff ff 01     .0...0..........
    4c5f:	80 31 00 00 80 31 00 00 80 31 00 00                 .1...1...1..

00004c6b <chr_L_67>:
    4c6b:	00 00 00 00 00 00 1f 0c 00 c0 7f 3c 00 e0 f0 30     ...........<...0
    4c7b:	00 60 c0 70 00 70 c0 61 00 30 80 61 00 30 80 61     .`.p.p.a.0.a.0.a
    4c8b:	00 70 c0 61 00 60 c0 70 00 c0 60 38 00 f0 ff 3f     .p.a.`.p..`8...?
    4c9b:	00 f0 ff 0f                                         ....

00004c9f <chr_L_68>:
	...
    4ca7:	80 ff ff 01 80 ff ff 01 00 c0 00 00 00 60 00 00     .............`..
    4cb7:	00 30 00 00 00 30 00 00 00 30 00 00 00 30 00 00     .0...0...0...0..
    4cc7:	00 70 00 00 00 e0 ff 01 00 c0 ff 01                 .p..........

00004cd3 <chr_L_69>:
	...
    4cdb:	80 f3 ff 01 80 f3 ff 01                             ........

00004ce3 <chr_L_6A>:
    4ce3:	00 00 00 60 00 00 00 60 80 f3 ff 7f 80 f3 ff 3f     ...`...`.......?

00004cf3 <chr_L_6B>:
	...
    4cfb:	00 ff ff 01 00 ff ff 01 00 00 0e 00 00 00 07 00     ................
    4d0b:	00 80 07 00 00 c0 1f 00 00 e0 7c 00 00 70 f0 01     ..........|..p..
    4d1b:	00 30 c0 01 00 10 00 01                             .0......

00004d23 <chr_L_6C>:
	...
    4d2b:	80 ff ff 01 80 ff ff 01                             ........

00004d33 <chr_L_6D>:
	...
    4d3b:	00 f0 ff 01 00 f0 ff 01 00 c0 00 00 00 60 00 00     .............`..
    4d4b:	00 30 00 00 00 30 00 00 00 30 00 00 00 70 00 00     .0...0...0...p..
    4d5b:	00 e0 ff 01 00 c0 ff 01 00 e0 00 00 00 60 00 00     .............`..
    4d6b:	00 30 00 00 00 30 00 00 00 30 00 00 00 70 00 00     .0...0...0...p..
    4d7b:	00 e0 ff 01 00 c0 ff 01                             ........

00004d83 <chr_L_6E>:
	...
    4d8b:	00 f0 ff 01 00 f0 ff 01 00 c0 00 00 00 60 00 00     .............`..
    4d9b:	00 30 00 00 00 30 00 00 00 30 00 00 00 30 00 00     .0...0...0...0..
    4dab:	00 70 00 00 00 e0 ff 01 00 c0 ff 01                 .p..........

00004db7 <chr_L_6F>:
    4db7:	00 00 00 00 00 00 1f 00 00 c0 7f 00 00 e0 f1 00     ................
    4dc7:	00 60 c0 00 00 70 c0 01 00 30 80 01 00 30 80 01     .`...p...0...0..
    4dd7:	00 30 80 01 00 70 c0 01 00 60 c0 00 00 e0 f1 00     .0...p...`......
    4de7:	00 c0 7f 00 00 00 1f 00                             ........

00004def <chr_L_70>:
	...
    4df7:	00 f0 ff 3f 00 f0 ff 3f 00 c0 60 00 00 60 c0 00     ...?...?..`..`..
    4e07:	00 70 c0 01 00 30 80 01 00 30 80 01 00 70 c0 01     .p...0...0...p..
    4e17:	00 60 c0 00 00 e0 f1 00 00 c0 7f 00 00 00 1f 00     .`..............

00004e27 <chr_L_71>:
    4e27:	00 00 00 00 00 00 1f 00 00 c0 7f 00 00 e0 f1 00     ................
    4e37:	00 60 c0 00 00 70 c0 01 00 30 80 01 00 30 80 01     .`...p...0...0..
    4e47:	00 70 c0 01 00 60 c0 00 00 c0 60 00 00 f0 ff 3f     .p...`....`....?
    4e57:	00 f0 ff 3f                                         ...?

00004e5b <chr_L_72>:
	...
    4e63:	00 f0 ff 01 00 f0 ff 01 00 60 00 00 00 30 00 00     .........`...0..
    4e73:	00 30 00 00 00 30 00 00                             .0...0..

00004e7b <chr_L_73>:
    4e7b:	00 00 00 00 00 c0 61 00 00 e0 e3 00 00 70 c6 01     ......a......p..
    4e8b:	00 30 86 01 00 30 86 01 00 30 8e 01 00 30 8c 01     .0...0...0...0..
    4e9b:	00 60 cc 01 00 e0 fc 00 00 80 78 00                 .`........x.

00004ea7 <chr_L_74>:
    4ea7:	00 30 00 00 00 30 00 00 00 ff ff 00 00 ff ff 01     .0...0..........
    4eb7:	00 30 80 01 00 30 80 01                             .0...0..

00004ebf <chr_L_75>:
	...
    4ec7:	00 f0 7f 00 00 f0 ff 00 00 00 c0 01 00 00 80 01     ................
    4ed7:	00 00 80 01 00 00 80 01 00 00 80 01 00 00 c0 00     ................
    4ee7:	00 00 60 00 00 f0 ff 01 00 f0 ff 01                 ..`.........

00004ef3 <chr_L_76>:
    4ef3:	00 30 00 00 00 f0 01 00 00 c0 0f 00 00 00 7e 00     .0............~.
    4f03:	00 00 f0 01 00 00 c0 01 00 00 f0 01 00 00 7e 00     ..............~.
    4f13:	00 c0 0f 00 00 f0 01 00 00 30 00 00                 .........0..

00004f1f <chr_L_77>:
    4f1f:	00 70 00 00 00 f0 07 00 00 80 3f 00 00 00 f8 01     .p........?.....
    4f2f:	00 00 c0 01 00 00 f8 01 00 80 3f 00 00 f0 03 00     ..........?.....
    4f3f:	00 30 00 00 00 f0 03 00 00 80 3f 00 00 00 f8 01     .0........?.....
    4f4f:	00 00 c0 01 00 00 f8 01 00 80 3f 00 00 f0 07 00     ..........?.....
    4f5f:	00 70 00 00                                         .p..

00004f63 <chr_L_78>:
    4f63:	00 00 00 00 00 30 80 01 00 70 c0 01 00 e0 f1 00     .....0...p......
    4f73:	00 80 3b 00 00 00 1f 00 00 00 0e 00 00 00 1f 00     ..;.............
    4f83:	00 80 3b 00 00 e0 f1 00 00 70 c0 01 00 30 80 01     ..;......p...0..

00004f93 <chr_L_79>:
    4f93:	00 10 00 00 00 70 00 60 00 f0 03 60 00 80 1f 60     .....p.`...`...`
    4fa3:	00 00 fc 70 00 00 e0 3f 00 00 00 1f 00 00 e0 07     ...p...?........
    4fb3:	00 00 fc 00 00 80 1f 00 00 f0 03 00 00 70 00 00     .............p..
    4fc3:	00 10 00 00                                         ....

00004fc7 <chr_L_7A>:
    4fc7:	00 00 00 00 00 30 c0 01 00 30 e0 01 00 30 f0 01     .....0...0...0..
    4fd7:	00 30 b8 01 00 30 9e 01 00 30 8f 01 00 b0 83 01     .0...0...0......
    4fe7:	00 f0 81 01 00 f0 80 01 00 70 80 01                 .........p..

00004ff3 <chr_L_7B>:
	...
    4fff:	00 00 04 00 00 00 04 00 00 00 0e 00 80 ff fb 3f     ...............?
    500f:	c0 ff f1 7f c0 00 00 60 40 00 00 40 40 00 00 40     .......`@..@@..@

0000501f <chr_L_7C>:
	...
    5033:	c0 ff ff 7f c0 ff ff 7f                             ........

0000503b <chr_L_7D>:
	...
    5043:	40 00 00 40 40 00 00 40 c0 00 00 60 c0 ff f1 7f     @..@@..@...`....
    5053:	80 ff fb 3f 00 00 0e 00 00 00 04 00 00 00 04 00     ...?............

00005063 <chr_L_7E>:
	...
    5077:	00 0e 00 00 00 03 00 00 80 01 00 00 80 00 00 00     ................
    5087:	80 00 00 00 80 01 00 00 00 03 00 00 00 02 00 00     ................
    5097:	00 06 00 00 00 0c 00 00 00 08 00 00 00 08 00 00     ................
    50a7:	00 0c 00 00 00 06 00 00 80 03 00 00                 ............

000050b3 <chrtbl_L>:
    50b3:	e3 3d 03 3e 17 3e 2f 3e 73 3e a7 3e fb 3e 3f 3f     .=.>.>/>s>.>.>??
    50c3:	4f 3f 6f 3f 83 3f af 3f ff 3f 13 40 2f 40 43 40     O?o?.?.?.?.@/@C@
    50d3:	63 40 97 40 bb 40 ef 40 23 41 57 41 8b 41 bf 41     c@.@.@.@#AWA.A.A
    50e3:	f3 41 27 42 5b 42 6f 42 83 42 cf 42 1f 43 6f 43     .A'B[BoB.B.B.CoC
    50f3:	9f 43 ff 43 3f 44 7f 44 c3 44 07 45 43 45 7b 45     .C.C?D.D.D.ECE{E
    5103:	bf 45 ff 45 0f 46 3b 46 7f 46 b3 46 ff 46 3f 47     .E.E.F;F.F.F.F?G
    5113:	87 47 c3 47 0b 48 4b 48 87 48 bf 48 ff 48 3b 49     .G.G.HKH.H.H.H;I
    5123:	97 49 d3 49 13 4a 4f 4a 6f 4a 9b 4a b3 4a 03 4b     .I.I.JOJoJ.J.J.K
    5133:	37 4b 47 4b 7f 4b b7 4b e7 4b 1b 4c 4f 4c 6b 4c     7KGK.K.K.K.LOLkL
    5143:	9f 4c d3 4c e3 4c f3 4c 23 4d 33 4d 83 4d b7 4d     .L.L.L.L#M3M.M.M
    5153:	ef 4d 27 4e 5b 4e 7b 4e a7 4e bf 4e f3 4e 1f 4f     .M'N[N{N.N.N.N.O
    5163:	63 4f 93 4f c7 4f f3 4f 1f 50 3b 50 63 50           cO.O.O.O.P;PcP

00005171 <widtbl_H>:
    5171:	0d 0c 0e 25 17 25 25 0b 13 0f 16 29 0a 0e 0a 0e     ...%.%%....)....
    5181:	17 16 17 16 17 17 17 18 17 17 0b 0b 27 28 28 15     ............'((.
    5191:	2f 22 1f 21 23 20 1d 25 25 11 17 27 20 2d 23 25     /".!# .%%..' -#%
    51a1:	1e 25 24 1b 1e 23 22 30 23 23 1f 13 18 0e 28 19     .%$..#"0##....(.
    51b1:	0b 19 1a 15 1b 15 14 18 1b 0e 10 1d 0e 28 1b 18     .............(..
    51c1:	1a 1b 16 13 10 1b 18 22 18 18 15 14 0f 15 28        ......."......(

000051d0 <chr_H_20>:
	...

00005238 <chr_H_21>:
	...
    5258:	00 00 7e 00 00 f0 00 00 00 00 ff 07 00 f8 01 00     ..~.............
    5268:	00 80 ff 7f 00 fc 03 00 00 80 ff ff 1f fc 03 00     ................
    5278:	00 80 ff ff 1f fc 03 00 00 80 ff 7f 00 fc 03 00     ................
    5288:	00 00 ff 07 00 f8 01 00 00 00 7e 00 00 f0 00 00     ..........~.....

00005298 <chr_H_22>:
	...
    52a8:	00 00 1f 00 00 00 00 00 00 80 ff 07 00 00 00 00     ................
    52b8:	00 80 ff 3f 00 00 00 00 00 80 ff 07 00 00 00 00     ...?............
    52c8:	00 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    52e0:	00 00 1f 00 00 00 00 00 00 80 ff 07 00 00 00 00     ................
    52f0:	00 80 ff 3f 00 00 00 00 00 80 ff 07 00 00 00 00     ...?............
    5300:	00 00 1f 00 00 00 00 00                             ........

00005308 <chr_H_23>:
	...
    531c:	c0 00 00 00 00 00 00 00 f0 00 00 00 00 00 00 00     ................
    532c:	f0 00 00 00 00 00 00 00 f0 00 00 00 00 00 00 18     ................
    533c:	f0 00 07 00 00 00 00 1e f0 e0 07 00 00 00 00 1e     ................
    534c:	f0 fc 07 00 00 00 00 1e f0 ff 07 00 00 00 00 1e     ................
    535c:	f0 ff 01 00 00 00 00 1e fe 3f 00 00 00 00 00 de     .........?......
    536c:	ff 07 00 00 00 00 00 fe ff 00 00 00 00 00 00 fe     ................
    537c:	ff 00 00 00 00 00 c0 ff f3 00 00 00 00 00 f8 7f     ................
    538c:	f0 00 00 00 00 00 ff 1f f0 00 07 00 00 c0 ff 1f     ................
    539c:	f0 e0 07 00 00 c0 3f 1e f0 fc 07 00 00 c0 07 1e     ......?.........
    53ac:	f0 ff 07 00 00 c0 00 1e f0 ff 01 00 00 00 00 1e     ................
    53bc:	fe 3f 00 00 00 00 00 de ff 07 00 00 00 00 00 fe     .?..............
    53cc:	ff 00 00 00 00 00 00 fe ff 00 00 00 00 00 c0 ff     ................
    53dc:	f3 00 00 00 00 00 f8 7f f0 00 00 00 00 00 ff 1f     ................
    53ec:	f0 00 00 00 00 c0 ff 1f f0 00 00 00 00 c0 3f 1e     ..............?.
    53fc:	f0 00 00 00 00 c0 07 1e f0 00 00 00 00 c0 00 1e     ................
    540c:	30 00 00 00 00 00 00 1e 00 00 00 00 00 00 00 1e     0...............
    541c:	00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00 06     ................
    542c:	00 00 00 00                                         ....

00005430 <chr_H_24>:
	...
    5438:	00 00 e0 07 00 00 00 00 00 00 f8 1f c0 7f 00 00     ................
    5448:	00 00 fc 3f 00 7f 00 00 00 00 fe 7f 00 fc 00 00     ...?............
    5458:	00 00 ff ff 00 f0 00 00 00 00 87 ff 00 e0 01 00     ................
    5468:	00 80 03 fe 01 c0 01 00 00 80 01 fe 03 80 01 00     ................
    5478:	00 80 01 fc 03 80 01 00 00 f0 ff ff ff ff 3f 00     ..............?.
    5488:	00 f0 ff ff ff ff 3f 00 00 f0 ff ff ff ff 3f 00     ......?.......?.
    5498:	00 80 01 f0 0f 80 01 00 00 80 01 f0 1f 80 01 00     ................
    54a8:	00 80 03 e0 1f c0 01 00 00 00 03 e0 3f e0 00 00     ............?...
    54b8:	00 00 07 c0 ff f0 00 00 00 00 0f c0 ff 7f 00 00     ................
    54c8:	00 00 3e 80 ff 3f 00 00 00 00 fe 00 ff 3f 00 00     ..>..?.......?..
    54d8:	00 00 00 00 fe 0f 00 00 00 00 00 00 f8 03 00 00     ................

000054e8 <chr_H_25>:
	...
    54f0:	00 00 00 3f 00 00 00 00 00 00 e0 ff 00 00 00 00     ...?............
    5500:	00 00 f8 ff 01 00 00 00 00 00 fc ff 01 00 00 00     ................
    5510:	00 00 fe ff 03 00 00 00 00 00 ff ef 03 00 00 00     ................
    5520:	00 00 7f 80 03 00 00 00 00 80 1f 00 03 00 02 00     ................
    5530:	00 80 07 00 03 80 03 00 00 80 03 80 01 e0 03 00     ................
    5540:	00 80 03 c0 01 f8 01 00 00 80 03 e0 00 7e 00 00     .............~..
    5550:	00 00 03 70 00 1f 00 00 00 00 0e 1e c0 07 00 00     ...p............
    5560:	00 00 fc 03 f0 01 00 00 00 00 0c 00 fc 00 00 00     ................
    5570:	00 00 0c 00 3e 00 00 00 00 00 0c 80 0f 00 00 00     ....>...........
    5580:	00 00 0c e0 03 00 00 00 00 00 0c f8 01 00 00 00     ................
    5590:	00 00 0c 7e 00 00 00 00 00 00 0c 1f 00 3f 00 00     ...~.........?..
    55a0:	00 00 cc 07 e0 ff 00 00 00 00 f6 01 f8 ff 01 00     ................
    55b0:	00 00 fe 00 fc ff 01 00 00 00 3e 00 fe ff 03 00     ..........>.....
    55c0:	00 00 0f 00 ff ef 03 00 00 80 07 00 7f 80 03 00     ................
    55d0:	00 80 01 80 1f 00 03 00 00 00 00 80 07 00 03 00     ................
    55e0:	00 00 00 80 03 80 01 00 00 00 00 80 03 c0 01 00     ................
    55f0:	00 00 00 80 03 e0 00 00 00 00 00 00 03 70 00 00     .............p..
    5600:	00 00 00 00 0e 1e 00 00 00 00 00 00 fc 03 00 00     ................

00005610 <chr_H_26>:
	...
    5624:	c0 0f 00 00 00 00 00 00 f0 3f 00 00 00 00 00 00     .........?......
    5634:	f8 7f 00 00 00 00 00 00 fc ff 00 00 00 00 00 00     ................
    5644:	fe ff 01 00 00 00 00 00 fe ff 01 00 00 00 00 00     ................
    5654:	ff ff 03 00 00 00 e0 83 03 ff 03 00 00 00 f8 9f     ................
    5664:	01 fc 03 00 00 00 fc ff 00 f0 03 00 00 00 fe ff     ................
    5674:	00 f0 03 00 00 00 ff ff 01 e0 03 00 00 00 ff ff     ................
    5684:	07 e0 03 00 00 00 c3 ff 0f c0 01 00 00 80 01 ff     ................
    5694:	3f c0 01 00 00 80 01 fc 7f c0 01 00 00 80 01 f8     ?...............
    56a4:	ff c0 00 00 00 80 01 f8 ff e3 00 00 00 80 03 dc     ................
    56b4:	ff 67 00 00 00 80 0f 8e ff 3f 00 00 00 80 ff 0f     .g.......?......
    56c4:	fe 3f 00 00 00 00 ff 07 fc 7f 00 00 00 00 ff 03     .?..............
    56d4:	f8 ff 00 00 00 00 fe 01 e0 ff 01 00 00 00 7c 00     ..............|.
    56e4:	c0 ff 01 00 00 00 00 20 c0 ff 03 00 00 00 00 20     ....... ....... 
    56f4:	e0 fe 03 00 00 00 00 20 78 fc 03 00 00 00 00 60     ....... x......`
    5704:	1e f8 03 00 00 00 00 e0 0f f0 03 00 00 00 00 e0     ................
    5714:	03 e0 01 00 00 00 00 e0 00 e0 01 00 00 00 00 60     ...............`
    5724:	00 e0 00 00 00 00 00 20 00 70 00 00 00 00 00 20     ....... .p..... 
    5734:	00 18 00 00                                         ....

00005738 <chr_H_27>:
	...
    5750:	00 00 1e 40 00 00 00 00 00 00 3f 20 00 00 00 00     ...@......? ....
    5760:	00 80 7f 30 00 00 00 00 00 80 7f 18 00 00 00 00     ...0............
    5770:	00 80 7f 0e 00 00 00 00 00 80 ff 07 00 00 00 00     ................
    5780:	00 00 ff 03 00 00 00 00 00 00 fe 00 00 00 00 00     ................

00005790 <chr_H_28>:
	...
    57b4:	ff 01 00 00 00 00 00 f0 ff 1f 00 00 00 00 00 fc     ................
    57c4:	ff 7f 00 00 00 00 00 ff ff ff 01 00 00 00 c0 ff     ................
    57d4:	ff ff 07 00 00 00 e0 ff ff ff 0f 00 00 00 f0 03     ................
    57e4:	00 80 1f 00 00 00 78 00 00 00 3c 00 00 00 1c 00     ......x...<.....
    57f4:	00 00 70 00 00 00 0e 00 00 00 e0 00 00 00 06 00     ..p.............
    5804:	00 00 c0 00 00 00 03 00 00 00 80 01 00 00 01 00     ................
    5814:	00 00 00 01 00 80 01 00 00 00 00 03 00 80 00 00     ................
    5824:	00 00 00 02                                         ....

00005828 <chr_H_29>:
    5828:	00 80 00 00 00 00 00 02 00 80 01 00 00 00 00 03     ................
    5838:	00 00 01 00 00 00 00 01 00 00 03 00 00 00 80 01     ................
    5848:	00 00 06 00 00 00 c0 00 00 00 0e 00 00 00 e0 00     ................
    5858:	00 00 1c 00 00 00 70 00 00 00 78 00 00 00 3c 00     ......p...x...<.
    5868:	00 00 f0 03 00 80 1f 00 00 00 e0 ff ff ff 0f 00     ................
    5878:	00 00 c0 ff ff ff 07 00 00 00 00 ff ff ff 01 00     ................
    5888:	00 00 00 fc ff 7f 00 00 00 00 00 f0 ff 1f 00 00     ................
    5898:	00 00 00 00 ff 01 00 00                             ........

000058a0 <chr_H_2A>:
	...
    58b8:	00 00 f0 f0 00 00 00 00 00 00 f8 f0 01 00 00 00     ................
    58c8:	00 00 f8 f9 01 00 00 00 00 00 f8 f9 01 00 00 00     ................
    58d8:	00 00 f0 f9 00 00 00 00 00 00 e0 79 00 00 00 00     ...........y....
    58e8:	00 00 c0 39 00 00 00 00 00 00 07 09 0e 00 00 00     ...9............
    58f8:	00 80 3f c6 1f 00 00 00 00 80 ff ff 1f 00 00 00     ..?.............
    5908:	00 80 3f c6 1f 00 00 00 00 00 07 09 0e 00 00 00     ..?.............
    5918:	00 00 c0 39 00 00 00 00 00 00 e0 79 00 00 00 00     ...9.......y....
    5928:	00 00 f0 f9 00 00 00 00 00 00 f8 f9 01 00 00 00     ................
    5938:	00 00 f8 f9 01 00 00 00 00 00 f8 f0 01 00 00 00     ................
    5948:	00 00 f0 f0 00 00 00 00                             ........

00005950 <chr_H_2B>:
	...
    59a0:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    59b0:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    59c0:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    59d0:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    59e0:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    59f0:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    5a00:	00 00 00 80 0f 00 00 00 00 00 fc ff ff ff 01 00     ................
    5a10:	00 00 fc ff ff ff 01 00 00 00 fc ff ff ff 01 00     ................
    5a20:	00 00 fc ff ff ff 01 00 00 00 fc ff ff ff 01 00     ................
    5a30:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    5a40:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    5a50:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    5a60:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    5a70:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    5a80:	00 00 00 80 0f 00 00 00 00 00 00 80 0f 00 00 00     ................
    5a90:	00 00 00 80 0f 00 00 00                             ........

00005a98 <chr_H_2C>:
	...
    5aac:	00 f0 00 02 00 00 00 00 00 f8 01 01 00 00 00 00     ................
    5abc:	00 fc 83 01 00 00 00 00 00 fc c3 00 00 00 00 00     ................
    5acc:	00 fc 73 00 00 00 00 00 00 fc 3f 00 00 00 00 00     ..s.......?.....
    5adc:	00 f8 1f 00 00 00 00 00 00 f0 07 00                 ............

00005ae8 <chr_H_2D>:
	...
    5afc:	f8 01 00 00 00 00 00 00 f8 01 00 00 00 00 00 00     ................
    5b0c:	f8 01 00 00 00 00 00 00 f8 01 00 00 00 00 00 00     ................
    5b1c:	f8 01 00 00 00 00 00 00 f8 01 00 00 00 00 00 00     ................
    5b2c:	f8 01 00 00 00 00 00 00 f8 01 00 00 00 00 00 00     ................
    5b3c:	f8 01 00 00 00 00 00 00 f8 01 00 00 00 00 00 00     ................
    5b4c:	f8 01 00 00 00 00 00 00 f8 01 00 00                 ............

00005b58 <chr_H_2E>:
	...
    5b6c:	00 f0 00 00 00 00 00 00 00 f8 01 00 00 00 00 00     ................
    5b7c:	00 fc 03 00 00 00 00 00 00 fc 03 00 00 00 00 00     ................
    5b8c:	00 fc 03 00 00 00 00 00 00 fc 03 00 00 00 00 00     ................
    5b9c:	00 f8 01 00 00 00 00 00 00 f0 00 00                 ............

00005ba8 <chr_H_2F>:
    5ba8:	00 00 00 00 00 00 30 00 00 00 00 00 00 00 3f 00     ......0.......?.
    5bb8:	00 00 00 00 00 e0 3f 00 00 00 00 00 00 fe 0f 00     ......?.........
    5bc8:	00 00 00 00 c0 ff 00 00 00 00 00 00 f8 1f 00 00     ................
    5bd8:	00 00 00 80 ff 01 00 00 00 00 00 f0 3f 00 00 00     ............?...
    5be8:	00 00 00 ff 07 00 00 00 00 00 e0 7f 00 00 00 00     ................
    5bf8:	00 00 fe 0f 00 00 00 00 00 80 ff 00 00 00 00 00     ................
    5c08:	00 80 1f 00 00 00 00 00 00 80 01 00 00 00 00 00     ................

00005c18 <chr_H_30>:
	...
    5c20:	00 00 00 f8 3f 00 00 00 00 00 80 ff ff 03 00 00     ....?...........
    5c30:	00 00 e0 ff ff 0f 00 00 00 00 f8 ff ff 3f 00 00     .............?..
    5c40:	00 00 fc ff ff 7f 00 00 00 00 fe ff ff ff 00 00     ................
    5c50:	00 00 ff ff ff ff 01 00 00 00 ff ff ff ff 01 00     ................
    5c60:	00 80 07 00 00 c0 03 00 00 80 01 00 00 00 03 00     ................
    5c70:	00 80 01 00 00 00 03 00 00 80 01 00 00 00 03 00     ................
    5c80:	00 80 01 00 00 00 03 00 00 80 07 00 00 c0 03 00     ................
    5c90:	00 00 ff ff ff ff 01 00 00 00 ff ff ff ff 01 00     ................
    5ca0:	00 00 fe ff ff ff 00 00 00 00 fc ff ff 7f 00 00     ................
    5cb0:	00 00 f8 ff ff 3f 00 00 00 00 e0 ff ff 0f 00 00     .....?..........
    5cc0:	00 00 80 ff ff 03 00 00 00 00 00 f8 3f 00 00 00     ............?...

00005cd0 <chr_H_31>:
	...
    5ce8:	00 00 08 00 00 00 01 00 00 00 08 00 00 00 01 00     ................
    5cf8:	00 00 08 00 00 00 01 00 00 00 0c 00 00 00 01 00     ................
    5d08:	00 00 0c 00 00 80 01 00 00 00 1c 00 00 80 01 00     ................
    5d18:	00 00 fe ff ff ff 01 00 00 00 fe ff ff ff 01 00     ................
    5d28:	00 00 fe ff ff ff 01 00 00 00 ff ff ff ff 01 00     ................
    5d38:	00 00 ff ff ff ff 01 00 00 00 ff ff ff ff 01 00     ................
    5d48:	00 80 ff ff ff ff 01 00 00 00 00 00 00 80 01 00     ................
    5d58:	00 00 00 00 00 80 01 00 00 00 00 00 00 00 01 00     ................
    5d68:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00     ................
    5d78:	00 00 00 00 00 00 01 00                             ........

00005d80 <chr_H_32>:
    5d80:	00 00 00 00 00 80 01 00 00 00 00 00 00 c0 01 00     ................
    5d90:	00 00 e0 00 00 e0 01 00 00 00 38 00 00 f8 01 00     ..........8.....
    5da0:	00 00 1c 00 00 fc 01 00 00 00 1e 00 00 fe 01 00     ................
    5db0:	00 00 0e 00 00 ff 01 00 00 00 0f 00 80 ff 01 00     ................
    5dc0:	00 00 0f 00 c0 fd 01 00 00 80 0f 00 f0 fc 01 00     ................
    5dd0:	00 80 0f 00 78 fc 01 00 00 80 1f 00 3c fc 01 00     ....x.......<...
    5de0:	00 80 1f 00 1f fc 01 00 00 80 7f c0 0f fc 01 00     ................
    5df0:	00 80 ff ff 07 fc 01 00 00 00 ff ff 03 fc 01 00     ................
    5e00:	00 00 ff ff 01 fc 01 00 00 00 fe ff 00 fc 01 00     ................
    5e10:	00 00 fc 7f 00 fc 01 00 00 00 f8 1f 00 fc 01 00     ................
    5e20:	00 00 e0 07 00 fe 01 00 00 00 00 00 80 ff 01 00     ................
    5e30:	00 00 00 00 e0 1f 00 00                             ........

00005e38 <chr_H_33>:
    5e38:	00 00 00 00 00 f0 00 00 00 00 40 00 00 f8 01 00     ..........@.....
    5e48:	00 00 30 00 00 f8 01 00 00 00 18 00 00 f8 03 00     ..0.............
    5e58:	00 00 0c 00 00 f8 03 00 00 00 0e 00 00 f0 03 00     ................
    5e68:	00 00 06 80 00 e0 03 00 00 00 07 80 00 c0 03 00     ................
    5e78:	00 00 07 c0 01 80 03 00 00 80 07 c0 01 80 03 00     ................
    5e88:	00 80 07 e0 01 00 03 00 00 80 0f f0 03 00 03 00     ................
    5e98:	00 80 1f fc 03 00 01 00 00 80 ff ff 07 00 01 00     ................
    5ea8:	00 80 ff ff 0f 80 01 00 00 80 ff ff 1f c0 00 00     ................
    5eb8:	00 00 ff ff 7f e0 00 00 00 00 ff ef ff 7f 00 00     ................
    5ec8:	00 00 fe c7 ff 3f 00 00 00 00 f8 81 ff 1f 00 00     .....?..........
    5ed8:	00 00 00 00 ff 0f 00 00 00 00 00 00 fc 03 00 00     ................

00005ee8 <chr_H_34>:
    5ee8:	00 00 00 00 f8 01 00 00 00 00 00 00 fc 01 00 00     ................
    5ef8:	00 00 00 00 fe 01 00 00 00 00 00 00 f7 01 00 00     ................
    5f08:	00 00 00 c0 f1 01 00 00 00 00 00 e0 f0 01 00 00     ................
    5f18:	00 00 00 70 f0 01 00 00 00 00 00 1c f0 01 00 00     ...p............
    5f28:	00 00 00 0e f0 01 00 00 00 00 00 07 f0 01 00 00     ................
    5f38:	00 00 80 01 f0 01 00 00 00 00 e0 00 f0 01 00 00     ................
    5f48:	00 00 70 00 f0 01 00 00 00 00 fc ff ff ff 01 00     ..p.............
    5f58:	00 00 fe ff ff ff 01 00 00 00 ff ff ff ff 01 00     ................
    5f68:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    5f78:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    5f88:	00 00 00 00 f0 01 00 00 00 00 00 00 f0 01 00 00     ................
    5f98:	00 00 00 00 f0 01 00 00                             ........

00005fa0 <chr_H_35>:
	...
    5fac:	00 78 00 00 00 00 00 00 00 fc 00 00 00 00 00 e0     .x..............
    5fbc:	01 fc 01 00 00 00 00 fe 01 fc 01 00 00 00 e0 ff     ................
    5fcc:	01 f8 03 00 00 00 fe fc 01 f8 03 00 00 80 3f fc     ..............?.
    5fdc:	01 f0 03 00 00 80 3f fc 01 e0 03 00 00 80 3f fc     ......?.......?.
    5fec:	03 c0 03 00 00 80 3f fc 03 c0 03 00 00 80 3f fc     ......?.......?.
    5ffc:	03 80 03 00 00 80 3f fc 07 80 01 00 00 80 3f f8     ......?.......?.
    600c:	07 80 01 00 00 80 3f f8 0f 80 01 00 00 80 3f f8     ......?.......?.
    601c:	1f c0 00 00 00 80 3f f0 3f c0 00 00 00 80 3f e0     ......?.?.....?.
    602c:	ff 70 00 00 00 80 3f e0 ff 3f 00 00 00 80 3f c0     .p....?..?....?.
    603c:	ff 1f 00 00 00 80 3f 00 ff 07 00 00 00 80 0f 00     ......?.........
    604c:	fc 01 00 00 00 80 01 00 00 00 00 00                 ............

00006058 <chr_H_36>:
	...
    6060:	00 00 00 c0 ff 03 00 00 00 00 00 f8 ff 0f 00 00     ................
    6070:	00 00 00 fe ff 3f 00 00 00 00 80 ff ff 7f 00 00     .....?..........
    6080:	00 00 c0 ff ff ff 00 00 00 00 e0 ff ff ff 01 00     ................
    6090:	00 00 f0 ff ff ff 01 00 00 00 f8 ff ff ff 03 00     ................
    60a0:	00 00 fc 7f 00 e0 03 00 00 00 fc 23 00 80 03 00     ...........#....
    60b0:	00 00 7e 30 00 00 03 00 00 00 3e 70 00 00 03 00     ..~0......>p....
    60c0:	00 00 0f 70 00 00 03 00 00 00 07 f0 01 80 03 00     ...p............
    60d0:	00 00 03 f0 ff ff 01 00 00 80 03 f0 ff ff 01 00     ................
    60e0:	00 80 01 e0 ff ff 00 00 00 80 01 e0 ff 7f 00 00     ................
    60f0:	00 80 00 c0 ff 7f 00 00 00 80 00 80 ff 3f 00 00     .............?..
    6100:	00 80 00 00 ff 0f 00 00 00 00 00 00 fc 03 00 00     ................

00006110 <chr_H_37>:
	...
    6120:	00 00 c0 03 00 00 00 00 00 00 fc 01 00 00 00 00     ................
    6130:	00 80 7f 00 00 00 00 00 00 80 7f 00 00 00 00 00     ................
    6140:	00 80 3f 00 00 00 00 00 00 80 3f 00 00 00 00 00     ..?.......?.....
    6150:	00 80 3f 00 00 00 01 00 00 80 3f 00 00 c0 01 00     ..?.......?.....
    6160:	00 80 3f 00 00 f8 01 00 00 80 3f 00 00 ff 01 00     ..?.......?.....
    6170:	00 80 3f 00 e0 ff 01 00 00 80 3f 00 fc 7f 00 00     ..?.......?.....
    6180:	00 80 3f 80 ff 0f 00 00 00 80 3f e0 ff 01 00 00     ..?.......?.....
    6190:	00 80 3f fc 3f 00 00 00 00 80 bf ff 07 00 00 00     ..?.?...........
    61a0:	00 80 ff ff 00 00 00 00 00 80 ff 1f 00 00 00 00     ................
    61b0:	00 80 ff 03 00 00 00 00 00 80 7f 00 00 00 00 00     ................
    61c0:	00 80 0f 00 00 00 00 00 00 80 01 00 00 00 00 00     ................

000061d0 <chr_H_38>:
	...
    61dc:	c0 0f 00 00 00 00 e0 07 f0 3f 00 00 00 00 f8 1f     .........?......
    61ec:	f8 7f 00 00 00 00 fc 3f fc ff 00 00 00 00 fe 7f     .......?........
    61fc:	fc ff 01 00 00 00 fe ff fe ff 01 00 00 00 ff ff     ................
    620c:	1e f0 03 00 00 00 87 ff 07 c0 03 00 00 80 03 fe     ................
    621c:	03 80 03 00 00 80 01 fe 03 00 03 00 00 80 01 fc     ................
    622c:	07 00 03 00 00 80 01 f8 0f 00 03 00 00 80 01 f0     ................
    623c:	1f 00 03 00 00 80 03 f8 3f 80 03 00 00 80 0f fc     ........?.......
    624c:	ff c0 01 00 00 00 ff df ff ff 01 00 00 00 ff df     ................
    625c:	ff ff 00 00 00 00 fe 8f ff ff 00 00 00 00 fe 07     ................
    626c:	ff 7f 00 00 00 00 fc 07 fe 3f 00 00 00 00 f0 01     .........?......
    627c:	fc 1f 00 00 00 00 00 00 f0 07 00 00                 ............

00006288 <chr_H_39>:
	...
    6290:	00 00 80 7f 00 00 00 00 00 00 f0 ff 01 00 02 00     ................
    62a0:	00 00 f8 ff 03 00 02 00 00 00 fc ff 07 00 02 00     ................
    62b0:	00 00 fe ff 0f 00 03 00 00 00 ff ff 0f 00 03 00     ................
    62c0:	00 00 ff ff 1f 80 03 00 00 00 ff ff 1f 80 01 00     ................
    62d0:	00 80 03 00 1f c0 01 00 00 80 01 00 1c e0 01 00     ................
    62e0:	00 80 01 00 1c f8 00 00 00 80 01 00 18 fc 00 00     ................
    62f0:	00 80 03 00 88 7f 00 00 00 80 0f 00 fc 7f 00 00     ................
    6300:	00 80 ff ff ff 3f 00 00 00 00 ff ff ff 1f 00 00     .....?..........
    6310:	00 00 ff ff ff 0f 00 00 00 00 fe ff ff 07 00 00     ................
    6320:	00 00 fc ff ff 03 00 00 00 00 f8 ff ff 00 00 00     ................
    6330:	00 00 e0 ff 3f 00 00 00 00 00 80 ff 07 00 00 00     ....?...........

00006340 <chr_H_3A>:
	...
    6358:	00 00 00 f0 00 f0 00 00 00 00 00 f8 01 f8 01 00     ................
    6368:	00 00 00 fc 03 fc 03 00 00 00 00 fc 03 fc 03 00     ................
    6378:	00 00 00 fc 03 fc 03 00 00 00 00 fc 03 fc 03 00     ................
    6388:	00 00 00 f8 01 f8 01 00 00 00 00 f0 00 f0 00 00     ................

00006398 <chr_H_3B>:
	...
    63b0:	00 00 00 f0 00 f0 00 02 00 00 00 f8 01 f8 01 01     ................
    63c0:	00 00 00 fc 03 fc 83 01 00 00 00 fc 03 fc c3 00     ................
    63d0:	00 00 00 fc 03 fc 73 00 00 00 00 fc 03 fc 3f 00     ......s.......?.
    63e0:	00 00 00 f8 01 f8 1f 00 00 00 00 f0 00 f0 07 00     ................

000063f0 <chr_H_3C>:
	...
    6444:	0f 00 00 00 00 00 00 80 1f 00 00 00 00 00 00 80     ................
    6454:	1f 00 00 00 00 00 00 c0 3f 00 00 00 00 00 00 c0     ........?.......
    6464:	3f 00 00 00 00 00 00 c0 3f 00 00 00 00 00 00 e0     ?.......?.......
    6474:	7f 00 00 00 00 00 00 e0 7b 00 00 00 00 00 00 f0     ........{.......
    6484:	f9 00 00 00 00 00 00 f0 f9 00 00 00 00 00 00 f0     ................
    6494:	f0 01 00 00 00 00 00 f8 f0 01 00 00 00 00 00 f8     ................
    64a4:	f0 01 00 00 00 00 00 7c e0 03 00 00 00 00 00 7c     .......|.......|
    64b4:	e0 03 00 00 00 00 00 3c c0 07 00 00 00 00 00 3e     .......<.......>
    64c4:	c0 07 00 00 00 00 00 3e c0 07 00 00 00 00 00 1f     .......>........
    64d4:	80 0f 00 00 00 00 00 1f 80 0f 00 00 00 00 00 0f     ................
    64e4:	00 1f 00 00 00 00 80 0f 00 1f 00 00 00 00 80 0f     ................
    64f4:	00 1f 00 00 00 00 c0 07 00 3e 00 00 00 00 c0 07     .........>......
    6504:	00 3e 00 00 00 00 c0 03 00 7c 00 00 00 00 e0 03     .>.......|......
    6514:	00 7c 00 00 00 00 e0 03 00 7c 00 00 00 00 f0 01     .|.......|......
    6524:	00 f8 00 00                                         ....

00006528 <chr_H_3D>:
	...
    6578:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6588:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6598:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    65a8:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    65b8:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    65c8:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    65d8:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    65e8:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    65f8:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6608:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6618:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6628:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6638:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6648:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6658:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....

00006668 <chr_H_3E>:
	...
    66c0:	00 00 f0 01 00 f8 00 00 00 00 e0 03 00 7c 00 00     .............|..
    66d0:	00 00 e0 03 00 7c 00 00 00 00 c0 03 00 3c 00 00     .....|.......<..
    66e0:	00 00 c0 07 00 3e 00 00 00 00 c0 07 00 3e 00 00     .....>.......>..
    66f0:	00 00 80 0f 00 1f 00 00 00 00 80 0f 00 1f 00 00     ................
    6700:	00 00 00 0f 00 0f 00 00 00 00 00 1f 80 0f 00 00     ................
    6710:	00 00 00 1f 80 0f 00 00 00 00 00 3e c0 07 00 00     ...........>....
    6720:	00 00 00 3e c0 07 00 00 00 00 00 3c c0 03 00 00     ...>.......<....
    6730:	00 00 00 7c e0 03 00 00 00 00 00 7c e0 03 00 00     ...|.......|....
    6740:	00 00 00 f8 f0 01 00 00 00 00 00 f8 f0 01 00 00     ................
    6750:	00 00 00 f0 f0 00 00 00 00 00 00 f0 f9 00 00 00     ................
    6760:	00 00 00 f0 f9 00 00 00 00 00 00 e0 7f 00 00 00     ................
    6770:	00 00 00 e0 7f 00 00 00 00 00 00 c0 3f 00 00 00     ............?...
    6780:	00 00 00 c0 3f 00 00 00 00 00 00 c0 3f 00 00 00     ....?.......?...
    6790:	00 00 00 80 1f 00 00 00 00 00 00 80 1f 00 00 00     ................
    67a0:	00 00 00 00 0f 00 00 00                             ........

000067a8 <chr_H_3F>:
	...
    67b8:	00 00 f8 00 00 00 00 00 00 00 fe 01 00 00 00 00     ................
    67c8:	00 00 fe 03 00 00 00 00 00 00 ff 03 00 00 00 00     ................
    67d8:	00 00 ff 03 00 00 00 00 00 80 f1 03 00 f0 00 00     ................
    67e8:	00 80 e1 01 00 f8 01 00 00 80 01 00 00 fc 03 00     ................
    67f8:	00 80 01 00 3f fc 03 00 00 80 01 c0 3f fc 03 00     ....?.......?...
    6808:	00 80 03 f0 01 fc 03 00 00 80 07 fc 00 f8 01 00     ................
    6818:	00 80 ff 7f 00 f0 00 00 00 80 ff 7f 00 00 00 00     ................
    6828:	00 00 ff 3f 00 00 00 00 00 00 ff 1f 00 00 00 00     ...?............
    6838:	00 00 fe 0f 00 00 00 00 00 00 fc 07 00 00 00 00     ................
    6848:	00 00 f0 01 00 00 00 00                             ........

00006850 <chr_H_40>:
	...
    6870:	00 00 00 80 ff 00 00 00 00 00 00 f0 ff 07 00 00     ................
    6880:	00 00 00 fc ff 1f 00 00 00 00 00 fe ff 7f 00 00     ................
    6890:	00 00 80 7f 00 fe 00 00 00 00 c0 0f 00 f0 01 00     ................
    68a0:	00 00 e0 03 00 c0 03 00 00 00 f0 00 00 00 07 00     ................
    68b0:	00 00 78 00 00 00 0e 00 00 00 3c 00 00 00 0c 00     ..x.......<.....
    68c0:	00 00 1c 00 00 00 1c 00 00 00 0e 00 fc 01 18 00     ................
    68d0:	00 00 07 00 ff 07 30 00 00 00 03 c0 ff 0f 30 00     ......0.......0.
    68e0:	00 80 03 e0 ff 1f 60 00 00 80 01 f0 ff 1f 60 00     ......`.......`.
    68f0:	00 c0 01 f8 1f 38 60 00 00 c0 00 fc 03 30 c0 00     .....8`......0..
    6900:	00 c0 00 7c 00 30 c0 00 00 e0 00 1e 00 30 c0 00     ...|.0.......0..
    6910:	00 60 00 0e 00 10 c0 00 00 60 00 07 00 18 c0 00     .`.......`......
    6920:	00 60 00 03 00 0c c0 00 00 60 00 03 00 06 c0 00     .`.......`......
    6930:	00 60 00 03 80 03 c0 00 00 60 00 06 f0 07 c0 00     .`.......`......
    6940:	00 60 00 0e fe 1f c0 00 00 60 00 f8 ff 1f 40 00     .`.......`....@.
    6950:	00 40 00 fc ff 3f 60 00 00 c0 00 fe 7f 38 60 00     .@...?`......8`.
    6960:	00 c0 00 fe 0f 30 20 00 00 80 00 fe 00 30 30 00     .....0 ......00.
    6970:	00 80 01 1e 00 30 30 00 00 00 01 02 00 10 10 00     .....00.........
    6980:	00 00 03 00 00 18 18 00 00 00 06 00 00 0c 0c 00     ................
    6990:	00 00 06 00 00 04 0c 00 00 00 0c 00 00 06 06 00     ................
    69a0:	00 00 38 00 80 03 00 00 00 00 60 00 e0 00 00 00     ..8.......`.....
    69b0:	00 00 c0 03 78 00 00 00 00 00 00 ff 1f 00 00 00     ....x...........
    69c0:	00 00 00 f8 03 00 00 00                             ........

000069c8 <chr_H_41>:
    69c8:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00     ................
    69d8:	00 00 00 00 00 80 01 00 00 00 00 00 00 c0 01 00     ................
    69e8:	00 00 00 00 00 f0 01 00 00 00 00 00 00 fe 01 00     ................
    69f8:	00 00 00 00 80 9f 01 00 00 00 00 00 e0 03 01 00     ................
    6a08:	00 00 00 00 fc 00 01 00 00 00 00 80 ff 00 01 00     ................
    6a18:	00 00 00 e0 c7 00 00 00 00 00 00 fc c0 00 00 00     ................
    6a28:	00 00 00 3f c0 00 00 00 00 00 e0 07 c0 00 00 00     ...?............
    6a38:	00 00 fc 0f c0 00 00 00 00 00 ff 3f c0 00 00 00     ...........?....
    6a48:	00 80 ff ff c1 00 00 00 00 00 ff ff c7 00 00 00     ................
    6a58:	00 00 fc ff df 00 01 00 00 00 e0 ff ff 01 01 00     ................
    6a68:	00 00 80 ff ff 07 01 00 00 00 00 fe ff 9f 01 00     ................
    6a78:	00 00 00 f0 ff ff 01 00 00 00 00 c0 ff ff 01 00     ................
    6a88:	00 00 00 00 ff ff 01 00 00 00 00 00 f8 ff 01 00     ................
    6a98:	00 00 00 00 e0 ff 01 00 00 00 00 00 80 ff 01 00     ................
    6aa8:	00 00 00 00 00 fe 01 00 00 00 00 00 00 f8 01 00     ................
    6ab8:	00 00 00 00 00 e0 01 00 00 00 00 00 00 80 01 00     ................
    6ac8:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00     ................

00006ad8 <chr_H_42>:
	...
    6ae0:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    6af0:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    6b00:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6b10:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6b20:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6b30:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6b40:	00 80 03 c0 00 c0 01 00 00 80 01 c0 00 80 01 00     ................
    6b50:	00 80 01 c0 00 80 01 00 00 80 01 c0 00 80 01 00     ................
    6b60:	00 80 01 e0 00 80 01 00 00 80 01 e0 01 80 01 00     ................
    6b70:	00 80 03 f0 01 c0 01 00 00 80 07 fc 03 c0 01 00     ................
    6b80:	00 80 ff bf 0f f0 01 00 00 80 ff bf ff ff 01 00     ................
    6b90:	00 80 ff bf ff ff 00 00 00 00 ff 1f ff ff 00 00     ................
    6ba0:	00 00 ff 1f ff ff 00 00 00 00 fe 0f fe 7f 00 00     ................
    6bb0:	00 00 fc 07 fe 7f 00 00 00 00 f0 01 fc 3f 00 00     .............?..
    6bc0:	00 00 00 00 f8 1f 00 00 00 00 00 00 e0 07 00 00     ................

00006bd0 <chr_H_43>:
	...
    6be0:	00 00 00 f0 1f 00 00 00 00 00 00 fe ff 00 00 00     ................
    6bf0:	00 00 80 ff ff 03 00 00 00 00 e0 ff ff 0f 00 00     ................
    6c00:	00 00 f0 ff ff 1f 00 00 00 00 f8 ff ff 3f 00 00     .............?..
    6c10:	00 00 fc ff ff 7f 00 00 00 00 fc ff ff 7f 00 00     ................
    6c20:	00 00 fe ff ff ff 00 00 00 00 fe 01 00 ff 00 00     ................
    6c30:	00 00 3f 00 00 f8 01 00 00 00 0f 00 00 e0 01 00     ..?.............
    6c40:	00 00 07 00 00 c0 01 00 00 80 03 00 00 80 03 00     ................
    6c50:	00 80 03 00 00 80 03 00 00 80 01 00 00 00 03 00     ................
    6c60:	00 80 01 00 00 00 03 00 00 80 01 00 00 00 03 00     ................
    6c70:	00 80 01 00 00 00 03 00 00 80 01 00 00 00 03 00     ................
    6c80:	00 80 01 00 00 00 03 00 00 80 03 00 00 00 03 00     ................
    6c90:	00 00 03 00 00 80 01 00 00 00 07 00 00 80 01 00     ................
    6ca0:	00 00 07 00 00 c0 01 00 00 00 0e 00 00 c0 00 00     ................
    6cb0:	00 00 1e 00 00 e0 00 00 00 00 3e 00 00 70 00 00     ..........>..p..
    6cc0:	00 00 fe 00 00 38 00 00 00 00 ff 03 00 1c 00 00     .....8..........
    6cd0:	00 80 ff 07 00 0e 00 00                             ........

00006cd8 <chr_H_44>:
	...
    6ce0:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    6cf0:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    6d00:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6d10:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6d20:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6d30:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6d40:	00 80 03 00 00 c0 01 00 00 80 01 00 00 80 01 00     ................
    6d50:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    6d60:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    6d70:	00 80 01 00 00 80 01 00 00 80 03 00 00 c0 01 00     ................
    6d80:	00 80 03 00 00 c0 01 00 00 00 07 00 00 e0 00 00     ................
    6d90:	00 00 0f 00 00 f0 00 00 00 00 3f 00 00 fc 00 00     ..........?.....
    6da0:	00 00 fe 01 80 7f 00 00 00 00 fe ff ff 7f 00 00     ................
    6db0:	00 00 fc ff ff 3f 00 00 00 00 fc ff ff 3f 00 00     .....?.......?..
    6dc0:	00 00 f8 ff ff 1f 00 00 00 00 f0 ff ff 0f 00 00     ................
    6dd0:	00 00 e0 ff ff 07 00 00 00 00 80 ff ff 01 00 00     ................
    6de0:	00 00 00 fe 7f 00 00 00 00 00 00 f0 0f 00 00 00     ................

00006df0 <chr_H_45>:
	...
    6df8:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    6e08:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    6e18:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6e28:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6e38:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6e48:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6e58:	00 80 03 80 01 c0 01 00 00 80 01 80 01 80 01 00     ................
    6e68:	00 80 01 80 01 80 01 00 00 80 01 80 01 80 01 00     ................
    6e78:	00 80 01 c0 03 80 01 00 00 80 01 c0 03 80 01 00     ................
    6e88:	00 80 01 f0 0f 80 01 00 00 80 01 fc 3f 80 01 00     ............?...
    6e98:	00 80 81 ff ff 81 01 00 00 80 03 00 00 80 01 00     ................
    6ea8:	00 80 03 00 00 80 01 00 00 80 07 00 00 c0 01 00     ................
    6eb8:	00 80 07 00 00 c0 01 00 00 80 1f 00 00 e0 01 00     ................
    6ec8:	00 80 ff 00 00 f0 01 00 00 80 ff 03 00 f8 01 00     ................
    6ed8:	00 00 00 00 00 fe 01 00 00 00 00 00 00 3f 00 00     .............?..
    6ee8:	00 00 00 00 80 07 00 00                             ........

00006ef0 <chr_H_46>:
	...
    6ef8:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    6f08:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    6f18:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6f28:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6f38:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6f48:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    6f58:	00 80 03 80 01 80 01 00 00 80 01 80 01 80 01 00     ................
    6f68:	00 80 01 80 01 00 01 00 00 80 01 80 01 00 01 00     ................
    6f78:	00 80 01 c0 03 00 01 00 00 80 01 c0 03 00 00 00     ................
    6f88:	00 80 01 f0 0f 00 00 00 00 80 01 fc 3f 00 00 00     ............?...
    6f98:	00 80 81 ff ff 01 00 00 00 80 03 00 00 00 00 00     ................
    6fa8:	00 80 03 00 00 00 00 00 00 80 07 00 00 00 00 00     ................
    6fb8:	00 80 07 00 00 00 00 00 00 80 1f 00 00 00 00 00     ................
    6fc8:	00 80 ff 00 00 00 00 00 00 80 ff 03 00 00 00 00     ................

00006fd8 <chr_H_47>:
	...
    6fe8:	00 00 00 f0 1f 00 00 00 00 00 00 fe ff 00 00 00     ................
    6ff8:	00 00 80 ff ff 03 00 00 00 00 e0 ff ff 0f 00 00     ................
    7008:	00 00 f0 ff ff 1f 00 00 00 00 f8 ff ff 3f 00 00     .............?..
    7018:	00 00 fc ff ff 7f 00 00 00 00 fc ff ff 7f 00 00     ................
    7028:	00 00 fe ff ff ff 00 00 00 00 fe 01 00 ff 00 00     ................
    7038:	00 00 3f 00 00 f8 01 00 00 00 0f 00 00 e0 01 00     ..?.............
    7048:	00 00 07 00 00 c0 01 00 00 80 03 00 00 80 03 00     ................
    7058:	00 80 03 00 00 80 03 00 00 80 01 00 00 00 03 00     ................
    7068:	00 80 01 00 00 00 03 00 00 80 01 00 00 00 03 00     ................
    7078:	00 80 01 00 08 00 03 00 00 80 01 00 08 00 03 00     ................
    7088:	00 80 03 00 08 00 03 00 00 00 03 00 18 80 03 00     ................
    7098:	00 00 07 00 18 c0 01 00 00 00 07 00 f8 ff 01 00     ................
    70a8:	00 00 0e 00 f8 ff 01 00 00 00 1e 00 f8 ff 01 00     ................
    70b8:	00 00 3e 00 f8 ff 00 00 00 00 fe 00 f8 ff 00 00     ..>.............
    70c8:	00 00 ff 03 f8 ff 00 00 00 80 ff 07 f8 7f 00 00     ................
    70d8:	00 00 00 00 f8 7f 00 00 00 00 00 00 18 00 00 00     ................
    70e8:	00 00 00 00 18 00 00 00 00 00 00 00 08 00 00 00     ................
    70f8:	00 00 00 00 08 00 00 00                             ........

00007100 <chr_H_48>:
	...
    7108:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    7118:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7128:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7138:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7148:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7158:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7168:	00 80 01 c0 00 80 01 00 00 80 01 c0 00 80 01 00     ................
    7178:	00 80 00 c0 00 00 01 00 00 80 00 c0 00 00 01 00     ................
    7188:	00 00 00 c0 00 00 00 00 00 00 00 c0 00 00 00 00     ................
    7198:	00 00 00 c0 00 00 00 00 00 00 00 c0 00 00 00 00     ................
    71a8:	00 80 00 c0 00 00 01 00 00 80 00 c0 00 00 01 00     ................
    71b8:	00 80 01 c0 00 80 01 00 00 80 01 c0 00 80 01 00     ................
    71c8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    71d8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    71e8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    71f8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7208:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7218:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................

00007228 <chr_H_49>:
	...
    7230:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    7240:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7250:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7260:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7270:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7280:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7290:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    72a0:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................

000072b0 <chr_H_4A>:
    72b0:	00 00 00 00 00 e0 03 00 00 00 00 00 00 f0 07 00     ................
    72c0:	00 00 00 00 00 f8 0f 00 00 00 00 00 00 f8 1f 00     ................
    72d0:	00 00 00 00 00 f8 1f 00 00 00 00 00 00 f0 3f 00     ..............?.
    72e0:	00 00 00 00 00 e0 33 00 00 80 00 00 00 00 30 00     ......3.......0.
    72f0:	00 80 00 00 00 00 30 00 00 80 01 00 00 00 30 00     ......0.......0.
    7300:	00 80 01 00 00 00 38 00 00 80 ff ff ff ff 3f 00     ......8.......?.
    7310:	00 80 ff ff ff ff 3f 00 00 80 ff ff ff ff 1f 00     ......?.........
    7320:	00 80 ff ff ff ff 1f 00 00 80 ff ff ff ff 1f 00     ................
    7330:	00 80 ff ff ff ff 0f 00 00 80 ff ff ff ff 07 00     ................
    7340:	00 80 ff ff ff ff 00 00 00 80 01 00 00 00 00 00     ................
    7350:	00 80 01 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    7360:	00 80 00 00 00 00 00 00                             ........

00007368 <chr_H_4B>:
	...
    7370:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    7380:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7390:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    73a0:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    73b0:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    73c0:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    73d0:	00 80 01 80 03 80 01 00 00 80 01 c0 01 80 01 00     ................
    73e0:	00 80 00 e0 07 00 01 00 00 80 00 f0 0f 00 01 00     ................
    73f0:	00 00 00 f8 1f 00 00 00 00 00 00 fc 7f 00 00 00     ................
    7400:	00 00 00 fe ff 00 00 00 00 00 00 e7 ff 01 00 00     ................
    7410:	00 80 80 c3 ff 03 00 00 00 80 c0 81 ff 0f 01 00     ................
    7420:	00 80 e0 00 fe 1f 01 00 00 80 71 00 fc ff 01 00     ..........q.....
    7430:	00 80 3d 00 f8 ff 01 00 00 80 1f 00 f0 ff 01 00     ..=.............
    7440:	00 80 0f 00 c0 ff 01 00 00 80 07 00 80 ff 01 00     ................
    7450:	00 80 03 00 00 ff 01 00 00 80 01 00 00 fc 01 00     ................
    7460:	00 80 01 00 00 f8 01 00 00 80 00 00 00 f0 01 00     ................
    7470:	00 80 00 00 00 e0 01 00 00 80 00 00 00 c0 01 00     ................
    7480:	00 00 00 00 00 80 01 00 00 00 00 00 00 80 01 00     ................
    7490:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00     ................

000074a0 <chr_H_4C>:
	...
    74a8:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    74b8:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    74c8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    74d8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    74e8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    74f8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7508:	00 80 01 00 00 c0 01 00 00 80 01 00 00 80 01 00     ................
    7518:	00 80 00 00 00 80 01 00 00 80 00 00 00 80 01 00     ................
    7528:	00 00 00 00 00 80 01 00 00 00 00 00 00 80 01 00     ................
    7538:	00 00 00 00 00 80 01 00 00 00 00 00 00 80 01 00     ................
    7548:	00 00 00 00 00 80 01 00 00 00 00 00 00 80 01 00     ................
    7558:	00 00 00 00 00 80 01 00 00 00 00 00 00 c0 01 00     ................
    7568:	00 00 00 00 00 c0 01 00 00 00 00 00 00 e0 01 00     ................
    7578:	00 00 00 00 00 f0 01 00 00 00 00 00 00 f8 01 00     ................
    7588:	00 00 00 00 00 fe 01 00 00 00 00 00 00 3f 00 00     .............?..
    7598:	00 00 00 00 80 07 00 00                             ........

000075a0 <chr_H_4D>:
	...
    75a8:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    75b8:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    75c8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    75d8:	00 80 0f 00 00 80 01 00 00 80 7f 00 00 80 01 00     ................
    75e8:	00 80 ff 03 00 00 01 00 00 80 ff 0f 00 00 01 00     ................
    75f8:	00 80 ff 7f 00 00 00 00 00 80 ff ff 01 00 00 00     ................
    7608:	00 00 fe ff 07 00 00 00 00 00 f8 ff 3f 00 00 00     ............?...
    7618:	00 00 e0 ff ff 00 00 00 00 00 80 ff ff 07 00 00     ................
    7628:	00 00 00 fc ff 1f 00 00 00 00 00 f0 ff 7f 00 00     ................
    7638:	00 00 00 80 ff ff 01 00 00 00 00 00 fe ff 01 00     ................
    7648:	00 00 00 00 f8 7f 00 00 00 00 00 00 c0 1f 00 00     ................
    7658:	00 00 00 00 e0 03 00 00 00 00 00 00 fc 00 00 00     ................
    7668:	00 00 00 00 1f 00 00 00 00 00 00 e0 07 00 00 00     ................
    7678:	00 00 00 f8 00 00 00 00 00 00 00 3f 00 00 00 00     ...........?....
    7688:	00 00 c0 07 00 00 01 00 00 00 f0 01 00 00 01 00     ................
    7698:	00 00 7e 00 00 80 01 00 00 80 0f 00 00 80 01 00     ..~.............
    76a8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    76b8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    76c8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    76d8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    76e8:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    76f8:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................

00007708 <chr_H_4E>:
	...
    7710:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    7720:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7730:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7740:	00 80 7f 00 00 80 01 00 00 80 ff 00 00 80 01 00     ................
    7750:	00 80 ff 03 00 00 01 00 00 80 ff 07 00 00 01 00     ................
    7760:	00 00 ff 0f 00 00 00 00 00 00 fe 1f 00 00 00 00     ................
    7770:	00 00 fc 3f 00 00 00 00 00 00 f8 ff 00 00 00 00     ...?............
    7780:	00 00 f0 ff 01 00 00 00 00 00 e0 ff 03 00 00 00     ................
    7790:	00 00 80 ff 07 00 00 00 00 00 00 ff 0f 00 00 00     ................
    77a0:	00 00 00 fe 3f 00 00 00 00 00 00 fc 7f 00 00 00     ....?...........
    77b0:	00 00 00 f8 ff 00 00 00 00 00 00 e0 ff 01 00 00     ................
    77c0:	00 00 00 c0 ff 03 00 00 00 00 00 80 ff 0f 00 00     ................
    77d0:	00 80 00 00 ff 1f 00 00 00 80 00 00 fe 3f 00 00     .............?..
    77e0:	00 80 01 00 f8 7f 00 00 00 80 01 00 f0 ff 00 00     ................
    77f0:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 03 00     ................
    7800:	00 80 01 00 00 00 00 00 00 80 01 00 00 00 00 00     ................
    7810:	00 80 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................

00007820 <chr_H_4F>:
	...
    7830:	00 00 00 f0 1f 00 00 00 00 00 00 fe ff 00 00 00     ................
    7840:	00 00 80 ff ff 03 00 00 00 00 e0 ff ff 0f 00 00     ................
    7850:	00 00 f0 ff ff 1f 00 00 00 00 f8 ff ff 3f 00 00     .............?..
    7860:	00 00 fc ff ff 7f 00 00 00 00 fc ff ff 7f 00 00     ................
    7870:	00 00 fe ff ff ff 00 00 00 00 fe 01 00 ff 00 00     ................
    7880:	00 00 3f 00 00 f8 01 00 00 00 0f 00 00 e0 01 00     ..?.............
    7890:	00 00 07 00 00 c0 01 00 00 80 03 00 00 80 03 00     ................
    78a0:	00 80 03 00 00 80 03 00 00 80 01 00 00 00 03 00     ................
    78b0:	00 80 01 00 00 00 03 00 00 80 01 00 00 00 03 00     ................
    78c0:	00 80 01 00 00 00 03 00 00 80 01 00 00 00 03 00     ................
    78d0:	00 80 03 00 00 80 03 00 00 80 03 00 00 80 03 00     ................
    78e0:	00 00 07 00 00 c0 01 00 00 00 0f 00 00 e0 01 00     ................
    78f0:	00 00 3f 00 00 f8 01 00 00 00 fe 01 00 ff 00 00     ..?.............
    7900:	00 00 fe ff ff ff 00 00 00 00 fc ff ff 7f 00 00     ................
    7910:	00 00 fc ff ff 7f 00 00 00 00 f8 ff ff 3f 00 00     .............?..
    7920:	00 00 f0 ff ff 1f 00 00 00 00 e0 ff ff 0f 00 00     ................
    7930:	00 00 80 ff ff 03 00 00 00 00 00 fe ff 00 00 00     ................
    7940:	00 00 00 f0 1f 00 00 00                             ........

00007948 <chr_H_50>:
	...
    7950:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    7960:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7970:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7980:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7990:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    79a0:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    79b0:	00 80 03 00 03 80 01 00 00 80 01 00 03 80 01 00     ................
    79c0:	00 80 01 00 03 00 01 00 00 80 01 00 03 00 01 00     ................
    79d0:	00 80 01 00 03 00 00 00 00 80 03 80 03 00 00 00     ................
    79e0:	00 80 03 80 03 00 00 00 00 80 0f e0 03 00 00 00     ................
    79f0:	00 80 ff ff 03 00 00 00 00 80 ff ff 01 00 00 00     ................
    7a00:	00 00 ff ff 01 00 00 00 00 00 ff ff 01 00 00 00     ................
    7a10:	00 00 ff ff 00 00 00 00 00 00 fe 7f 00 00 00 00     ................
    7a20:	00 00 fc 3f 00 00 00 00 00 00 f8 1f 00 00 00 00     ...?............
    7a30:	00 00 e0 07 00 00 00 00                             ........

00007a38 <chr_H_51>:
	...
    7a48:	00 00 00 f0 1f 00 00 00 00 00 00 fe ff 00 00 00     ................
    7a58:	00 00 80 ff ff 03 00 00 00 00 e0 ff ff 0f 00 00     ................
    7a68:	00 00 f0 ff ff 1f 00 00 00 00 f8 ff ff 3f 00 00     .............?..
    7a78:	00 00 fc ff ff 7f 00 00 00 00 fc ff ff 7f 00 00     ................
    7a88:	00 00 fe ff ff ff 00 00 00 00 fe 01 00 ff 00 00     ................
    7a98:	00 00 3f 00 00 f8 01 00 00 00 0f 00 00 e0 01 00     ..?.............
    7aa8:	00 00 07 00 00 c0 01 00 00 80 03 00 00 80 07 00     ................
    7ab8:	00 80 03 00 00 80 1f 00 00 80 01 00 00 00 3f 00     ..............?.
    7ac8:	00 80 01 00 00 00 7f 00 00 80 01 00 00 00 ff 00     ................
    7ad8:	00 80 01 00 00 00 ff 00 00 80 01 00 00 00 ff 01     ................
    7ae8:	00 80 03 00 00 80 ff 01 00 80 03 00 00 80 ff 01     ................
    7af8:	00 00 07 00 00 c0 f9 03 00 00 0f 00 00 e0 e1 03     ................
    7b08:	00 00 3f 00 00 f8 c1 03 00 00 fe 01 00 ff c0 03     ..?.............
    7b18:	00 00 fe ff ff ff 80 03 00 00 fc ff ff 7f 80 03     ................
    7b28:	00 00 fc ff ff 7f 00 03 00 00 f8 ff ff 3f 00 03     .............?..
    7b38:	00 00 f0 ff ff 1f 00 03 00 00 e0 ff ff 0f 00 03     ................
    7b48:	00 00 80 ff ff 03 00 03 00 00 00 fe ff 00 00 01     ................
    7b58:	00 00 00 f0 1f 00 00 01                             ........

00007b60 <chr_H_52>:
	...
    7b68:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    7b78:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7b88:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7b98:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7ba8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7bb8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7bc8:	00 80 03 80 01 80 01 00 00 80 01 80 01 80 01 00     ................
    7bd8:	00 80 01 80 03 00 01 00 00 80 01 80 0f 00 01 00     ................
    7be8:	00 80 01 80 3f 00 00 00 00 80 01 c0 ff 00 00 00     ....?...........
    7bf8:	00 80 03 c0 ff 01 00 00 00 80 03 e0 ff 07 00 00     ................
    7c08:	00 80 0f f8 ff 1f 00 00 00 80 ff ff ff 3f 00 00     .............?..
    7c18:	00 00 ff ff fe ff 00 00 00 00 ff ff fc ff 01 00     ................
    7c28:	00 00 ff 7f f0 ff 01 00 00 00 fe 7f e0 ff 01 00     ................
    7c38:	00 00 fe 3f 80 ff 01 00 00 00 fc 1f 00 ff 01 00     ...?............
    7c48:	00 00 f8 0f 00 fc 01 00 00 00 e0 03 00 f8 01 00     ................
    7c58:	00 00 00 00 00 e0 01 00 00 00 00 00 00 c0 01 00     ................
    7c68:	00 00 00 00 00 80 01 00 00 00 00 00 00 00 01 00     ................
    7c78:	00 00 00 00 00 00 01 00                             ........

00007c80 <chr_H_53>:
	...
    7c9c:	c0 ff 03 00 00 00 e0 0f c0 ff 03 00 00 00 f8 3f     ...............?
    7cac:	00 fe 00 00 00 00 fc 7f 00 f8 00 00 00 00 fe ff     ................
    7cbc:	00 f0 00 00 00 00 fe ff 01 e0 01 00 00 00 07 ff     ................
    7ccc:	03 c0 01 00 00 00 03 fe 03 80 01 00 00 80 03 fc     ................
    7cdc:	07 80 03 00 00 80 01 fc 07 00 03 00 00 80 01 f8     ................
    7cec:	0f 00 03 00 00 80 01 f8 0f 00 03 00 00 80 01 f0     ................
    7cfc:	1f 00 03 00 00 80 01 f0 1f 00 03 00 00 80 03 e0     ................
    7d0c:	3f 00 03 00 00 00 03 e0 3f 80 01 00 00 00 07 c0     ?.......?.......
    7d1c:	7f 80 01 00 00 00 0f c0 ff e0 01 00 00 00 1e 80     ................
    7d2c:	ff ff 00 00 00 00 3e 80 ff ff 00 00 00 00 fe 00     ......>.........
    7d3c:	ff 7f 00 00 00 80 ff 03 fe 3f 00 00 00 00 00 00     .........?......
    7d4c:	fc 1f 00 00 00 00 00 00 f0 07 00 00                 ............

00007d58 <chr_H_54>:
	...
    7d68:	00 80 ff 03 00 00 00 00 00 80 7f 00 00 00 00 00     ................
    7d78:	00 80 1f 00 00 00 00 00 00 80 07 00 00 00 00 00     ................
    7d88:	00 80 03 00 00 00 00 00 00 80 03 00 00 00 00 00     ................
    7d98:	00 80 01 00 00 00 01 00 00 80 01 00 00 00 01 00     ................
    7da8:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7db8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7dc8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7dd8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7de8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7df8:	00 80 01 00 00 80 01 00 00 80 01 00 00 80 01 00     ................
    7e08:	00 80 01 00 00 00 01 00 00 80 01 00 00 00 01 00     ................
    7e18:	00 80 03 00 00 00 00 00 00 80 03 00 00 00 00 00     ................
    7e28:	00 80 07 00 00 00 00 00 00 80 1f 00 00 00 00 00     ................
    7e38:	00 80 7f 00 00 00 00 00 00 80 ff 03 00 00 00 00     ................

00007e48 <chr_H_55>:
	...
    7e50:	00 80 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    7e60:	00 80 01 00 00 00 00 00 00 80 01 00 00 00 00 00     ................
    7e70:	00 80 ff ff ff 03 00 00 00 80 ff ff ff 1f 00 00     ................
    7e80:	00 80 ff ff ff 3f 00 00 00 80 ff ff ff 7f 00 00     .....?..........
    7e90:	00 80 ff ff ff ff 00 00 00 80 ff ff ff ff 00 00     ................
    7ea0:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    7eb0:	00 80 01 00 00 fc 01 00 00 80 01 00 00 e0 03 00     ................
    7ec0:	00 80 00 00 00 c0 03 00 00 80 00 00 00 c0 03 00     ................
    7ed0:	00 00 00 00 00 80 03 00 00 00 00 00 00 80 03 00     ................
    7ee0:	00 00 00 00 00 80 03 00 00 00 00 00 00 80 03 00     ................
    7ef0:	00 00 00 00 00 80 03 00 00 00 00 00 00 80 01 00     ................
    7f00:	00 00 00 00 00 80 01 00 00 00 00 00 00 c0 01 00     ................
    7f10:	00 80 00 00 00 c0 00 00 00 80 00 00 00 e0 00 00     ................
    7f20:	00 80 00 00 00 70 00 00 00 80 01 00 00 3e 00 00     .....p.......>..
    7f30:	00 80 ff ff ff 0f 00 00 00 80 ff ff ff 03 00 00     ................
    7f40:	00 80 01 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    7f50:	00 80 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................

00007f60 <chr_H_56>:
    7f60:	00 80 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    7f70:	00 80 01 00 00 00 00 00 00 80 07 00 00 00 00 00     ................
    7f80:	00 80 1f 00 00 00 00 00 00 80 7f 00 00 00 00 00     ................
    7f90:	00 80 ff 01 00 00 00 00 00 80 ff 0f 00 00 00 00     ................
    7fa0:	00 80 ff 3f 00 00 00 00 00 80 ff ff 01 00 00 00     ...?............
    7fb0:	00 80 ff ff 07 00 00 00 00 80 ff ff 1f 00 00 00     ................
    7fc0:	00 80 f1 ff ff 00 00 00 00 80 c0 ff ff 03 00 00     ................
    7fd0:	00 80 00 ff ff 0f 00 00 00 80 00 fc ff 7f 00 00     ................
    7fe0:	00 00 00 e0 ff ff 01 00 00 00 00 80 ff ff 03 00     ................
    7ff0:	00 00 00 00 fc ff 01 00 00 00 00 00 f0 7f 00 00     ................
    8000:	00 00 00 00 c0 0f 00 00 00 00 00 00 f8 01 00 00     ................
    8010:	00 00 00 00 7f 00 00 00 00 80 00 c0 0f 00 00 00     ................
    8020:	00 80 00 f8 01 00 00 00 00 80 00 7e 00 00 00 00     ...........~....
    8030:	00 80 c1 0f 00 00 00 00 00 80 ff 03 00 00 00 00     ................
    8040:	00 80 7f 00 00 00 00 00 00 80 0f 00 00 00 00 00     ................
    8050:	00 80 03 00 00 00 00 00 00 80 01 00 00 00 00 00     ................
    8060:	00 80 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................

00008070 <chr_H_57>:
    8070:	00 80 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    8080:	00 80 01 00 00 00 00 00 00 80 07 00 00 00 00 00     ................
    8090:	00 80 3f 00 00 00 00 00 00 80 ff 01 00 00 00 00     ..?.............
    80a0:	00 80 ff 0f 00 00 00 00 00 80 ff 7f 00 00 00 00     ................
    80b0:	00 80 ff ff 03 00 00 00 00 80 ff ff 1f 00 00 00     ................
    80c0:	00 80 ff ff ff 00 00 00 00 80 f9 ff ff 07 00 00     ................
    80d0:	00 80 c0 ff ff 3f 00 00 00 80 00 fe ff ff 00 00     .....?..........
    80e0:	00 80 00 f0 ff ff 03 00 00 00 00 80 ff ff 03 00     ................
    80f0:	00 00 00 00 fc 7f 00 00 00 00 00 00 e0 1f 00 00     ................
    8100:	00 80 00 00 f0 03 00 00 00 80 00 00 fe 00 00 00     ................
    8110:	00 80 00 80 1f 00 00 00 00 80 01 f0 03 00 00 00     ................
    8120:	00 80 07 fc 00 00 00 00 00 80 1f 1f 00 00 00 00     ................
    8130:	00 80 ff 07 00 00 00 00 00 80 ff 0f 00 00 00 00     ................
    8140:	00 80 ff 7f 00 00 00 00 00 80 ff ff 01 00 00 00     ................
    8150:	00 80 ff ff 0f 00 00 00 00 80 ff ff 7f 00 00 00     ................
    8160:	00 80 f8 ff ff 03 00 00 00 80 c0 ff ff 1f 00 00     ................
    8170:	00 80 00 ff ff ff 00 00 00 00 00 f8 ff ff 03 00     ................
    8180:	00 00 00 c0 ff ff 03 00 00 00 00 00 fe 7f 00 00     ................
    8190:	00 00 00 00 e0 0f 00 00 00 00 00 00 f8 01 00 00     ................
    81a0:	00 00 00 80 3f 00 00 00 00 80 00 f0 07 00 00 00     ....?...........
    81b0:	00 80 00 fe 00 00 00 00 00 80 c1 1f 00 00 00 00     ................
    81c0:	00 80 ff 03 00 00 00 00 00 80 7f 00 00 00 00 00     ................
    81d0:	00 80 0f 00 00 00 00 00 00 80 03 00 00 00 00 00     ................
    81e0:	00 80 01 00 00 00 00 00 00 80 00 00 00 00 00 00     ................

000081f0 <chr_H_58>:
	...
    81f8:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    8208:	00 80 01 00 00 80 01 00 00 80 03 00 00 80 01 00     ................
    8218:	00 80 07 00 00 c0 01 00 00 80 1f 00 00 e0 01 00     ................
    8228:	00 80 3f 00 00 f0 01 00 00 80 ff 00 00 fc 01 00     ..?.............
    8238:	00 80 ff 01 00 9e 01 00 00 80 ff 07 80 07 01 00     ................
    8248:	00 80 ff 1f c0 03 01 00 00 80 ff 3f f0 00 01 00     ...........?....
    8258:	00 80 ff ff 78 00 00 00 00 80 fd ff 1d 00 00 00     ....x...........
    8268:	00 80 f0 ff 0f 00 00 00 00 80 c0 ff 0f 00 00 00     ................
    8278:	00 80 80 ff 3f 00 00 00 00 00 00 fe ff 00 01 00     ....?...........
    8288:	00 00 00 fc ff 01 01 00 00 00 00 f8 ff 07 01 00     ................
    8298:	00 00 00 de ff 9f 01 00 00 80 00 87 ff ff 01 00     ................
    82a8:	00 80 c0 03 fe ff 01 00 00 80 e0 00 fc ff 01 00     ................
    82b8:	00 80 79 00 f0 ff 01 00 00 80 3f 00 c0 ff 01 00     ..y.......?.....
    82c8:	00 80 0f 00 80 ff 01 00 00 80 07 00 00 fe 01 00     ................
    82d8:	00 80 03 00 00 fc 01 00 00 80 01 00 00 f0 01 00     ................
    82e8:	00 80 01 00 00 e0 01 00 00 80 00 00 00 80 01 00     ................
    82f8:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................

00008308 <chr_H_59>:
    8308:	00 80 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    8318:	00 80 00 00 00 00 00 00 00 80 01 00 00 00 00 00     ................
    8328:	00 80 01 00 00 00 00 00 00 80 07 00 00 00 00 00     ................
    8338:	00 80 1f 00 00 00 00 00 00 80 7f 00 00 00 00 00     ................
    8348:	00 80 ff 01 00 00 00 00 00 80 ff 07 00 00 00 00     ................
    8358:	00 80 ff 1f 00 00 01 00 00 80 ff 7f 00 00 01 00     ................
    8368:	00 80 ff ff 01 80 01 00 00 80 f8 ff 07 80 01 00     ................
    8378:	00 80 e0 ff ff ff 01 00 00 80 80 ff ff ff 01 00     ................
    8388:	00 00 00 fe ff ff 01 00 00 00 00 f8 ff ff 01 00     ................
    8398:	00 00 00 e0 ff ff 01 00 00 00 00 80 ff ff 01 00     ................
    83a8:	00 00 00 00 ff ff 01 00 00 00 00 80 ff ff 01 00     ................
    83b8:	00 00 00 e0 03 80 01 00 00 00 00 f8 00 80 01 00     ................
    83c8:	00 00 00 3e 00 00 01 00 00 80 80 0f 00 00 01 00     ...>............
    83d8:	00 80 e0 03 00 00 00 00 00 80 f9 00 00 00 00 00     ................
    83e8:	00 80 3f 00 00 00 00 00 00 80 0f 00 00 00 00 00     ..?.............
    83f8:	00 80 07 00 00 00 00 00 00 80 03 00 00 00 00 00     ................
    8408:	00 80 01 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    8418:	00 80 00 00 00 00 00 00                             ........

00008420 <chr_H_5A>:
	...
    8434:	00 00 01 00 00 00 00 00 00 c0 01 00 00 00 f8 03     ................
    8444:	00 f0 01 00 00 80 ff 00 00 f8 01 00 00 80 3f 00     ..............?.
    8454:	00 fe 01 00 00 80 0f 00 80 ff 01 00 00 80 07 00     ................
    8464:	c0 ff 01 00 00 80 03 00 f0 ff 01 00 00 80 03 00     ................
    8474:	fc ff 01 00 00 80 01 00 fe ff 01 00 00 80 01 80     ................
    8484:	ff bf 01 00 00 80 01 e0 ff 8f 01 00 00 80 01 f0     ................
    8494:	ff 87 01 00 00 80 01 fc ff 81 01 00 00 80 01 fe     ................
    84a4:	7f 80 01 00 00 80 81 ff 3f 80 01 00 00 80 e1 ff     ........?.......
    84b4:	0f 80 01 00 00 80 f1 ff 03 80 01 00 00 80 fd ff     ................
    84c4:	01 80 01 00 00 80 ff 7f 00 80 01 00 00 80 ff 3f     ...............?
    84d4:	00 80 01 00 00 80 ff 0f 00 80 01 00 00 80 ff 03     ................
    84e4:	00 c0 01 00 00 80 ff 01 00 c0 01 00 00 80 7f 00     ................
    84f4:	00 e0 01 00 00 80 1f 00 00 f0 01 00 00 80 0f 00     ................
    8504:	00 f8 01 00 00 80 03 00 00 fe 01 00 00 80 00 00     ................
    8514:	80 1f 00 00                                         ....

00008518 <chr_H_5B>:
	...
    8550:	00 80 ff ff ff ff ff 01 00 80 ff ff ff ff ff 01     ................
    8560:	00 80 ff ff ff ff ff 01 00 80 ff ff ff ff ff 01     ................
    8570:	00 80 ff ff ff ff ff 01 00 80 03 00 00 00 c0 01     ................
    8580:	00 80 01 00 00 00 80 01 00 80 01 00 00 00 80 01     ................
    8590:	00 80 01 00 00 00 80 01 00 80 01 00 00 00 80 01     ................
    85a0:	00 80 01 00 00 00 80 01 00 80 01 00 00 00 80 01     ................

000085b0 <chr_H_5C>:
	...
    85b8:	00 60 00 00 00 00 00 00 00 f0 01 00 00 00 00 00     .`..............
    85c8:	00 f0 0f 00 00 00 00 00 00 f8 3f 00 00 00 00 00     ..........?.....
    85d8:	00 e0 ff 01 00 00 00 00 00 80 ff 07 00 00 00 00     ................
    85e8:	00 00 fc 3f 00 00 00 00 00 00 f0 ff 00 00 00 00     ...?............
    85f8:	00 00 80 ff 07 00 00 00 00 00 00 fe 1f 00 00 00     ................
    8608:	00 00 00 f0 7f 00 00 00 00 00 00 c0 ff 03 00 00     ................
    8618:	00 00 00 00 fe 0f 00 00 00 00 00 00 f8 7f 00 00     ................
    8628:	00 00 00 00 e0 ff 01 00 00 00 00 00 00 ff 0f 00     ................
    8638:	00 00 00 00 00 fc 3f 00 00 00 00 00 00 e0 ff 01     ......?.........
    8648:	00 00 00 00 00 80 ff 07 00 00 00 00 00 00 fc 1f     ................
    8658:	00 00 00 00 00 00 f0 0f 00 00 00 00 00 00 80 0f     ................
    8668:	00 00 00 00 00 00 00 06                             ........

00008670 <chr_H_5D>:
	...
    8688:	00 80 01 00 00 00 c0 00 00 80 01 00 00 00 c0 00     ................
    8698:	00 80 01 00 00 00 c0 00 00 80 01 00 00 00 c0 00     ................
    86a8:	00 80 01 00 00 00 c0 00 00 80 03 00 00 00 e0 00     ................
    86b8:	00 80 ff ff ff ff ff 00 00 80 ff ff ff ff ff 00     ................
    86c8:	00 80 ff ff ff ff ff 00 00 80 ff ff ff ff ff 00     ................
    86d8:	00 80 ff ff ff ff ff 00                             ........

000086e0 <chr_H_5E>:
	...
    8730:	00 00 00 02 00 00 00 00 00 00 00 03 00 00 00 00     ................
    8740:	00 00 80 03 00 00 00 00 00 00 c0 01 00 00 00 00     ................
    8750:	00 00 e0 01 00 00 00 00 00 00 f0 00 00 00 00 00     ................
    8760:	00 00 78 00 00 00 00 00 00 00 3c 00 00 00 00 00     ..x.......<.....
    8770:	00 00 3e 00 00 00 00 00 00 80 1f 00 00 00 00 00     ..>.............
    8780:	00 c0 0f 00 00 00 00 00 00 e0 0f 00 00 00 00 00     ................
    8790:	00 f0 07 00 00 00 00 00 00 f0 03 00 00 00 00 00     ................
    87a0:	00 f0 01 00 00 00 00 00 00 f0 01 00 00 00 00 00     ................
    87b0:	00 f0 03 00 00 00 00 00 00 f0 07 00 00 00 00 00     ................
    87c0:	00 e0 0f 00 00 00 00 00 00 c0 0f 00 00 00 00 00     ................
    87d0:	00 80 1f 00 00 00 00 00 00 00 3e 00 00 00 00 00     ..........>.....
    87e0:	00 00 3c 00 00 00 00 00 00 00 78 00 00 00 00 00     ..<.......x.....
    87f0:	00 00 f0 00 00 00 00 00 00 00 e0 01 00 00 00 00     ................
    8800:	00 00 c0 01 00 00 00 00 00 00 80 03 00 00 00 00     ................
    8810:	00 00 00 03 00 00 00 00 00 00 00 02 00 00 00 00     ................

00008820 <chr_H_5F>:
    8820:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    8830:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    8840:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    8850:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    8860:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    8870:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    8880:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    8890:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    88a0:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    88b0:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    88c0:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    88d0:	00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 1f     ................
    88e0:	00 00 00 00 00 00 00 1f                             ........

000088e8 <chr_H_60>:
	...
    8900:	00 00 c0 1f 00 00 00 00 00 00 f0 3f 00 00 00 00     ...........?....
    8910:	00 00 f8 7f 00 00 00 00 00 00 9c 7f 00 00 00 00     ................
    8920:	00 00 86 7f 00 00 00 00 00 00 83 7f 00 00 00 00     ................
    8930:	00 00 01 3f 00 00 00 00 00 80 00 1e 00 00 00 00     ...?............

00008940 <chr_H_61>:
	...
    8954:	00 78 00 00 00 00 00 c0 03 fe 01 00 00 00 00 f0     .x..............
    8964:	07 ff 01 00 00 00 00 f0 87 ff 03 00 00 00 00 f8     ................
    8974:	87 ff 03 00 00 00 00 d8 c7 ff 03 00 00 00 00 8c     ................
    8984:	c3 ff 03 00 00 00 00 0c c0 c1 03 00 00 00 00 0c     ................
    8994:	e0 80 03 00 00 00 00 0c 60 80 01 00 00 00 00 0c     ........`.......
    89a4:	60 80 01 00 00 00 00 0c 30 c0 00 00 00 00 00 1c     `.......0.......
    89b4:	30 60 00 00 00 00 00 fc ff ff 00 00 00 00 00 f8     0`..............
    89c4:	ff ff 01 00 00 00 00 f8 ff ff 03 00 00 00 00 f8     ................
    89d4:	ff ff 03 00 00 00 00 f0 ff ff 03 00 00 00 00 e0     ................
    89e4:	ff ff 03 00 00 00 00 80 ff ff 03 00 00 00 00 00     ................
    89f4:	00 80 01 00 00 00 00 00 00 80 01 00 00 00 00 00     ................
    8a04:	00 80 00 00                                         ....

00008a08 <chr_H_62>:
	...
    8a10:	00 80 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    8a20:	00 80 01 00 00 00 00 00 00 80 ff ff ff ff 03 00     ................
    8a30:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    8a40:	00 80 ff ff ff ff 00 00 00 80 ff ff ff 7f 00 00     ................
    8a50:	00 80 ff ff ff ff 00 00 00 80 ff ff ff ff 01 00     ................
    8a60:	00 00 00 e0 00 e0 01 00 00 00 00 30 00 80 03 00     ...........0....
    8a70:	00 00 00 18 00 00 03 00 00 00 00 18 00 00 03 00     ................
    8a80:	00 00 00 1c 00 00 03 00 00 00 00 1c 00 80 03 00     ................
    8a90:	00 00 00 3c 00 c0 03 00 00 00 00 fc 00 f0 01 00     ...<............
    8aa0:	00 00 00 fc ff ff 01 00 00 00 00 f8 ff ff 00 00     ................
    8ab0:	00 00 00 f8 ff ff 00 00 00 00 00 f0 ff 7f 00 00     ................
    8ac0:	00 00 00 f0 ff 1f 00 00 00 00 00 c0 ff 0f 00 00     ................
    8ad0:	00 00 00 00 ff 01 00 00                             ........

00008ad8 <chr_H_63>:
	...
    8aec:	f8 01 00 00 00 00 00 00 ff 0f 00 00 00 00 00 c0     ................
    8afc:	ff 3f 00 00 00 00 00 e0 ff 7f 00 00 00 00 00 f0     .?..............
    8b0c:	ff ff 00 00 00 00 00 f0 ff ff 01 00 00 00 00 f8     ................
    8b1c:	ff ff 01 00 00 00 00 78 00 fe 03 00 00 00 00 1c     .......x........
    8b2c:	00 f8 03 00 00 00 00 0c 00 e0 03 00 00 00 00 0c     ................
    8b3c:	00 e0 03 00 00 00 00 0c 00 c0 03 00 00 00 00 0c     ................
    8b4c:	00 c0 03 00 00 00 00 fc 03 c0 01 00 00 00 00 f8     ................
    8b5c:	07 c0 01 00 00 00 00 f8 07 e0 00 00 00 00 00 f0     ................
    8b6c:	07 60 00 00 00 00 00 f0 07 30 00 00 00 00 00 c0     .`.......0......
    8b7c:	03 18 00 00                                         ....

00008b80 <chr_H_64>:
	...
    8b94:	fc 03 00 00 00 00 00 80 ff 1f 00 00 00 00 00 e0     ................
    8ba4:	ff 7f 00 00 00 00 00 f0 ff ff 00 00 00 00 00 f8     ................
    8bb4:	ff ff 01 00 00 00 00 f8 ff ff 01 00 00 00 00 fc     ................
    8bc4:	ff ff 03 00 00 00 00 fc 00 f8 03 00 00 00 00 3c     ...............<
    8bd4:	00 e0 03 00 00 00 00 3c 00 c0 03 00 00 00 00 1c     .......<........
    8be4:	00 c0 03 00 00 00 00 18 00 80 01 00 00 80 00 38     ...............8
    8bf4:	00 c0 01 00 00 80 00 30 00 c0 00 00 00 80 01 60     .......0.......`
    8c04:	00 60 00 00 00 80 ff ff ff ff 03 00 00 80 ff ff     .`..............
    8c14:	ff ff 03 00 00 80 ff ff ff ff 01 00 00 80 ff ff     ................
    8c24:	ff ff 01 00 00 80 ff ff ff ff 01 00 00 80 ff ff     ................
    8c34:	ff ff 01 00 00 80 ff ff ff ff 00 00 00 00 00 00     ................
    8c44:	00 c0 00 00 00 00 00 00 00 80 00 00 00 00 00 00     ................
    8c54:	00 80 00 00                                         ....

00008c58 <chr_H_65>:
	...
    8c6c:	fc 01 00 00 00 00 00 80 ff 0f 00 00 00 00 00 e0     ................
    8c7c:	ff 3f 00 00 00 00 00 f0 ff 7f 00 00 00 00 00 f8     .?..............
    8c8c:	ff ff 00 00 00 00 00 f8 ff ff 01 00 00 00 00 fc     ................
    8c9c:	ff ff 01 00 00 00 00 3c 30 fe 03 00 00 00 00 0c     .......<0.......
    8cac:	30 f8 03 00 00 00 00 0c 30 e0 03 00 00 00 00 0c     0.......0.......
    8cbc:	30 e0 03 00 00 00 00 0c 30 c0 03 00 00 00 00 3c     0.......0......<
    8ccc:	30 c0 03 00 00 00 00 f8 3f c0 01 00 00 00 00 f8     0.......?.......
    8cdc:	3f c0 01 00 00 00 00 f0 3f e0 00 00 00 00 00 e0     ?.......?.......
    8cec:	3f 60 00 00 00 00 00 c0 3f 30 00 00 00 00 00 00     ?`......?0......
    8cfc:	3e 18 00 00                                         >...

00008d00 <chr_H_66>:
	...
    8d08:	00 00 00 0c 00 00 01 00 00 00 00 0c 00 00 01 00     ................
    8d18:	00 00 00 0c 00 80 01 00 00 00 f0 ff ff ff 01 00     ................
    8d28:	00 00 fc ff ff ff 01 00 00 00 fe ff ff ff 01 00     ................
    8d38:	00 00 ff ff ff ff 01 00 00 00 ff ff ff ff 01 00     ................
    8d48:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    8d58:	00 80 03 0c 00 80 01 00 00 80 01 0c 00 00 01 00     ................
    8d68:	00 80 01 0c 00 00 01 00 00 80 39 0c 00 00 01 00     ..........9.....
    8d78:	00 80 7f 00 00 00 00 00 00 00 7f 00 00 00 00 00     ................
    8d88:	00 00 7f 00 00 00 00 00 00 00 7e 00 00 00 00 00     ..........~.....
    8d98:	00 00 3c 00 00 00 00 00                             ..<.....

00008da0 <chr_H_67>:
	...
    8dac:	00 00 e0 01 00 00 00 80 0f e0 f1 03 00 00 00 e0     ................
    8dbc:	3f f0 f3 07 00 00 00 f0 7f f8 f7 07 00 00 00 f0     ?...............
    8dcc:	ff f8 ff 07 00 00 00 f8 ff fd 1f 0f 00 00 00 f8     ................
    8ddc:	ff fd 0f 0e 00 00 00 fc ff e7 0f 0e 00 00 00 3c     ...............<
    8dec:	c0 c3 0f 0c 00 00 00 0c 00 c3 0f 0c 00 00 00 0c     ................
    8dfc:	00 c3 0f 0c 00 00 00 0c 00 c3 0f 0c 00 00 00 0c     ................
    8e0c:	00 c3 0f 0c 00 00 00 3c c0 c3 0f 0c 00 00 00 f8     .......<........
    8e1c:	ff c3 0f 0c 00 00 00 f8 ff c1 0f 0c 00 00 00 f8     ................
    8e2c:	ff c1 0f 0e 00 00 00 f8 ff c0 0f 06 00 00 00 f8     ................
    8e3c:	ff c0 1f 07 00 00 00 f8 7f 80 ff 03 00 00 00 38     ...............8
    8e4c:	1f 80 ff 03 00 00 00 38 00 00 ff 01 00 00 00 38     .......8.......8
    8e5c:	00 00 7c 00                                         ..|.

00008e60 <chr_H_68>:
	...
    8e68:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    8e78:	00 80 01 00 00 80 01 00 00 80 ff ff ff ff 01 00     ................
    8e88:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    8e98:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    8ea8:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    8eb8:	00 00 00 e0 00 80 01 00 00 00 00 70 00 00 01 00     ...........p....
    8ec8:	00 00 00 38 00 00 00 00 00 00 00 38 00 00 00 00     ...8.......8....
    8ed8:	00 00 00 3c 00 00 01 00 00 00 00 7c 00 80 01 00     ...<.......|....
    8ee8:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    8ef8:	00 00 00 fc ff ff 01 00 00 00 00 f8 ff ff 01 00     ................
    8f08:	00 00 00 f8 ff ff 01 00 00 00 00 f0 ff ff 01 00     ................
    8f18:	00 00 00 c0 ff ff 01 00 00 00 00 00 00 80 01 00     ................
    8f28:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00     ................

00008f38 <chr_H_69>:
	...
    8f40:	00 00 00 04 00 00 01 00 00 00 00 04 00 00 01 00     ................
    8f50:	00 00 00 0c 00 80 01 00 00 00 0e fc ff ff 01 00     ................
    8f60:	00 00 1f fc ff ff 01 00 00 80 3f fc ff ff 01 00     ..........?.....
    8f70:	00 80 3f fc ff ff 01 00 00 80 3f fc ff ff 01 00     ..?.......?.....
    8f80:	00 00 1f fc ff ff 01 00 00 00 0e fc ff ff 01 00     ................
    8f90:	00 00 00 00 00 80 01 00 00 00 00 00 00 00 01 00     ................
    8fa0:	00 00 00 00 00 00 01 00                             ........

00008fa8 <chr_H_6A>:
    8fa8:	00 00 00 00 00 00 e0 01 00 00 00 00 00 00 f0 03     ................
    8fb8:	00 00 00 00 00 00 f0 07 00 00 00 00 00 00 f0 07     ................
    8fc8:	00 00 00 00 00 00 f0 0f 00 00 00 00 00 00 e0 0c     ................
    8fd8:	00 00 00 04 00 00 00 0c 00 00 00 04 00 00 00 0c     ................
    8fe8:	00 00 00 0c 00 00 00 0e 00 00 0e fc ff ff ff 0f     ................
    8ff8:	00 00 1f fc ff ff ff 07 00 80 3f fc ff ff ff 07     ..........?.....
    9008:	00 80 3f fc ff ff ff 03 00 80 3f fc ff ff ff 03     ..?.......?.....
    9018:	00 00 1f fc ff ff ff 01 00 00 0e fc ff ff 7f 00     ................

00009028 <chr_H_6B>:
	...
    9030:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    9040:	00 80 01 00 00 80 01 00 00 80 ff ff ff ff 01 00     ................
    9050:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    9060:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    9070:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    9080:	00 00 00 00 30 80 01 00 00 00 00 00 78 00 01 00     ....0.......x...
    9090:	00 00 00 00 fc 01 00 00 00 00 00 00 fe 03 00 00     ................
    90a0:	00 00 00 04 ff 07 00 00 00 00 00 84 fd 1f 01 00     ................
    90b0:	00 00 00 c4 f8 3f 01 00 00 00 00 6c e0 ff 01 00     .....?.....l....
    90c0:	00 00 00 3c c0 ff 01 00 00 00 00 1c 80 ff 01 00     ...<............
    90d0:	00 00 00 0c 00 fe 01 00 00 00 00 0c 00 fc 01 00     ................
    90e0:	00 00 00 04 00 f8 01 00 00 00 00 04 00 e0 01 00     ................
    90f0:	00 00 00 04 00 c0 01 00 00 00 00 00 00 80 01 00     ................
    9100:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00     ................

00009110 <chr_H_6C>:
	...
    9118:	00 80 00 00 00 00 01 00 00 80 00 00 00 00 01 00     ................
    9128:	00 80 01 00 00 80 01 00 00 80 ff ff ff ff 01 00     ................
    9138:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    9148:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    9158:	00 80 ff ff ff ff 01 00 00 80 ff ff ff ff 01 00     ................
    9168:	00 00 00 00 00 80 01 00 00 00 00 00 00 00 01 00     ................
    9178:	00 00 00 00 00 00 01 00                             ........

00009180 <chr_H_6D>:
	...
    9188:	00 00 00 04 00 00 01 00 00 00 00 04 00 00 01 00     ................
    9198:	00 00 00 0c 00 80 01 00 00 00 00 fc ff ff 01 00     ................
    91a8:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    91b8:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    91c8:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    91d8:	00 00 00 e0 00 80 01 00 00 00 00 70 00 00 01 00     ...........p....
    91e8:	00 00 00 38 00 00 00 00 00 00 00 38 00 00 00 00     ...8.......8....
    91f8:	00 00 00 3c 00 00 01 00 00 00 00 7c 00 80 01 00     ...<.......|....
    9208:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9218:	00 00 00 fc ff ff 01 00 00 00 00 f8 ff ff 01 00     ................
    9228:	00 00 00 f8 ff ff 01 00 00 00 00 f0 ff ff 01 00     ................
    9238:	00 00 00 c0 ff ff 01 00 00 00 00 e0 00 80 01 00     ................
    9248:	00 00 00 70 00 00 01 00 00 00 00 38 00 00 00 00     ...p.......8....
    9258:	00 00 00 38 00 00 00 00 00 00 00 3c 00 00 01 00     ...8.......<....
    9268:	00 00 00 7c 00 80 01 00 00 00 00 fc ff ff 01 00     ...|............
    9278:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9288:	00 00 00 f8 ff ff 01 00 00 00 00 f8 ff ff 01 00     ................
    9298:	00 00 00 f0 ff ff 01 00 00 00 00 c0 ff ff 01 00     ................
    92a8:	00 00 00 00 00 80 01 00 00 00 00 00 00 00 01 00     ................
    92b8:	00 00 00 00 00 00 01 00                             ........

000092c0 <chr_H_6E>:
	...
    92c8:	00 00 00 04 00 00 01 00 00 00 00 04 00 00 01 00     ................
    92d8:	00 00 00 0c 00 80 01 00 00 00 00 fc ff ff 01 00     ................
    92e8:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    92f8:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9308:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9318:	00 00 00 e0 00 80 01 00 00 00 00 70 00 00 01 00     ...........p....
    9328:	00 00 00 38 00 00 00 00 00 00 00 38 00 00 00 00     ...8.......8....
    9338:	00 00 00 3c 00 00 01 00 00 00 00 7c 00 80 01 00     ...<.......|....
    9348:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9358:	00 00 00 fc ff ff 01 00 00 00 00 f8 ff ff 01 00     ................
    9368:	00 00 00 f8 ff ff 01 00 00 00 00 f0 ff ff 01 00     ................
    9378:	00 00 00 c0 ff ff 01 00 00 00 00 00 00 80 01 00     ................
    9388:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00     ................

00009398 <chr_H_6F>:
	...
    93ac:	fc 03 00 00 00 00 00 00 ff 0f 00 00 00 00 00 c0     ................
    93bc:	ff 3f 00 00 00 00 00 e0 ff 7f 00 00 00 00 00 f0     .?..............
    93cc:	ff ff 00 00 00 00 00 f0 ff ff 00 00 00 00 00 f8     ................
    93dc:	ff ff 01 00 00 00 00 78 00 e0 01 00 00 00 00 1c     .......x........
    93ec:	00 80 03 00 00 00 00 0c 00 00 03 00 00 00 00 0c     ................
    93fc:	00 00 03 00 00 00 00 0c 00 00 03 00 00 00 00 0c     ................
    940c:	00 00 03 00 00 00 00 1c 00 80 03 00 00 00 00 78     ...............x
    941c:	00 e0 01 00 00 00 00 f8 ff ff 01 00 00 00 00 f0     ................
    942c:	ff ff 00 00 00 00 00 f0 ff ff 00 00 00 00 00 e0     ................
    943c:	ff 7f 00 00 00 00 00 c0 ff 3f 00 00 00 00 00 00     .........?......
    944c:	ff 0f 00 00 00 00 00 00 fc 03 00 00                 ............

00009458 <chr_H_70>:
	...
    9460:	00 00 00 04 00 00 00 04 00 00 00 04 00 00 00 04     ................
    9470:	00 00 00 0c 00 00 00 06 00 00 00 fc ff ff ff 07     ................
    9480:	00 00 00 fc ff ff ff 07 00 00 00 fc ff ff ff 07     ................
    9490:	00 00 00 fc ff ff ff 07 00 00 00 fc ff ff ff 07     ................
    94a0:	00 00 00 fc ff ff ff 07 00 00 00 fc ff ff ff 07     ................
    94b0:	00 00 00 60 00 60 00 06 00 00 00 30 00 c0 00 04     ...`.`.....0....
    94c0:	00 00 00 38 00 c0 01 04 00 00 00 18 00 80 01 04     ...8............
    94d0:	00 00 00 1c 00 c0 03 00 00 00 00 3c 00 c0 03 00     ...........<....
    94e0:	00 00 00 3c 00 e0 03 00 00 00 00 fc 00 f8 03 00     ...<............
    94f0:	00 00 00 fc ff ff 03 00 00 00 00 f8 ff ff 01 00     ................
    9500:	00 00 00 f8 ff ff 01 00 00 00 00 f0 ff ff 00 00     ................
    9510:	00 00 00 e0 ff 7f 00 00 00 00 00 80 ff 1f 00 00     ................
    9520:	00 00 00 00 fc 03 00 00                             ........

00009528 <chr_H_71>:
	...
    953c:	f8 03 00 00 00 00 00 00 ff 1f 00 00 00 00 00 c0     ................
    954c:	ff 7f 00 00 00 00 00 e0 ff ff 00 00 00 00 00 f0     ................
    955c:	ff ff 01 00 00 00 00 f8 ff ff 01 00 00 00 00 f8     ................
    956c:	ff ff 03 00 00 00 00 fc 01 f8 03 00 00 00 00 3c     ...............<
    957c:	00 c0 03 00 00 00 00 3c 00 c0 03 00 00 00 00 1c     .......<........
    958c:	00 80 03 00 00 00 00 1c 00 80 03 04 00 00 00 1c     ................
    959c:	00 80 01 04 00 00 00 18 00 c0 00 04 00 00 00 38     ...............8
    95ac:	00 e0 00 06 00 00 00 f0 ff ff ff 07 00 00 00 e0     ................
    95bc:	ff ff ff 07 00 00 00 e0 ff ff ff 07 00 00 00 f0     ................
    95cc:	ff ff ff 07 00 00 00 f0 ff ff ff 07 00 00 00 f8     ................
    95dc:	ff ff ff 07 00 00 00 fc ff ff ff 07 00 00 00 00     ................
    95ec:	00 00 00 06 00 00 00 00 00 00 00 04 00 00 00 00     ................
    95fc:	00 00 00 04                                         ....

00009600 <chr_H_72>:
	...
    9608:	00 00 00 04 00 00 01 00 00 00 00 04 00 00 01 00     ................
    9618:	00 00 00 0c 00 80 01 00 00 00 00 fc ff ff 01 00     ................
    9628:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9638:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9648:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9658:	00 00 00 80 03 80 01 00 00 00 00 e0 00 00 01 00     ................
    9668:	00 00 00 70 00 00 01 00 00 00 00 78 00 00 01 00     ...p.......x....
    9678:	00 00 00 78 00 00 00 00 00 00 00 fc 00 00 00 00     ...x............
    9688:	00 00 00 fc 01 00 00 00 00 00 00 fc 01 00 00 00     ................
    9698:	00 00 00 fc 01 00 00 00 00 00 00 f8 01 00 00 00     ................
    96a8:	00 00 00 f0 00 00 00 00                             ........

000096b0 <chr_H_73>:
	...
    96c8:	00 00 00 c0 07 fc 03 00 00 00 00 f0 1f f0 01 00     ................
    96d8:	00 00 00 f8 3f c0 01 00 00 00 00 f8 3f 80 01 00     ....?.......?...
    96e8:	00 00 00 fc 7f 80 03 00 00 00 00 1c ff 00 03 00     ................
    96f8:	00 00 00 0c fe 00 03 00 00 00 00 0c fe 01 03 00     ................
    9708:	00 00 00 0c fc 01 03 00 00 00 00 0c fc 03 03 00     ................
    9718:	00 00 00 1c f8 87 03 00 00 00 00 18 f8 ff 01 00     ................
    9728:	00 00 00 38 f0 ff 01 00 00 00 00 78 e0 ff 00 00     ...8.......x....
    9738:	00 00 00 fc e1 7f 00 00 00 00 00 00 80 1f 00 00     ................

00009748 <chr_H_74>:
	...
    9758:	00 00 00 0c 00 00 00 00 00 00 00 0e 00 00 00 00     ................
    9768:	00 00 00 ff ff 7f 00 00 00 00 80 ff ff ff 01 00     ................
    9778:	00 00 c0 ff ff ff 01 00 00 00 e0 ff ff ff 03 00     ................
    9788:	00 00 f0 ff ff ff 03 00 00 00 f8 ff ff ff 03 00     ................
    9798:	00 00 fc ff ff ff 03 00 00 00 00 0c 00 e0 03 00     ................
    97a8:	00 00 00 0c 00 c0 01 00 00 00 00 0c 00 c0 01 00     ................
    97b8:	00 00 00 0c 00 e0 00 00 00 00 00 00 00 30 00 00     .............0..

000097c8 <chr_H_75>:
	...
    97d0:	00 00 00 04 00 00 00 00 00 00 00 04 00 00 00 00     ................
    97e0:	00 00 00 0c 00 00 00 00 00 00 00 fc ff 3f 00 00     .............?..
    97f0:	00 00 00 fc ff ff 00 00 00 00 00 fc ff ff 01 00     ................
    9800:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 03 00     ................
    9810:	00 00 00 fc ff ff 03 00 00 00 00 fc ff ff 03 00     ................
    9820:	00 00 00 00 00 e0 03 00 00 00 00 00 00 c0 03 00     ................
    9830:	00 00 00 00 00 c0 01 00 00 00 00 04 00 c0 01 00     ................
    9840:	00 00 00 04 00 e0 00 00 00 00 00 0c 00 70 00 00     .............p..
    9850:	00 00 00 fc ff ff 03 00 00 00 00 fc ff ff 03 00     ................
    9860:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9870:	00 00 00 fc ff ff 01 00 00 00 00 fc ff ff 01 00     ................
    9880:	00 00 00 fc ff ff 00 00 00 00 00 00 00 c0 00 00     ................
    9890:	00 00 00 00 00 80 00 00 00 00 00 00 00 80 00 00     ................

000098a0 <chr_H_76>:
    98a0:	00 00 00 04 00 00 00 00 00 00 00 04 00 00 00 00     ................
    98b0:	00 00 00 0c 00 00 00 00 00 00 00 1c 00 00 00 00     ................
    98c0:	00 00 00 7c 00 00 00 00 00 00 00 fc 01 00 00 00     ...|............
    98d0:	00 00 00 fc 07 00 00 00 00 00 00 fc 1f 00 00 00     ................
    98e0:	00 00 00 fc 7f 00 00 00 00 00 00 fc ff 01 00 00     ................
    98f0:	00 00 00 ec ff 07 00 00 00 00 00 84 ff 1f 00 00     ................
    9900:	00 00 00 04 fe 7f 00 00 00 00 00 00 f8 ff 01 00     ................
    9910:	00 00 00 00 e0 ff 03 00 00 00 00 00 80 7f 00 00     ................
    9920:	00 00 00 00 80 0f 00 00 00 00 00 04 f0 01 00 00     ................
    9930:	00 00 00 04 3e 00 00 00 00 00 00 cc 07 00 00 00     ....>...........
    9940:	00 00 00 fc 00 00 00 00 00 00 00 3c 00 00 00 00     ...........<....
    9950:	00 00 00 0c 00 00 00 00 00 00 00 04 00 00 00 00     ................

00009960 <chr_H_77>:
    9960:	00 00 00 04 00 00 00 00 00 00 00 0c 00 00 00 00     ................
    9970:	00 00 00 3c 00 00 00 00 00 00 00 fc 01 00 00 00     ...<............
    9980:	00 00 00 fc 0f 00 00 00 00 00 00 fc 3f 00 00 00     ............?...
    9990:	00 00 00 fc ff 01 00 00 00 00 00 fc ff 0f 00 00     ................
    99a0:	00 00 00 fc ff 7f 00 00 00 00 00 ec ff ff 01 00     ................
    99b0:	00 00 00 04 ff ff 03 00 00 00 00 00 f8 ff 01 00     ................
    99c0:	00 00 00 00 c0 7f 00 00 00 00 00 04 00 0f 00 00     ................
    99d0:	00 00 00 04 e0 03 00 00 00 00 00 0c 7c 00 00 00     ............|...
    99e0:	00 00 00 3c 1f 00 00 00 00 00 00 fc 07 00 00 00     ...<............
    99f0:	00 00 00 fc 3f 00 00 00 00 00 00 fc ff 01 00 00     ....?...........
    9a00:	00 00 00 fc ff 0f 00 00 00 00 00 fc ff 7f 00 00     ................
    9a10:	00 00 00 ec ff ff 01 00 00 00 00 04 ff ff 03 00     ................
    9a20:	00 00 00 04 f8 ff 01 00 00 00 00 00 c0 7f 00 00     ................
    9a30:	00 00 00 00 00 0f 00 00 00 00 00 04 e0 03 00 00     ................
    9a40:	00 00 00 04 7c 00 00 00 00 00 00 8c 1f 00 00 00     ....|...........
    9a50:	00 00 00 fc 03 00 00 00 00 00 00 7c 00 00 00 00     ...........|....
    9a60:	00 00 00 1c 00 00 00 00 00 00 00 04 00 00 00 00     ................

00009a70 <chr_H_78>:
    9a70:	00 00 00 04 00 00 01 00 00 00 00 0c 00 00 01 00     ................
    9a80:	00 00 00 1c 00 80 01 00 00 00 00 3c 00 c0 01 00     ...........<....
    9a90:	00 00 00 fc 00 e0 01 00 00 00 00 fc 01 f0 01 00     ................
    9aa0:	00 00 00 fc 07 bc 01 00 00 00 00 fc 0f 0e 01 00     ................
    9ab0:	00 00 00 fc 3f 07 01 00 00 00 00 fc ff 03 00 00     ....?...........
    9ac0:	00 00 00 ec ff 01 00 00 00 00 00 c4 ff 03 00 00     ................
    9ad0:	00 00 00 04 ff 0f 01 00 00 00 00 00 fe 3f 01 00     .............?..
    9ae0:	00 00 00 00 fe ff 01 00 00 00 00 04 f7 ff 01 00     ................
    9af0:	00 00 00 c4 c1 ff 01 00 00 00 00 ec 80 ff 01 00     ................
    9b00:	00 00 00 7c 00 fe 01 00 00 00 00 3c 00 f8 01 00     ...|.......<....
    9b10:	00 00 00 1c 00 f0 01 00 00 00 00 0c 00 c0 01 00     ................
    9b20:	00 00 00 04 00 80 01 00 00 00 00 04 00 00 01 00     ................

00009b30 <chr_H_79>:
    9b30:	00 00 00 04 00 00 00 00 00 00 00 04 00 00 c0 03     ................
    9b40:	00 00 00 0c 00 00 e0 07 00 00 00 1c 00 00 e0 0f     ................
    9b50:	00 00 00 7c 00 00 e0 0f 00 00 00 fc 01 00 e0 0f     ...|............
    9b60:	00 00 00 fc 07 00 c0 0f 00 00 00 fc 1f 00 00 0e     ................
    9b70:	00 00 00 fc 7f 00 00 06 00 00 00 fc ff 01 00 07     ................
    9b80:	00 00 00 ec ff 07 c0 03 00 00 00 84 ff 1f f0 00     ................
    9b90:	00 00 00 04 fe 7f 3e 00 00 00 00 00 f8 ff 0f 00     ......>.........
    9ba0:	00 00 00 00 e0 ff 01 00 00 00 00 00 80 7f 00 00     ................
    9bb0:	00 00 00 00 80 0f 00 00 00 00 00 04 f0 01 00 00     ................
    9bc0:	00 00 00 04 3e 00 00 00 00 00 00 cc 07 00 00 00     ....>...........
    9bd0:	00 00 00 fc 00 00 00 00 00 00 00 3c 00 00 00 00     ...........<....
    9be0:	00 00 00 0c 00 00 00 00 00 00 00 04 00 00 00 00     ................

00009bf0 <chr_H_7A>:
	...
    9bfc:	00 80 01 00 00 00 00 fc 01 e0 01 00 00 00 00 7c     ...............|
    9c0c:	00 f0 01 00 00 00 00 3c 00 fc 01 00 00 00 00 1c     .......<........
    9c1c:	00 ff 01 00 00 00 00 1c 80 ff 01 00 00 00 00 0c     ................
    9c2c:	e0 ff 01 00 00 00 00 0c f8 ff 01 00 00 00 00 0c     ................
    9c3c:	fc ff 01 00 00 00 00 0c ff 9f 01 00 00 00 00 cc     ................
    9c4c:	ff 8f 01 00 00 00 00 fc ff 83 01 00 00 00 00 fc     ................
    9c5c:	ff 80 01 00 00 00 00 fc 7f 80 01 00 00 00 00 fc     ................
    9c6c:	1f c0 01 00 00 00 00 fc 07 c0 01 00 00 00 00 fc     ................
    9c7c:	01 e0 01 00 00 00 00 fc 00 f0 01 00 00 00 00 3c     ...............<
    9c8c:	00 fc 01 00 00 00 00 0c 00 1e 00 00                 ............

00009c98 <chr_H_7B>:
	...
    9cbc:	18 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00     ................
    9ccc:	18 00 00 00 00 00 00 00 3c 00 00 00 00 00 00 00     ........<.......
    9cdc:	3c 00 00 00 00 00 00 00 7e 00 00 00 00 00 00 80     <.......~.......
    9cec:	ff 01 00 00 00 80 ff ff ff ff ff 01 00 e0 ff ff     ................
    9cfc:	e7 ff ff 07 00 f0 ff ff c3 ff ff 0f 00 f0 ff ff     ................
    9d0c:	81 ff ff 0f 00 f8 ff 7f 00 fe ff 1f 00 38 00 00     .............8..
    9d1c:	00 00 00 1c 00 18 00 00 00 00 00 18 00 18 00 00     ................
    9d2c:	00 00 00 18 00 18 00 00 00 00 00 18                 ............

00009d38 <chr_H_7C>:
	...
    9d88:	00 f8 ff ff ff ff ff 1f 00 f8 ff ff ff ff ff 1f     ................
    9d98:	00 f8 ff ff ff ff ff 1f 00 f8 ff ff ff ff ff 1f     ................
    9da8:	00 f8 ff ff ff ff ff 1f                             ........

00009db0 <chr_H_7D>:
	...
    9dd8:	00 18 00 00 00 00 00 18 00 18 00 00 00 00 00 18     ................
    9de8:	00 18 00 00 00 00 00 18 00 38 00 00 00 00 00 1c     .........8......
    9df8:	00 f8 ff 7f 00 fe ff 1f 00 f0 ff ff 81 ff ff 0f     ................
    9e08:	00 f0 ff ff c3 ff ff 0f 00 e0 ff ff e7 ff ff 07     ................
    9e18:	00 80 ff ff ff ff ff 01 00 00 00 80 ff 01 00 00     ................
    9e28:	00 00 00 00 7e 00 00 00 00 00 00 00 3c 00 00 00     ....~.......<...
    9e38:	00 00 00 00 3c 00 00 00 00 00 00 00 18 00 00 00     ....<...........
    9e48:	00 00 00 00 18 00 00 00 00 00 00 00 18 00 00 00     ................

00009e58 <chr_H_7E>:
	...
    9ea8:	00 00 08 00 00 00 00 00 00 00 1c 00 00 00 00 00     ................
    9eb8:	00 00 0f 00 00 00 00 00 00 00 07 00 00 00 00 00     ................
    9ec8:	00 80 07 00 00 00 00 00 00 80 03 00 00 00 00 00     ................
    9ed8:	00 c0 03 00 00 00 00 00 00 c0 03 00 00 00 00 00     ................
    9ee8:	00 c0 03 00 00 00 00 00 00 c0 03 00 00 00 00 00     ................
    9ef8:	00 c0 07 00 00 00 00 00 00 c0 07 00 00 00 00 00     ................
    9f08:	00 c0 07 00 00 00 00 00 00 80 07 00 00 00 00 00     ................
    9f18:	00 80 0f 00 00 00 00 00 00 80 0f 00 00 00 00 00     ................
    9f28:	00 00 0f 00 00 00 00 00 00 00 1f 00 00 00 00 00     ................
    9f38:	00 00 1f 00 00 00 00 00 00 00 1f 00 00 00 00 00     ................
    9f48:	00 00 1e 00 00 00 00 00 00 00 1e 00 00 00 00 00     ................
    9f58:	00 00 1e 00 00 00 00 00 00 00 1e 00 00 00 00 00     ................
    9f68:	00 00 0e 00 00 00 00 00 00 00 0f 00 00 00 00 00     ................
    9f78:	00 00 07 00 00 00 00 00 00 80 07 00 00 00 00 00     ................
    9f88:	00 c0 01 00 00 00 00 00 00 80 00 00 00 00 00 00     ................

00009f98 <chrtbl_H>:
    9f98:	d0 51 38 52 98 52 08 53 30 54 e8 54 10 56 38 57     .Q8R.R.S0T.T.V8W
    9fa8:	90 57 28 58 a0 58 50 59 98 5a e8 5a 58 5b a8 5b     .W(X.XPY.Z.ZX[.[
    9fb8:	18 5c d0 5c 80 5d 38 5e e8 5e a0 5f 58 60 10 61     .\.\.]8^.^._X`.a
    9fc8:	d0 61 88 62 40 63 98 63 f0 63 28 65 68 66 a8 67     .a.b@c.c.c(ehf.g
    9fd8:	50 68 c8 69 d8 6a d0 6b d8 6c f0 6d f0 6e d8 6f     Ph.i.j.k.l.m.n.o
    9fe8:	00 71 28 72 b0 72 68 73 a0 74 a0 75 08 77 20 78     .q(r.rhs.t.u.w x
    9ff8:	48 79 38 7a 60 7b 80 7c 58 7d 48 7e 60 7f 70 80     Hy8z`{.|X}H~`.p.
    a008:	f0 81 08 83 20 84 18 85 b0 85 70 86 e0 86 20 88     .... .....p... .
    a018:	e8 88 40 89 08 8a d8 8a 80 8b 58 8c 00 8d a0 8d     ..@.......X.....
    a028:	60 8e 38 8f a8 8f 28 90 10 91 80 91 c0 92 98 93     `.8...(.........
    a038:	58 94 28 95 00 96 b0 96 48 97 c8 97 a0 98 60 99     X.(.....H.....`.
    a048:	70 9a 30 9b f0 9b 98 9c 38 9d b0 9d 58 9e           p.0.....8...X.

0000a056 <__ctors_end>:
    a056:	11 24       	eor	r1, r1
    a058:	1f be       	out	0x3f, r1	; 63
    a05a:	cf ef       	ldi	r28, 0xFF	; 255
    a05c:	d0 e2       	ldi	r29, 0x20	; 32
    a05e:	de bf       	out	0x3e, r29	; 62
    a060:	cd bf       	out	0x3d, r28	; 61

0000a062 <__do_copy_data>:
    a062:	11 e0       	ldi	r17, 0x01	; 1
    a064:	a0 e0       	ldi	r26, 0x00	; 0
    a066:	b1 e0       	ldi	r27, 0x01	; 1
    a068:	e8 eb       	ldi	r30, 0xB8	; 184
    a06a:	f2 e2       	ldi	r31, 0x22	; 34
    a06c:	01 e0       	ldi	r16, 0x01	; 1
    a06e:	0b bf       	out	0x3b, r16	; 59
    a070:	02 c0       	rjmp	.+4      	; 0xa076 <__do_copy_data+0x14>
    a072:	07 90       	elpm	r0, Z+
    a074:	0d 92       	st	X+, r0
    a076:	a4 3b       	cpi	r26, 0xB4	; 180
    a078:	b1 07       	cpc	r27, r17
    a07a:	d9 f7       	brne	.-10     	; 0xa072 <__do_copy_data+0x10>

0000a07c <__do_clear_bss>:
    a07c:	14 e0       	ldi	r17, 0x04	; 4
    a07e:	a4 eb       	ldi	r26, 0xB4	; 180
    a080:	b1 e0       	ldi	r27, 0x01	; 1
    a082:	01 c0       	rjmp	.+2      	; 0xa086 <.do_clear_bss_start>

0000a084 <.do_clear_bss_loop>:
    a084:	1d 92       	st	X+, r1

0000a086 <.do_clear_bss_start>:
    a086:	a0 32       	cpi	r26, 0x20	; 32
    a088:	b1 07       	cpc	r27, r17
    a08a:	e1 f7       	brne	.-8      	; 0xa084 <.do_clear_bss_loop>
    a08c:	0e 94 90 8f 	call	0x11f20	; 0x11f20 <main>
    a090:	0c 94 5a 91 	jmp	0x122b4	; 0x122b4 <_exit>

0000a094 <__bad_interrupt>:
    a094:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000a098 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    a098:	df 93       	push	r29
    a09a:	cf 93       	push	r28
    a09c:	cd b7       	in	r28, 0x3d	; 61
    a09e:	de b7       	in	r29, 0x3e	; 62
    a0a0:	2a 97       	sbiw	r28, 0x0a	; 10
    a0a2:	0f b6       	in	r0, 0x3f	; 63
    a0a4:	f8 94       	cli
    a0a6:	de bf       	out	0x3e, r29	; 62
    a0a8:	0f be       	out	0x3f, r0	; 63
    a0aa:	cd bf       	out	0x3d, r28	; 61
    a0ac:	9e 83       	std	Y+6, r25	; 0x06
    a0ae:	8d 83       	std	Y+5, r24	; 0x05
    a0b0:	78 87       	std	Y+8, r23	; 0x08
    a0b2:	6f 83       	std	Y+7, r22	; 0x07
    a0b4:	5a 87       	std	Y+10, r21	; 0x0a
    a0b6:	49 87       	std	Y+9, r20	; 0x09
	BYTE *d = (BYTE*)dst;
    a0b8:	8d 81       	ldd	r24, Y+5	; 0x05
    a0ba:	9e 81       	ldd	r25, Y+6	; 0x06
    a0bc:	9a 83       	std	Y+2, r25	; 0x02
    a0be:	89 83       	std	Y+1, r24	; 0x01
	const BYTE *s = (const BYTE*)src;
    a0c0:	8f 81       	ldd	r24, Y+7	; 0x07
    a0c2:	98 85       	ldd	r25, Y+8	; 0x08
    a0c4:	9c 83       	std	Y+4, r25	; 0x04
    a0c6:	8b 83       	std	Y+3, r24	; 0x03
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    a0c8:	12 c0       	rjmp	.+36     	; 0xa0ee <mem_cpy+0x56>
		*d++ = *s++;
    a0ca:	8b 81       	ldd	r24, Y+3	; 0x03
    a0cc:	9c 81       	ldd	r25, Y+4	; 0x04
    a0ce:	fc 01       	movw	r30, r24
    a0d0:	20 81       	ld	r18, Z
    a0d2:	89 81       	ldd	r24, Y+1	; 0x01
    a0d4:	9a 81       	ldd	r25, Y+2	; 0x02
    a0d6:	fc 01       	movw	r30, r24
    a0d8:	20 83       	st	Z, r18
    a0da:	89 81       	ldd	r24, Y+1	; 0x01
    a0dc:	9a 81       	ldd	r25, Y+2	; 0x02
    a0de:	01 96       	adiw	r24, 0x01	; 1
    a0e0:	9a 83       	std	Y+2, r25	; 0x02
    a0e2:	89 83       	std	Y+1, r24	; 0x01
    a0e4:	8b 81       	ldd	r24, Y+3	; 0x03
    a0e6:	9c 81       	ldd	r25, Y+4	; 0x04
    a0e8:	01 96       	adiw	r24, 0x01	; 1
    a0ea:	9c 83       	std	Y+4, r25	; 0x04
    a0ec:	8b 83       	std	Y+3, r24	; 0x03
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    a0ee:	21 e0       	ldi	r18, 0x01	; 1
    a0f0:	89 85       	ldd	r24, Y+9	; 0x09
    a0f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0f4:	00 97       	sbiw	r24, 0x00	; 0
    a0f6:	09 f4       	brne	.+2      	; 0xa0fa <mem_cpy+0x62>
    a0f8:	20 e0       	ldi	r18, 0x00	; 0
    a0fa:	89 85       	ldd	r24, Y+9	; 0x09
    a0fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0fe:	01 97       	sbiw	r24, 0x01	; 1
    a100:	9a 87       	std	Y+10, r25	; 0x0a
    a102:	89 87       	std	Y+9, r24	; 0x09
    a104:	22 23       	and	r18, r18
    a106:	09 f7       	brne	.-62     	; 0xa0ca <mem_cpy+0x32>
		*d++ = *s++;
}
    a108:	2a 96       	adiw	r28, 0x0a	; 10
    a10a:	0f b6       	in	r0, 0x3f	; 63
    a10c:	f8 94       	cli
    a10e:	de bf       	out	0x3e, r29	; 62
    a110:	0f be       	out	0x3f, r0	; 63
    a112:	cd bf       	out	0x3d, r28	; 61
    a114:	cf 91       	pop	r28
    a116:	df 91       	pop	r29
    a118:	08 95       	ret

0000a11a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    a11a:	df 93       	push	r29
    a11c:	cf 93       	push	r28
    a11e:	cd b7       	in	r28, 0x3d	; 61
    a120:	de b7       	in	r29, 0x3e	; 62
    a122:	28 97       	sbiw	r28, 0x08	; 8
    a124:	0f b6       	in	r0, 0x3f	; 63
    a126:	f8 94       	cli
    a128:	de bf       	out	0x3e, r29	; 62
    a12a:	0f be       	out	0x3f, r0	; 63
    a12c:	cd bf       	out	0x3d, r28	; 61
    a12e:	9c 83       	std	Y+4, r25	; 0x04
    a130:	8b 83       	std	Y+3, r24	; 0x03
    a132:	7e 83       	std	Y+6, r23	; 0x06
    a134:	6d 83       	std	Y+5, r22	; 0x05
    a136:	58 87       	std	Y+8, r21	; 0x08
    a138:	4f 83       	std	Y+7, r20	; 0x07
	BYTE *d = (BYTE*)dst;
    a13a:	8b 81       	ldd	r24, Y+3	; 0x03
    a13c:	9c 81       	ldd	r25, Y+4	; 0x04
    a13e:	9a 83       	std	Y+2, r25	; 0x02
    a140:	89 83       	std	Y+1, r24	; 0x01

	while (cnt--)
    a142:	0a c0       	rjmp	.+20     	; 0xa158 <mem_set+0x3e>
		*d++ = (BYTE)val;
    a144:	2d 81       	ldd	r18, Y+5	; 0x05
    a146:	89 81       	ldd	r24, Y+1	; 0x01
    a148:	9a 81       	ldd	r25, Y+2	; 0x02
    a14a:	fc 01       	movw	r30, r24
    a14c:	20 83       	st	Z, r18
    a14e:	89 81       	ldd	r24, Y+1	; 0x01
    a150:	9a 81       	ldd	r25, Y+2	; 0x02
    a152:	01 96       	adiw	r24, 0x01	; 1
    a154:	9a 83       	std	Y+2, r25	; 0x02
    a156:	89 83       	std	Y+1, r24	; 0x01
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    a158:	21 e0       	ldi	r18, 0x01	; 1
    a15a:	8f 81       	ldd	r24, Y+7	; 0x07
    a15c:	98 85       	ldd	r25, Y+8	; 0x08
    a15e:	00 97       	sbiw	r24, 0x00	; 0
    a160:	09 f4       	brne	.+2      	; 0xa164 <mem_set+0x4a>
    a162:	20 e0       	ldi	r18, 0x00	; 0
    a164:	8f 81       	ldd	r24, Y+7	; 0x07
    a166:	98 85       	ldd	r25, Y+8	; 0x08
    a168:	01 97       	sbiw	r24, 0x01	; 1
    a16a:	98 87       	std	Y+8, r25	; 0x08
    a16c:	8f 83       	std	Y+7, r24	; 0x07
    a16e:	22 23       	and	r18, r18
    a170:	49 f7       	brne	.-46     	; 0xa144 <mem_set+0x2a>
		*d++ = (BYTE)val;
}
    a172:	28 96       	adiw	r28, 0x08	; 8
    a174:	0f b6       	in	r0, 0x3f	; 63
    a176:	f8 94       	cli
    a178:	de bf       	out	0x3e, r29	; 62
    a17a:	0f be       	out	0x3f, r0	; 63
    a17c:	cd bf       	out	0x3d, r28	; 61
    a17e:	cf 91       	pop	r28
    a180:	df 91       	pop	r29
    a182:	08 95       	ret

0000a184 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    a184:	df 93       	push	r29
    a186:	cf 93       	push	r28
    a188:	cd b7       	in	r28, 0x3d	; 61
    a18a:	de b7       	in	r29, 0x3e	; 62
    a18c:	2c 97       	sbiw	r28, 0x0c	; 12
    a18e:	0f b6       	in	r0, 0x3f	; 63
    a190:	f8 94       	cli
    a192:	de bf       	out	0x3e, r29	; 62
    a194:	0f be       	out	0x3f, r0	; 63
    a196:	cd bf       	out	0x3d, r28	; 61
    a198:	98 87       	std	Y+8, r25	; 0x08
    a19a:	8f 83       	std	Y+7, r24	; 0x07
    a19c:	7a 87       	std	Y+10, r23	; 0x0a
    a19e:	69 87       	std	Y+9, r22	; 0x09
    a1a0:	5c 87       	std	Y+12, r21	; 0x0c
    a1a2:	4b 87       	std	Y+11, r20	; 0x0b
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    a1a4:	8f 81       	ldd	r24, Y+7	; 0x07
    a1a6:	98 85       	ldd	r25, Y+8	; 0x08
    a1a8:	9a 83       	std	Y+2, r25	; 0x02
    a1aa:	89 83       	std	Y+1, r24	; 0x01
    a1ac:	89 85       	ldd	r24, Y+9	; 0x09
    a1ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    a1b0:	9c 83       	std	Y+4, r25	; 0x04
    a1b2:	8b 83       	std	Y+3, r24	; 0x03
	int r = 0;
    a1b4:	1e 82       	std	Y+6, r1	; 0x06
    a1b6:	1d 82       	std	Y+5, r1	; 0x05

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    a1b8:	00 00       	nop
    a1ba:	21 e0       	ldi	r18, 0x01	; 1
    a1bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    a1be:	9c 85       	ldd	r25, Y+12	; 0x0c
    a1c0:	00 97       	sbiw	r24, 0x00	; 0
    a1c2:	09 f4       	brne	.+2      	; 0xa1c6 <mem_cmp+0x42>
    a1c4:	20 e0       	ldi	r18, 0x00	; 0
    a1c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    a1c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    a1ca:	01 97       	sbiw	r24, 0x01	; 1
    a1cc:	9c 87       	std	Y+12, r25	; 0x0c
    a1ce:	8b 87       	std	Y+11, r24	; 0x0b
    a1d0:	22 23       	and	r18, r18
    a1d2:	21 f1       	breq	.+72     	; 0xa21c <mem_cmp+0x98>
    a1d4:	89 81       	ldd	r24, Y+1	; 0x01
    a1d6:	9a 81       	ldd	r25, Y+2	; 0x02
    a1d8:	fc 01       	movw	r30, r24
    a1da:	80 81       	ld	r24, Z
    a1dc:	28 2f       	mov	r18, r24
    a1de:	30 e0       	ldi	r19, 0x00	; 0
    a1e0:	8b 81       	ldd	r24, Y+3	; 0x03
    a1e2:	9c 81       	ldd	r25, Y+4	; 0x04
    a1e4:	fc 01       	movw	r30, r24
    a1e6:	80 81       	ld	r24, Z
    a1e8:	88 2f       	mov	r24, r24
    a1ea:	90 e0       	ldi	r25, 0x00	; 0
    a1ec:	a9 01       	movw	r20, r18
    a1ee:	48 1b       	sub	r20, r24
    a1f0:	59 0b       	sbc	r21, r25
    a1f2:	ca 01       	movw	r24, r20
    a1f4:	9e 83       	std	Y+6, r25	; 0x06
    a1f6:	8d 83       	std	Y+5, r24	; 0x05
    a1f8:	21 e0       	ldi	r18, 0x01	; 1
    a1fa:	8d 81       	ldd	r24, Y+5	; 0x05
    a1fc:	9e 81       	ldd	r25, Y+6	; 0x06
    a1fe:	00 97       	sbiw	r24, 0x00	; 0
    a200:	09 f0       	breq	.+2      	; 0xa204 <mem_cmp+0x80>
    a202:	20 e0       	ldi	r18, 0x00	; 0
    a204:	89 81       	ldd	r24, Y+1	; 0x01
    a206:	9a 81       	ldd	r25, Y+2	; 0x02
    a208:	01 96       	adiw	r24, 0x01	; 1
    a20a:	9a 83       	std	Y+2, r25	; 0x02
    a20c:	89 83       	std	Y+1, r24	; 0x01
    a20e:	8b 81       	ldd	r24, Y+3	; 0x03
    a210:	9c 81       	ldd	r25, Y+4	; 0x04
    a212:	01 96       	adiw	r24, 0x01	; 1
    a214:	9c 83       	std	Y+4, r25	; 0x04
    a216:	8b 83       	std	Y+3, r24	; 0x03
    a218:	22 23       	and	r18, r18
    a21a:	79 f6       	brne	.-98     	; 0xa1ba <mem_cmp+0x36>
	return r;
    a21c:	8d 81       	ldd	r24, Y+5	; 0x05
    a21e:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a220:	2c 96       	adiw	r28, 0x0c	; 12
    a222:	0f b6       	in	r0, 0x3f	; 63
    a224:	f8 94       	cli
    a226:	de bf       	out	0x3e, r29	; 62
    a228:	0f be       	out	0x3f, r0	; 63
    a22a:	cd bf       	out	0x3d, r28	; 61
    a22c:	cf 91       	pop	r28
    a22e:	df 91       	pop	r29
    a230:	08 95       	ret

0000a232 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    a232:	df 93       	push	r29
    a234:	cf 93       	push	r28
    a236:	00 d0       	rcall	.+0      	; 0xa238 <chk_chr+0x6>
    a238:	00 d0       	rcall	.+0      	; 0xa23a <chk_chr+0x8>
    a23a:	cd b7       	in	r28, 0x3d	; 61
    a23c:	de b7       	in	r29, 0x3e	; 62
    a23e:	9a 83       	std	Y+2, r25	; 0x02
    a240:	89 83       	std	Y+1, r24	; 0x01
    a242:	7c 83       	std	Y+4, r23	; 0x04
    a244:	6b 83       	std	Y+3, r22	; 0x03
	while (*str && *str != chr) str++;
    a246:	05 c0       	rjmp	.+10     	; 0xa252 <chk_chr+0x20>
    a248:	89 81       	ldd	r24, Y+1	; 0x01
    a24a:	9a 81       	ldd	r25, Y+2	; 0x02
    a24c:	01 96       	adiw	r24, 0x01	; 1
    a24e:	9a 83       	std	Y+2, r25	; 0x02
    a250:	89 83       	std	Y+1, r24	; 0x01
    a252:	89 81       	ldd	r24, Y+1	; 0x01
    a254:	9a 81       	ldd	r25, Y+2	; 0x02
    a256:	fc 01       	movw	r30, r24
    a258:	80 81       	ld	r24, Z
    a25a:	88 23       	and	r24, r24
    a25c:	59 f0       	breq	.+22     	; 0xa274 <chk_chr+0x42>
    a25e:	89 81       	ldd	r24, Y+1	; 0x01
    a260:	9a 81       	ldd	r25, Y+2	; 0x02
    a262:	fc 01       	movw	r30, r24
    a264:	80 81       	ld	r24, Z
    a266:	28 2f       	mov	r18, r24
    a268:	30 e0       	ldi	r19, 0x00	; 0
    a26a:	8b 81       	ldd	r24, Y+3	; 0x03
    a26c:	9c 81       	ldd	r25, Y+4	; 0x04
    a26e:	28 17       	cp	r18, r24
    a270:	39 07       	cpc	r19, r25
    a272:	51 f7       	brne	.-44     	; 0xa248 <chk_chr+0x16>
	return *str;
    a274:	89 81       	ldd	r24, Y+1	; 0x01
    a276:	9a 81       	ldd	r25, Y+2	; 0x02
    a278:	fc 01       	movw	r30, r24
    a27a:	80 81       	ld	r24, Z
    a27c:	88 2f       	mov	r24, r24
    a27e:	90 e0       	ldi	r25, 0x00	; 0
}
    a280:	0f 90       	pop	r0
    a282:	0f 90       	pop	r0
    a284:	0f 90       	pop	r0
    a286:	0f 90       	pop	r0
    a288:	cf 91       	pop	r28
    a28a:	df 91       	pop	r29
    a28c:	08 95       	ret

0000a28e <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    a28e:	0f 93       	push	r16
    a290:	df 93       	push	r29
    a292:	cf 93       	push	r28
    a294:	cd b7       	in	r28, 0x3d	; 61
    a296:	de b7       	in	r29, 0x3e	; 62
    a298:	2b 97       	sbiw	r28, 0x0b	; 11
    a29a:	0f b6       	in	r0, 0x3f	; 63
    a29c:	f8 94       	cli
    a29e:	de bf       	out	0x3e, r29	; 62
    a2a0:	0f be       	out	0x3f, r0	; 63
    a2a2:	cd bf       	out	0x3d, r28	; 61
    a2a4:	9f 83       	std	Y+7, r25	; 0x07
    a2a6:	8e 83       	std	Y+6, r24	; 0x06
    a2a8:	48 87       	std	Y+8, r20	; 0x08
    a2aa:	59 87       	std	Y+9, r21	; 0x09
    a2ac:	6a 87       	std	Y+10, r22	; 0x0a
    a2ae:	7b 87       	std	Y+11, r23	; 0x0b
	DWORD wsect;


	wsect = fs->winsect;
    a2b0:	8e 81       	ldd	r24, Y+6	; 0x06
    a2b2:	9f 81       	ldd	r25, Y+7	; 0x07
    a2b4:	fc 01       	movw	r30, r24
    a2b6:	82 a5       	ldd	r24, Z+42	; 0x2a
    a2b8:	93 a5       	ldd	r25, Z+43	; 0x2b
    a2ba:	a4 a5       	ldd	r26, Z+44	; 0x2c
    a2bc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    a2be:	89 83       	std	Y+1, r24	; 0x01
    a2c0:	9a 83       	std	Y+2, r25	; 0x02
    a2c2:	ab 83       	std	Y+3, r26	; 0x03
    a2c4:	bc 83       	std	Y+4, r27	; 0x04
	if (wsect != sector) {	/* Changed current window */
    a2c6:	29 81       	ldd	r18, Y+1	; 0x01
    a2c8:	3a 81       	ldd	r19, Y+2	; 0x02
    a2ca:	4b 81       	ldd	r20, Y+3	; 0x03
    a2cc:	5c 81       	ldd	r21, Y+4	; 0x04
    a2ce:	88 85       	ldd	r24, Y+8	; 0x08
    a2d0:	99 85       	ldd	r25, Y+9	; 0x09
    a2d2:	aa 85       	ldd	r26, Y+10	; 0x0a
    a2d4:	bb 85       	ldd	r27, Y+11	; 0x0b
    a2d6:	28 17       	cp	r18, r24
    a2d8:	39 07       	cpc	r19, r25
    a2da:	4a 07       	cpc	r20, r26
    a2dc:	5b 07       	cpc	r21, r27
    a2de:	09 f4       	brne	.+2      	; 0xa2e2 <move_window+0x54>
    a2e0:	9c c0       	rjmp	.+312    	; 0xa41a <move_window+0x18c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    a2e2:	8e 81       	ldd	r24, Y+6	; 0x06
    a2e4:	9f 81       	ldd	r25, Y+7	; 0x07
    a2e6:	dc 01       	movw	r26, r24
    a2e8:	14 96       	adiw	r26, 0x04	; 4
    a2ea:	8c 91       	ld	r24, X
    a2ec:	14 97       	sbiw	r26, 0x04	; 4
    a2ee:	88 23       	and	r24, r24
    a2f0:	09 f4       	brne	.+2      	; 0xa2f4 <move_window+0x66>
    a2f2:	6a c0       	rjmp	.+212    	; 0xa3c8 <move_window+0x13a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    a2f4:	8e 81       	ldd	r24, Y+6	; 0x06
    a2f6:	9f 81       	ldd	r25, Y+7	; 0x07
    a2f8:	dc 01       	movw	r26, r24
    a2fa:	11 96       	adiw	r26, 0x01	; 1
    a2fc:	ec 91       	ld	r30, X
    a2fe:	8e 81       	ldd	r24, Y+6	; 0x06
    a300:	9f 81       	ldd	r25, Y+7	; 0x07
    a302:	bc 01       	movw	r22, r24
    a304:	62 5d       	subi	r22, 0xD2	; 210
    a306:	7f 4f       	sbci	r23, 0xFF	; 255
    a308:	29 81       	ldd	r18, Y+1	; 0x01
    a30a:	3a 81       	ldd	r19, Y+2	; 0x02
    a30c:	4b 81       	ldd	r20, Y+3	; 0x03
    a30e:	5c 81       	ldd	r21, Y+4	; 0x04
    a310:	8e 2f       	mov	r24, r30
    a312:	01 e0       	ldi	r16, 0x01	; 1
    a314:	0e 94 cb 82 	call	0x10596	; 0x10596 <disk_write>
    a318:	88 23       	and	r24, r24
    a31a:	11 f0       	breq	.+4      	; 0xa320 <move_window+0x92>
				return FR_DISK_ERR;
    a31c:	81 e0       	ldi	r24, 0x01	; 1
    a31e:	7e c0       	rjmp	.+252    	; 0xa41c <move_window+0x18e>
			fs->wflag = 0;
    a320:	8e 81       	ldd	r24, Y+6	; 0x06
    a322:	9f 81       	ldd	r25, Y+7	; 0x07
    a324:	fc 01       	movw	r30, r24
    a326:	14 82       	std	Z+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    a328:	8e 81       	ldd	r24, Y+6	; 0x06
    a32a:	9f 81       	ldd	r25, Y+7	; 0x07
    a32c:	dc 01       	movw	r26, r24
    a32e:	5e 96       	adiw	r26, 0x1e	; 30
    a330:	2d 91       	ld	r18, X+
    a332:	3d 91       	ld	r19, X+
    a334:	4d 91       	ld	r20, X+
    a336:	5c 91       	ld	r21, X
    a338:	91 97       	sbiw	r26, 0x21	; 33
    a33a:	8e 81       	ldd	r24, Y+6	; 0x06
    a33c:	9f 81       	ldd	r25, Y+7	; 0x07
    a33e:	fc 01       	movw	r30, r24
    a340:	82 8d       	ldd	r24, Z+26	; 0x1a
    a342:	93 8d       	ldd	r25, Z+27	; 0x1b
    a344:	a4 8d       	ldd	r26, Z+28	; 0x1c
    a346:	b5 8d       	ldd	r27, Z+29	; 0x1d
    a348:	28 0f       	add	r18, r24
    a34a:	39 1f       	adc	r19, r25
    a34c:	4a 1f       	adc	r20, r26
    a34e:	5b 1f       	adc	r21, r27
    a350:	89 81       	ldd	r24, Y+1	; 0x01
    a352:	9a 81       	ldd	r25, Y+2	; 0x02
    a354:	ab 81       	ldd	r26, Y+3	; 0x03
    a356:	bc 81       	ldd	r27, Y+4	; 0x04
    a358:	82 17       	cp	r24, r18
    a35a:	93 07       	cpc	r25, r19
    a35c:	a4 07       	cpc	r26, r20
    a35e:	b5 07       	cpc	r27, r21
    a360:	98 f5       	brcc	.+102    	; 0xa3c8 <move_window+0x13a>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a362:	8e 81       	ldd	r24, Y+6	; 0x06
    a364:	9f 81       	ldd	r25, Y+7	; 0x07
    a366:	dc 01       	movw	r26, r24
    a368:	13 96       	adiw	r26, 0x03	; 3
    a36a:	8c 91       	ld	r24, X
    a36c:	13 97       	sbiw	r26, 0x03	; 3
    a36e:	8d 83       	std	Y+5, r24	; 0x05
    a370:	28 c0       	rjmp	.+80     	; 0xa3c2 <move_window+0x134>
					wsect += fs->fsize;
    a372:	8e 81       	ldd	r24, Y+6	; 0x06
    a374:	9f 81       	ldd	r25, Y+7	; 0x07
    a376:	fc 01       	movw	r30, r24
    a378:	82 8d       	ldd	r24, Z+26	; 0x1a
    a37a:	93 8d       	ldd	r25, Z+27	; 0x1b
    a37c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    a37e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    a380:	29 81       	ldd	r18, Y+1	; 0x01
    a382:	3a 81       	ldd	r19, Y+2	; 0x02
    a384:	4b 81       	ldd	r20, Y+3	; 0x03
    a386:	5c 81       	ldd	r21, Y+4	; 0x04
    a388:	82 0f       	add	r24, r18
    a38a:	93 1f       	adc	r25, r19
    a38c:	a4 1f       	adc	r26, r20
    a38e:	b5 1f       	adc	r27, r21
    a390:	89 83       	std	Y+1, r24	; 0x01
    a392:	9a 83       	std	Y+2, r25	; 0x02
    a394:	ab 83       	std	Y+3, r26	; 0x03
    a396:	bc 83       	std	Y+4, r27	; 0x04
					disk_write(fs->drv, fs->win, wsect, 1);
    a398:	8e 81       	ldd	r24, Y+6	; 0x06
    a39a:	9f 81       	ldd	r25, Y+7	; 0x07
    a39c:	dc 01       	movw	r26, r24
    a39e:	11 96       	adiw	r26, 0x01	; 1
    a3a0:	ec 91       	ld	r30, X
    a3a2:	8e 81       	ldd	r24, Y+6	; 0x06
    a3a4:	9f 81       	ldd	r25, Y+7	; 0x07
    a3a6:	bc 01       	movw	r22, r24
    a3a8:	62 5d       	subi	r22, 0xD2	; 210
    a3aa:	7f 4f       	sbci	r23, 0xFF	; 255
    a3ac:	29 81       	ldd	r18, Y+1	; 0x01
    a3ae:	3a 81       	ldd	r19, Y+2	; 0x02
    a3b0:	4b 81       	ldd	r20, Y+3	; 0x03
    a3b2:	5c 81       	ldd	r21, Y+4	; 0x04
    a3b4:	8e 2f       	mov	r24, r30
    a3b6:	01 e0       	ldi	r16, 0x01	; 1
    a3b8:	0e 94 cb 82 	call	0x10596	; 0x10596 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    a3bc:	8d 81       	ldd	r24, Y+5	; 0x05
    a3be:	81 50       	subi	r24, 0x01	; 1
    a3c0:	8d 83       	std	Y+5, r24	; 0x05
    a3c2:	8d 81       	ldd	r24, Y+5	; 0x05
    a3c4:	82 30       	cpi	r24, 0x02	; 2
    a3c6:	a8 f6       	brcc	.-86     	; 0xa372 <move_window+0xe4>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    a3c8:	88 85       	ldd	r24, Y+8	; 0x08
    a3ca:	99 85       	ldd	r25, Y+9	; 0x09
    a3cc:	aa 85       	ldd	r26, Y+10	; 0x0a
    a3ce:	bb 85       	ldd	r27, Y+11	; 0x0b
    a3d0:	00 97       	sbiw	r24, 0x00	; 0
    a3d2:	a1 05       	cpc	r26, r1
    a3d4:	b1 05       	cpc	r27, r1
    a3d6:	09 f1       	breq	.+66     	; 0xa41a <move_window+0x18c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    a3d8:	8e 81       	ldd	r24, Y+6	; 0x06
    a3da:	9f 81       	ldd	r25, Y+7	; 0x07
    a3dc:	dc 01       	movw	r26, r24
    a3de:	11 96       	adiw	r26, 0x01	; 1
    a3e0:	ec 91       	ld	r30, X
    a3e2:	8e 81       	ldd	r24, Y+6	; 0x06
    a3e4:	9f 81       	ldd	r25, Y+7	; 0x07
    a3e6:	bc 01       	movw	r22, r24
    a3e8:	62 5d       	subi	r22, 0xD2	; 210
    a3ea:	7f 4f       	sbci	r23, 0xFF	; 255
    a3ec:	28 85       	ldd	r18, Y+8	; 0x08
    a3ee:	39 85       	ldd	r19, Y+9	; 0x09
    a3f0:	4a 85       	ldd	r20, Y+10	; 0x0a
    a3f2:	5b 85       	ldd	r21, Y+11	; 0x0b
    a3f4:	8e 2f       	mov	r24, r30
    a3f6:	01 e0       	ldi	r16, 0x01	; 1
    a3f8:	0e 94 3d 82 	call	0x1047a	; 0x1047a <disk_read>
    a3fc:	88 23       	and	r24, r24
    a3fe:	11 f0       	breq	.+4      	; 0xa404 <move_window+0x176>
				return FR_DISK_ERR;
    a400:	81 e0       	ldi	r24, 0x01	; 1
    a402:	0c c0       	rjmp	.+24     	; 0xa41c <move_window+0x18e>
			fs->winsect = sector;
    a404:	2e 81       	ldd	r18, Y+6	; 0x06
    a406:	3f 81       	ldd	r19, Y+7	; 0x07
    a408:	88 85       	ldd	r24, Y+8	; 0x08
    a40a:	99 85       	ldd	r25, Y+9	; 0x09
    a40c:	aa 85       	ldd	r26, Y+10	; 0x0a
    a40e:	bb 85       	ldd	r27, Y+11	; 0x0b
    a410:	f9 01       	movw	r30, r18
    a412:	82 a7       	std	Z+42, r24	; 0x2a
    a414:	93 a7       	std	Z+43, r25	; 0x2b
    a416:	a4 a7       	std	Z+44, r26	; 0x2c
    a418:	b5 a7       	std	Z+45, r27	; 0x2d
		}
	}

	return FR_OK;
    a41a:	80 e0       	ldi	r24, 0x00	; 0
}
    a41c:	2b 96       	adiw	r28, 0x0b	; 11
    a41e:	0f b6       	in	r0, 0x3f	; 63
    a420:	f8 94       	cli
    a422:	de bf       	out	0x3e, r29	; 62
    a424:	0f be       	out	0x3f, r0	; 63
    a426:	cd bf       	out	0x3d, r28	; 61
    a428:	cf 91       	pop	r28
    a42a:	df 91       	pop	r29
    a42c:	0f 91       	pop	r16
    a42e:	08 95       	ret

0000a430 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    a430:	0f 93       	push	r16
    a432:	df 93       	push	r29
    a434:	cf 93       	push	r28
    a436:	00 d0       	rcall	.+0      	; 0xa438 <sync+0x8>
    a438:	0f 92       	push	r0
    a43a:	cd b7       	in	r28, 0x3d	; 61
    a43c:	de b7       	in	r29, 0x3e	; 62
    a43e:	9b 83       	std	Y+3, r25	; 0x03
    a440:	8a 83       	std	Y+2, r24	; 0x02
	FRESULT res;


	res = move_window(fs, 0);
    a442:	8a 81       	ldd	r24, Y+2	; 0x02
    a444:	9b 81       	ldd	r25, Y+3	; 0x03
    a446:	40 e0       	ldi	r20, 0x00	; 0
    a448:	50 e0       	ldi	r21, 0x00	; 0
    a44a:	ba 01       	movw	r22, r20
    a44c:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    a450:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    a452:	89 81       	ldd	r24, Y+1	; 0x01
    a454:	88 23       	and	r24, r24
    a456:	09 f0       	breq	.+2      	; 0xa45a <sync+0x2a>
    a458:	0c c1       	rjmp	.+536    	; 0xa672 <sync+0x242>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    a45a:	8a 81       	ldd	r24, Y+2	; 0x02
    a45c:	9b 81       	ldd	r25, Y+3	; 0x03
    a45e:	dc 01       	movw	r26, r24
    a460:	8c 91       	ld	r24, X
    a462:	83 30       	cpi	r24, 0x03	; 3
    a464:	09 f0       	breq	.+2      	; 0xa468 <sync+0x38>
    a466:	f7 c0       	rjmp	.+494    	; 0xa656 <sync+0x226>
    a468:	8a 81       	ldd	r24, Y+2	; 0x02
    a46a:	9b 81       	ldd	r25, Y+3	; 0x03
    a46c:	fc 01       	movw	r30, r24
    a46e:	85 81       	ldd	r24, Z+5	; 0x05
    a470:	88 23       	and	r24, r24
    a472:	09 f4       	brne	.+2      	; 0xa476 <sync+0x46>
    a474:	f0 c0       	rjmp	.+480    	; 0xa656 <sync+0x226>
			fs->winsect = 0;
    a476:	8a 81       	ldd	r24, Y+2	; 0x02
    a478:	9b 81       	ldd	r25, Y+3	; 0x03
    a47a:	dc 01       	movw	r26, r24
    a47c:	9a 96       	adiw	r26, 0x2a	; 42
    a47e:	1d 92       	st	X+, r1
    a480:	1d 92       	st	X+, r1
    a482:	1d 92       	st	X+, r1
    a484:	1c 92       	st	X, r1
    a486:	9d 97       	sbiw	r26, 0x2d	; 45
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    a488:	8a 81       	ldd	r24, Y+2	; 0x02
    a48a:	9b 81       	ldd	r25, Y+3	; 0x03
    a48c:	8e 96       	adiw	r24, 0x2e	; 46
    a48e:	60 e0       	ldi	r22, 0x00	; 0
    a490:	70 e0       	ldi	r23, 0x00	; 0
    a492:	40 e0       	ldi	r20, 0x00	; 0
    a494:	52 e0       	ldi	r21, 0x02	; 2
    a496:	0e 94 8d 50 	call	0xa11a	; 0xa11a <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    a49a:	8a 81       	ldd	r24, Y+2	; 0x02
    a49c:	9b 81       	ldd	r25, Y+3	; 0x03
    a49e:	84 5d       	subi	r24, 0xD4	; 212
    a4a0:	9d 4f       	sbci	r25, 0xFD	; 253
    a4a2:	25 e5       	ldi	r18, 0x55	; 85
    a4a4:	fc 01       	movw	r30, r24
    a4a6:	20 83       	st	Z, r18
    a4a8:	8a 81       	ldd	r24, Y+2	; 0x02
    a4aa:	9b 81       	ldd	r25, Y+3	; 0x03
    a4ac:	83 5d       	subi	r24, 0xD3	; 211
    a4ae:	9d 4f       	sbci	r25, 0xFD	; 253
    a4b0:	2a ea       	ldi	r18, 0xAA	; 170
    a4b2:	dc 01       	movw	r26, r24
    a4b4:	2c 93       	st	X, r18
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    a4b6:	8a 81       	ldd	r24, Y+2	; 0x02
    a4b8:	9b 81       	ldd	r25, Y+3	; 0x03
    a4ba:	22 e5       	ldi	r18, 0x52	; 82
    a4bc:	fc 01       	movw	r30, r24
    a4be:	26 a7       	std	Z+46, r18	; 0x2e
    a4c0:	8a 81       	ldd	r24, Y+2	; 0x02
    a4c2:	9b 81       	ldd	r25, Y+3	; 0x03
    a4c4:	8f 96       	adiw	r24, 0x2f	; 47
    a4c6:	22 e5       	ldi	r18, 0x52	; 82
    a4c8:	dc 01       	movw	r26, r24
    a4ca:	2c 93       	st	X, r18
    a4cc:	8a 81       	ldd	r24, Y+2	; 0x02
    a4ce:	9b 81       	ldd	r25, Y+3	; 0x03
    a4d0:	c0 96       	adiw	r24, 0x30	; 48
    a4d2:	21 e6       	ldi	r18, 0x61	; 97
    a4d4:	fc 01       	movw	r30, r24
    a4d6:	20 83       	st	Z, r18
    a4d8:	8a 81       	ldd	r24, Y+2	; 0x02
    a4da:	9b 81       	ldd	r25, Y+3	; 0x03
    a4dc:	c1 96       	adiw	r24, 0x31	; 49
    a4de:	21 e4       	ldi	r18, 0x41	; 65
    a4e0:	dc 01       	movw	r26, r24
    a4e2:	2c 93       	st	X, r18
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    a4e4:	8a 81       	ldd	r24, Y+2	; 0x02
    a4e6:	9b 81       	ldd	r25, Y+3	; 0x03
    a4e8:	8e 5e       	subi	r24, 0xEE	; 238
    a4ea:	9d 4f       	sbci	r25, 0xFD	; 253
    a4ec:	22 e7       	ldi	r18, 0x72	; 114
    a4ee:	fc 01       	movw	r30, r24
    a4f0:	20 83       	st	Z, r18
    a4f2:	8a 81       	ldd	r24, Y+2	; 0x02
    a4f4:	9b 81       	ldd	r25, Y+3	; 0x03
    a4f6:	8d 5e       	subi	r24, 0xED	; 237
    a4f8:	9d 4f       	sbci	r25, 0xFD	; 253
    a4fa:	22 e7       	ldi	r18, 0x72	; 114
    a4fc:	dc 01       	movw	r26, r24
    a4fe:	2c 93       	st	X, r18
    a500:	8a 81       	ldd	r24, Y+2	; 0x02
    a502:	9b 81       	ldd	r25, Y+3	; 0x03
    a504:	8c 5e       	subi	r24, 0xEC	; 236
    a506:	9d 4f       	sbci	r25, 0xFD	; 253
    a508:	21 e4       	ldi	r18, 0x41	; 65
    a50a:	fc 01       	movw	r30, r24
    a50c:	20 83       	st	Z, r18
    a50e:	8a 81       	ldd	r24, Y+2	; 0x02
    a510:	9b 81       	ldd	r25, Y+3	; 0x03
    a512:	8b 5e       	subi	r24, 0xEB	; 235
    a514:	9d 4f       	sbci	r25, 0xFD	; 253
    a516:	21 e6       	ldi	r18, 0x61	; 97
    a518:	dc 01       	movw	r26, r24
    a51a:	2c 93       	st	X, r18
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    a51c:	8a 81       	ldd	r24, Y+2	; 0x02
    a51e:	9b 81       	ldd	r25, Y+3	; 0x03
    a520:	9c 01       	movw	r18, r24
    a522:	2a 5e       	subi	r18, 0xEA	; 234
    a524:	3d 4f       	sbci	r19, 0xFD	; 253
    a526:	8a 81       	ldd	r24, Y+2	; 0x02
    a528:	9b 81       	ldd	r25, Y+3	; 0x03
    a52a:	fc 01       	movw	r30, r24
    a52c:	86 85       	ldd	r24, Z+14	; 0x0e
    a52e:	97 85       	ldd	r25, Z+15	; 0x0f
    a530:	a0 89       	ldd	r26, Z+16	; 0x10
    a532:	b1 89       	ldd	r27, Z+17	; 0x11
    a534:	d9 01       	movw	r26, r18
    a536:	8c 93       	st	X, r24
    a538:	8a 81       	ldd	r24, Y+2	; 0x02
    a53a:	9b 81       	ldd	r25, Y+3	; 0x03
    a53c:	9c 01       	movw	r18, r24
    a53e:	29 5e       	subi	r18, 0xE9	; 233
    a540:	3d 4f       	sbci	r19, 0xFD	; 253
    a542:	8a 81       	ldd	r24, Y+2	; 0x02
    a544:	9b 81       	ldd	r25, Y+3	; 0x03
    a546:	fc 01       	movw	r30, r24
    a548:	86 85       	ldd	r24, Z+14	; 0x0e
    a54a:	97 85       	ldd	r25, Z+15	; 0x0f
    a54c:	a0 89       	ldd	r26, Z+16	; 0x10
    a54e:	b1 89       	ldd	r27, Z+17	; 0x11
    a550:	89 2f       	mov	r24, r25
    a552:	99 27       	eor	r25, r25
    a554:	d9 01       	movw	r26, r18
    a556:	8c 93       	st	X, r24
    a558:	8a 81       	ldd	r24, Y+2	; 0x02
    a55a:	9b 81       	ldd	r25, Y+3	; 0x03
    a55c:	9c 01       	movw	r18, r24
    a55e:	28 5e       	subi	r18, 0xE8	; 232
    a560:	3d 4f       	sbci	r19, 0xFD	; 253
    a562:	8a 81       	ldd	r24, Y+2	; 0x02
    a564:	9b 81       	ldd	r25, Y+3	; 0x03
    a566:	fc 01       	movw	r30, r24
    a568:	86 85       	ldd	r24, Z+14	; 0x0e
    a56a:	97 85       	ldd	r25, Z+15	; 0x0f
    a56c:	a0 89       	ldd	r26, Z+16	; 0x10
    a56e:	b1 89       	ldd	r27, Z+17	; 0x11
    a570:	cd 01       	movw	r24, r26
    a572:	aa 27       	eor	r26, r26
    a574:	bb 27       	eor	r27, r27
    a576:	d9 01       	movw	r26, r18
    a578:	8c 93       	st	X, r24
    a57a:	8a 81       	ldd	r24, Y+2	; 0x02
    a57c:	9b 81       	ldd	r25, Y+3	; 0x03
    a57e:	9c 01       	movw	r18, r24
    a580:	27 5e       	subi	r18, 0xE7	; 231
    a582:	3d 4f       	sbci	r19, 0xFD	; 253
    a584:	8a 81       	ldd	r24, Y+2	; 0x02
    a586:	9b 81       	ldd	r25, Y+3	; 0x03
    a588:	fc 01       	movw	r30, r24
    a58a:	86 85       	ldd	r24, Z+14	; 0x0e
    a58c:	97 85       	ldd	r25, Z+15	; 0x0f
    a58e:	a0 89       	ldd	r26, Z+16	; 0x10
    a590:	b1 89       	ldd	r27, Z+17	; 0x11
    a592:	8b 2f       	mov	r24, r27
    a594:	99 27       	eor	r25, r25
    a596:	aa 27       	eor	r26, r26
    a598:	bb 27       	eor	r27, r27
    a59a:	d9 01       	movw	r26, r18
    a59c:	8c 93       	st	X, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    a59e:	8a 81       	ldd	r24, Y+2	; 0x02
    a5a0:	9b 81       	ldd	r25, Y+3	; 0x03
    a5a2:	9c 01       	movw	r18, r24
    a5a4:	26 5e       	subi	r18, 0xE6	; 230
    a5a6:	3d 4f       	sbci	r19, 0xFD	; 253
    a5a8:	8a 81       	ldd	r24, Y+2	; 0x02
    a5aa:	9b 81       	ldd	r25, Y+3	; 0x03
    a5ac:	fc 01       	movw	r30, r24
    a5ae:	82 85       	ldd	r24, Z+10	; 0x0a
    a5b0:	93 85       	ldd	r25, Z+11	; 0x0b
    a5b2:	a4 85       	ldd	r26, Z+12	; 0x0c
    a5b4:	b5 85       	ldd	r27, Z+13	; 0x0d
    a5b6:	d9 01       	movw	r26, r18
    a5b8:	8c 93       	st	X, r24
    a5ba:	8a 81       	ldd	r24, Y+2	; 0x02
    a5bc:	9b 81       	ldd	r25, Y+3	; 0x03
    a5be:	9c 01       	movw	r18, r24
    a5c0:	25 5e       	subi	r18, 0xE5	; 229
    a5c2:	3d 4f       	sbci	r19, 0xFD	; 253
    a5c4:	8a 81       	ldd	r24, Y+2	; 0x02
    a5c6:	9b 81       	ldd	r25, Y+3	; 0x03
    a5c8:	fc 01       	movw	r30, r24
    a5ca:	82 85       	ldd	r24, Z+10	; 0x0a
    a5cc:	93 85       	ldd	r25, Z+11	; 0x0b
    a5ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    a5d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    a5d2:	89 2f       	mov	r24, r25
    a5d4:	99 27       	eor	r25, r25
    a5d6:	d9 01       	movw	r26, r18
    a5d8:	8c 93       	st	X, r24
    a5da:	8a 81       	ldd	r24, Y+2	; 0x02
    a5dc:	9b 81       	ldd	r25, Y+3	; 0x03
    a5de:	9c 01       	movw	r18, r24
    a5e0:	24 5e       	subi	r18, 0xE4	; 228
    a5e2:	3d 4f       	sbci	r19, 0xFD	; 253
    a5e4:	8a 81       	ldd	r24, Y+2	; 0x02
    a5e6:	9b 81       	ldd	r25, Y+3	; 0x03
    a5e8:	fc 01       	movw	r30, r24
    a5ea:	82 85       	ldd	r24, Z+10	; 0x0a
    a5ec:	93 85       	ldd	r25, Z+11	; 0x0b
    a5ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    a5f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    a5f2:	cd 01       	movw	r24, r26
    a5f4:	aa 27       	eor	r26, r26
    a5f6:	bb 27       	eor	r27, r27
    a5f8:	d9 01       	movw	r26, r18
    a5fa:	8c 93       	st	X, r24
    a5fc:	8a 81       	ldd	r24, Y+2	; 0x02
    a5fe:	9b 81       	ldd	r25, Y+3	; 0x03
    a600:	9c 01       	movw	r18, r24
    a602:	23 5e       	subi	r18, 0xE3	; 227
    a604:	3d 4f       	sbci	r19, 0xFD	; 253
    a606:	8a 81       	ldd	r24, Y+2	; 0x02
    a608:	9b 81       	ldd	r25, Y+3	; 0x03
    a60a:	fc 01       	movw	r30, r24
    a60c:	82 85       	ldd	r24, Z+10	; 0x0a
    a60e:	93 85       	ldd	r25, Z+11	; 0x0b
    a610:	a4 85       	ldd	r26, Z+12	; 0x0c
    a612:	b5 85       	ldd	r27, Z+13	; 0x0d
    a614:	8b 2f       	mov	r24, r27
    a616:	99 27       	eor	r25, r25
    a618:	aa 27       	eor	r26, r26
    a61a:	bb 27       	eor	r27, r27
    a61c:	d9 01       	movw	r26, r18
    a61e:	8c 93       	st	X, r24
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    a620:	8a 81       	ldd	r24, Y+2	; 0x02
    a622:	9b 81       	ldd	r25, Y+3	; 0x03
    a624:	dc 01       	movw	r26, r24
    a626:	11 96       	adiw	r26, 0x01	; 1
    a628:	ec 91       	ld	r30, X
    a62a:	8a 81       	ldd	r24, Y+2	; 0x02
    a62c:	9b 81       	ldd	r25, Y+3	; 0x03
    a62e:	bc 01       	movw	r22, r24
    a630:	62 5d       	subi	r22, 0xD2	; 210
    a632:	7f 4f       	sbci	r23, 0xFF	; 255
    a634:	8a 81       	ldd	r24, Y+2	; 0x02
    a636:	9b 81       	ldd	r25, Y+3	; 0x03
    a638:	dc 01       	movw	r26, r24
    a63a:	52 96       	adiw	r26, 0x12	; 18
    a63c:	2d 91       	ld	r18, X+
    a63e:	3d 91       	ld	r19, X+
    a640:	4d 91       	ld	r20, X+
    a642:	5c 91       	ld	r21, X
    a644:	55 97       	sbiw	r26, 0x15	; 21
    a646:	8e 2f       	mov	r24, r30
    a648:	01 e0       	ldi	r16, 0x01	; 1
    a64a:	0e 94 cb 82 	call	0x10596	; 0x10596 <disk_write>
			fs->fsi_flag = 0;
    a64e:	8a 81       	ldd	r24, Y+2	; 0x02
    a650:	9b 81       	ldd	r25, Y+3	; 0x03
    a652:	fc 01       	movw	r30, r24
    a654:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    a656:	8a 81       	ldd	r24, Y+2	; 0x02
    a658:	9b 81       	ldd	r25, Y+3	; 0x03
    a65a:	dc 01       	movw	r26, r24
    a65c:	11 96       	adiw	r26, 0x01	; 1
    a65e:	8c 91       	ld	r24, X
    a660:	60 e0       	ldi	r22, 0x00	; 0
    a662:	40 e0       	ldi	r20, 0x00	; 0
    a664:	50 e0       	ldi	r21, 0x00	; 0
    a666:	0e 94 77 83 	call	0x106ee	; 0x106ee <disk_ioctl>
    a66a:	88 23       	and	r24, r24
    a66c:	11 f0       	breq	.+4      	; 0xa672 <sync+0x242>
			res = FR_DISK_ERR;
    a66e:	81 e0       	ldi	r24, 0x01	; 1
    a670:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
    a672:	89 81       	ldd	r24, Y+1	; 0x01
}
    a674:	0f 90       	pop	r0
    a676:	0f 90       	pop	r0
    a678:	0f 90       	pop	r0
    a67a:	cf 91       	pop	r28
    a67c:	df 91       	pop	r29
    a67e:	0f 91       	pop	r16
    a680:	08 95       	ret

0000a682 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    a682:	df 93       	push	r29
    a684:	cf 93       	push	r28
    a686:	00 d0       	rcall	.+0      	; 0xa688 <clust2sect+0x6>
    a688:	00 d0       	rcall	.+0      	; 0xa68a <clust2sect+0x8>
    a68a:	00 d0       	rcall	.+0      	; 0xa68c <clust2sect+0xa>
    a68c:	cd b7       	in	r28, 0x3d	; 61
    a68e:	de b7       	in	r29, 0x3e	; 62
    a690:	9a 83       	std	Y+2, r25	; 0x02
    a692:	89 83       	std	Y+1, r24	; 0x01
    a694:	4b 83       	std	Y+3, r20	; 0x03
    a696:	5c 83       	std	Y+4, r21	; 0x04
    a698:	6d 83       	std	Y+5, r22	; 0x05
    a69a:	7e 83       	std	Y+6, r23	; 0x06
	clst -= 2;
    a69c:	8b 81       	ldd	r24, Y+3	; 0x03
    a69e:	9c 81       	ldd	r25, Y+4	; 0x04
    a6a0:	ad 81       	ldd	r26, Y+5	; 0x05
    a6a2:	be 81       	ldd	r27, Y+6	; 0x06
    a6a4:	02 97       	sbiw	r24, 0x02	; 2
    a6a6:	a1 09       	sbc	r26, r1
    a6a8:	b1 09       	sbc	r27, r1
    a6aa:	8b 83       	std	Y+3, r24	; 0x03
    a6ac:	9c 83       	std	Y+4, r25	; 0x04
    a6ae:	ad 83       	std	Y+5, r26	; 0x05
    a6b0:	be 83       	std	Y+6, r27	; 0x06
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    a6b2:	89 81       	ldd	r24, Y+1	; 0x01
    a6b4:	9a 81       	ldd	r25, Y+2	; 0x02
    a6b6:	fc 01       	movw	r30, r24
    a6b8:	86 89       	ldd	r24, Z+22	; 0x16
    a6ba:	97 89       	ldd	r25, Z+23	; 0x17
    a6bc:	a0 8d       	ldd	r26, Z+24	; 0x18
    a6be:	b1 8d       	ldd	r27, Z+25	; 0x19
    a6c0:	9c 01       	movw	r18, r24
    a6c2:	ad 01       	movw	r20, r26
    a6c4:	22 50       	subi	r18, 0x02	; 2
    a6c6:	30 40       	sbci	r19, 0x00	; 0
    a6c8:	40 40       	sbci	r20, 0x00	; 0
    a6ca:	50 40       	sbci	r21, 0x00	; 0
    a6cc:	8b 81       	ldd	r24, Y+3	; 0x03
    a6ce:	9c 81       	ldd	r25, Y+4	; 0x04
    a6d0:	ad 81       	ldd	r26, Y+5	; 0x05
    a6d2:	be 81       	ldd	r27, Y+6	; 0x06
    a6d4:	82 17       	cp	r24, r18
    a6d6:	93 07       	cpc	r25, r19
    a6d8:	a4 07       	cpc	r26, r20
    a6da:	b5 07       	cpc	r27, r21
    a6dc:	20 f0       	brcs	.+8      	; 0xa6e6 <clust2sect+0x64>
    a6de:	80 e0       	ldi	r24, 0x00	; 0
    a6e0:	90 e0       	ldi	r25, 0x00	; 0
    a6e2:	dc 01       	movw	r26, r24
    a6e4:	1d c0       	rjmp	.+58     	; 0xa720 <clust2sect+0x9e>
	return clst * fs->csize + fs->database;
    a6e6:	89 81       	ldd	r24, Y+1	; 0x01
    a6e8:	9a 81       	ldd	r25, Y+2	; 0x02
    a6ea:	fc 01       	movw	r30, r24
    a6ec:	82 81       	ldd	r24, Z+2	; 0x02
    a6ee:	88 2f       	mov	r24, r24
    a6f0:	90 e0       	ldi	r25, 0x00	; 0
    a6f2:	a0 e0       	ldi	r26, 0x00	; 0
    a6f4:	b0 e0       	ldi	r27, 0x00	; 0
    a6f6:	2b 81       	ldd	r18, Y+3	; 0x03
    a6f8:	3c 81       	ldd	r19, Y+4	; 0x04
    a6fa:	4d 81       	ldd	r20, Y+5	; 0x05
    a6fc:	5e 81       	ldd	r21, Y+6	; 0x06
    a6fe:	bc 01       	movw	r22, r24
    a700:	cd 01       	movw	r24, r26
    a702:	0e 94 19 91 	call	0x12232	; 0x12232 <__mulsi3>
    a706:	9b 01       	movw	r18, r22
    a708:	ac 01       	movw	r20, r24
    a70a:	89 81       	ldd	r24, Y+1	; 0x01
    a70c:	9a 81       	ldd	r25, Y+2	; 0x02
    a70e:	fc 01       	movw	r30, r24
    a710:	86 a1       	ldd	r24, Z+38	; 0x26
    a712:	97 a1       	ldd	r25, Z+39	; 0x27
    a714:	a0 a5       	ldd	r26, Z+40	; 0x28
    a716:	b1 a5       	ldd	r27, Z+41	; 0x29
    a718:	82 0f       	add	r24, r18
    a71a:	93 1f       	adc	r25, r19
    a71c:	a4 1f       	adc	r26, r20
    a71e:	b5 1f       	adc	r27, r21
}
    a720:	bc 01       	movw	r22, r24
    a722:	cd 01       	movw	r24, r26
    a724:	26 96       	adiw	r28, 0x06	; 6
    a726:	0f b6       	in	r0, 0x3f	; 63
    a728:	f8 94       	cli
    a72a:	de bf       	out	0x3e, r29	; 62
    a72c:	0f be       	out	0x3f, r0	; 63
    a72e:	cd bf       	out	0x3d, r28	; 61
    a730:	cf 91       	pop	r28
    a732:	df 91       	pop	r29
    a734:	08 95       	ret

0000a736 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    a736:	df 93       	push	r29
    a738:	cf 93       	push	r28
    a73a:	cd b7       	in	r28, 0x3d	; 61
    a73c:	de b7       	in	r29, 0x3e	; 62
    a73e:	2c 97       	sbiw	r28, 0x0c	; 12
    a740:	0f b6       	in	r0, 0x3f	; 63
    a742:	f8 94       	cli
    a744:	de bf       	out	0x3e, r29	; 62
    a746:	0f be       	out	0x3f, r0	; 63
    a748:	cd bf       	out	0x3d, r28	; 61
    a74a:	98 87       	std	Y+8, r25	; 0x08
    a74c:	8f 83       	std	Y+7, r24	; 0x07
    a74e:	49 87       	std	Y+9, r20	; 0x09
    a750:	5a 87       	std	Y+10, r21	; 0x0a
    a752:	6b 87       	std	Y+11, r22	; 0x0b
    a754:	7c 87       	std	Y+12, r23	; 0x0c
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    a756:	89 85       	ldd	r24, Y+9	; 0x09
    a758:	9a 85       	ldd	r25, Y+10	; 0x0a
    a75a:	ab 85       	ldd	r26, Y+11	; 0x0b
    a75c:	bc 85       	ldd	r27, Y+12	; 0x0c
    a75e:	82 30       	cpi	r24, 0x02	; 2
    a760:	91 05       	cpc	r25, r1
    a762:	a1 05       	cpc	r26, r1
    a764:	b1 05       	cpc	r27, r1
    a766:	80 f0       	brcs	.+32     	; 0xa788 <get_fat+0x52>
    a768:	8f 81       	ldd	r24, Y+7	; 0x07
    a76a:	98 85       	ldd	r25, Y+8	; 0x08
    a76c:	fc 01       	movw	r30, r24
    a76e:	26 89       	ldd	r18, Z+22	; 0x16
    a770:	37 89       	ldd	r19, Z+23	; 0x17
    a772:	40 8d       	ldd	r20, Z+24	; 0x18
    a774:	51 8d       	ldd	r21, Z+25	; 0x19
    a776:	89 85       	ldd	r24, Y+9	; 0x09
    a778:	9a 85       	ldd	r25, Y+10	; 0x0a
    a77a:	ab 85       	ldd	r26, Y+11	; 0x0b
    a77c:	bc 85       	ldd	r27, Y+12	; 0x0c
    a77e:	82 17       	cp	r24, r18
    a780:	93 07       	cpc	r25, r19
    a782:	a4 07       	cpc	r26, r20
    a784:	b5 07       	cpc	r27, r21
    a786:	28 f0       	brcs	.+10     	; 0xa792 <get_fat+0x5c>
		return 1;
    a788:	81 e0       	ldi	r24, 0x01	; 1
    a78a:	90 e0       	ldi	r25, 0x00	; 0
    a78c:	a0 e0       	ldi	r26, 0x00	; 0
    a78e:	b0 e0       	ldi	r27, 0x00	; 0
    a790:	4e c1       	rjmp	.+668    	; 0xaa2e <get_fat+0x2f8>

	switch (fs->fs_type) {
    a792:	8f 81       	ldd	r24, Y+7	; 0x07
    a794:	98 85       	ldd	r25, Y+8	; 0x08
    a796:	fc 01       	movw	r30, r24
    a798:	80 81       	ld	r24, Z
    a79a:	88 2f       	mov	r24, r24
    a79c:	90 e0       	ldi	r25, 0x00	; 0
    a79e:	82 30       	cpi	r24, 0x02	; 2
    a7a0:	91 05       	cpc	r25, r1
    a7a2:	09 f4       	brne	.+2      	; 0xa7a6 <get_fat+0x70>
    a7a4:	90 c0       	rjmp	.+288    	; 0xa8c6 <get_fat+0x190>
    a7a6:	83 30       	cpi	r24, 0x03	; 3
    a7a8:	91 05       	cpc	r25, r1
    a7aa:	09 f4       	brne	.+2      	; 0xa7ae <get_fat+0x78>
    a7ac:	cb c0       	rjmp	.+406    	; 0xa944 <get_fat+0x20e>
    a7ae:	81 30       	cpi	r24, 0x01	; 1
    a7b0:	91 05       	cpc	r25, r1
    a7b2:	09 f0       	breq	.+2      	; 0xa7b6 <get_fat+0x80>
    a7b4:	39 c1       	rjmp	.+626    	; 0xaa28 <get_fat+0x2f2>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    a7b6:	89 85       	ldd	r24, Y+9	; 0x09
    a7b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    a7ba:	9a 83       	std	Y+2, r25	; 0x02
    a7bc:	89 83       	std	Y+1, r24	; 0x01
    a7be:	89 81       	ldd	r24, Y+1	; 0x01
    a7c0:	9a 81       	ldd	r25, Y+2	; 0x02
    a7c2:	96 95       	lsr	r25
    a7c4:	87 95       	ror	r24
    a7c6:	29 81       	ldd	r18, Y+1	; 0x01
    a7c8:	3a 81       	ldd	r19, Y+2	; 0x02
    a7ca:	82 0f       	add	r24, r18
    a7cc:	93 1f       	adc	r25, r19
    a7ce:	9a 83       	std	Y+2, r25	; 0x02
    a7d0:	89 83       	std	Y+1, r24	; 0x01
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    a7d2:	8f 81       	ldd	r24, Y+7	; 0x07
    a7d4:	98 85       	ldd	r25, Y+8	; 0x08
    a7d6:	fc 01       	movw	r30, r24
    a7d8:	26 8d       	ldd	r18, Z+30	; 0x1e
    a7da:	37 8d       	ldd	r19, Z+31	; 0x1f
    a7dc:	40 a1       	ldd	r20, Z+32	; 0x20
    a7de:	51 a1       	ldd	r21, Z+33	; 0x21
    a7e0:	89 81       	ldd	r24, Y+1	; 0x01
    a7e2:	9a 81       	ldd	r25, Y+2	; 0x02
    a7e4:	89 2f       	mov	r24, r25
    a7e6:	99 27       	eor	r25, r25
    a7e8:	86 95       	lsr	r24
    a7ea:	cc 01       	movw	r24, r24
    a7ec:	a0 e0       	ldi	r26, 0x00	; 0
    a7ee:	b0 e0       	ldi	r27, 0x00	; 0
    a7f0:	28 0f       	add	r18, r24
    a7f2:	39 1f       	adc	r19, r25
    a7f4:	4a 1f       	adc	r20, r26
    a7f6:	5b 1f       	adc	r21, r27
    a7f8:	8f 81       	ldd	r24, Y+7	; 0x07
    a7fa:	98 85       	ldd	r25, Y+8	; 0x08
    a7fc:	ba 01       	movw	r22, r20
    a7fe:	a9 01       	movw	r20, r18
    a800:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    a804:	88 23       	and	r24, r24
    a806:	09 f0       	breq	.+2      	; 0xa80a <get_fat+0xd4>
    a808:	08 c1       	rjmp	.+528    	; 0xaa1a <get_fat+0x2e4>
		wc = fs->win[bc % SS(fs)]; bc++;
    a80a:	89 81       	ldd	r24, Y+1	; 0x01
    a80c:	9a 81       	ldd	r25, Y+2	; 0x02
    a80e:	91 70       	andi	r25, 0x01	; 1
    a810:	2f 81       	ldd	r18, Y+7	; 0x07
    a812:	38 85       	ldd	r19, Y+8	; 0x08
    a814:	82 0f       	add	r24, r18
    a816:	93 1f       	adc	r25, r19
    a818:	8e 96       	adiw	r24, 0x2e	; 46
    a81a:	fc 01       	movw	r30, r24
    a81c:	80 81       	ld	r24, Z
    a81e:	88 2f       	mov	r24, r24
    a820:	90 e0       	ldi	r25, 0x00	; 0
    a822:	9c 83       	std	Y+4, r25	; 0x04
    a824:	8b 83       	std	Y+3, r24	; 0x03
    a826:	89 81       	ldd	r24, Y+1	; 0x01
    a828:	9a 81       	ldd	r25, Y+2	; 0x02
    a82a:	01 96       	adiw	r24, 0x01	; 1
    a82c:	9a 83       	std	Y+2, r25	; 0x02
    a82e:	89 83       	std	Y+1, r24	; 0x01
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    a830:	8f 81       	ldd	r24, Y+7	; 0x07
    a832:	98 85       	ldd	r25, Y+8	; 0x08
    a834:	fc 01       	movw	r30, r24
    a836:	26 8d       	ldd	r18, Z+30	; 0x1e
    a838:	37 8d       	ldd	r19, Z+31	; 0x1f
    a83a:	40 a1       	ldd	r20, Z+32	; 0x20
    a83c:	51 a1       	ldd	r21, Z+33	; 0x21
    a83e:	89 81       	ldd	r24, Y+1	; 0x01
    a840:	9a 81       	ldd	r25, Y+2	; 0x02
    a842:	89 2f       	mov	r24, r25
    a844:	99 27       	eor	r25, r25
    a846:	86 95       	lsr	r24
    a848:	cc 01       	movw	r24, r24
    a84a:	a0 e0       	ldi	r26, 0x00	; 0
    a84c:	b0 e0       	ldi	r27, 0x00	; 0
    a84e:	28 0f       	add	r18, r24
    a850:	39 1f       	adc	r19, r25
    a852:	4a 1f       	adc	r20, r26
    a854:	5b 1f       	adc	r21, r27
    a856:	8f 81       	ldd	r24, Y+7	; 0x07
    a858:	98 85       	ldd	r25, Y+8	; 0x08
    a85a:	ba 01       	movw	r22, r20
    a85c:	a9 01       	movw	r20, r18
    a85e:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    a862:	88 23       	and	r24, r24
    a864:	09 f0       	breq	.+2      	; 0xa868 <get_fat+0x132>
    a866:	db c0       	rjmp	.+438    	; 0xaa1e <get_fat+0x2e8>
		wc |= fs->win[bc % SS(fs)] << 8;
    a868:	89 81       	ldd	r24, Y+1	; 0x01
    a86a:	9a 81       	ldd	r25, Y+2	; 0x02
    a86c:	91 70       	andi	r25, 0x01	; 1
    a86e:	2f 81       	ldd	r18, Y+7	; 0x07
    a870:	38 85       	ldd	r19, Y+8	; 0x08
    a872:	82 0f       	add	r24, r18
    a874:	93 1f       	adc	r25, r19
    a876:	8e 96       	adiw	r24, 0x2e	; 46
    a878:	fc 01       	movw	r30, r24
    a87a:	80 81       	ld	r24, Z
    a87c:	88 2f       	mov	r24, r24
    a87e:	90 e0       	ldi	r25, 0x00	; 0
    a880:	98 2f       	mov	r25, r24
    a882:	88 27       	eor	r24, r24
    a884:	2b 81       	ldd	r18, Y+3	; 0x03
    a886:	3c 81       	ldd	r19, Y+4	; 0x04
    a888:	82 2b       	or	r24, r18
    a88a:	93 2b       	or	r25, r19
    a88c:	9c 83       	std	Y+4, r25	; 0x04
    a88e:	8b 83       	std	Y+3, r24	; 0x03
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    a890:	89 85       	ldd	r24, Y+9	; 0x09
    a892:	9a 85       	ldd	r25, Y+10	; 0x0a
    a894:	81 70       	andi	r24, 0x01	; 1
    a896:	90 70       	andi	r25, 0x00	; 0
    a898:	88 23       	and	r24, r24
    a89a:	61 f0       	breq	.+24     	; 0xa8b4 <get_fat+0x17e>
    a89c:	8b 81       	ldd	r24, Y+3	; 0x03
    a89e:	9c 81       	ldd	r25, Y+4	; 0x04
    a8a0:	92 95       	swap	r25
    a8a2:	82 95       	swap	r24
    a8a4:	8f 70       	andi	r24, 0x0F	; 15
    a8a6:	89 27       	eor	r24, r25
    a8a8:	9f 70       	andi	r25, 0x0F	; 15
    a8aa:	89 27       	eor	r24, r25
    a8ac:	cc 01       	movw	r24, r24
    a8ae:	a0 e0       	ldi	r26, 0x00	; 0
    a8b0:	b0 e0       	ldi	r27, 0x00	; 0
    a8b2:	08 c0       	rjmp	.+16     	; 0xa8c4 <get_fat+0x18e>
    a8b4:	8b 81       	ldd	r24, Y+3	; 0x03
    a8b6:	9c 81       	ldd	r25, Y+4	; 0x04
    a8b8:	cc 01       	movw	r24, r24
    a8ba:	a0 e0       	ldi	r26, 0x00	; 0
    a8bc:	b0 e0       	ldi	r27, 0x00	; 0
    a8be:	9f 70       	andi	r25, 0x0F	; 15
    a8c0:	a0 70       	andi	r26, 0x00	; 0
    a8c2:	b0 70       	andi	r27, 0x00	; 0
    a8c4:	b4 c0       	rjmp	.+360    	; 0xaa2e <get_fat+0x2f8>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    a8c6:	8f 81       	ldd	r24, Y+7	; 0x07
    a8c8:	98 85       	ldd	r25, Y+8	; 0x08
    a8ca:	fc 01       	movw	r30, r24
    a8cc:	26 8d       	ldd	r18, Z+30	; 0x1e
    a8ce:	37 8d       	ldd	r19, Z+31	; 0x1f
    a8d0:	40 a1       	ldd	r20, Z+32	; 0x20
    a8d2:	51 a1       	ldd	r21, Z+33	; 0x21
    a8d4:	89 85       	ldd	r24, Y+9	; 0x09
    a8d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    a8d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    a8da:	bc 85       	ldd	r27, Y+12	; 0x0c
    a8dc:	89 2f       	mov	r24, r25
    a8de:	9a 2f       	mov	r25, r26
    a8e0:	ab 2f       	mov	r26, r27
    a8e2:	bb 27       	eor	r27, r27
    a8e4:	28 0f       	add	r18, r24
    a8e6:	39 1f       	adc	r19, r25
    a8e8:	4a 1f       	adc	r20, r26
    a8ea:	5b 1f       	adc	r21, r27
    a8ec:	8f 81       	ldd	r24, Y+7	; 0x07
    a8ee:	98 85       	ldd	r25, Y+8	; 0x08
    a8f0:	ba 01       	movw	r22, r20
    a8f2:	a9 01       	movw	r20, r18
    a8f4:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    a8f8:	88 23       	and	r24, r24
    a8fa:	09 f0       	breq	.+2      	; 0xa8fe <get_fat+0x1c8>
    a8fc:	92 c0       	rjmp	.+292    	; 0xaa22 <get_fat+0x2ec>
		p = &fs->win[clst * 2 % SS(fs)];
    a8fe:	8f 81       	ldd	r24, Y+7	; 0x07
    a900:	98 85       	ldd	r25, Y+8	; 0x08
    a902:	9c 01       	movw	r18, r24
    a904:	22 5d       	subi	r18, 0xD2	; 210
    a906:	3f 4f       	sbci	r19, 0xFF	; 255
    a908:	89 85       	ldd	r24, Y+9	; 0x09
    a90a:	9a 85       	ldd	r25, Y+10	; 0x0a
    a90c:	88 0f       	add	r24, r24
    a90e:	99 1f       	adc	r25, r25
    a910:	91 70       	andi	r25, 0x01	; 1
    a912:	82 0f       	add	r24, r18
    a914:	93 1f       	adc	r25, r19
    a916:	9e 83       	std	Y+6, r25	; 0x06
    a918:	8d 83       	std	Y+5, r24	; 0x05
		return LD_WORD(p);
    a91a:	8d 81       	ldd	r24, Y+5	; 0x05
    a91c:	9e 81       	ldd	r25, Y+6	; 0x06
    a91e:	01 96       	adiw	r24, 0x01	; 1
    a920:	fc 01       	movw	r30, r24
    a922:	80 81       	ld	r24, Z
    a924:	88 2f       	mov	r24, r24
    a926:	90 e0       	ldi	r25, 0x00	; 0
    a928:	38 2f       	mov	r19, r24
    a92a:	22 27       	eor	r18, r18
    a92c:	8d 81       	ldd	r24, Y+5	; 0x05
    a92e:	9e 81       	ldd	r25, Y+6	; 0x06
    a930:	fc 01       	movw	r30, r24
    a932:	80 81       	ld	r24, Z
    a934:	88 2f       	mov	r24, r24
    a936:	90 e0       	ldi	r25, 0x00	; 0
    a938:	82 2b       	or	r24, r18
    a93a:	93 2b       	or	r25, r19
    a93c:	cc 01       	movw	r24, r24
    a93e:	a0 e0       	ldi	r26, 0x00	; 0
    a940:	b0 e0       	ldi	r27, 0x00	; 0
    a942:	75 c0       	rjmp	.+234    	; 0xaa2e <get_fat+0x2f8>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    a944:	8f 81       	ldd	r24, Y+7	; 0x07
    a946:	98 85       	ldd	r25, Y+8	; 0x08
    a948:	fc 01       	movw	r30, r24
    a94a:	26 8d       	ldd	r18, Z+30	; 0x1e
    a94c:	37 8d       	ldd	r19, Z+31	; 0x1f
    a94e:	40 a1       	ldd	r20, Z+32	; 0x20
    a950:	51 a1       	ldd	r21, Z+33	; 0x21
    a952:	89 85       	ldd	r24, Y+9	; 0x09
    a954:	9a 85       	ldd	r25, Y+10	; 0x0a
    a956:	ab 85       	ldd	r26, Y+11	; 0x0b
    a958:	bc 85       	ldd	r27, Y+12	; 0x0c
    a95a:	68 94       	set
    a95c:	16 f8       	bld	r1, 6
    a95e:	b6 95       	lsr	r27
    a960:	a7 95       	ror	r26
    a962:	97 95       	ror	r25
    a964:	87 95       	ror	r24
    a966:	16 94       	lsr	r1
    a968:	d1 f7       	brne	.-12     	; 0xa95e <get_fat+0x228>
    a96a:	28 0f       	add	r18, r24
    a96c:	39 1f       	adc	r19, r25
    a96e:	4a 1f       	adc	r20, r26
    a970:	5b 1f       	adc	r21, r27
    a972:	8f 81       	ldd	r24, Y+7	; 0x07
    a974:	98 85       	ldd	r25, Y+8	; 0x08
    a976:	ba 01       	movw	r22, r20
    a978:	a9 01       	movw	r20, r18
    a97a:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    a97e:	88 23       	and	r24, r24
    a980:	09 f0       	breq	.+2      	; 0xa984 <get_fat+0x24e>
    a982:	51 c0       	rjmp	.+162    	; 0xaa26 <get_fat+0x2f0>
		p = &fs->win[clst * 4 % SS(fs)];
    a984:	8f 81       	ldd	r24, Y+7	; 0x07
    a986:	98 85       	ldd	r25, Y+8	; 0x08
    a988:	9c 01       	movw	r18, r24
    a98a:	22 5d       	subi	r18, 0xD2	; 210
    a98c:	3f 4f       	sbci	r19, 0xFF	; 255
    a98e:	89 85       	ldd	r24, Y+9	; 0x09
    a990:	9a 85       	ldd	r25, Y+10	; 0x0a
    a992:	88 0f       	add	r24, r24
    a994:	99 1f       	adc	r25, r25
    a996:	88 0f       	add	r24, r24
    a998:	99 1f       	adc	r25, r25
    a99a:	91 70       	andi	r25, 0x01	; 1
    a99c:	82 0f       	add	r24, r18
    a99e:	93 1f       	adc	r25, r19
    a9a0:	9e 83       	std	Y+6, r25	; 0x06
    a9a2:	8d 83       	std	Y+5, r24	; 0x05
		return LD_DWORD(p) & 0x0FFFFFFF;
    a9a4:	8d 81       	ldd	r24, Y+5	; 0x05
    a9a6:	9e 81       	ldd	r25, Y+6	; 0x06
    a9a8:	03 96       	adiw	r24, 0x03	; 3
    a9aa:	fc 01       	movw	r30, r24
    a9ac:	80 81       	ld	r24, Z
    a9ae:	88 2f       	mov	r24, r24
    a9b0:	90 e0       	ldi	r25, 0x00	; 0
    a9b2:	a0 e0       	ldi	r26, 0x00	; 0
    a9b4:	b0 e0       	ldi	r27, 0x00	; 0
    a9b6:	58 2f       	mov	r21, r24
    a9b8:	44 27       	eor	r20, r20
    a9ba:	33 27       	eor	r19, r19
    a9bc:	22 27       	eor	r18, r18
    a9be:	8d 81       	ldd	r24, Y+5	; 0x05
    a9c0:	9e 81       	ldd	r25, Y+6	; 0x06
    a9c2:	02 96       	adiw	r24, 0x02	; 2
    a9c4:	fc 01       	movw	r30, r24
    a9c6:	80 81       	ld	r24, Z
    a9c8:	88 2f       	mov	r24, r24
    a9ca:	90 e0       	ldi	r25, 0x00	; 0
    a9cc:	a0 e0       	ldi	r26, 0x00	; 0
    a9ce:	b0 e0       	ldi	r27, 0x00	; 0
    a9d0:	dc 01       	movw	r26, r24
    a9d2:	99 27       	eor	r25, r25
    a9d4:	88 27       	eor	r24, r24
    a9d6:	28 2b       	or	r18, r24
    a9d8:	39 2b       	or	r19, r25
    a9da:	4a 2b       	or	r20, r26
    a9dc:	5b 2b       	or	r21, r27
    a9de:	8d 81       	ldd	r24, Y+5	; 0x05
    a9e0:	9e 81       	ldd	r25, Y+6	; 0x06
    a9e2:	01 96       	adiw	r24, 0x01	; 1
    a9e4:	fc 01       	movw	r30, r24
    a9e6:	80 81       	ld	r24, Z
    a9e8:	88 2f       	mov	r24, r24
    a9ea:	90 e0       	ldi	r25, 0x00	; 0
    a9ec:	98 2f       	mov	r25, r24
    a9ee:	88 27       	eor	r24, r24
    a9f0:	cc 01       	movw	r24, r24
    a9f2:	a0 e0       	ldi	r26, 0x00	; 0
    a9f4:	b0 e0       	ldi	r27, 0x00	; 0
    a9f6:	28 2b       	or	r18, r24
    a9f8:	39 2b       	or	r19, r25
    a9fa:	4a 2b       	or	r20, r26
    a9fc:	5b 2b       	or	r21, r27
    a9fe:	8d 81       	ldd	r24, Y+5	; 0x05
    aa00:	9e 81       	ldd	r25, Y+6	; 0x06
    aa02:	fc 01       	movw	r30, r24
    aa04:	80 81       	ld	r24, Z
    aa06:	88 2f       	mov	r24, r24
    aa08:	90 e0       	ldi	r25, 0x00	; 0
    aa0a:	a0 e0       	ldi	r26, 0x00	; 0
    aa0c:	b0 e0       	ldi	r27, 0x00	; 0
    aa0e:	82 2b       	or	r24, r18
    aa10:	93 2b       	or	r25, r19
    aa12:	a4 2b       	or	r26, r20
    aa14:	b5 2b       	or	r27, r21
    aa16:	bf 70       	andi	r27, 0x0F	; 15
    aa18:	0a c0       	rjmp	.+20     	; 0xaa2e <get_fat+0x2f8>
		return 1;

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    aa1a:	00 00       	nop
    aa1c:	05 c0       	rjmp	.+10     	; 0xaa28 <get_fat+0x2f2>
		wc = fs->win[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    aa1e:	00 00       	nop
    aa20:	03 c0       	rjmp	.+6      	; 0xaa28 <get_fat+0x2f2>
		wc |= fs->win[bc % SS(fs)] << 8;
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    aa22:	00 00       	nop
    aa24:	01 c0       	rjmp	.+2      	; 0xaa28 <get_fat+0x2f2>
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    aa26:	00 00       	nop
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    aa28:	8f ef       	ldi	r24, 0xFF	; 255
    aa2a:	9f ef       	ldi	r25, 0xFF	; 255
    aa2c:	dc 01       	movw	r26, r24
}
    aa2e:	bc 01       	movw	r22, r24
    aa30:	cd 01       	movw	r24, r26
    aa32:	2c 96       	adiw	r28, 0x0c	; 12
    aa34:	0f b6       	in	r0, 0x3f	; 63
    aa36:	f8 94       	cli
    aa38:	de bf       	out	0x3e, r29	; 62
    aa3a:	0f be       	out	0x3f, r0	; 63
    aa3c:	cd bf       	out	0x3d, r28	; 61
    aa3e:	cf 91       	pop	r28
    aa40:	df 91       	pop	r29
    aa42:	08 95       	ret

0000aa44 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    aa44:	0f 93       	push	r16
    aa46:	1f 93       	push	r17
    aa48:	df 93       	push	r29
    aa4a:	cf 93       	push	r28
    aa4c:	cd b7       	in	r28, 0x3d	; 61
    aa4e:	de b7       	in	r29, 0x3e	; 62
    aa50:	2f 97       	sbiw	r28, 0x0f	; 15
    aa52:	0f b6       	in	r0, 0x3f	; 63
    aa54:	f8 94       	cli
    aa56:	de bf       	out	0x3e, r29	; 62
    aa58:	0f be       	out	0x3f, r0	; 63
    aa5a:	cd bf       	out	0x3d, r28	; 61
    aa5c:	9f 83       	std	Y+7, r25	; 0x07
    aa5e:	8e 83       	std	Y+6, r24	; 0x06
    aa60:	48 87       	std	Y+8, r20	; 0x08
    aa62:	59 87       	std	Y+9, r21	; 0x09
    aa64:	6a 87       	std	Y+10, r22	; 0x0a
    aa66:	7b 87       	std	Y+11, r23	; 0x0b
    aa68:	0c 87       	std	Y+12, r16	; 0x0c
    aa6a:	1d 87       	std	Y+13, r17	; 0x0d
    aa6c:	2e 87       	std	Y+14, r18	; 0x0e
    aa6e:	3f 87       	std	Y+15, r19	; 0x0f
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    aa70:	88 85       	ldd	r24, Y+8	; 0x08
    aa72:	99 85       	ldd	r25, Y+9	; 0x09
    aa74:	aa 85       	ldd	r26, Y+10	; 0x0a
    aa76:	bb 85       	ldd	r27, Y+11	; 0x0b
    aa78:	82 30       	cpi	r24, 0x02	; 2
    aa7a:	91 05       	cpc	r25, r1
    aa7c:	a1 05       	cpc	r26, r1
    aa7e:	b1 05       	cpc	r27, r1
    aa80:	80 f0       	brcs	.+32     	; 0xaaa2 <put_fat+0x5e>
    aa82:	8e 81       	ldd	r24, Y+6	; 0x06
    aa84:	9f 81       	ldd	r25, Y+7	; 0x07
    aa86:	fc 01       	movw	r30, r24
    aa88:	26 89       	ldd	r18, Z+22	; 0x16
    aa8a:	37 89       	ldd	r19, Z+23	; 0x17
    aa8c:	40 8d       	ldd	r20, Z+24	; 0x18
    aa8e:	51 8d       	ldd	r21, Z+25	; 0x19
    aa90:	88 85       	ldd	r24, Y+8	; 0x08
    aa92:	99 85       	ldd	r25, Y+9	; 0x09
    aa94:	aa 85       	ldd	r26, Y+10	; 0x0a
    aa96:	bb 85       	ldd	r27, Y+11	; 0x0b
    aa98:	82 17       	cp	r24, r18
    aa9a:	93 07       	cpc	r25, r19
    aa9c:	a4 07       	cpc	r26, r20
    aa9e:	b5 07       	cpc	r27, r21
    aaa0:	18 f0       	brcs	.+6      	; 0xaaa8 <put_fat+0x64>
		res = FR_INT_ERR;
    aaa2:	82 e0       	ldi	r24, 0x02	; 2
    aaa4:	89 83       	std	Y+1, r24	; 0x01
    aaa6:	b6 c1       	rjmp	.+876    	; 0xae14 <put_fat+0x3d0>

	} else {
		switch (fs->fs_type) {
    aaa8:	8e 81       	ldd	r24, Y+6	; 0x06
    aaaa:	9f 81       	ldd	r25, Y+7	; 0x07
    aaac:	fc 01       	movw	r30, r24
    aaae:	80 81       	ld	r24, Z
    aab0:	88 2f       	mov	r24, r24
    aab2:	90 e0       	ldi	r25, 0x00	; 0
    aab4:	82 30       	cpi	r24, 0x02	; 2
    aab6:	91 05       	cpc	r25, r1
    aab8:	09 f4       	brne	.+2      	; 0xaabc <put_fat+0x78>
    aaba:	bb c0       	rjmp	.+374    	; 0xac32 <put_fat+0x1ee>
    aabc:	83 30       	cpi	r24, 0x03	; 3
    aabe:	91 05       	cpc	r25, r1
    aac0:	09 f4       	brne	.+2      	; 0xaac4 <put_fat+0x80>
    aac2:	f2 c0       	rjmp	.+484    	; 0xaca8 <put_fat+0x264>
    aac4:	81 30       	cpi	r24, 0x01	; 1
    aac6:	91 05       	cpc	r25, r1
    aac8:	09 f0       	breq	.+2      	; 0xaacc <put_fat+0x88>
    aaca:	95 c1       	rjmp	.+810    	; 0xadf6 <put_fat+0x3b2>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    aacc:	88 85       	ldd	r24, Y+8	; 0x08
    aace:	99 85       	ldd	r25, Y+9	; 0x09
    aad0:	9b 83       	std	Y+3, r25	; 0x03
    aad2:	8a 83       	std	Y+2, r24	; 0x02
    aad4:	8a 81       	ldd	r24, Y+2	; 0x02
    aad6:	9b 81       	ldd	r25, Y+3	; 0x03
    aad8:	96 95       	lsr	r25
    aada:	87 95       	ror	r24
    aadc:	2a 81       	ldd	r18, Y+2	; 0x02
    aade:	3b 81       	ldd	r19, Y+3	; 0x03
    aae0:	82 0f       	add	r24, r18
    aae2:	93 1f       	adc	r25, r19
    aae4:	9b 83       	std	Y+3, r25	; 0x03
    aae6:	8a 83       	std	Y+2, r24	; 0x02
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    aae8:	8e 81       	ldd	r24, Y+6	; 0x06
    aaea:	9f 81       	ldd	r25, Y+7	; 0x07
    aaec:	fc 01       	movw	r30, r24
    aaee:	26 8d       	ldd	r18, Z+30	; 0x1e
    aaf0:	37 8d       	ldd	r19, Z+31	; 0x1f
    aaf2:	40 a1       	ldd	r20, Z+32	; 0x20
    aaf4:	51 a1       	ldd	r21, Z+33	; 0x21
    aaf6:	8a 81       	ldd	r24, Y+2	; 0x02
    aaf8:	9b 81       	ldd	r25, Y+3	; 0x03
    aafa:	89 2f       	mov	r24, r25
    aafc:	99 27       	eor	r25, r25
    aafe:	86 95       	lsr	r24
    ab00:	cc 01       	movw	r24, r24
    ab02:	a0 e0       	ldi	r26, 0x00	; 0
    ab04:	b0 e0       	ldi	r27, 0x00	; 0
    ab06:	28 0f       	add	r18, r24
    ab08:	39 1f       	adc	r19, r25
    ab0a:	4a 1f       	adc	r20, r26
    ab0c:	5b 1f       	adc	r21, r27
    ab0e:	8e 81       	ldd	r24, Y+6	; 0x06
    ab10:	9f 81       	ldd	r25, Y+7	; 0x07
    ab12:	ba 01       	movw	r22, r20
    ab14:	a9 01       	movw	r20, r18
    ab16:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    ab1a:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) break;
    ab1c:	89 81       	ldd	r24, Y+1	; 0x01
    ab1e:	88 23       	and	r24, r24
    ab20:	09 f0       	breq	.+2      	; 0xab24 <put_fat+0xe0>
    ab22:	6c c1       	rjmp	.+728    	; 0xadfc <put_fat+0x3b8>
			p = &fs->win[bc % SS(fs)];
    ab24:	8e 81       	ldd	r24, Y+6	; 0x06
    ab26:	9f 81       	ldd	r25, Y+7	; 0x07
    ab28:	9c 01       	movw	r18, r24
    ab2a:	22 5d       	subi	r18, 0xD2	; 210
    ab2c:	3f 4f       	sbci	r19, 0xFF	; 255
    ab2e:	8a 81       	ldd	r24, Y+2	; 0x02
    ab30:	9b 81       	ldd	r25, Y+3	; 0x03
    ab32:	91 70       	andi	r25, 0x01	; 1
    ab34:	82 0f       	add	r24, r18
    ab36:	93 1f       	adc	r25, r19
    ab38:	9d 83       	std	Y+5, r25	; 0x05
    ab3a:	8c 83       	std	Y+4, r24	; 0x04
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    ab3c:	88 85       	ldd	r24, Y+8	; 0x08
    ab3e:	99 85       	ldd	r25, Y+9	; 0x09
    ab40:	81 70       	andi	r24, 0x01	; 1
    ab42:	90 70       	andi	r25, 0x00	; 0
    ab44:	88 23       	and	r24, r24
    ab46:	91 f0       	breq	.+36     	; 0xab6c <put_fat+0x128>
    ab48:	8c 81       	ldd	r24, Y+4	; 0x04
    ab4a:	9d 81       	ldd	r25, Y+5	; 0x05
    ab4c:	fc 01       	movw	r30, r24
    ab4e:	80 81       	ld	r24, Z
    ab50:	28 2f       	mov	r18, r24
    ab52:	2f 70       	andi	r18, 0x0F	; 15
    ab54:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab56:	88 2f       	mov	r24, r24
    ab58:	90 e0       	ldi	r25, 0x00	; 0
    ab5a:	82 95       	swap	r24
    ab5c:	92 95       	swap	r25
    ab5e:	90 7f       	andi	r25, 0xF0	; 240
    ab60:	98 27       	eor	r25, r24
    ab62:	80 7f       	andi	r24, 0xF0	; 240
    ab64:	98 27       	eor	r25, r24
    ab66:	82 2b       	or	r24, r18
    ab68:	28 2f       	mov	r18, r24
    ab6a:	01 c0       	rjmp	.+2      	; 0xab6e <put_fat+0x12a>
    ab6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    ab6e:	8c 81       	ldd	r24, Y+4	; 0x04
    ab70:	9d 81       	ldd	r25, Y+5	; 0x05
    ab72:	fc 01       	movw	r30, r24
    ab74:	20 83       	st	Z, r18
			bc++;
    ab76:	8a 81       	ldd	r24, Y+2	; 0x02
    ab78:	9b 81       	ldd	r25, Y+3	; 0x03
    ab7a:	01 96       	adiw	r24, 0x01	; 1
    ab7c:	9b 83       	std	Y+3, r25	; 0x03
    ab7e:	8a 83       	std	Y+2, r24	; 0x02
			fs->wflag = 1;
    ab80:	8e 81       	ldd	r24, Y+6	; 0x06
    ab82:	9f 81       	ldd	r25, Y+7	; 0x07
    ab84:	21 e0       	ldi	r18, 0x01	; 1
    ab86:	fc 01       	movw	r30, r24
    ab88:	24 83       	std	Z+4, r18	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    ab8a:	8e 81       	ldd	r24, Y+6	; 0x06
    ab8c:	9f 81       	ldd	r25, Y+7	; 0x07
    ab8e:	fc 01       	movw	r30, r24
    ab90:	26 8d       	ldd	r18, Z+30	; 0x1e
    ab92:	37 8d       	ldd	r19, Z+31	; 0x1f
    ab94:	40 a1       	ldd	r20, Z+32	; 0x20
    ab96:	51 a1       	ldd	r21, Z+33	; 0x21
    ab98:	8a 81       	ldd	r24, Y+2	; 0x02
    ab9a:	9b 81       	ldd	r25, Y+3	; 0x03
    ab9c:	89 2f       	mov	r24, r25
    ab9e:	99 27       	eor	r25, r25
    aba0:	86 95       	lsr	r24
    aba2:	cc 01       	movw	r24, r24
    aba4:	a0 e0       	ldi	r26, 0x00	; 0
    aba6:	b0 e0       	ldi	r27, 0x00	; 0
    aba8:	28 0f       	add	r18, r24
    abaa:	39 1f       	adc	r19, r25
    abac:	4a 1f       	adc	r20, r26
    abae:	5b 1f       	adc	r21, r27
    abb0:	8e 81       	ldd	r24, Y+6	; 0x06
    abb2:	9f 81       	ldd	r25, Y+7	; 0x07
    abb4:	ba 01       	movw	r22, r20
    abb6:	a9 01       	movw	r20, r18
    abb8:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    abbc:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) break;
    abbe:	89 81       	ldd	r24, Y+1	; 0x01
    abc0:	88 23       	and	r24, r24
    abc2:	09 f0       	breq	.+2      	; 0xabc6 <put_fat+0x182>
    abc4:	1d c1       	rjmp	.+570    	; 0xae00 <put_fat+0x3bc>
			p = &fs->win[bc % SS(fs)];
    abc6:	8e 81       	ldd	r24, Y+6	; 0x06
    abc8:	9f 81       	ldd	r25, Y+7	; 0x07
    abca:	9c 01       	movw	r18, r24
    abcc:	22 5d       	subi	r18, 0xD2	; 210
    abce:	3f 4f       	sbci	r19, 0xFF	; 255
    abd0:	8a 81       	ldd	r24, Y+2	; 0x02
    abd2:	9b 81       	ldd	r25, Y+3	; 0x03
    abd4:	91 70       	andi	r25, 0x01	; 1
    abd6:	82 0f       	add	r24, r18
    abd8:	93 1f       	adc	r25, r19
    abda:	9d 83       	std	Y+5, r25	; 0x05
    abdc:	8c 83       	std	Y+4, r24	; 0x04
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    abde:	88 85       	ldd	r24, Y+8	; 0x08
    abe0:	99 85       	ldd	r25, Y+9	; 0x09
    abe2:	81 70       	andi	r24, 0x01	; 1
    abe4:	90 70       	andi	r25, 0x00	; 0
    abe6:	88 23       	and	r24, r24
    abe8:	71 f0       	breq	.+28     	; 0xac06 <put_fat+0x1c2>
    abea:	8c 85       	ldd	r24, Y+12	; 0x0c
    abec:	9d 85       	ldd	r25, Y+13	; 0x0d
    abee:	ae 85       	ldd	r26, Y+14	; 0x0e
    abf0:	bf 85       	ldd	r27, Y+15	; 0x0f
    abf2:	68 94       	set
    abf4:	13 f8       	bld	r1, 3
    abf6:	b6 95       	lsr	r27
    abf8:	a7 95       	ror	r26
    abfa:	97 95       	ror	r25
    abfc:	87 95       	ror	r24
    abfe:	16 94       	lsr	r1
    ac00:	d1 f7       	brne	.-12     	; 0xabf6 <put_fat+0x1b2>
    ac02:	28 2f       	mov	r18, r24
    ac04:	11 c0       	rjmp	.+34     	; 0xac28 <put_fat+0x1e4>
    ac06:	8c 81       	ldd	r24, Y+4	; 0x04
    ac08:	9d 81       	ldd	r25, Y+5	; 0x05
    ac0a:	fc 01       	movw	r30, r24
    ac0c:	80 81       	ld	r24, Z
    ac0e:	28 2f       	mov	r18, r24
    ac10:	20 7f       	andi	r18, 0xF0	; 240
    ac12:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac14:	9d 85       	ldd	r25, Y+13	; 0x0d
    ac16:	ae 85       	ldd	r26, Y+14	; 0x0e
    ac18:	bf 85       	ldd	r27, Y+15	; 0x0f
    ac1a:	89 2f       	mov	r24, r25
    ac1c:	9a 2f       	mov	r25, r26
    ac1e:	ab 2f       	mov	r26, r27
    ac20:	bb 27       	eor	r27, r27
    ac22:	8f 70       	andi	r24, 0x0F	; 15
    ac24:	82 2b       	or	r24, r18
    ac26:	28 2f       	mov	r18, r24
    ac28:	8c 81       	ldd	r24, Y+4	; 0x04
    ac2a:	9d 81       	ldd	r25, Y+5	; 0x05
    ac2c:	fc 01       	movw	r30, r24
    ac2e:	20 83       	st	Z, r18
			break;
    ac30:	ec c0       	rjmp	.+472    	; 0xae0a <put_fat+0x3c6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    ac32:	8e 81       	ldd	r24, Y+6	; 0x06
    ac34:	9f 81       	ldd	r25, Y+7	; 0x07
    ac36:	fc 01       	movw	r30, r24
    ac38:	26 8d       	ldd	r18, Z+30	; 0x1e
    ac3a:	37 8d       	ldd	r19, Z+31	; 0x1f
    ac3c:	40 a1       	ldd	r20, Z+32	; 0x20
    ac3e:	51 a1       	ldd	r21, Z+33	; 0x21
    ac40:	88 85       	ldd	r24, Y+8	; 0x08
    ac42:	99 85       	ldd	r25, Y+9	; 0x09
    ac44:	aa 85       	ldd	r26, Y+10	; 0x0a
    ac46:	bb 85       	ldd	r27, Y+11	; 0x0b
    ac48:	89 2f       	mov	r24, r25
    ac4a:	9a 2f       	mov	r25, r26
    ac4c:	ab 2f       	mov	r26, r27
    ac4e:	bb 27       	eor	r27, r27
    ac50:	28 0f       	add	r18, r24
    ac52:	39 1f       	adc	r19, r25
    ac54:	4a 1f       	adc	r20, r26
    ac56:	5b 1f       	adc	r21, r27
    ac58:	8e 81       	ldd	r24, Y+6	; 0x06
    ac5a:	9f 81       	ldd	r25, Y+7	; 0x07
    ac5c:	ba 01       	movw	r22, r20
    ac5e:	a9 01       	movw	r20, r18
    ac60:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    ac64:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) break;
    ac66:	89 81       	ldd	r24, Y+1	; 0x01
    ac68:	88 23       	and	r24, r24
    ac6a:	09 f0       	breq	.+2      	; 0xac6e <put_fat+0x22a>
    ac6c:	cb c0       	rjmp	.+406    	; 0xae04 <put_fat+0x3c0>
			p = &fs->win[clst * 2 % SS(fs)];
    ac6e:	8e 81       	ldd	r24, Y+6	; 0x06
    ac70:	9f 81       	ldd	r25, Y+7	; 0x07
    ac72:	9c 01       	movw	r18, r24
    ac74:	22 5d       	subi	r18, 0xD2	; 210
    ac76:	3f 4f       	sbci	r19, 0xFF	; 255
    ac78:	88 85       	ldd	r24, Y+8	; 0x08
    ac7a:	99 85       	ldd	r25, Y+9	; 0x09
    ac7c:	88 0f       	add	r24, r24
    ac7e:	99 1f       	adc	r25, r25
    ac80:	91 70       	andi	r25, 0x01	; 1
    ac82:	82 0f       	add	r24, r18
    ac84:	93 1f       	adc	r25, r19
    ac86:	9d 83       	std	Y+5, r25	; 0x05
    ac88:	8c 83       	std	Y+4, r24	; 0x04
			ST_WORD(p, (WORD)val);
    ac8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    ac8c:	8c 81       	ldd	r24, Y+4	; 0x04
    ac8e:	9d 81       	ldd	r25, Y+5	; 0x05
    ac90:	fc 01       	movw	r30, r24
    ac92:	20 83       	st	Z, r18
    ac94:	8c 81       	ldd	r24, Y+4	; 0x04
    ac96:	9d 81       	ldd	r25, Y+5	; 0x05
    ac98:	01 96       	adiw	r24, 0x01	; 1
    ac9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    ac9c:	3d 85       	ldd	r19, Y+13	; 0x0d
    ac9e:	23 2f       	mov	r18, r19
    aca0:	33 27       	eor	r19, r19
    aca2:	fc 01       	movw	r30, r24
    aca4:	20 83       	st	Z, r18
			break;
    aca6:	b1 c0       	rjmp	.+354    	; 0xae0a <put_fat+0x3c6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    aca8:	8e 81       	ldd	r24, Y+6	; 0x06
    acaa:	9f 81       	ldd	r25, Y+7	; 0x07
    acac:	fc 01       	movw	r30, r24
    acae:	26 8d       	ldd	r18, Z+30	; 0x1e
    acb0:	37 8d       	ldd	r19, Z+31	; 0x1f
    acb2:	40 a1       	ldd	r20, Z+32	; 0x20
    acb4:	51 a1       	ldd	r21, Z+33	; 0x21
    acb6:	88 85       	ldd	r24, Y+8	; 0x08
    acb8:	99 85       	ldd	r25, Y+9	; 0x09
    acba:	aa 85       	ldd	r26, Y+10	; 0x0a
    acbc:	bb 85       	ldd	r27, Y+11	; 0x0b
    acbe:	68 94       	set
    acc0:	16 f8       	bld	r1, 6
    acc2:	b6 95       	lsr	r27
    acc4:	a7 95       	ror	r26
    acc6:	97 95       	ror	r25
    acc8:	87 95       	ror	r24
    acca:	16 94       	lsr	r1
    accc:	d1 f7       	brne	.-12     	; 0xacc2 <put_fat+0x27e>
    acce:	28 0f       	add	r18, r24
    acd0:	39 1f       	adc	r19, r25
    acd2:	4a 1f       	adc	r20, r26
    acd4:	5b 1f       	adc	r21, r27
    acd6:	8e 81       	ldd	r24, Y+6	; 0x06
    acd8:	9f 81       	ldd	r25, Y+7	; 0x07
    acda:	ba 01       	movw	r22, r20
    acdc:	a9 01       	movw	r20, r18
    acde:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    ace2:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) break;
    ace4:	89 81       	ldd	r24, Y+1	; 0x01
    ace6:	88 23       	and	r24, r24
    ace8:	09 f0       	breq	.+2      	; 0xacec <put_fat+0x2a8>
    acea:	8e c0       	rjmp	.+284    	; 0xae08 <put_fat+0x3c4>
			p = &fs->win[clst * 4 % SS(fs)];
    acec:	8e 81       	ldd	r24, Y+6	; 0x06
    acee:	9f 81       	ldd	r25, Y+7	; 0x07
    acf0:	9c 01       	movw	r18, r24
    acf2:	22 5d       	subi	r18, 0xD2	; 210
    acf4:	3f 4f       	sbci	r19, 0xFF	; 255
    acf6:	88 85       	ldd	r24, Y+8	; 0x08
    acf8:	99 85       	ldd	r25, Y+9	; 0x09
    acfa:	88 0f       	add	r24, r24
    acfc:	99 1f       	adc	r25, r25
    acfe:	88 0f       	add	r24, r24
    ad00:	99 1f       	adc	r25, r25
    ad02:	91 70       	andi	r25, 0x01	; 1
    ad04:	82 0f       	add	r24, r18
    ad06:	93 1f       	adc	r25, r19
    ad08:	9d 83       	std	Y+5, r25	; 0x05
    ad0a:	8c 83       	std	Y+4, r24	; 0x04
			val |= LD_DWORD(p) & 0xF0000000;
    ad0c:	8c 81       	ldd	r24, Y+4	; 0x04
    ad0e:	9d 81       	ldd	r25, Y+5	; 0x05
    ad10:	03 96       	adiw	r24, 0x03	; 3
    ad12:	fc 01       	movw	r30, r24
    ad14:	80 81       	ld	r24, Z
    ad16:	88 2f       	mov	r24, r24
    ad18:	90 e0       	ldi	r25, 0x00	; 0
    ad1a:	a0 e0       	ldi	r26, 0x00	; 0
    ad1c:	b0 e0       	ldi	r27, 0x00	; 0
    ad1e:	58 2f       	mov	r21, r24
    ad20:	44 27       	eor	r20, r20
    ad22:	33 27       	eor	r19, r19
    ad24:	22 27       	eor	r18, r18
    ad26:	8c 81       	ldd	r24, Y+4	; 0x04
    ad28:	9d 81       	ldd	r25, Y+5	; 0x05
    ad2a:	02 96       	adiw	r24, 0x02	; 2
    ad2c:	fc 01       	movw	r30, r24
    ad2e:	80 81       	ld	r24, Z
    ad30:	88 2f       	mov	r24, r24
    ad32:	90 e0       	ldi	r25, 0x00	; 0
    ad34:	a0 e0       	ldi	r26, 0x00	; 0
    ad36:	b0 e0       	ldi	r27, 0x00	; 0
    ad38:	dc 01       	movw	r26, r24
    ad3a:	99 27       	eor	r25, r25
    ad3c:	88 27       	eor	r24, r24
    ad3e:	28 2b       	or	r18, r24
    ad40:	39 2b       	or	r19, r25
    ad42:	4a 2b       	or	r20, r26
    ad44:	5b 2b       	or	r21, r27
    ad46:	8c 81       	ldd	r24, Y+4	; 0x04
    ad48:	9d 81       	ldd	r25, Y+5	; 0x05
    ad4a:	01 96       	adiw	r24, 0x01	; 1
    ad4c:	fc 01       	movw	r30, r24
    ad4e:	80 81       	ld	r24, Z
    ad50:	88 2f       	mov	r24, r24
    ad52:	90 e0       	ldi	r25, 0x00	; 0
    ad54:	98 2f       	mov	r25, r24
    ad56:	88 27       	eor	r24, r24
    ad58:	cc 01       	movw	r24, r24
    ad5a:	a0 e0       	ldi	r26, 0x00	; 0
    ad5c:	b0 e0       	ldi	r27, 0x00	; 0
    ad5e:	28 2b       	or	r18, r24
    ad60:	39 2b       	or	r19, r25
    ad62:	4a 2b       	or	r20, r26
    ad64:	5b 2b       	or	r21, r27
    ad66:	8c 81       	ldd	r24, Y+4	; 0x04
    ad68:	9d 81       	ldd	r25, Y+5	; 0x05
    ad6a:	fc 01       	movw	r30, r24
    ad6c:	80 81       	ld	r24, Z
    ad6e:	88 2f       	mov	r24, r24
    ad70:	90 e0       	ldi	r25, 0x00	; 0
    ad72:	a0 e0       	ldi	r26, 0x00	; 0
    ad74:	b0 e0       	ldi	r27, 0x00	; 0
    ad76:	82 2b       	or	r24, r18
    ad78:	93 2b       	or	r25, r19
    ad7a:	a4 2b       	or	r26, r20
    ad7c:	b5 2b       	or	r27, r21
    ad7e:	80 70       	andi	r24, 0x00	; 0
    ad80:	90 70       	andi	r25, 0x00	; 0
    ad82:	a0 70       	andi	r26, 0x00	; 0
    ad84:	b0 7f       	andi	r27, 0xF0	; 240
    ad86:	2c 85       	ldd	r18, Y+12	; 0x0c
    ad88:	3d 85       	ldd	r19, Y+13	; 0x0d
    ad8a:	4e 85       	ldd	r20, Y+14	; 0x0e
    ad8c:	5f 85       	ldd	r21, Y+15	; 0x0f
    ad8e:	82 2b       	or	r24, r18
    ad90:	93 2b       	or	r25, r19
    ad92:	a4 2b       	or	r26, r20
    ad94:	b5 2b       	or	r27, r21
    ad96:	8c 87       	std	Y+12, r24	; 0x0c
    ad98:	9d 87       	std	Y+13, r25	; 0x0d
    ad9a:	ae 87       	std	Y+14, r26	; 0x0e
    ad9c:	bf 87       	std	Y+15, r27	; 0x0f
			ST_DWORD(p, val);
    ad9e:	2c 85       	ldd	r18, Y+12	; 0x0c
    ada0:	8c 81       	ldd	r24, Y+4	; 0x04
    ada2:	9d 81       	ldd	r25, Y+5	; 0x05
    ada4:	fc 01       	movw	r30, r24
    ada6:	20 83       	st	Z, r18
    ada8:	8c 81       	ldd	r24, Y+4	; 0x04
    adaa:	9d 81       	ldd	r25, Y+5	; 0x05
    adac:	01 96       	adiw	r24, 0x01	; 1
    adae:	2c 85       	ldd	r18, Y+12	; 0x0c
    adb0:	3d 85       	ldd	r19, Y+13	; 0x0d
    adb2:	23 2f       	mov	r18, r19
    adb4:	33 27       	eor	r19, r19
    adb6:	fc 01       	movw	r30, r24
    adb8:	20 83       	st	Z, r18
    adba:	8c 81       	ldd	r24, Y+4	; 0x04
    adbc:	9d 81       	ldd	r25, Y+5	; 0x05
    adbe:	9c 01       	movw	r18, r24
    adc0:	2e 5f       	subi	r18, 0xFE	; 254
    adc2:	3f 4f       	sbci	r19, 0xFF	; 255
    adc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    adc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    adc8:	ae 85       	ldd	r26, Y+14	; 0x0e
    adca:	bf 85       	ldd	r27, Y+15	; 0x0f
    adcc:	cd 01       	movw	r24, r26
    adce:	aa 27       	eor	r26, r26
    add0:	bb 27       	eor	r27, r27
    add2:	f9 01       	movw	r30, r18
    add4:	80 83       	st	Z, r24
    add6:	8c 81       	ldd	r24, Y+4	; 0x04
    add8:	9d 81       	ldd	r25, Y+5	; 0x05
    adda:	9c 01       	movw	r18, r24
    addc:	2d 5f       	subi	r18, 0xFD	; 253
    adde:	3f 4f       	sbci	r19, 0xFF	; 255
    ade0:	8c 85       	ldd	r24, Y+12	; 0x0c
    ade2:	9d 85       	ldd	r25, Y+13	; 0x0d
    ade4:	ae 85       	ldd	r26, Y+14	; 0x0e
    ade6:	bf 85       	ldd	r27, Y+15	; 0x0f
    ade8:	8b 2f       	mov	r24, r27
    adea:	99 27       	eor	r25, r25
    adec:	aa 27       	eor	r26, r26
    adee:	bb 27       	eor	r27, r27
    adf0:	f9 01       	movw	r30, r18
    adf2:	80 83       	st	Z, r24
			break;
    adf4:	0a c0       	rjmp	.+20     	; 0xae0a <put_fat+0x3c6>

		default :
			res = FR_INT_ERR;
    adf6:	82 e0       	ldi	r24, 0x02	; 2
    adf8:	89 83       	std	Y+1, r24	; 0x01
    adfa:	07 c0       	rjmp	.+14     	; 0xae0a <put_fat+0x3c6>
	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
    adfc:	00 00       	nop
    adfe:	05 c0       	rjmp	.+10     	; 0xae0a <put_fat+0x3c6>
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
    ae00:	00 00       	nop
    ae02:	03 c0       	rjmp	.+6      	; 0xae0a <put_fat+0x3c6>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
    ae04:	00 00       	nop
    ae06:	01 c0       	rjmp	.+2      	; 0xae0a <put_fat+0x3c6>
			ST_WORD(p, (WORD)val);
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
    ae08:	00 00       	nop
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    ae0a:	8e 81       	ldd	r24, Y+6	; 0x06
    ae0c:	9f 81       	ldd	r25, Y+7	; 0x07
    ae0e:	21 e0       	ldi	r18, 0x01	; 1
    ae10:	fc 01       	movw	r30, r24
    ae12:	24 83       	std	Z+4, r18	; 0x04
	}

	return res;
    ae14:	89 81       	ldd	r24, Y+1	; 0x01
}
    ae16:	2f 96       	adiw	r28, 0x0f	; 15
    ae18:	0f b6       	in	r0, 0x3f	; 63
    ae1a:	f8 94       	cli
    ae1c:	de bf       	out	0x3e, r29	; 62
    ae1e:	0f be       	out	0x3f, r0	; 63
    ae20:	cd bf       	out	0x3d, r28	; 61
    ae22:	cf 91       	pop	r28
    ae24:	df 91       	pop	r29
    ae26:	1f 91       	pop	r17
    ae28:	0f 91       	pop	r16
    ae2a:	08 95       	ret

0000ae2c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    ae2c:	0f 93       	push	r16
    ae2e:	1f 93       	push	r17
    ae30:	df 93       	push	r29
    ae32:	cf 93       	push	r28
    ae34:	cd b7       	in	r28, 0x3d	; 61
    ae36:	de b7       	in	r29, 0x3e	; 62
    ae38:	2b 97       	sbiw	r28, 0x0b	; 11
    ae3a:	0f b6       	in	r0, 0x3f	; 63
    ae3c:	f8 94       	cli
    ae3e:	de bf       	out	0x3e, r29	; 62
    ae40:	0f be       	out	0x3f, r0	; 63
    ae42:	cd bf       	out	0x3d, r28	; 61
    ae44:	9f 83       	std	Y+7, r25	; 0x07
    ae46:	8e 83       	std	Y+6, r24	; 0x06
    ae48:	48 87       	std	Y+8, r20	; 0x08
    ae4a:	59 87       	std	Y+9, r21	; 0x09
    ae4c:	6a 87       	std	Y+10, r22	; 0x0a
    ae4e:	7b 87       	std	Y+11, r23	; 0x0b
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    ae50:	88 85       	ldd	r24, Y+8	; 0x08
    ae52:	99 85       	ldd	r25, Y+9	; 0x09
    ae54:	aa 85       	ldd	r26, Y+10	; 0x0a
    ae56:	bb 85       	ldd	r27, Y+11	; 0x0b
    ae58:	82 30       	cpi	r24, 0x02	; 2
    ae5a:	91 05       	cpc	r25, r1
    ae5c:	a1 05       	cpc	r26, r1
    ae5e:	b1 05       	cpc	r27, r1
    ae60:	80 f0       	brcs	.+32     	; 0xae82 <remove_chain+0x56>
    ae62:	8e 81       	ldd	r24, Y+6	; 0x06
    ae64:	9f 81       	ldd	r25, Y+7	; 0x07
    ae66:	fc 01       	movw	r30, r24
    ae68:	26 89       	ldd	r18, Z+22	; 0x16
    ae6a:	37 89       	ldd	r19, Z+23	; 0x17
    ae6c:	40 8d       	ldd	r20, Z+24	; 0x18
    ae6e:	51 8d       	ldd	r21, Z+25	; 0x19
    ae70:	88 85       	ldd	r24, Y+8	; 0x08
    ae72:	99 85       	ldd	r25, Y+9	; 0x09
    ae74:	aa 85       	ldd	r26, Y+10	; 0x0a
    ae76:	bb 85       	ldd	r27, Y+11	; 0x0b
    ae78:	82 17       	cp	r24, r18
    ae7a:	93 07       	cpc	r25, r19
    ae7c:	a4 07       	cpc	r26, r20
    ae7e:	b5 07       	cpc	r27, r21
    ae80:	18 f0       	brcs	.+6      	; 0xae88 <remove_chain+0x5c>
		res = FR_INT_ERR;
    ae82:	82 e0       	ldi	r24, 0x02	; 2
    ae84:	89 83       	std	Y+1, r24	; 0x01
    ae86:	8a c0       	rjmp	.+276    	; 0xaf9c <remove_chain+0x170>

	} else {
		res = FR_OK;
    ae88:	19 82       	std	Y+1, r1	; 0x01
		while (clst < fs->n_fatent) {			/* Not a last link? */
    ae8a:	73 c0       	rjmp	.+230    	; 0xaf72 <remove_chain+0x146>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    ae8c:	8e 81       	ldd	r24, Y+6	; 0x06
    ae8e:	9f 81       	ldd	r25, Y+7	; 0x07
    ae90:	28 85       	ldd	r18, Y+8	; 0x08
    ae92:	39 85       	ldd	r19, Y+9	; 0x09
    ae94:	4a 85       	ldd	r20, Y+10	; 0x0a
    ae96:	5b 85       	ldd	r21, Y+11	; 0x0b
    ae98:	ba 01       	movw	r22, r20
    ae9a:	a9 01       	movw	r20, r18
    ae9c:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    aea0:	dc 01       	movw	r26, r24
    aea2:	cb 01       	movw	r24, r22
    aea4:	8a 83       	std	Y+2, r24	; 0x02
    aea6:	9b 83       	std	Y+3, r25	; 0x03
    aea8:	ac 83       	std	Y+4, r26	; 0x04
    aeaa:	bd 83       	std	Y+5, r27	; 0x05
			if (nxt == 0) break;				/* Empty cluster? */
    aeac:	8a 81       	ldd	r24, Y+2	; 0x02
    aeae:	9b 81       	ldd	r25, Y+3	; 0x03
    aeb0:	ac 81       	ldd	r26, Y+4	; 0x04
    aeb2:	bd 81       	ldd	r27, Y+5	; 0x05
    aeb4:	00 97       	sbiw	r24, 0x00	; 0
    aeb6:	a1 05       	cpc	r26, r1
    aeb8:	b1 05       	cpc	r27, r1
    aeba:	09 f4       	brne	.+2      	; 0xaebe <remove_chain+0x92>
    aebc:	6c c0       	rjmp	.+216    	; 0xaf96 <remove_chain+0x16a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    aebe:	8a 81       	ldd	r24, Y+2	; 0x02
    aec0:	9b 81       	ldd	r25, Y+3	; 0x03
    aec2:	ac 81       	ldd	r26, Y+4	; 0x04
    aec4:	bd 81       	ldd	r27, Y+5	; 0x05
    aec6:	81 30       	cpi	r24, 0x01	; 1
    aec8:	91 05       	cpc	r25, r1
    aeca:	a1 05       	cpc	r26, r1
    aecc:	b1 05       	cpc	r27, r1
    aece:	19 f4       	brne	.+6      	; 0xaed6 <remove_chain+0xaa>
    aed0:	82 e0       	ldi	r24, 0x02	; 2
    aed2:	89 83       	std	Y+1, r24	; 0x01
    aed4:	63 c0       	rjmp	.+198    	; 0xaf9c <remove_chain+0x170>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    aed6:	8a 81       	ldd	r24, Y+2	; 0x02
    aed8:	9b 81       	ldd	r25, Y+3	; 0x03
    aeda:	ac 81       	ldd	r26, Y+4	; 0x04
    aedc:	bd 81       	ldd	r27, Y+5	; 0x05
    aede:	8f 3f       	cpi	r24, 0xFF	; 255
    aee0:	ff ef       	ldi	r31, 0xFF	; 255
    aee2:	9f 07       	cpc	r25, r31
    aee4:	ff ef       	ldi	r31, 0xFF	; 255
    aee6:	af 07       	cpc	r26, r31
    aee8:	ff ef       	ldi	r31, 0xFF	; 255
    aeea:	bf 07       	cpc	r27, r31
    aeec:	19 f4       	brne	.+6      	; 0xaef4 <remove_chain+0xc8>
    aeee:	81 e0       	ldi	r24, 0x01	; 1
    aef0:	89 83       	std	Y+1, r24	; 0x01
    aef2:	54 c0       	rjmp	.+168    	; 0xaf9c <remove_chain+0x170>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    aef4:	8e 81       	ldd	r24, Y+6	; 0x06
    aef6:	9f 81       	ldd	r25, Y+7	; 0x07
    aef8:	28 85       	ldd	r18, Y+8	; 0x08
    aefa:	39 85       	ldd	r19, Y+9	; 0x09
    aefc:	4a 85       	ldd	r20, Y+10	; 0x0a
    aefe:	5b 85       	ldd	r21, Y+11	; 0x0b
    af00:	ba 01       	movw	r22, r20
    af02:	a9 01       	movw	r20, r18
    af04:	00 e0       	ldi	r16, 0x00	; 0
    af06:	10 e0       	ldi	r17, 0x00	; 0
    af08:	98 01       	movw	r18, r16
    af0a:	0e 94 22 55 	call	0xaa44	; 0xaa44 <put_fat>
    af0e:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) break;
    af10:	89 81       	ldd	r24, Y+1	; 0x01
    af12:	88 23       	and	r24, r24
    af14:	09 f0       	breq	.+2      	; 0xaf18 <remove_chain+0xec>
    af16:	41 c0       	rjmp	.+130    	; 0xaf9a <remove_chain+0x16e>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    af18:	8e 81       	ldd	r24, Y+6	; 0x06
    af1a:	9f 81       	ldd	r25, Y+7	; 0x07
    af1c:	fc 01       	movw	r30, r24
    af1e:	86 85       	ldd	r24, Z+14	; 0x0e
    af20:	97 85       	ldd	r25, Z+15	; 0x0f
    af22:	a0 89       	ldd	r26, Z+16	; 0x10
    af24:	b1 89       	ldd	r27, Z+17	; 0x11
    af26:	8f 3f       	cpi	r24, 0xFF	; 255
    af28:	ff ef       	ldi	r31, 0xFF	; 255
    af2a:	9f 07       	cpc	r25, r31
    af2c:	ff ef       	ldi	r31, 0xFF	; 255
    af2e:	af 07       	cpc	r26, r31
    af30:	ff ef       	ldi	r31, 0xFF	; 255
    af32:	bf 07       	cpc	r27, r31
    af34:	b1 f0       	breq	.+44     	; 0xaf62 <remove_chain+0x136>
				fs->free_clust++;
    af36:	8e 81       	ldd	r24, Y+6	; 0x06
    af38:	9f 81       	ldd	r25, Y+7	; 0x07
    af3a:	fc 01       	movw	r30, r24
    af3c:	86 85       	ldd	r24, Z+14	; 0x0e
    af3e:	97 85       	ldd	r25, Z+15	; 0x0f
    af40:	a0 89       	ldd	r26, Z+16	; 0x10
    af42:	b1 89       	ldd	r27, Z+17	; 0x11
    af44:	01 96       	adiw	r24, 0x01	; 1
    af46:	a1 1d       	adc	r26, r1
    af48:	b1 1d       	adc	r27, r1
    af4a:	2e 81       	ldd	r18, Y+6	; 0x06
    af4c:	3f 81       	ldd	r19, Y+7	; 0x07
    af4e:	f9 01       	movw	r30, r18
    af50:	86 87       	std	Z+14, r24	; 0x0e
    af52:	97 87       	std	Z+15, r25	; 0x0f
    af54:	a0 8b       	std	Z+16, r26	; 0x10
    af56:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    af58:	8e 81       	ldd	r24, Y+6	; 0x06
    af5a:	9f 81       	ldd	r25, Y+7	; 0x07
    af5c:	21 e0       	ldi	r18, 0x01	; 1
    af5e:	fc 01       	movw	r30, r24
    af60:	25 83       	std	Z+5, r18	; 0x05
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    af62:	8a 81       	ldd	r24, Y+2	; 0x02
    af64:	9b 81       	ldd	r25, Y+3	; 0x03
    af66:	ac 81       	ldd	r26, Y+4	; 0x04
    af68:	bd 81       	ldd	r27, Y+5	; 0x05
    af6a:	88 87       	std	Y+8, r24	; 0x08
    af6c:	99 87       	std	Y+9, r25	; 0x09
    af6e:	aa 87       	std	Y+10, r26	; 0x0a
    af70:	bb 87       	std	Y+11, r27	; 0x0b
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    af72:	8e 81       	ldd	r24, Y+6	; 0x06
    af74:	9f 81       	ldd	r25, Y+7	; 0x07
    af76:	fc 01       	movw	r30, r24
    af78:	26 89       	ldd	r18, Z+22	; 0x16
    af7a:	37 89       	ldd	r19, Z+23	; 0x17
    af7c:	40 8d       	ldd	r20, Z+24	; 0x18
    af7e:	51 8d       	ldd	r21, Z+25	; 0x19
    af80:	88 85       	ldd	r24, Y+8	; 0x08
    af82:	99 85       	ldd	r25, Y+9	; 0x09
    af84:	aa 85       	ldd	r26, Y+10	; 0x0a
    af86:	bb 85       	ldd	r27, Y+11	; 0x0b
    af88:	82 17       	cp	r24, r18
    af8a:	93 07       	cpc	r25, r19
    af8c:	a4 07       	cpc	r26, r20
    af8e:	b5 07       	cpc	r27, r21
    af90:	08 f4       	brcc	.+2      	; 0xaf94 <remove_chain+0x168>
    af92:	7c cf       	rjmp	.-264    	; 0xae8c <remove_chain+0x60>
    af94:	03 c0       	rjmp	.+6      	; 0xaf9c <remove_chain+0x170>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    af96:	00 00       	nop
    af98:	01 c0       	rjmp	.+2      	; 0xaf9c <remove_chain+0x170>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
    af9a:	00 00       	nop
#endif
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
    af9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    af9e:	2b 96       	adiw	r28, 0x0b	; 11
    afa0:	0f b6       	in	r0, 0x3f	; 63
    afa2:	f8 94       	cli
    afa4:	de bf       	out	0x3e, r29	; 62
    afa6:	0f be       	out	0x3f, r0	; 63
    afa8:	cd bf       	out	0x3d, r28	; 61
    afaa:	cf 91       	pop	r28
    afac:	df 91       	pop	r29
    afae:	1f 91       	pop	r17
    afb0:	0f 91       	pop	r16
    afb2:	08 95       	ret

0000afb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    afb4:	0f 93       	push	r16
    afb6:	1f 93       	push	r17
    afb8:	df 93       	push	r29
    afba:	cf 93       	push	r28
    afbc:	cd b7       	in	r28, 0x3d	; 61
    afbe:	de b7       	in	r29, 0x3e	; 62
    afc0:	63 97       	sbiw	r28, 0x13	; 19
    afc2:	0f b6       	in	r0, 0x3f	; 63
    afc4:	f8 94       	cli
    afc6:	de bf       	out	0x3e, r29	; 62
    afc8:	0f be       	out	0x3f, r0	; 63
    afca:	cd bf       	out	0x3d, r28	; 61
    afcc:	9f 87       	std	Y+15, r25	; 0x0f
    afce:	8e 87       	std	Y+14, r24	; 0x0e
    afd0:	48 8b       	std	Y+16, r20	; 0x10
    afd2:	59 8b       	std	Y+17, r21	; 0x11
    afd4:	6a 8b       	std	Y+18, r22	; 0x12
    afd6:	7b 8b       	std	Y+19, r23	; 0x13
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    afd8:	88 89       	ldd	r24, Y+16	; 0x10
    afda:	99 89       	ldd	r25, Y+17	; 0x11
    afdc:	aa 89       	ldd	r26, Y+18	; 0x12
    afde:	bb 89       	ldd	r27, Y+19	; 0x13
    afe0:	00 97       	sbiw	r24, 0x00	; 0
    afe2:	a1 05       	cpc	r26, r1
    afe4:	b1 05       	cpc	r27, r1
    afe6:	69 f5       	brne	.+90     	; 0xb042 <create_chain+0x8e>
		scl = fs->last_clust;			/* Get suggested start point */
    afe8:	8e 85       	ldd	r24, Y+14	; 0x0e
    afea:	9f 85       	ldd	r25, Y+15	; 0x0f
    afec:	fc 01       	movw	r30, r24
    afee:	82 85       	ldd	r24, Z+10	; 0x0a
    aff0:	93 85       	ldd	r25, Z+11	; 0x0b
    aff2:	a4 85       	ldd	r26, Z+12	; 0x0c
    aff4:	b5 85       	ldd	r27, Z+13	; 0x0d
    aff6:	8d 83       	std	Y+5, r24	; 0x05
    aff8:	9e 83       	std	Y+6, r25	; 0x06
    affa:	af 83       	std	Y+7, r26	; 0x07
    affc:	b8 87       	std	Y+8, r27	; 0x08
		if (!scl || scl >= fs->n_fatent) scl = 1;
    affe:	8d 81       	ldd	r24, Y+5	; 0x05
    b000:	9e 81       	ldd	r25, Y+6	; 0x06
    b002:	af 81       	ldd	r26, Y+7	; 0x07
    b004:	b8 85       	ldd	r27, Y+8	; 0x08
    b006:	00 97       	sbiw	r24, 0x00	; 0
    b008:	a1 05       	cpc	r26, r1
    b00a:	b1 05       	cpc	r27, r1
    b00c:	89 f0       	breq	.+34     	; 0xb030 <create_chain+0x7c>
    b00e:	8e 85       	ldd	r24, Y+14	; 0x0e
    b010:	9f 85       	ldd	r25, Y+15	; 0x0f
    b012:	fc 01       	movw	r30, r24
    b014:	26 89       	ldd	r18, Z+22	; 0x16
    b016:	37 89       	ldd	r19, Z+23	; 0x17
    b018:	40 8d       	ldd	r20, Z+24	; 0x18
    b01a:	51 8d       	ldd	r21, Z+25	; 0x19
    b01c:	8d 81       	ldd	r24, Y+5	; 0x05
    b01e:	9e 81       	ldd	r25, Y+6	; 0x06
    b020:	af 81       	ldd	r26, Y+7	; 0x07
    b022:	b8 85       	ldd	r27, Y+8	; 0x08
    b024:	82 17       	cp	r24, r18
    b026:	93 07       	cpc	r25, r19
    b028:	a4 07       	cpc	r26, r20
    b02a:	b5 07       	cpc	r27, r21
    b02c:	08 f4       	brcc	.+2      	; 0xb030 <create_chain+0x7c>
    b02e:	44 c0       	rjmp	.+136    	; 0xb0b8 <create_chain+0x104>
    b030:	81 e0       	ldi	r24, 0x01	; 1
    b032:	90 e0       	ldi	r25, 0x00	; 0
    b034:	a0 e0       	ldi	r26, 0x00	; 0
    b036:	b0 e0       	ldi	r27, 0x00	; 0
    b038:	8d 83       	std	Y+5, r24	; 0x05
    b03a:	9e 83       	std	Y+6, r25	; 0x06
    b03c:	af 83       	std	Y+7, r26	; 0x07
    b03e:	b8 87       	std	Y+8, r27	; 0x08
    b040:	3b c0       	rjmp	.+118    	; 0xb0b8 <create_chain+0x104>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    b042:	8e 85       	ldd	r24, Y+14	; 0x0e
    b044:	9f 85       	ldd	r25, Y+15	; 0x0f
    b046:	28 89       	ldd	r18, Y+16	; 0x10
    b048:	39 89       	ldd	r19, Y+17	; 0x11
    b04a:	4a 89       	ldd	r20, Y+18	; 0x12
    b04c:	5b 89       	ldd	r21, Y+19	; 0x13
    b04e:	ba 01       	movw	r22, r20
    b050:	a9 01       	movw	r20, r18
    b052:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    b056:	dc 01       	movw	r26, r24
    b058:	cb 01       	movw	r24, r22
    b05a:	8a 87       	std	Y+10, r24	; 0x0a
    b05c:	9b 87       	std	Y+11, r25	; 0x0b
    b05e:	ac 87       	std	Y+12, r26	; 0x0c
    b060:	bd 87       	std	Y+13, r27	; 0x0d
		if (cs < 2) return 1;			/* It is an invalid cluster */
    b062:	8a 85       	ldd	r24, Y+10	; 0x0a
    b064:	9b 85       	ldd	r25, Y+11	; 0x0b
    b066:	ac 85       	ldd	r26, Y+12	; 0x0c
    b068:	bd 85       	ldd	r27, Y+13	; 0x0d
    b06a:	82 30       	cpi	r24, 0x02	; 2
    b06c:	91 05       	cpc	r25, r1
    b06e:	a1 05       	cpc	r26, r1
    b070:	b1 05       	cpc	r27, r1
    b072:	28 f4       	brcc	.+10     	; 0xb07e <create_chain+0xca>
    b074:	81 e0       	ldi	r24, 0x01	; 1
    b076:	90 e0       	ldi	r25, 0x00	; 0
    b078:	a0 e0       	ldi	r26, 0x00	; 0
    b07a:	b0 e0       	ldi	r27, 0x00	; 0
    b07c:	0e c1       	rjmp	.+540    	; 0xb29a <create_chain+0x2e6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    b07e:	8e 85       	ldd	r24, Y+14	; 0x0e
    b080:	9f 85       	ldd	r25, Y+15	; 0x0f
    b082:	fc 01       	movw	r30, r24
    b084:	26 89       	ldd	r18, Z+22	; 0x16
    b086:	37 89       	ldd	r19, Z+23	; 0x17
    b088:	40 8d       	ldd	r20, Z+24	; 0x18
    b08a:	51 8d       	ldd	r21, Z+25	; 0x19
    b08c:	8a 85       	ldd	r24, Y+10	; 0x0a
    b08e:	9b 85       	ldd	r25, Y+11	; 0x0b
    b090:	ac 85       	ldd	r26, Y+12	; 0x0c
    b092:	bd 85       	ldd	r27, Y+13	; 0x0d
    b094:	82 17       	cp	r24, r18
    b096:	93 07       	cpc	r25, r19
    b098:	a4 07       	cpc	r26, r20
    b09a:	b5 07       	cpc	r27, r21
    b09c:	28 f4       	brcc	.+10     	; 0xb0a8 <create_chain+0xf4>
    b09e:	8a 85       	ldd	r24, Y+10	; 0x0a
    b0a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    b0a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    b0a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    b0a6:	f9 c0       	rjmp	.+498    	; 0xb29a <create_chain+0x2e6>
		scl = clst;
    b0a8:	88 89       	ldd	r24, Y+16	; 0x10
    b0aa:	99 89       	ldd	r25, Y+17	; 0x11
    b0ac:	aa 89       	ldd	r26, Y+18	; 0x12
    b0ae:	bb 89       	ldd	r27, Y+19	; 0x13
    b0b0:	8d 83       	std	Y+5, r24	; 0x05
    b0b2:	9e 83       	std	Y+6, r25	; 0x06
    b0b4:	af 83       	std	Y+7, r26	; 0x07
    b0b6:	b8 87       	std	Y+8, r27	; 0x08
	}

	ncl = scl;				/* Start cluster */
    b0b8:	8d 81       	ldd	r24, Y+5	; 0x05
    b0ba:	9e 81       	ldd	r25, Y+6	; 0x06
    b0bc:	af 81       	ldd	r26, Y+7	; 0x07
    b0be:	b8 85       	ldd	r27, Y+8	; 0x08
    b0c0:	89 83       	std	Y+1, r24	; 0x01
    b0c2:	9a 83       	std	Y+2, r25	; 0x02
    b0c4:	ab 83       	std	Y+3, r26	; 0x03
    b0c6:	bc 83       	std	Y+4, r27	; 0x04
    b0c8:	01 c0       	rjmp	.+2      	; 0xb0cc <create_chain+0x118>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}
    b0ca:	00 00       	nop
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    b0cc:	89 81       	ldd	r24, Y+1	; 0x01
    b0ce:	9a 81       	ldd	r25, Y+2	; 0x02
    b0d0:	ab 81       	ldd	r26, Y+3	; 0x03
    b0d2:	bc 81       	ldd	r27, Y+4	; 0x04
    b0d4:	01 96       	adiw	r24, 0x01	; 1
    b0d6:	a1 1d       	adc	r26, r1
    b0d8:	b1 1d       	adc	r27, r1
    b0da:	89 83       	std	Y+1, r24	; 0x01
    b0dc:	9a 83       	std	Y+2, r25	; 0x02
    b0de:	ab 83       	std	Y+3, r26	; 0x03
    b0e0:	bc 83       	std	Y+4, r27	; 0x04
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    b0e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    b0e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    b0e6:	fc 01       	movw	r30, r24
    b0e8:	26 89       	ldd	r18, Z+22	; 0x16
    b0ea:	37 89       	ldd	r19, Z+23	; 0x17
    b0ec:	40 8d       	ldd	r20, Z+24	; 0x18
    b0ee:	51 8d       	ldd	r21, Z+25	; 0x19
    b0f0:	89 81       	ldd	r24, Y+1	; 0x01
    b0f2:	9a 81       	ldd	r25, Y+2	; 0x02
    b0f4:	ab 81       	ldd	r26, Y+3	; 0x03
    b0f6:	bc 81       	ldd	r27, Y+4	; 0x04
    b0f8:	82 17       	cp	r24, r18
    b0fa:	93 07       	cpc	r25, r19
    b0fc:	a4 07       	cpc	r26, r20
    b0fe:	b5 07       	cpc	r27, r21
    b100:	c8 f0       	brcs	.+50     	; 0xb134 <create_chain+0x180>
			ncl = 2;
    b102:	82 e0       	ldi	r24, 0x02	; 2
    b104:	90 e0       	ldi	r25, 0x00	; 0
    b106:	a0 e0       	ldi	r26, 0x00	; 0
    b108:	b0 e0       	ldi	r27, 0x00	; 0
    b10a:	89 83       	std	Y+1, r24	; 0x01
    b10c:	9a 83       	std	Y+2, r25	; 0x02
    b10e:	ab 83       	std	Y+3, r26	; 0x03
    b110:	bc 83       	std	Y+4, r27	; 0x04
			if (ncl > scl) return 0;	/* No free cluster */
    b112:	29 81       	ldd	r18, Y+1	; 0x01
    b114:	3a 81       	ldd	r19, Y+2	; 0x02
    b116:	4b 81       	ldd	r20, Y+3	; 0x03
    b118:	5c 81       	ldd	r21, Y+4	; 0x04
    b11a:	8d 81       	ldd	r24, Y+5	; 0x05
    b11c:	9e 81       	ldd	r25, Y+6	; 0x06
    b11e:	af 81       	ldd	r26, Y+7	; 0x07
    b120:	b8 85       	ldd	r27, Y+8	; 0x08
    b122:	82 17       	cp	r24, r18
    b124:	93 07       	cpc	r25, r19
    b126:	a4 07       	cpc	r26, r20
    b128:	b5 07       	cpc	r27, r21
    b12a:	20 f4       	brcc	.+8      	; 0xb134 <create_chain+0x180>
    b12c:	80 e0       	ldi	r24, 0x00	; 0
    b12e:	90 e0       	ldi	r25, 0x00	; 0
    b130:	dc 01       	movw	r26, r24
    b132:	b3 c0       	rjmp	.+358    	; 0xb29a <create_chain+0x2e6>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    b134:	8e 85       	ldd	r24, Y+14	; 0x0e
    b136:	9f 85       	ldd	r25, Y+15	; 0x0f
    b138:	29 81       	ldd	r18, Y+1	; 0x01
    b13a:	3a 81       	ldd	r19, Y+2	; 0x02
    b13c:	4b 81       	ldd	r20, Y+3	; 0x03
    b13e:	5c 81       	ldd	r21, Y+4	; 0x04
    b140:	ba 01       	movw	r22, r20
    b142:	a9 01       	movw	r20, r18
    b144:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    b148:	dc 01       	movw	r26, r24
    b14a:	cb 01       	movw	r24, r22
    b14c:	8a 87       	std	Y+10, r24	; 0x0a
    b14e:	9b 87       	std	Y+11, r25	; 0x0b
    b150:	ac 87       	std	Y+12, r26	; 0x0c
    b152:	bd 87       	std	Y+13, r27	; 0x0d
		if (cs == 0) break;				/* Found a free cluster */
    b154:	8a 85       	ldd	r24, Y+10	; 0x0a
    b156:	9b 85       	ldd	r25, Y+11	; 0x0b
    b158:	ac 85       	ldd	r26, Y+12	; 0x0c
    b15a:	bd 85       	ldd	r27, Y+13	; 0x0d
    b15c:	00 97       	sbiw	r24, 0x00	; 0
    b15e:	a1 05       	cpc	r26, r1
    b160:	b1 05       	cpc	r27, r1
    b162:	99 f4       	brne	.+38     	; 0xb18a <create_chain+0x1d6>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    b164:	8e 85       	ldd	r24, Y+14	; 0x0e
    b166:	9f 85       	ldd	r25, Y+15	; 0x0f
    b168:	29 81       	ldd	r18, Y+1	; 0x01
    b16a:	3a 81       	ldd	r19, Y+2	; 0x02
    b16c:	4b 81       	ldd	r20, Y+3	; 0x03
    b16e:	5c 81       	ldd	r21, Y+4	; 0x04
    b170:	ba 01       	movw	r22, r20
    b172:	a9 01       	movw	r20, r18
    b174:	0f ef       	ldi	r16, 0xFF	; 255
    b176:	1f ef       	ldi	r17, 0xFF	; 255
    b178:	2f ef       	ldi	r18, 0xFF	; 255
    b17a:	3f e0       	ldi	r19, 0x0F	; 15
    b17c:	0e 94 22 55 	call	0xaa44	; 0xaa44 <put_fat>
    b180:	89 87       	std	Y+9, r24	; 0x09
	if (res == FR_OK && clst != 0) {
    b182:	89 85       	ldd	r24, Y+9	; 0x09
    b184:	88 23       	and	r24, r24
    b186:	69 f1       	breq	.+90     	; 0xb1e2 <create_chain+0x22e>
    b188:	41 c0       	rjmp	.+130    	; 0xb20c <create_chain+0x258>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    b18a:	8a 85       	ldd	r24, Y+10	; 0x0a
    b18c:	9b 85       	ldd	r25, Y+11	; 0x0b
    b18e:	ac 85       	ldd	r26, Y+12	; 0x0c
    b190:	bd 85       	ldd	r27, Y+13	; 0x0d
    b192:	8f 3f       	cpi	r24, 0xFF	; 255
    b194:	ff ef       	ldi	r31, 0xFF	; 255
    b196:	9f 07       	cpc	r25, r31
    b198:	ff ef       	ldi	r31, 0xFF	; 255
    b19a:	af 07       	cpc	r26, r31
    b19c:	ff ef       	ldi	r31, 0xFF	; 255
    b19e:	bf 07       	cpc	r27, r31
    b1a0:	49 f0       	breq	.+18     	; 0xb1b4 <create_chain+0x200>
    b1a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    b1a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    b1a6:	ac 85       	ldd	r26, Y+12	; 0x0c
    b1a8:	bd 85       	ldd	r27, Y+13	; 0x0d
    b1aa:	81 30       	cpi	r24, 0x01	; 1
    b1ac:	91 05       	cpc	r25, r1
    b1ae:	a1 05       	cpc	r26, r1
    b1b0:	b1 05       	cpc	r27, r1
    b1b2:	29 f4       	brne	.+10     	; 0xb1be <create_chain+0x20a>
			return cs;
    b1b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    b1b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    b1b8:	ac 85       	ldd	r26, Y+12	; 0x0c
    b1ba:	bd 85       	ldd	r27, Y+13	; 0x0d
    b1bc:	6e c0       	rjmp	.+220    	; 0xb29a <create_chain+0x2e6>
		if (ncl == scl) return 0;		/* No free cluster */
    b1be:	29 81       	ldd	r18, Y+1	; 0x01
    b1c0:	3a 81       	ldd	r19, Y+2	; 0x02
    b1c2:	4b 81       	ldd	r20, Y+3	; 0x03
    b1c4:	5c 81       	ldd	r21, Y+4	; 0x04
    b1c6:	8d 81       	ldd	r24, Y+5	; 0x05
    b1c8:	9e 81       	ldd	r25, Y+6	; 0x06
    b1ca:	af 81       	ldd	r26, Y+7	; 0x07
    b1cc:	b8 85       	ldd	r27, Y+8	; 0x08
    b1ce:	28 17       	cp	r18, r24
    b1d0:	39 07       	cpc	r19, r25
    b1d2:	4a 07       	cpc	r20, r26
    b1d4:	5b 07       	cpc	r21, r27
    b1d6:	09 f0       	breq	.+2      	; 0xb1da <create_chain+0x226>
    b1d8:	78 cf       	rjmp	.-272    	; 0xb0ca <create_chain+0x116>
    b1da:	80 e0       	ldi	r24, 0x00	; 0
    b1dc:	90 e0       	ldi	r25, 0x00	; 0
    b1de:	dc 01       	movw	r26, r24
    b1e0:	5c c0       	rjmp	.+184    	; 0xb29a <create_chain+0x2e6>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
    b1e2:	88 89       	ldd	r24, Y+16	; 0x10
    b1e4:	99 89       	ldd	r25, Y+17	; 0x11
    b1e6:	aa 89       	ldd	r26, Y+18	; 0x12
    b1e8:	bb 89       	ldd	r27, Y+19	; 0x13
    b1ea:	00 97       	sbiw	r24, 0x00	; 0
    b1ec:	a1 05       	cpc	r26, r1
    b1ee:	b1 05       	cpc	r27, r1
    b1f0:	69 f0       	breq	.+26     	; 0xb20c <create_chain+0x258>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    b1f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    b1f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    b1f6:	48 89       	ldd	r20, Y+16	; 0x10
    b1f8:	59 89       	ldd	r21, Y+17	; 0x11
    b1fa:	6a 89       	ldd	r22, Y+18	; 0x12
    b1fc:	7b 89       	ldd	r23, Y+19	; 0x13
    b1fe:	09 81       	ldd	r16, Y+1	; 0x01
    b200:	1a 81       	ldd	r17, Y+2	; 0x02
    b202:	2b 81       	ldd	r18, Y+3	; 0x03
    b204:	3c 81       	ldd	r19, Y+4	; 0x04
    b206:	0e 94 22 55 	call	0xaa44	; 0xaa44 <put_fat>
    b20a:	89 87       	std	Y+9, r24	; 0x09
	}
	if (res == FR_OK) {
    b20c:	89 85       	ldd	r24, Y+9	; 0x09
    b20e:	88 23       	and	r24, r24
    b210:	89 f5       	brne	.+98     	; 0xb274 <create_chain+0x2c0>
		fs->last_clust = ncl;			/* Update FSINFO */
    b212:	2e 85       	ldd	r18, Y+14	; 0x0e
    b214:	3f 85       	ldd	r19, Y+15	; 0x0f
    b216:	89 81       	ldd	r24, Y+1	; 0x01
    b218:	9a 81       	ldd	r25, Y+2	; 0x02
    b21a:	ab 81       	ldd	r26, Y+3	; 0x03
    b21c:	bc 81       	ldd	r27, Y+4	; 0x04
    b21e:	f9 01       	movw	r30, r18
    b220:	82 87       	std	Z+10, r24	; 0x0a
    b222:	93 87       	std	Z+11, r25	; 0x0b
    b224:	a4 87       	std	Z+12, r26	; 0x0c
    b226:	b5 87       	std	Z+13, r27	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    b228:	8e 85       	ldd	r24, Y+14	; 0x0e
    b22a:	9f 85       	ldd	r25, Y+15	; 0x0f
    b22c:	fc 01       	movw	r30, r24
    b22e:	86 85       	ldd	r24, Z+14	; 0x0e
    b230:	97 85       	ldd	r25, Z+15	; 0x0f
    b232:	a0 89       	ldd	r26, Z+16	; 0x10
    b234:	b1 89       	ldd	r27, Z+17	; 0x11
    b236:	8f 3f       	cpi	r24, 0xFF	; 255
    b238:	ff ef       	ldi	r31, 0xFF	; 255
    b23a:	9f 07       	cpc	r25, r31
    b23c:	ff ef       	ldi	r31, 0xFF	; 255
    b23e:	af 07       	cpc	r26, r31
    b240:	ff ef       	ldi	r31, 0xFF	; 255
    b242:	bf 07       	cpc	r27, r31
    b244:	31 f1       	breq	.+76     	; 0xb292 <create_chain+0x2de>
			fs->free_clust--;
    b246:	8e 85       	ldd	r24, Y+14	; 0x0e
    b248:	9f 85       	ldd	r25, Y+15	; 0x0f
    b24a:	fc 01       	movw	r30, r24
    b24c:	86 85       	ldd	r24, Z+14	; 0x0e
    b24e:	97 85       	ldd	r25, Z+15	; 0x0f
    b250:	a0 89       	ldd	r26, Z+16	; 0x10
    b252:	b1 89       	ldd	r27, Z+17	; 0x11
    b254:	01 97       	sbiw	r24, 0x01	; 1
    b256:	a1 09       	sbc	r26, r1
    b258:	b1 09       	sbc	r27, r1
    b25a:	2e 85       	ldd	r18, Y+14	; 0x0e
    b25c:	3f 85       	ldd	r19, Y+15	; 0x0f
    b25e:	f9 01       	movw	r30, r18
    b260:	86 87       	std	Z+14, r24	; 0x0e
    b262:	97 87       	std	Z+15, r25	; 0x0f
    b264:	a0 8b       	std	Z+16, r26	; 0x10
    b266:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag = 1;
    b268:	8e 85       	ldd	r24, Y+14	; 0x0e
    b26a:	9f 85       	ldd	r25, Y+15	; 0x0f
    b26c:	21 e0       	ldi	r18, 0x01	; 1
    b26e:	fc 01       	movw	r30, r24
    b270:	25 83       	std	Z+5, r18	; 0x05
    b272:	0f c0       	rjmp	.+30     	; 0xb292 <create_chain+0x2de>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    b274:	89 85       	ldd	r24, Y+9	; 0x09
    b276:	81 30       	cpi	r24, 0x01	; 1
    b278:	21 f4       	brne	.+8      	; 0xb282 <create_chain+0x2ce>
    b27a:	8f ef       	ldi	r24, 0xFF	; 255
    b27c:	9f ef       	ldi	r25, 0xFF	; 255
    b27e:	dc 01       	movw	r26, r24
    b280:	04 c0       	rjmp	.+8      	; 0xb28a <create_chain+0x2d6>
    b282:	81 e0       	ldi	r24, 0x01	; 1
    b284:	90 e0       	ldi	r25, 0x00	; 0
    b286:	a0 e0       	ldi	r26, 0x00	; 0
    b288:	b0 e0       	ldi	r27, 0x00	; 0
    b28a:	89 83       	std	Y+1, r24	; 0x01
    b28c:	9a 83       	std	Y+2, r25	; 0x02
    b28e:	ab 83       	std	Y+3, r26	; 0x03
    b290:	bc 83       	std	Y+4, r27	; 0x04
	}

	return ncl;		/* Return new cluster number or error code */
    b292:	89 81       	ldd	r24, Y+1	; 0x01
    b294:	9a 81       	ldd	r25, Y+2	; 0x02
    b296:	ab 81       	ldd	r26, Y+3	; 0x03
    b298:	bc 81       	ldd	r27, Y+4	; 0x04
}
    b29a:	bc 01       	movw	r22, r24
    b29c:	cd 01       	movw	r24, r26
    b29e:	63 96       	adiw	r28, 0x13	; 19
    b2a0:	0f b6       	in	r0, 0x3f	; 63
    b2a2:	f8 94       	cli
    b2a4:	de bf       	out	0x3e, r29	; 62
    b2a6:	0f be       	out	0x3f, r0	; 63
    b2a8:	cd bf       	out	0x3d, r28	; 61
    b2aa:	cf 91       	pop	r28
    b2ac:	df 91       	pop	r29
    b2ae:	1f 91       	pop	r17
    b2b0:	0f 91       	pop	r16
    b2b2:	08 95       	ret

0000b2b4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    b2b4:	df 93       	push	r29
    b2b6:	cf 93       	push	r28
    b2b8:	cd b7       	in	r28, 0x3d	; 61
    b2ba:	de b7       	in	r29, 0x3e	; 62
    b2bc:	2a 97       	sbiw	r28, 0x0a	; 10
    b2be:	0f b6       	in	r0, 0x3f	; 63
    b2c0:	f8 94       	cli
    b2c2:	de bf       	out	0x3e, r29	; 62
    b2c4:	0f be       	out	0x3f, r0	; 63
    b2c6:	cd bf       	out	0x3d, r28	; 61
    b2c8:	98 87       	std	Y+8, r25	; 0x08
    b2ca:	8f 83       	std	Y+7, r24	; 0x07
    b2cc:	7a 87       	std	Y+10, r23	; 0x0a
    b2ce:	69 87       	std	Y+9, r22	; 0x09
	DWORD clst;
	WORD ic;


	dj->index = idx;
    b2d0:	8f 81       	ldd	r24, Y+7	; 0x07
    b2d2:	98 85       	ldd	r25, Y+8	; 0x08
    b2d4:	29 85       	ldd	r18, Y+9	; 0x09
    b2d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    b2d8:	fc 01       	movw	r30, r24
    b2da:	35 83       	std	Z+5, r19	; 0x05
    b2dc:	24 83       	std	Z+4, r18	; 0x04
	clst = dj->sclust;
    b2de:	8f 81       	ldd	r24, Y+7	; 0x07
    b2e0:	98 85       	ldd	r25, Y+8	; 0x08
    b2e2:	fc 01       	movw	r30, r24
    b2e4:	86 81       	ldd	r24, Z+6	; 0x06
    b2e6:	97 81       	ldd	r25, Z+7	; 0x07
    b2e8:	a0 85       	ldd	r26, Z+8	; 0x08
    b2ea:	b1 85       	ldd	r27, Z+9	; 0x09
    b2ec:	89 83       	std	Y+1, r24	; 0x01
    b2ee:	9a 83       	std	Y+2, r25	; 0x02
    b2f0:	ab 83       	std	Y+3, r26	; 0x03
    b2f2:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    b2f4:	89 81       	ldd	r24, Y+1	; 0x01
    b2f6:	9a 81       	ldd	r25, Y+2	; 0x02
    b2f8:	ab 81       	ldd	r26, Y+3	; 0x03
    b2fa:	bc 81       	ldd	r27, Y+4	; 0x04
    b2fc:	81 30       	cpi	r24, 0x01	; 1
    b2fe:	91 05       	cpc	r25, r1
    b300:	a1 05       	cpc	r26, r1
    b302:	b1 05       	cpc	r27, r1
    b304:	99 f0       	breq	.+38     	; 0xb32c <dir_sdi+0x78>
    b306:	8f 81       	ldd	r24, Y+7	; 0x07
    b308:	98 85       	ldd	r25, Y+8	; 0x08
    b30a:	fc 01       	movw	r30, r24
    b30c:	80 81       	ld	r24, Z
    b30e:	91 81       	ldd	r25, Z+1	; 0x01
    b310:	fc 01       	movw	r30, r24
    b312:	26 89       	ldd	r18, Z+22	; 0x16
    b314:	37 89       	ldd	r19, Z+23	; 0x17
    b316:	40 8d       	ldd	r20, Z+24	; 0x18
    b318:	51 8d       	ldd	r21, Z+25	; 0x19
    b31a:	89 81       	ldd	r24, Y+1	; 0x01
    b31c:	9a 81       	ldd	r25, Y+2	; 0x02
    b31e:	ab 81       	ldd	r26, Y+3	; 0x03
    b320:	bc 81       	ldd	r27, Y+4	; 0x04
    b322:	82 17       	cp	r24, r18
    b324:	93 07       	cpc	r25, r19
    b326:	a4 07       	cpc	r26, r20
    b328:	b5 07       	cpc	r27, r21
    b32a:	10 f0       	brcs	.+4      	; 0xb330 <dir_sdi+0x7c>
		return FR_INT_ERR;
    b32c:	82 e0       	ldi	r24, 0x02	; 2
    b32e:	11 c1       	rjmp	.+546    	; 0xb552 <dir_sdi+0x29e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    b330:	89 81       	ldd	r24, Y+1	; 0x01
    b332:	9a 81       	ldd	r25, Y+2	; 0x02
    b334:	ab 81       	ldd	r26, Y+3	; 0x03
    b336:	bc 81       	ldd	r27, Y+4	; 0x04
    b338:	00 97       	sbiw	r24, 0x00	; 0
    b33a:	a1 05       	cpc	r26, r1
    b33c:	b1 05       	cpc	r27, r1
    b33e:	b9 f4       	brne	.+46     	; 0xb36e <dir_sdi+0xba>
    b340:	8f 81       	ldd	r24, Y+7	; 0x07
    b342:	98 85       	ldd	r25, Y+8	; 0x08
    b344:	fc 01       	movw	r30, r24
    b346:	80 81       	ld	r24, Z
    b348:	91 81       	ldd	r25, Z+1	; 0x01
    b34a:	fc 01       	movw	r30, r24
    b34c:	80 81       	ld	r24, Z
    b34e:	83 30       	cpi	r24, 0x03	; 3
    b350:	71 f4       	brne	.+28     	; 0xb36e <dir_sdi+0xba>
		clst = dj->fs->dirbase;
    b352:	8f 81       	ldd	r24, Y+7	; 0x07
    b354:	98 85       	ldd	r25, Y+8	; 0x08
    b356:	fc 01       	movw	r30, r24
    b358:	80 81       	ld	r24, Z
    b35a:	91 81       	ldd	r25, Z+1	; 0x01
    b35c:	fc 01       	movw	r30, r24
    b35e:	82 a1       	ldd	r24, Z+34	; 0x22
    b360:	93 a1       	ldd	r25, Z+35	; 0x23
    b362:	a4 a1       	ldd	r26, Z+36	; 0x24
    b364:	b5 a1       	ldd	r27, Z+37	; 0x25
    b366:	89 83       	std	Y+1, r24	; 0x01
    b368:	9a 83       	std	Y+2, r25	; 0x02
    b36a:	ab 83       	std	Y+3, r26	; 0x03
    b36c:	bc 83       	std	Y+4, r27	; 0x04

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    b36e:	89 81       	ldd	r24, Y+1	; 0x01
    b370:	9a 81       	ldd	r25, Y+2	; 0x02
    b372:	ab 81       	ldd	r26, Y+3	; 0x03
    b374:	bc 81       	ldd	r27, Y+4	; 0x04
    b376:	00 97       	sbiw	r24, 0x00	; 0
    b378:	a1 05       	cpc	r26, r1
    b37a:	b1 05       	cpc	r27, r1
    b37c:	d9 f5       	brne	.+118    	; 0xb3f4 <dir_sdi+0x140>
		dj->clust = clst;
    b37e:	2f 81       	ldd	r18, Y+7	; 0x07
    b380:	38 85       	ldd	r19, Y+8	; 0x08
    b382:	89 81       	ldd	r24, Y+1	; 0x01
    b384:	9a 81       	ldd	r25, Y+2	; 0x02
    b386:	ab 81       	ldd	r26, Y+3	; 0x03
    b388:	bc 81       	ldd	r27, Y+4	; 0x04
    b38a:	f9 01       	movw	r30, r18
    b38c:	82 87       	std	Z+10, r24	; 0x0a
    b38e:	93 87       	std	Z+11, r25	; 0x0b
    b390:	a4 87       	std	Z+12, r26	; 0x0c
    b392:	b5 87       	std	Z+13, r27	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    b394:	8f 81       	ldd	r24, Y+7	; 0x07
    b396:	98 85       	ldd	r25, Y+8	; 0x08
    b398:	fc 01       	movw	r30, r24
    b39a:	80 81       	ld	r24, Z
    b39c:	91 81       	ldd	r25, Z+1	; 0x01
    b39e:	fc 01       	movw	r30, r24
    b3a0:	20 85       	ldd	r18, Z+8	; 0x08
    b3a2:	31 85       	ldd	r19, Z+9	; 0x09
    b3a4:	89 85       	ldd	r24, Y+9	; 0x09
    b3a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3a8:	82 17       	cp	r24, r18
    b3aa:	93 07       	cpc	r25, r19
    b3ac:	10 f0       	brcs	.+4      	; 0xb3b2 <dir_sdi+0xfe>
			return FR_INT_ERR;
    b3ae:	82 e0       	ldi	r24, 0x02	; 2
    b3b0:	d0 c0       	rjmp	.+416    	; 0xb552 <dir_sdi+0x29e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    b3b2:	8f 81       	ldd	r24, Y+7	; 0x07
    b3b4:	98 85       	ldd	r25, Y+8	; 0x08
    b3b6:	fc 01       	movw	r30, r24
    b3b8:	80 81       	ld	r24, Z
    b3ba:	91 81       	ldd	r25, Z+1	; 0x01
    b3bc:	fc 01       	movw	r30, r24
    b3be:	22 a1       	ldd	r18, Z+34	; 0x22
    b3c0:	33 a1       	ldd	r19, Z+35	; 0x23
    b3c2:	44 a1       	ldd	r20, Z+36	; 0x24
    b3c4:	55 a1       	ldd	r21, Z+37	; 0x25
    b3c6:	89 85       	ldd	r24, Y+9	; 0x09
    b3c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3ca:	92 95       	swap	r25
    b3cc:	82 95       	swap	r24
    b3ce:	8f 70       	andi	r24, 0x0F	; 15
    b3d0:	89 27       	eor	r24, r25
    b3d2:	9f 70       	andi	r25, 0x0F	; 15
    b3d4:	89 27       	eor	r24, r25
    b3d6:	cc 01       	movw	r24, r24
    b3d8:	a0 e0       	ldi	r26, 0x00	; 0
    b3da:	b0 e0       	ldi	r27, 0x00	; 0
    b3dc:	82 0f       	add	r24, r18
    b3de:	93 1f       	adc	r25, r19
    b3e0:	a4 1f       	adc	r26, r20
    b3e2:	b5 1f       	adc	r27, r21
    b3e4:	2f 81       	ldd	r18, Y+7	; 0x07
    b3e6:	38 85       	ldd	r19, Y+8	; 0x08
    b3e8:	f9 01       	movw	r30, r18
    b3ea:	86 87       	std	Z+14, r24	; 0x0e
    b3ec:	97 87       	std	Z+15, r25	; 0x0f
    b3ee:	a0 8b       	std	Z+16, r26	; 0x10
    b3f0:	b1 8b       	std	Z+17, r27	; 0x11
    b3f2:	93 c0       	rjmp	.+294    	; 0xb51a <dir_sdi+0x266>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    b3f4:	8f 81       	ldd	r24, Y+7	; 0x07
    b3f6:	98 85       	ldd	r25, Y+8	; 0x08
    b3f8:	fc 01       	movw	r30, r24
    b3fa:	80 81       	ld	r24, Z
    b3fc:	91 81       	ldd	r25, Z+1	; 0x01
    b3fe:	fc 01       	movw	r30, r24
    b400:	82 81       	ldd	r24, Z+2	; 0x02
    b402:	88 2f       	mov	r24, r24
    b404:	90 e0       	ldi	r25, 0x00	; 0
    b406:	82 95       	swap	r24
    b408:	92 95       	swap	r25
    b40a:	90 7f       	andi	r25, 0xF0	; 240
    b40c:	98 27       	eor	r25, r24
    b40e:	80 7f       	andi	r24, 0xF0	; 240
    b410:	98 27       	eor	r25, r24
    b412:	9e 83       	std	Y+6, r25	; 0x06
    b414:	8d 83       	std	Y+5, r24	; 0x05
		while (idx >= ic) {	/* Follow cluster chain */
    b416:	49 c0       	rjmp	.+146    	; 0xb4aa <dir_sdi+0x1f6>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    b418:	8f 81       	ldd	r24, Y+7	; 0x07
    b41a:	98 85       	ldd	r25, Y+8	; 0x08
    b41c:	fc 01       	movw	r30, r24
    b41e:	80 81       	ld	r24, Z
    b420:	91 81       	ldd	r25, Z+1	; 0x01
    b422:	29 81       	ldd	r18, Y+1	; 0x01
    b424:	3a 81       	ldd	r19, Y+2	; 0x02
    b426:	4b 81       	ldd	r20, Y+3	; 0x03
    b428:	5c 81       	ldd	r21, Y+4	; 0x04
    b42a:	ba 01       	movw	r22, r20
    b42c:	a9 01       	movw	r20, r18
    b42e:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    b432:	dc 01       	movw	r26, r24
    b434:	cb 01       	movw	r24, r22
    b436:	89 83       	std	Y+1, r24	; 0x01
    b438:	9a 83       	std	Y+2, r25	; 0x02
    b43a:	ab 83       	std	Y+3, r26	; 0x03
    b43c:	bc 83       	std	Y+4, r27	; 0x04
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    b43e:	89 81       	ldd	r24, Y+1	; 0x01
    b440:	9a 81       	ldd	r25, Y+2	; 0x02
    b442:	ab 81       	ldd	r26, Y+3	; 0x03
    b444:	bc 81       	ldd	r27, Y+4	; 0x04
    b446:	8f 3f       	cpi	r24, 0xFF	; 255
    b448:	ff ef       	ldi	r31, 0xFF	; 255
    b44a:	9f 07       	cpc	r25, r31
    b44c:	ff ef       	ldi	r31, 0xFF	; 255
    b44e:	af 07       	cpc	r26, r31
    b450:	ff ef       	ldi	r31, 0xFF	; 255
    b452:	bf 07       	cpc	r27, r31
    b454:	11 f4       	brne	.+4      	; 0xb45a <dir_sdi+0x1a6>
    b456:	81 e0       	ldi	r24, 0x01	; 1
    b458:	7c c0       	rjmp	.+248    	; 0xb552 <dir_sdi+0x29e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    b45a:	89 81       	ldd	r24, Y+1	; 0x01
    b45c:	9a 81       	ldd	r25, Y+2	; 0x02
    b45e:	ab 81       	ldd	r26, Y+3	; 0x03
    b460:	bc 81       	ldd	r27, Y+4	; 0x04
    b462:	82 30       	cpi	r24, 0x02	; 2
    b464:	91 05       	cpc	r25, r1
    b466:	a1 05       	cpc	r26, r1
    b468:	b1 05       	cpc	r27, r1
    b46a:	98 f0       	brcs	.+38     	; 0xb492 <dir_sdi+0x1de>
    b46c:	8f 81       	ldd	r24, Y+7	; 0x07
    b46e:	98 85       	ldd	r25, Y+8	; 0x08
    b470:	fc 01       	movw	r30, r24
    b472:	80 81       	ld	r24, Z
    b474:	91 81       	ldd	r25, Z+1	; 0x01
    b476:	fc 01       	movw	r30, r24
    b478:	26 89       	ldd	r18, Z+22	; 0x16
    b47a:	37 89       	ldd	r19, Z+23	; 0x17
    b47c:	40 8d       	ldd	r20, Z+24	; 0x18
    b47e:	51 8d       	ldd	r21, Z+25	; 0x19
    b480:	89 81       	ldd	r24, Y+1	; 0x01
    b482:	9a 81       	ldd	r25, Y+2	; 0x02
    b484:	ab 81       	ldd	r26, Y+3	; 0x03
    b486:	bc 81       	ldd	r27, Y+4	; 0x04
    b488:	82 17       	cp	r24, r18
    b48a:	93 07       	cpc	r25, r19
    b48c:	a4 07       	cpc	r26, r20
    b48e:	b5 07       	cpc	r27, r21
    b490:	10 f0       	brcs	.+4      	; 0xb496 <dir_sdi+0x1e2>
				return FR_INT_ERR;
    b492:	82 e0       	ldi	r24, 0x02	; 2
    b494:	5e c0       	rjmp	.+188    	; 0xb552 <dir_sdi+0x29e>
			idx -= ic;
    b496:	29 85       	ldd	r18, Y+9	; 0x09
    b498:	3a 85       	ldd	r19, Y+10	; 0x0a
    b49a:	8d 81       	ldd	r24, Y+5	; 0x05
    b49c:	9e 81       	ldd	r25, Y+6	; 0x06
    b49e:	a9 01       	movw	r20, r18
    b4a0:	48 1b       	sub	r20, r24
    b4a2:	59 0b       	sbc	r21, r25
    b4a4:	ca 01       	movw	r24, r20
    b4a6:	9a 87       	std	Y+10, r25	; 0x0a
    b4a8:	89 87       	std	Y+9, r24	; 0x09
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    b4aa:	29 85       	ldd	r18, Y+9	; 0x09
    b4ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    b4ae:	8d 81       	ldd	r24, Y+5	; 0x05
    b4b0:	9e 81       	ldd	r25, Y+6	; 0x06
    b4b2:	28 17       	cp	r18, r24
    b4b4:	39 07       	cpc	r19, r25
    b4b6:	08 f0       	brcs	.+2      	; 0xb4ba <dir_sdi+0x206>
    b4b8:	af cf       	rjmp	.-162    	; 0xb418 <dir_sdi+0x164>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    b4ba:	2f 81       	ldd	r18, Y+7	; 0x07
    b4bc:	38 85       	ldd	r19, Y+8	; 0x08
    b4be:	89 81       	ldd	r24, Y+1	; 0x01
    b4c0:	9a 81       	ldd	r25, Y+2	; 0x02
    b4c2:	ab 81       	ldd	r26, Y+3	; 0x03
    b4c4:	bc 81       	ldd	r27, Y+4	; 0x04
    b4c6:	f9 01       	movw	r30, r18
    b4c8:	82 87       	std	Z+10, r24	; 0x0a
    b4ca:	93 87       	std	Z+11, r25	; 0x0b
    b4cc:	a4 87       	std	Z+12, r26	; 0x0c
    b4ce:	b5 87       	std	Z+13, r27	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    b4d0:	8f 81       	ldd	r24, Y+7	; 0x07
    b4d2:	98 85       	ldd	r25, Y+8	; 0x08
    b4d4:	fc 01       	movw	r30, r24
    b4d6:	80 81       	ld	r24, Z
    b4d8:	91 81       	ldd	r25, Z+1	; 0x01
    b4da:	29 81       	ldd	r18, Y+1	; 0x01
    b4dc:	3a 81       	ldd	r19, Y+2	; 0x02
    b4de:	4b 81       	ldd	r20, Y+3	; 0x03
    b4e0:	5c 81       	ldd	r21, Y+4	; 0x04
    b4e2:	ba 01       	movw	r22, r20
    b4e4:	a9 01       	movw	r20, r18
    b4e6:	0e 94 41 53 	call	0xa682	; 0xa682 <clust2sect>
    b4ea:	9b 01       	movw	r18, r22
    b4ec:	ac 01       	movw	r20, r24
    b4ee:	89 85       	ldd	r24, Y+9	; 0x09
    b4f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    b4f2:	92 95       	swap	r25
    b4f4:	82 95       	swap	r24
    b4f6:	8f 70       	andi	r24, 0x0F	; 15
    b4f8:	89 27       	eor	r24, r25
    b4fa:	9f 70       	andi	r25, 0x0F	; 15
    b4fc:	89 27       	eor	r24, r25
    b4fe:	cc 01       	movw	r24, r24
    b500:	a0 e0       	ldi	r26, 0x00	; 0
    b502:	b0 e0       	ldi	r27, 0x00	; 0
    b504:	82 0f       	add	r24, r18
    b506:	93 1f       	adc	r25, r19
    b508:	a4 1f       	adc	r26, r20
    b50a:	b5 1f       	adc	r27, r21
    b50c:	2f 81       	ldd	r18, Y+7	; 0x07
    b50e:	38 85       	ldd	r19, Y+8	; 0x08
    b510:	f9 01       	movw	r30, r18
    b512:	86 87       	std	Z+14, r24	; 0x0e
    b514:	97 87       	std	Z+15, r25	; 0x0f
    b516:	a0 8b       	std	Z+16, r26	; 0x10
    b518:	b1 8b       	std	Z+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    b51a:	8f 81       	ldd	r24, Y+7	; 0x07
    b51c:	98 85       	ldd	r25, Y+8	; 0x08
    b51e:	fc 01       	movw	r30, r24
    b520:	80 81       	ld	r24, Z
    b522:	91 81       	ldd	r25, Z+1	; 0x01
    b524:	9c 01       	movw	r18, r24
    b526:	22 5d       	subi	r18, 0xD2	; 210
    b528:	3f 4f       	sbci	r19, 0xFF	; 255
    b52a:	89 85       	ldd	r24, Y+9	; 0x09
    b52c:	9a 85       	ldd	r25, Y+10	; 0x0a
    b52e:	8f 70       	andi	r24, 0x0F	; 15
    b530:	90 70       	andi	r25, 0x00	; 0
    b532:	88 0f       	add	r24, r24
    b534:	99 1f       	adc	r25, r25
    b536:	82 95       	swap	r24
    b538:	92 95       	swap	r25
    b53a:	90 7f       	andi	r25, 0xF0	; 240
    b53c:	98 27       	eor	r25, r24
    b53e:	80 7f       	andi	r24, 0xF0	; 240
    b540:	98 27       	eor	r25, r24
    b542:	28 0f       	add	r18, r24
    b544:	39 1f       	adc	r19, r25
    b546:	8f 81       	ldd	r24, Y+7	; 0x07
    b548:	98 85       	ldd	r25, Y+8	; 0x08
    b54a:	fc 01       	movw	r30, r24
    b54c:	33 8b       	std	Z+19, r19	; 0x13
    b54e:	22 8b       	std	Z+18, r18	; 0x12

	return FR_OK;	/* Seek succeeded */
    b550:	80 e0       	ldi	r24, 0x00	; 0
}
    b552:	2a 96       	adiw	r28, 0x0a	; 10
    b554:	0f b6       	in	r0, 0x3f	; 63
    b556:	f8 94       	cli
    b558:	de bf       	out	0x3e, r29	; 62
    b55a:	0f be       	out	0x3f, r0	; 63
    b55c:	cd bf       	out	0x3d, r28	; 61
    b55e:	cf 91       	pop	r28
    b560:	df 91       	pop	r29
    b562:	08 95       	ret

0000b564 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    b564:	ef 92       	push	r14
    b566:	ff 92       	push	r15
    b568:	0f 93       	push	r16
    b56a:	1f 93       	push	r17
    b56c:	df 93       	push	r29
    b56e:	cf 93       	push	r28
    b570:	cd b7       	in	r28, 0x3d	; 61
    b572:	de b7       	in	r29, 0x3e	; 62
    b574:	2b 97       	sbiw	r28, 0x0b	; 11
    b576:	0f b6       	in	r0, 0x3f	; 63
    b578:	f8 94       	cli
    b57a:	de bf       	out	0x3e, r29	; 62
    b57c:	0f be       	out	0x3f, r0	; 63
    b57e:	cd bf       	out	0x3d, r28	; 61
    b580:	99 87       	std	Y+9, r25	; 0x09
    b582:	88 87       	std	Y+8, r24	; 0x08
    b584:	7b 87       	std	Y+11, r23	; 0x0b
    b586:	6a 87       	std	Y+10, r22	; 0x0a
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    b588:	88 85       	ldd	r24, Y+8	; 0x08
    b58a:	99 85       	ldd	r25, Y+9	; 0x09
    b58c:	fc 01       	movw	r30, r24
    b58e:	84 81       	ldd	r24, Z+4	; 0x04
    b590:	95 81       	ldd	r25, Z+5	; 0x05
    b592:	01 96       	adiw	r24, 0x01	; 1
    b594:	9f 83       	std	Y+7, r25	; 0x07
    b596:	8e 83       	std	Y+6, r24	; 0x06
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    b598:	8e 81       	ldd	r24, Y+6	; 0x06
    b59a:	9f 81       	ldd	r25, Y+7	; 0x07
    b59c:	00 97       	sbiw	r24, 0x00	; 0
    b59e:	59 f0       	breq	.+22     	; 0xb5b6 <dir_next+0x52>
    b5a0:	88 85       	ldd	r24, Y+8	; 0x08
    b5a2:	99 85       	ldd	r25, Y+9	; 0x09
    b5a4:	fc 01       	movw	r30, r24
    b5a6:	86 85       	ldd	r24, Z+14	; 0x0e
    b5a8:	97 85       	ldd	r25, Z+15	; 0x0f
    b5aa:	a0 89       	ldd	r26, Z+16	; 0x10
    b5ac:	b1 89       	ldd	r27, Z+17	; 0x11
    b5ae:	00 97       	sbiw	r24, 0x00	; 0
    b5b0:	a1 05       	cpc	r26, r1
    b5b2:	b1 05       	cpc	r27, r1
    b5b4:	11 f4       	brne	.+4      	; 0xb5ba <dir_next+0x56>
		return FR_NO_FILE;
    b5b6:	84 e0       	ldi	r24, 0x04	; 4
    b5b8:	9c c1       	rjmp	.+824    	; 0xb8f2 <dir_next+0x38e>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    b5ba:	8e 81       	ldd	r24, Y+6	; 0x06
    b5bc:	9f 81       	ldd	r25, Y+7	; 0x07
    b5be:	8f 70       	andi	r24, 0x0F	; 15
    b5c0:	90 70       	andi	r25, 0x00	; 0
    b5c2:	00 97       	sbiw	r24, 0x00	; 0
    b5c4:	09 f0       	breq	.+2      	; 0xb5c8 <dir_next+0x64>
    b5c6:	72 c1       	rjmp	.+740    	; 0xb8ac <dir_next+0x348>
		dj->sect++;					/* Next sector */
    b5c8:	88 85       	ldd	r24, Y+8	; 0x08
    b5ca:	99 85       	ldd	r25, Y+9	; 0x09
    b5cc:	fc 01       	movw	r30, r24
    b5ce:	86 85       	ldd	r24, Z+14	; 0x0e
    b5d0:	97 85       	ldd	r25, Z+15	; 0x0f
    b5d2:	a0 89       	ldd	r26, Z+16	; 0x10
    b5d4:	b1 89       	ldd	r27, Z+17	; 0x11
    b5d6:	01 96       	adiw	r24, 0x01	; 1
    b5d8:	a1 1d       	adc	r26, r1
    b5da:	b1 1d       	adc	r27, r1
    b5dc:	28 85       	ldd	r18, Y+8	; 0x08
    b5de:	39 85       	ldd	r19, Y+9	; 0x09
    b5e0:	f9 01       	movw	r30, r18
    b5e2:	86 87       	std	Z+14, r24	; 0x0e
    b5e4:	97 87       	std	Z+15, r25	; 0x0f
    b5e6:	a0 8b       	std	Z+16, r26	; 0x10
    b5e8:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    b5ea:	88 85       	ldd	r24, Y+8	; 0x08
    b5ec:	99 85       	ldd	r25, Y+9	; 0x09
    b5ee:	fc 01       	movw	r30, r24
    b5f0:	82 85       	ldd	r24, Z+10	; 0x0a
    b5f2:	93 85       	ldd	r25, Z+11	; 0x0b
    b5f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    b5f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    b5f8:	00 97       	sbiw	r24, 0x00	; 0
    b5fa:	a1 05       	cpc	r26, r1
    b5fc:	b1 05       	cpc	r27, r1
    b5fe:	81 f4       	brne	.+32     	; 0xb620 <dir_next+0xbc>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    b600:	88 85       	ldd	r24, Y+8	; 0x08
    b602:	99 85       	ldd	r25, Y+9	; 0x09
    b604:	fc 01       	movw	r30, r24
    b606:	80 81       	ld	r24, Z
    b608:	91 81       	ldd	r25, Z+1	; 0x01
    b60a:	fc 01       	movw	r30, r24
    b60c:	20 85       	ldd	r18, Z+8	; 0x08
    b60e:	31 85       	ldd	r19, Z+9	; 0x09
    b610:	8e 81       	ldd	r24, Y+6	; 0x06
    b612:	9f 81       	ldd	r25, Y+7	; 0x07
    b614:	82 17       	cp	r24, r18
    b616:	93 07       	cpc	r25, r19
    b618:	08 f4       	brcc	.+2      	; 0xb61c <dir_next+0xb8>
    b61a:	48 c1       	rjmp	.+656    	; 0xb8ac <dir_next+0x348>
				return FR_NO_FILE;
    b61c:	84 e0       	ldi	r24, 0x04	; 4
    b61e:	69 c1       	rjmp	.+722    	; 0xb8f2 <dir_next+0x38e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    b620:	8e 81       	ldd	r24, Y+6	; 0x06
    b622:	9f 81       	ldd	r25, Y+7	; 0x07
    b624:	9c 01       	movw	r18, r24
    b626:	32 95       	swap	r19
    b628:	22 95       	swap	r18
    b62a:	2f 70       	andi	r18, 0x0F	; 15
    b62c:	23 27       	eor	r18, r19
    b62e:	3f 70       	andi	r19, 0x0F	; 15
    b630:	23 27       	eor	r18, r19
    b632:	88 85       	ldd	r24, Y+8	; 0x08
    b634:	99 85       	ldd	r25, Y+9	; 0x09
    b636:	fc 01       	movw	r30, r24
    b638:	80 81       	ld	r24, Z
    b63a:	91 81       	ldd	r25, Z+1	; 0x01
    b63c:	fc 01       	movw	r30, r24
    b63e:	82 81       	ldd	r24, Z+2	; 0x02
    b640:	88 2f       	mov	r24, r24
    b642:	90 e0       	ldi	r25, 0x00	; 0
    b644:	01 97       	sbiw	r24, 0x01	; 1
    b646:	82 23       	and	r24, r18
    b648:	93 23       	and	r25, r19
    b64a:	00 97       	sbiw	r24, 0x00	; 0
    b64c:	09 f0       	breq	.+2      	; 0xb650 <dir_next+0xec>
    b64e:	2e c1       	rjmp	.+604    	; 0xb8ac <dir_next+0x348>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    b650:	88 85       	ldd	r24, Y+8	; 0x08
    b652:	99 85       	ldd	r25, Y+9	; 0x09
    b654:	fc 01       	movw	r30, r24
    b656:	80 81       	ld	r24, Z
    b658:	91 81       	ldd	r25, Z+1	; 0x01
    b65a:	28 85       	ldd	r18, Y+8	; 0x08
    b65c:	39 85       	ldd	r19, Y+9	; 0x09
    b65e:	f9 01       	movw	r30, r18
    b660:	22 85       	ldd	r18, Z+10	; 0x0a
    b662:	33 85       	ldd	r19, Z+11	; 0x0b
    b664:	44 85       	ldd	r20, Z+12	; 0x0c
    b666:	55 85       	ldd	r21, Z+13	; 0x0d
    b668:	ba 01       	movw	r22, r20
    b66a:	a9 01       	movw	r20, r18
    b66c:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    b670:	dc 01       	movw	r26, r24
    b672:	cb 01       	movw	r24, r22
    b674:	89 83       	std	Y+1, r24	; 0x01
    b676:	9a 83       	std	Y+2, r25	; 0x02
    b678:	ab 83       	std	Y+3, r26	; 0x03
    b67a:	bc 83       	std	Y+4, r27	; 0x04
				if (clst <= 1) return FR_INT_ERR;
    b67c:	89 81       	ldd	r24, Y+1	; 0x01
    b67e:	9a 81       	ldd	r25, Y+2	; 0x02
    b680:	ab 81       	ldd	r26, Y+3	; 0x03
    b682:	bc 81       	ldd	r27, Y+4	; 0x04
    b684:	82 30       	cpi	r24, 0x02	; 2
    b686:	91 05       	cpc	r25, r1
    b688:	a1 05       	cpc	r26, r1
    b68a:	b1 05       	cpc	r27, r1
    b68c:	10 f4       	brcc	.+4      	; 0xb692 <dir_next+0x12e>
    b68e:	82 e0       	ldi	r24, 0x02	; 2
    b690:	30 c1       	rjmp	.+608    	; 0xb8f2 <dir_next+0x38e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    b692:	89 81       	ldd	r24, Y+1	; 0x01
    b694:	9a 81       	ldd	r25, Y+2	; 0x02
    b696:	ab 81       	ldd	r26, Y+3	; 0x03
    b698:	bc 81       	ldd	r27, Y+4	; 0x04
    b69a:	8f 3f       	cpi	r24, 0xFF	; 255
    b69c:	ff ef       	ldi	r31, 0xFF	; 255
    b69e:	9f 07       	cpc	r25, r31
    b6a0:	ff ef       	ldi	r31, 0xFF	; 255
    b6a2:	af 07       	cpc	r26, r31
    b6a4:	ff ef       	ldi	r31, 0xFF	; 255
    b6a6:	bf 07       	cpc	r27, r31
    b6a8:	11 f4       	brne	.+4      	; 0xb6ae <dir_next+0x14a>
    b6aa:	81 e0       	ldi	r24, 0x01	; 1
    b6ac:	22 c1       	rjmp	.+580    	; 0xb8f2 <dir_next+0x38e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    b6ae:	88 85       	ldd	r24, Y+8	; 0x08
    b6b0:	99 85       	ldd	r25, Y+9	; 0x09
    b6b2:	fc 01       	movw	r30, r24
    b6b4:	80 81       	ld	r24, Z
    b6b6:	91 81       	ldd	r25, Z+1	; 0x01
    b6b8:	fc 01       	movw	r30, r24
    b6ba:	26 89       	ldd	r18, Z+22	; 0x16
    b6bc:	37 89       	ldd	r19, Z+23	; 0x17
    b6be:	40 8d       	ldd	r20, Z+24	; 0x18
    b6c0:	51 8d       	ldd	r21, Z+25	; 0x19
    b6c2:	89 81       	ldd	r24, Y+1	; 0x01
    b6c4:	9a 81       	ldd	r25, Y+2	; 0x02
    b6c6:	ab 81       	ldd	r26, Y+3	; 0x03
    b6c8:	bc 81       	ldd	r27, Y+4	; 0x04
    b6ca:	82 17       	cp	r24, r18
    b6cc:	93 07       	cpc	r25, r19
    b6ce:	a4 07       	cpc	r26, r20
    b6d0:	b5 07       	cpc	r27, r21
    b6d2:	08 f4       	brcc	.+2      	; 0xb6d6 <dir_next+0x172>
    b6d4:	ca c0       	rjmp	.+404    	; 0xb86a <dir_next+0x306>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    b6d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    b6d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    b6da:	00 97       	sbiw	r24, 0x00	; 0
    b6dc:	11 f4       	brne	.+4      	; 0xb6e2 <dir_next+0x17e>
    b6de:	84 e0       	ldi	r24, 0x04	; 4
    b6e0:	08 c1       	rjmp	.+528    	; 0xb8f2 <dir_next+0x38e>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    b6e2:	88 85       	ldd	r24, Y+8	; 0x08
    b6e4:	99 85       	ldd	r25, Y+9	; 0x09
    b6e6:	fc 01       	movw	r30, r24
    b6e8:	80 81       	ld	r24, Z
    b6ea:	91 81       	ldd	r25, Z+1	; 0x01
    b6ec:	28 85       	ldd	r18, Y+8	; 0x08
    b6ee:	39 85       	ldd	r19, Y+9	; 0x09
    b6f0:	f9 01       	movw	r30, r18
    b6f2:	22 85       	ldd	r18, Z+10	; 0x0a
    b6f4:	33 85       	ldd	r19, Z+11	; 0x0b
    b6f6:	44 85       	ldd	r20, Z+12	; 0x0c
    b6f8:	55 85       	ldd	r21, Z+13	; 0x0d
    b6fa:	ba 01       	movw	r22, r20
    b6fc:	a9 01       	movw	r20, r18
    b6fe:	0e 94 da 57 	call	0xafb4	; 0xafb4 <create_chain>
    b702:	dc 01       	movw	r26, r24
    b704:	cb 01       	movw	r24, r22
    b706:	89 83       	std	Y+1, r24	; 0x01
    b708:	9a 83       	std	Y+2, r25	; 0x02
    b70a:	ab 83       	std	Y+3, r26	; 0x03
    b70c:	bc 83       	std	Y+4, r27	; 0x04
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    b70e:	89 81       	ldd	r24, Y+1	; 0x01
    b710:	9a 81       	ldd	r25, Y+2	; 0x02
    b712:	ab 81       	ldd	r26, Y+3	; 0x03
    b714:	bc 81       	ldd	r27, Y+4	; 0x04
    b716:	00 97       	sbiw	r24, 0x00	; 0
    b718:	a1 05       	cpc	r26, r1
    b71a:	b1 05       	cpc	r27, r1
    b71c:	11 f4       	brne	.+4      	; 0xb722 <dir_next+0x1be>
    b71e:	87 e0       	ldi	r24, 0x07	; 7
    b720:	e8 c0       	rjmp	.+464    	; 0xb8f2 <dir_next+0x38e>
					if (clst == 1) return FR_INT_ERR;
    b722:	89 81       	ldd	r24, Y+1	; 0x01
    b724:	9a 81       	ldd	r25, Y+2	; 0x02
    b726:	ab 81       	ldd	r26, Y+3	; 0x03
    b728:	bc 81       	ldd	r27, Y+4	; 0x04
    b72a:	81 30       	cpi	r24, 0x01	; 1
    b72c:	91 05       	cpc	r25, r1
    b72e:	a1 05       	cpc	r26, r1
    b730:	b1 05       	cpc	r27, r1
    b732:	11 f4       	brne	.+4      	; 0xb738 <dir_next+0x1d4>
    b734:	82 e0       	ldi	r24, 0x02	; 2
    b736:	dd c0       	rjmp	.+442    	; 0xb8f2 <dir_next+0x38e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    b738:	89 81       	ldd	r24, Y+1	; 0x01
    b73a:	9a 81       	ldd	r25, Y+2	; 0x02
    b73c:	ab 81       	ldd	r26, Y+3	; 0x03
    b73e:	bc 81       	ldd	r27, Y+4	; 0x04
    b740:	8f 3f       	cpi	r24, 0xFF	; 255
    b742:	ff ef       	ldi	r31, 0xFF	; 255
    b744:	9f 07       	cpc	r25, r31
    b746:	ff ef       	ldi	r31, 0xFF	; 255
    b748:	af 07       	cpc	r26, r31
    b74a:	ff ef       	ldi	r31, 0xFF	; 255
    b74c:	bf 07       	cpc	r27, r31
    b74e:	11 f4       	brne	.+4      	; 0xb754 <dir_next+0x1f0>
    b750:	81 e0       	ldi	r24, 0x01	; 1
    b752:	cf c0       	rjmp	.+414    	; 0xb8f2 <dir_next+0x38e>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    b754:	88 85       	ldd	r24, Y+8	; 0x08
    b756:	99 85       	ldd	r25, Y+9	; 0x09
    b758:	fc 01       	movw	r30, r24
    b75a:	80 81       	ld	r24, Z
    b75c:	91 81       	ldd	r25, Z+1	; 0x01
    b75e:	40 e0       	ldi	r20, 0x00	; 0
    b760:	50 e0       	ldi	r21, 0x00	; 0
    b762:	ba 01       	movw	r22, r20
    b764:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    b768:	88 23       	and	r24, r24
    b76a:	11 f0       	breq	.+4      	; 0xb770 <dir_next+0x20c>
    b76c:	81 e0       	ldi	r24, 0x01	; 1
    b76e:	c1 c0       	rjmp	.+386    	; 0xb8f2 <dir_next+0x38e>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    b770:	88 85       	ldd	r24, Y+8	; 0x08
    b772:	99 85       	ldd	r25, Y+9	; 0x09
    b774:	fc 01       	movw	r30, r24
    b776:	80 81       	ld	r24, Z
    b778:	91 81       	ldd	r25, Z+1	; 0x01
    b77a:	8e 96       	adiw	r24, 0x2e	; 46
    b77c:	60 e0       	ldi	r22, 0x00	; 0
    b77e:	70 e0       	ldi	r23, 0x00	; 0
    b780:	40 e0       	ldi	r20, 0x00	; 0
    b782:	52 e0       	ldi	r21, 0x02	; 2
    b784:	0e 94 8d 50 	call	0xa11a	; 0xa11a <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    b788:	88 85       	ldd	r24, Y+8	; 0x08
    b78a:	99 85       	ldd	r25, Y+9	; 0x09
    b78c:	fc 01       	movw	r30, r24
    b78e:	00 81       	ld	r16, Z
    b790:	11 81       	ldd	r17, Z+1	; 0x01
    b792:	88 85       	ldd	r24, Y+8	; 0x08
    b794:	99 85       	ldd	r25, Y+9	; 0x09
    b796:	fc 01       	movw	r30, r24
    b798:	80 81       	ld	r24, Z
    b79a:	91 81       	ldd	r25, Z+1	; 0x01
    b79c:	29 81       	ldd	r18, Y+1	; 0x01
    b79e:	3a 81       	ldd	r19, Y+2	; 0x02
    b7a0:	4b 81       	ldd	r20, Y+3	; 0x03
    b7a2:	5c 81       	ldd	r21, Y+4	; 0x04
    b7a4:	ba 01       	movw	r22, r20
    b7a6:	a9 01       	movw	r20, r18
    b7a8:	0e 94 41 53 	call	0xa682	; 0xa682 <clust2sect>
    b7ac:	dc 01       	movw	r26, r24
    b7ae:	cb 01       	movw	r24, r22
    b7b0:	f8 01       	movw	r30, r16
    b7b2:	82 a7       	std	Z+42, r24	; 0x2a
    b7b4:	93 a7       	std	Z+43, r25	; 0x2b
    b7b6:	a4 a7       	std	Z+44, r26	; 0x2c
    b7b8:	b5 a7       	std	Z+45, r27	; 0x2d
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    b7ba:	1d 82       	std	Y+5, r1	; 0x05
    b7bc:	2b c0       	rjmp	.+86     	; 0xb814 <dir_next+0x2b0>
						dj->fs->wflag = 1;
    b7be:	88 85       	ldd	r24, Y+8	; 0x08
    b7c0:	99 85       	ldd	r25, Y+9	; 0x09
    b7c2:	fc 01       	movw	r30, r24
    b7c4:	80 81       	ld	r24, Z
    b7c6:	91 81       	ldd	r25, Z+1	; 0x01
    b7c8:	21 e0       	ldi	r18, 0x01	; 1
    b7ca:	fc 01       	movw	r30, r24
    b7cc:	24 83       	std	Z+4, r18	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    b7ce:	88 85       	ldd	r24, Y+8	; 0x08
    b7d0:	99 85       	ldd	r25, Y+9	; 0x09
    b7d2:	fc 01       	movw	r30, r24
    b7d4:	80 81       	ld	r24, Z
    b7d6:	91 81       	ldd	r25, Z+1	; 0x01
    b7d8:	40 e0       	ldi	r20, 0x00	; 0
    b7da:	50 e0       	ldi	r21, 0x00	; 0
    b7dc:	ba 01       	movw	r22, r20
    b7de:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    b7e2:	88 23       	and	r24, r24
    b7e4:	11 f0       	breq	.+4      	; 0xb7ea <dir_next+0x286>
    b7e6:	81 e0       	ldi	r24, 0x01	; 1
    b7e8:	84 c0       	rjmp	.+264    	; 0xb8f2 <dir_next+0x38e>
						dj->fs->winsect++;
    b7ea:	88 85       	ldd	r24, Y+8	; 0x08
    b7ec:	99 85       	ldd	r25, Y+9	; 0x09
    b7ee:	fc 01       	movw	r30, r24
    b7f0:	20 81       	ld	r18, Z
    b7f2:	31 81       	ldd	r19, Z+1	; 0x01
    b7f4:	f9 01       	movw	r30, r18
    b7f6:	82 a5       	ldd	r24, Z+42	; 0x2a
    b7f8:	93 a5       	ldd	r25, Z+43	; 0x2b
    b7fa:	a4 a5       	ldd	r26, Z+44	; 0x2c
    b7fc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    b7fe:	01 96       	adiw	r24, 0x01	; 1
    b800:	a1 1d       	adc	r26, r1
    b802:	b1 1d       	adc	r27, r1
    b804:	f9 01       	movw	r30, r18
    b806:	82 a7       	std	Z+42, r24	; 0x2a
    b808:	93 a7       	std	Z+43, r25	; 0x2b
    b80a:	a4 a7       	std	Z+44, r26	; 0x2c
    b80c:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    b80e:	8d 81       	ldd	r24, Y+5	; 0x05
    b810:	8f 5f       	subi	r24, 0xFF	; 255
    b812:	8d 83       	std	Y+5, r24	; 0x05
    b814:	88 85       	ldd	r24, Y+8	; 0x08
    b816:	99 85       	ldd	r25, Y+9	; 0x09
    b818:	fc 01       	movw	r30, r24
    b81a:	80 81       	ld	r24, Z
    b81c:	91 81       	ldd	r25, Z+1	; 0x01
    b81e:	fc 01       	movw	r30, r24
    b820:	92 81       	ldd	r25, Z+2	; 0x02
    b822:	8d 81       	ldd	r24, Y+5	; 0x05
    b824:	89 17       	cp	r24, r25
    b826:	58 f2       	brcs	.-106    	; 0xb7be <dir_next+0x25a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    b828:	88 85       	ldd	r24, Y+8	; 0x08
    b82a:	99 85       	ldd	r25, Y+9	; 0x09
    b82c:	fc 01       	movw	r30, r24
    b82e:	60 81       	ld	r22, Z
    b830:	71 81       	ldd	r23, Z+1	; 0x01
    b832:	88 85       	ldd	r24, Y+8	; 0x08
    b834:	99 85       	ldd	r25, Y+9	; 0x09
    b836:	fc 01       	movw	r30, r24
    b838:	80 81       	ld	r24, Z
    b83a:	91 81       	ldd	r25, Z+1	; 0x01
    b83c:	fc 01       	movw	r30, r24
    b83e:	22 a5       	ldd	r18, Z+42	; 0x2a
    b840:	33 a5       	ldd	r19, Z+43	; 0x2b
    b842:	44 a5       	ldd	r20, Z+44	; 0x2c
    b844:	55 a5       	ldd	r21, Z+45	; 0x2d
    b846:	8d 81       	ldd	r24, Y+5	; 0x05
    b848:	88 2f       	mov	r24, r24
    b84a:	90 e0       	ldi	r25, 0x00	; 0
    b84c:	a0 e0       	ldi	r26, 0x00	; 0
    b84e:	b0 e0       	ldi	r27, 0x00	; 0
    b850:	79 01       	movw	r14, r18
    b852:	8a 01       	movw	r16, r20
    b854:	e8 1a       	sub	r14, r24
    b856:	f9 0a       	sbc	r15, r25
    b858:	0a 0b       	sbc	r16, r26
    b85a:	1b 0b       	sbc	r17, r27
    b85c:	d8 01       	movw	r26, r16
    b85e:	c7 01       	movw	r24, r14
    b860:	fb 01       	movw	r30, r22
    b862:	82 a7       	std	Z+42, r24	; 0x2a
    b864:	93 a7       	std	Z+43, r25	; 0x2b
    b866:	a4 a7       	std	Z+44, r26	; 0x2c
    b868:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    b86a:	28 85       	ldd	r18, Y+8	; 0x08
    b86c:	39 85       	ldd	r19, Y+9	; 0x09
    b86e:	89 81       	ldd	r24, Y+1	; 0x01
    b870:	9a 81       	ldd	r25, Y+2	; 0x02
    b872:	ab 81       	ldd	r26, Y+3	; 0x03
    b874:	bc 81       	ldd	r27, Y+4	; 0x04
    b876:	f9 01       	movw	r30, r18
    b878:	82 87       	std	Z+10, r24	; 0x0a
    b87a:	93 87       	std	Z+11, r25	; 0x0b
    b87c:	a4 87       	std	Z+12, r26	; 0x0c
    b87e:	b5 87       	std	Z+13, r27	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    b880:	88 85       	ldd	r24, Y+8	; 0x08
    b882:	99 85       	ldd	r25, Y+9	; 0x09
    b884:	fc 01       	movw	r30, r24
    b886:	80 81       	ld	r24, Z
    b888:	91 81       	ldd	r25, Z+1	; 0x01
    b88a:	29 81       	ldd	r18, Y+1	; 0x01
    b88c:	3a 81       	ldd	r19, Y+2	; 0x02
    b88e:	4b 81       	ldd	r20, Y+3	; 0x03
    b890:	5c 81       	ldd	r21, Y+4	; 0x04
    b892:	ba 01       	movw	r22, r20
    b894:	a9 01       	movw	r20, r18
    b896:	0e 94 41 53 	call	0xa682	; 0xa682 <clust2sect>
    b89a:	dc 01       	movw	r26, r24
    b89c:	cb 01       	movw	r24, r22
    b89e:	28 85       	ldd	r18, Y+8	; 0x08
    b8a0:	39 85       	ldd	r19, Y+9	; 0x09
    b8a2:	f9 01       	movw	r30, r18
    b8a4:	86 87       	std	Z+14, r24	; 0x0e
    b8a6:	97 87       	std	Z+15, r25	; 0x0f
    b8a8:	a0 8b       	std	Z+16, r26	; 0x10
    b8aa:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dj->index = i;
    b8ac:	88 85       	ldd	r24, Y+8	; 0x08
    b8ae:	99 85       	ldd	r25, Y+9	; 0x09
    b8b0:	2e 81       	ldd	r18, Y+6	; 0x06
    b8b2:	3f 81       	ldd	r19, Y+7	; 0x07
    b8b4:	fc 01       	movw	r30, r24
    b8b6:	35 83       	std	Z+5, r19	; 0x05
    b8b8:	24 83       	std	Z+4, r18	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    b8ba:	88 85       	ldd	r24, Y+8	; 0x08
    b8bc:	99 85       	ldd	r25, Y+9	; 0x09
    b8be:	fc 01       	movw	r30, r24
    b8c0:	80 81       	ld	r24, Z
    b8c2:	91 81       	ldd	r25, Z+1	; 0x01
    b8c4:	9c 01       	movw	r18, r24
    b8c6:	22 5d       	subi	r18, 0xD2	; 210
    b8c8:	3f 4f       	sbci	r19, 0xFF	; 255
    b8ca:	8e 81       	ldd	r24, Y+6	; 0x06
    b8cc:	9f 81       	ldd	r25, Y+7	; 0x07
    b8ce:	8f 70       	andi	r24, 0x0F	; 15
    b8d0:	90 70       	andi	r25, 0x00	; 0
    b8d2:	88 0f       	add	r24, r24
    b8d4:	99 1f       	adc	r25, r25
    b8d6:	82 95       	swap	r24
    b8d8:	92 95       	swap	r25
    b8da:	90 7f       	andi	r25, 0xF0	; 240
    b8dc:	98 27       	eor	r25, r24
    b8de:	80 7f       	andi	r24, 0xF0	; 240
    b8e0:	98 27       	eor	r25, r24
    b8e2:	28 0f       	add	r18, r24
    b8e4:	39 1f       	adc	r19, r25
    b8e6:	88 85       	ldd	r24, Y+8	; 0x08
    b8e8:	99 85       	ldd	r25, Y+9	; 0x09
    b8ea:	fc 01       	movw	r30, r24
    b8ec:	33 8b       	std	Z+19, r19	; 0x13
    b8ee:	22 8b       	std	Z+18, r18	; 0x12

	return FR_OK;
    b8f0:	80 e0       	ldi	r24, 0x00	; 0
}
    b8f2:	2b 96       	adiw	r28, 0x0b	; 11
    b8f4:	0f b6       	in	r0, 0x3f	; 63
    b8f6:	f8 94       	cli
    b8f8:	de bf       	out	0x3e, r29	; 62
    b8fa:	0f be       	out	0x3f, r0	; 63
    b8fc:	cd bf       	out	0x3d, r28	; 61
    b8fe:	cf 91       	pop	r28
    b900:	df 91       	pop	r29
    b902:	1f 91       	pop	r17
    b904:	0f 91       	pop	r16
    b906:	ff 90       	pop	r15
    b908:	ef 90       	pop	r14
    b90a:	08 95       	ret

0000b90c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    b90c:	df 93       	push	r29
    b90e:	cf 93       	push	r28
    b910:	00 d0       	rcall	.+0      	; 0xb912 <dir_find+0x6>
    b912:	00 d0       	rcall	.+0      	; 0xb914 <dir_find+0x8>
    b914:	00 d0       	rcall	.+0      	; 0xb916 <dir_find+0xa>
    b916:	cd b7       	in	r28, 0x3d	; 61
    b918:	de b7       	in	r29, 0x3e	; 62
    b91a:	9e 83       	std	Y+6, r25	; 0x06
    b91c:	8d 83       	std	Y+5, r24	; 0x05
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    b91e:	8d 81       	ldd	r24, Y+5	; 0x05
    b920:	9e 81       	ldd	r25, Y+6	; 0x06
    b922:	60 e0       	ldi	r22, 0x00	; 0
    b924:	70 e0       	ldi	r23, 0x00	; 0
    b926:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <dir_sdi>
    b92a:	89 83       	std	Y+1, r24	; 0x01
	if (res != FR_OK) return res;
    b92c:	89 81       	ldd	r24, Y+1	; 0x01
    b92e:	88 23       	and	r24, r24
    b930:	11 f0       	breq	.+4      	; 0xb936 <dir_find+0x2a>
    b932:	89 81       	ldd	r24, Y+1	; 0x01
    b934:	4f c0       	rjmp	.+158    	; 0xb9d4 <dir_find+0xc8>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    b936:	8d 81       	ldd	r24, Y+5	; 0x05
    b938:	9e 81       	ldd	r25, Y+6	; 0x06
    b93a:	fc 01       	movw	r30, r24
    b93c:	80 81       	ld	r24, Z
    b93e:	91 81       	ldd	r25, Z+1	; 0x01
    b940:	2d 81       	ldd	r18, Y+5	; 0x05
    b942:	3e 81       	ldd	r19, Y+6	; 0x06
    b944:	f9 01       	movw	r30, r18
    b946:	26 85       	ldd	r18, Z+14	; 0x0e
    b948:	37 85       	ldd	r19, Z+15	; 0x0f
    b94a:	40 89       	ldd	r20, Z+16	; 0x10
    b94c:	51 89       	ldd	r21, Z+17	; 0x11
    b94e:	ba 01       	movw	r22, r20
    b950:	a9 01       	movw	r20, r18
    b952:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    b956:	89 83       	std	Y+1, r24	; 0x01
		if (res != FR_OK) break;
    b958:	89 81       	ldd	r24, Y+1	; 0x01
    b95a:	88 23       	and	r24, r24
    b95c:	b9 f5       	brne	.+110    	; 0xb9cc <dir_find+0xc0>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    b95e:	8d 81       	ldd	r24, Y+5	; 0x05
    b960:	9e 81       	ldd	r25, Y+6	; 0x06
    b962:	fc 01       	movw	r30, r24
    b964:	82 89       	ldd	r24, Z+18	; 0x12
    b966:	93 89       	ldd	r25, Z+19	; 0x13
    b968:	9b 83       	std	Y+3, r25	; 0x03
    b96a:	8a 83       	std	Y+2, r24	; 0x02
		c = dir[DIR_Name];
    b96c:	8a 81       	ldd	r24, Y+2	; 0x02
    b96e:	9b 81       	ldd	r25, Y+3	; 0x03
    b970:	fc 01       	movw	r30, r24
    b972:	80 81       	ld	r24, Z
    b974:	8c 83       	std	Y+4, r24	; 0x04
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    b976:	8c 81       	ldd	r24, Y+4	; 0x04
    b978:	88 23       	and	r24, r24
    b97a:	19 f4       	brne	.+6      	; 0xb982 <dir_find+0x76>
    b97c:	84 e0       	ldi	r24, 0x04	; 4
    b97e:	89 83       	std	Y+1, r24	; 0x01
    b980:	28 c0       	rjmp	.+80     	; 0xb9d2 <dir_find+0xc6>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    b982:	8a 81       	ldd	r24, Y+2	; 0x02
    b984:	9b 81       	ldd	r25, Y+3	; 0x03
    b986:	0b 96       	adiw	r24, 0x0b	; 11
    b988:	fc 01       	movw	r30, r24
    b98a:	80 81       	ld	r24, Z
    b98c:	88 2f       	mov	r24, r24
    b98e:	90 e0       	ldi	r25, 0x00	; 0
    b990:	88 70       	andi	r24, 0x08	; 8
    b992:	90 70       	andi	r25, 0x00	; 0
    b994:	00 97       	sbiw	r24, 0x00	; 0
    b996:	71 f4       	brne	.+28     	; 0xb9b4 <dir_find+0xa8>
    b998:	8d 81       	ldd	r24, Y+5	; 0x05
    b99a:	9e 81       	ldd	r25, Y+6	; 0x06
    b99c:	fc 01       	movw	r30, r24
    b99e:	24 89       	ldd	r18, Z+20	; 0x14
    b9a0:	35 89       	ldd	r19, Z+21	; 0x15
    b9a2:	8a 81       	ldd	r24, Y+2	; 0x02
    b9a4:	9b 81       	ldd	r25, Y+3	; 0x03
    b9a6:	b9 01       	movw	r22, r18
    b9a8:	4b e0       	ldi	r20, 0x0B	; 11
    b9aa:	50 e0       	ldi	r21, 0x00	; 0
    b9ac:	0e 94 c2 50 	call	0xa184	; 0xa184 <mem_cmp>
    b9b0:	00 97       	sbiw	r24, 0x00	; 0
    b9b2:	71 f0       	breq	.+28     	; 0xb9d0 <dir_find+0xc4>
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    b9b4:	8d 81       	ldd	r24, Y+5	; 0x05
    b9b6:	9e 81       	ldd	r25, Y+6	; 0x06
    b9b8:	60 e0       	ldi	r22, 0x00	; 0
    b9ba:	70 e0       	ldi	r23, 0x00	; 0
    b9bc:	0e 94 b2 5a 	call	0xb564	; 0xb564 <dir_next>
    b9c0:	89 83       	std	Y+1, r24	; 0x01
	} while (res == FR_OK);
    b9c2:	89 81       	ldd	r24, Y+1	; 0x01
    b9c4:	88 23       	and	r24, r24
    b9c6:	09 f4       	brne	.+2      	; 0xb9ca <dir_find+0xbe>
    b9c8:	b6 cf       	rjmp	.-148    	; 0xb936 <dir_find+0x2a>
    b9ca:	03 c0       	rjmp	.+6      	; 0xb9d2 <dir_find+0xc6>
#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
    b9cc:	00 00       	nop
    b9ce:	01 c0       	rjmp	.+2      	; 0xb9d2 <dir_find+0xc6>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
    b9d0:	00 00       	nop
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
    b9d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    b9d4:	26 96       	adiw	r28, 0x06	; 6
    b9d6:	0f b6       	in	r0, 0x3f	; 63
    b9d8:	f8 94       	cli
    b9da:	de bf       	out	0x3e, r29	; 62
    b9dc:	0f be       	out	0x3f, r0	; 63
    b9de:	cd bf       	out	0x3d, r28	; 61
    b9e0:	cf 91       	pop	r28
    b9e2:	df 91       	pop	r29
    b9e4:	08 95       	ret

0000b9e6 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    b9e6:	df 93       	push	r29
    b9e8:	cf 93       	push	r28
    b9ea:	00 d0       	rcall	.+0      	; 0xb9ec <dir_read+0x6>
    b9ec:	00 d0       	rcall	.+0      	; 0xb9ee <dir_read+0x8>
    b9ee:	00 d0       	rcall	.+0      	; 0xb9f0 <dir_read+0xa>
    b9f0:	cd b7       	in	r28, 0x3d	; 61
    b9f2:	de b7       	in	r29, 0x3e	; 62
    b9f4:	9e 83       	std	Y+6, r25	; 0x06
    b9f6:	8d 83       	std	Y+5, r24	; 0x05
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    b9f8:	84 e0       	ldi	r24, 0x04	; 4
    b9fa:	89 83       	std	Y+1, r24	; 0x01
	while (dj->sect) {
    b9fc:	41 c0       	rjmp	.+130    	; 0xba80 <dir_read+0x9a>
		res = move_window(dj->fs, dj->sect);
    b9fe:	8d 81       	ldd	r24, Y+5	; 0x05
    ba00:	9e 81       	ldd	r25, Y+6	; 0x06
    ba02:	fc 01       	movw	r30, r24
    ba04:	80 81       	ld	r24, Z
    ba06:	91 81       	ldd	r25, Z+1	; 0x01
    ba08:	2d 81       	ldd	r18, Y+5	; 0x05
    ba0a:	3e 81       	ldd	r19, Y+6	; 0x06
    ba0c:	f9 01       	movw	r30, r18
    ba0e:	26 85       	ldd	r18, Z+14	; 0x0e
    ba10:	37 85       	ldd	r19, Z+15	; 0x0f
    ba12:	40 89       	ldd	r20, Z+16	; 0x10
    ba14:	51 89       	ldd	r21, Z+17	; 0x11
    ba16:	ba 01       	movw	r22, r20
    ba18:	a9 01       	movw	r20, r18
    ba1a:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    ba1e:	89 83       	std	Y+1, r24	; 0x01
		if (res != FR_OK) break;
    ba20:	89 81       	ldd	r24, Y+1	; 0x01
    ba22:	88 23       	and	r24, r24
    ba24:	d1 f5       	brne	.+116    	; 0xba9a <dir_read+0xb4>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    ba26:	8d 81       	ldd	r24, Y+5	; 0x05
    ba28:	9e 81       	ldd	r25, Y+6	; 0x06
    ba2a:	fc 01       	movw	r30, r24
    ba2c:	82 89       	ldd	r24, Z+18	; 0x12
    ba2e:	93 89       	ldd	r25, Z+19	; 0x13
    ba30:	9b 83       	std	Y+3, r25	; 0x03
    ba32:	8a 83       	std	Y+2, r24	; 0x02
		c = dir[DIR_Name];
    ba34:	8a 81       	ldd	r24, Y+2	; 0x02
    ba36:	9b 81       	ldd	r25, Y+3	; 0x03
    ba38:	fc 01       	movw	r30, r24
    ba3a:	80 81       	ld	r24, Z
    ba3c:	8c 83       	std	Y+4, r24	; 0x04
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    ba3e:	8c 81       	ldd	r24, Y+4	; 0x04
    ba40:	88 23       	and	r24, r24
    ba42:	19 f4       	brne	.+6      	; 0xba4a <dir_read+0x64>
    ba44:	84 e0       	ldi	r24, 0x04	; 4
    ba46:	89 83       	std	Y+1, r24	; 0x01
    ba48:	2d c0       	rjmp	.+90     	; 0xbaa4 <dir_read+0xbe>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    ba4a:	8c 81       	ldd	r24, Y+4	; 0x04
    ba4c:	85 3e       	cpi	r24, 0xE5	; 229
    ba4e:	71 f0       	breq	.+28     	; 0xba6c <dir_read+0x86>
    ba50:	8c 81       	ldd	r24, Y+4	; 0x04
    ba52:	8e 32       	cpi	r24, 0x2E	; 46
    ba54:	59 f0       	breq	.+22     	; 0xba6c <dir_read+0x86>
    ba56:	8a 81       	ldd	r24, Y+2	; 0x02
    ba58:	9b 81       	ldd	r25, Y+3	; 0x03
    ba5a:	0b 96       	adiw	r24, 0x0b	; 11
    ba5c:	fc 01       	movw	r30, r24
    ba5e:	80 81       	ld	r24, Z
    ba60:	88 2f       	mov	r24, r24
    ba62:	90 e0       	ldi	r25, 0x00	; 0
    ba64:	88 70       	andi	r24, 0x08	; 8
    ba66:	90 70       	andi	r25, 0x00	; 0
    ba68:	00 97       	sbiw	r24, 0x00	; 0
    ba6a:	c9 f0       	breq	.+50     	; 0xba9e <dir_read+0xb8>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    ba6c:	8d 81       	ldd	r24, Y+5	; 0x05
    ba6e:	9e 81       	ldd	r25, Y+6	; 0x06
    ba70:	60 e0       	ldi	r22, 0x00	; 0
    ba72:	70 e0       	ldi	r23, 0x00	; 0
    ba74:	0e 94 b2 5a 	call	0xb564	; 0xb564 <dir_next>
    ba78:	89 83       	std	Y+1, r24	; 0x01
		if (res != FR_OK) break;
    ba7a:	89 81       	ldd	r24, Y+1	; 0x01
    ba7c:	88 23       	and	r24, r24
    ba7e:	89 f4       	brne	.+34     	; 0xbaa2 <dir_read+0xbc>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    ba80:	8d 81       	ldd	r24, Y+5	; 0x05
    ba82:	9e 81       	ldd	r25, Y+6	; 0x06
    ba84:	fc 01       	movw	r30, r24
    ba86:	86 85       	ldd	r24, Z+14	; 0x0e
    ba88:	97 85       	ldd	r25, Z+15	; 0x0f
    ba8a:	a0 89       	ldd	r26, Z+16	; 0x10
    ba8c:	b1 89       	ldd	r27, Z+17	; 0x11
    ba8e:	00 97       	sbiw	r24, 0x00	; 0
    ba90:	a1 05       	cpc	r26, r1
    ba92:	b1 05       	cpc	r27, r1
    ba94:	09 f0       	breq	.+2      	; 0xba98 <dir_read+0xb2>
    ba96:	b3 cf       	rjmp	.-154    	; 0xb9fe <dir_read+0x18>
    ba98:	05 c0       	rjmp	.+10     	; 0xbaa4 <dir_read+0xbe>
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
    ba9a:	00 00       	nop
    ba9c:	03 c0       	rjmp	.+6      	; 0xbaa4 <dir_read+0xbe>
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
    ba9e:	00 00       	nop
    baa0:	01 c0       	rjmp	.+2      	; 0xbaa4 <dir_read+0xbe>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
    baa2:	00 00       	nop
	}

	if (res != FR_OK) dj->sect = 0;
    baa4:	89 81       	ldd	r24, Y+1	; 0x01
    baa6:	88 23       	and	r24, r24
    baa8:	39 f0       	breq	.+14     	; 0xbab8 <dir_read+0xd2>
    baaa:	8d 81       	ldd	r24, Y+5	; 0x05
    baac:	9e 81       	ldd	r25, Y+6	; 0x06
    baae:	fc 01       	movw	r30, r24
    bab0:	16 86       	std	Z+14, r1	; 0x0e
    bab2:	17 86       	std	Z+15, r1	; 0x0f
    bab4:	10 8a       	std	Z+16, r1	; 0x10
    bab6:	11 8a       	std	Z+17, r1	; 0x11

	return res;
    bab8:	89 81       	ldd	r24, Y+1	; 0x01
}
    baba:	26 96       	adiw	r28, 0x06	; 6
    babc:	0f b6       	in	r0, 0x3f	; 63
    babe:	f8 94       	cli
    bac0:	de bf       	out	0x3e, r29	; 62
    bac2:	0f be       	out	0x3f, r0	; 63
    bac4:	cd bf       	out	0x3d, r28	; 61
    bac6:	cf 91       	pop	r28
    bac8:	df 91       	pop	r29
    baca:	08 95       	ret

0000bacc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    bacc:	df 93       	push	r29
    bace:	cf 93       	push	r28
    bad0:	00 d0       	rcall	.+0      	; 0xbad2 <dir_register+0x6>
    bad2:	00 d0       	rcall	.+0      	; 0xbad4 <dir_register+0x8>
    bad4:	00 d0       	rcall	.+0      	; 0xbad6 <dir_register+0xa>
    bad6:	cd b7       	in	r28, 0x3d	; 61
    bad8:	de b7       	in	r29, 0x3e	; 62
    bada:	9e 83       	std	Y+6, r25	; 0x06
    badc:	8d 83       	std	Y+5, r24	; 0x05
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    bade:	8d 81       	ldd	r24, Y+5	; 0x05
    bae0:	9e 81       	ldd	r25, Y+6	; 0x06
    bae2:	60 e0       	ldi	r22, 0x00	; 0
    bae4:	70 e0       	ldi	r23, 0x00	; 0
    bae6:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <dir_sdi>
    baea:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    baec:	89 81       	ldd	r24, Y+1	; 0x01
    baee:	88 23       	and	r24, r24
    baf0:	71 f5       	brne	.+92     	; 0xbb4e <dir_register+0x82>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    baf2:	8d 81       	ldd	r24, Y+5	; 0x05
    baf4:	9e 81       	ldd	r25, Y+6	; 0x06
    baf6:	fc 01       	movw	r30, r24
    baf8:	80 81       	ld	r24, Z
    bafa:	91 81       	ldd	r25, Z+1	; 0x01
    bafc:	2d 81       	ldd	r18, Y+5	; 0x05
    bafe:	3e 81       	ldd	r19, Y+6	; 0x06
    bb00:	f9 01       	movw	r30, r18
    bb02:	26 85       	ldd	r18, Z+14	; 0x0e
    bb04:	37 85       	ldd	r19, Z+15	; 0x0f
    bb06:	40 89       	ldd	r20, Z+16	; 0x10
    bb08:	51 89       	ldd	r21, Z+17	; 0x11
    bb0a:	ba 01       	movw	r22, r20
    bb0c:	a9 01       	movw	r20, r18
    bb0e:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    bb12:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) break;
    bb14:	89 81       	ldd	r24, Y+1	; 0x01
    bb16:	88 23       	and	r24, r24
    bb18:	c9 f4       	brne	.+50     	; 0xbb4c <dir_register+0x80>
			c = *dj->dir;
    bb1a:	8d 81       	ldd	r24, Y+5	; 0x05
    bb1c:	9e 81       	ldd	r25, Y+6	; 0x06
    bb1e:	fc 01       	movw	r30, r24
    bb20:	82 89       	ldd	r24, Z+18	; 0x12
    bb22:	93 89       	ldd	r25, Z+19	; 0x13
    bb24:	fc 01       	movw	r30, r24
    bb26:	80 81       	ld	r24, Z
    bb28:	8a 83       	std	Y+2, r24	; 0x02
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    bb2a:	8a 81       	ldd	r24, Y+2	; 0x02
    bb2c:	85 3e       	cpi	r24, 0xE5	; 229
    bb2e:	79 f0       	breq	.+30     	; 0xbb4e <dir_register+0x82>
    bb30:	8a 81       	ldd	r24, Y+2	; 0x02
    bb32:	88 23       	and	r24, r24
    bb34:	61 f0       	breq	.+24     	; 0xbb4e <dir_register+0x82>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    bb36:	8d 81       	ldd	r24, Y+5	; 0x05
    bb38:	9e 81       	ldd	r25, Y+6	; 0x06
    bb3a:	61 e0       	ldi	r22, 0x01	; 1
    bb3c:	70 e0       	ldi	r23, 0x00	; 0
    bb3e:	0e 94 b2 5a 	call	0xb564	; 0xb564 <dir_next>
    bb42:	89 83       	std	Y+1, r24	; 0x01
		} while (res == FR_OK);
    bb44:	89 81       	ldd	r24, Y+1	; 0x01
    bb46:	88 23       	and	r24, r24
    bb48:	a1 f2       	breq	.-88     	; 0xbaf2 <dir_register+0x26>
    bb4a:	01 c0       	rjmp	.+2      	; 0xbb4e <dir_register+0x82>
#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
	if (res == FR_OK) {
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
			if (res != FR_OK) break;
    bb4c:	00 00       	nop
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    bb4e:	89 81       	ldd	r24, Y+1	; 0x01
    bb50:	88 23       	and	r24, r24
    bb52:	b9 f5       	brne	.+110    	; 0xbbc2 <dir_register+0xf6>
		res = move_window(dj->fs, dj->sect);
    bb54:	8d 81       	ldd	r24, Y+5	; 0x05
    bb56:	9e 81       	ldd	r25, Y+6	; 0x06
    bb58:	fc 01       	movw	r30, r24
    bb5a:	80 81       	ld	r24, Z
    bb5c:	91 81       	ldd	r25, Z+1	; 0x01
    bb5e:	2d 81       	ldd	r18, Y+5	; 0x05
    bb60:	3e 81       	ldd	r19, Y+6	; 0x06
    bb62:	f9 01       	movw	r30, r18
    bb64:	26 85       	ldd	r18, Z+14	; 0x0e
    bb66:	37 85       	ldd	r19, Z+15	; 0x0f
    bb68:	40 89       	ldd	r20, Z+16	; 0x10
    bb6a:	51 89       	ldd	r21, Z+17	; 0x11
    bb6c:	ba 01       	movw	r22, r20
    bb6e:	a9 01       	movw	r20, r18
    bb70:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    bb74:	89 83       	std	Y+1, r24	; 0x01
		if (res == FR_OK) {
    bb76:	89 81       	ldd	r24, Y+1	; 0x01
    bb78:	88 23       	and	r24, r24
    bb7a:	19 f5       	brne	.+70     	; 0xbbc2 <dir_register+0xf6>
			dir = dj->dir;
    bb7c:	8d 81       	ldd	r24, Y+5	; 0x05
    bb7e:	9e 81       	ldd	r25, Y+6	; 0x06
    bb80:	fc 01       	movw	r30, r24
    bb82:	82 89       	ldd	r24, Z+18	; 0x12
    bb84:	93 89       	ldd	r25, Z+19	; 0x13
    bb86:	9c 83       	std	Y+4, r25	; 0x04
    bb88:	8b 83       	std	Y+3, r24	; 0x03
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    bb8a:	8b 81       	ldd	r24, Y+3	; 0x03
    bb8c:	9c 81       	ldd	r25, Y+4	; 0x04
    bb8e:	60 e0       	ldi	r22, 0x00	; 0
    bb90:	70 e0       	ldi	r23, 0x00	; 0
    bb92:	40 e2       	ldi	r20, 0x20	; 32
    bb94:	50 e0       	ldi	r21, 0x00	; 0
    bb96:	0e 94 8d 50 	call	0xa11a	; 0xa11a <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    bb9a:	8d 81       	ldd	r24, Y+5	; 0x05
    bb9c:	9e 81       	ldd	r25, Y+6	; 0x06
    bb9e:	fc 01       	movw	r30, r24
    bba0:	24 89       	ldd	r18, Z+20	; 0x14
    bba2:	35 89       	ldd	r19, Z+21	; 0x15
    bba4:	8b 81       	ldd	r24, Y+3	; 0x03
    bba6:	9c 81       	ldd	r25, Y+4	; 0x04
    bba8:	b9 01       	movw	r22, r18
    bbaa:	4b e0       	ldi	r20, 0x0B	; 11
    bbac:	50 e0       	ldi	r21, 0x00	; 0
    bbae:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    bbb2:	8d 81       	ldd	r24, Y+5	; 0x05
    bbb4:	9e 81       	ldd	r25, Y+6	; 0x06
    bbb6:	fc 01       	movw	r30, r24
    bbb8:	80 81       	ld	r24, Z
    bbba:	91 81       	ldd	r25, Z+1	; 0x01
    bbbc:	21 e0       	ldi	r18, 0x01	; 1
    bbbe:	fc 01       	movw	r30, r24
    bbc0:	24 83       	std	Z+4, r18	; 0x04
		}
	}

	return res;
    bbc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    bbc4:	26 96       	adiw	r28, 0x06	; 6
    bbc6:	0f b6       	in	r0, 0x3f	; 63
    bbc8:	f8 94       	cli
    bbca:	de bf       	out	0x3e, r29	; 62
    bbcc:	0f be       	out	0x3f, r0	; 63
    bbce:	cd bf       	out	0x3d, r28	; 61
    bbd0:	cf 91       	pop	r28
    bbd2:	df 91       	pop	r29
    bbd4:	08 95       	ret

0000bbd6 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    bbd6:	df 93       	push	r29
    bbd8:	cf 93       	push	r28
    bbda:	00 d0       	rcall	.+0      	; 0xbbdc <dir_remove+0x6>
    bbdc:	0f 92       	push	r0
    bbde:	cd b7       	in	r28, 0x3d	; 61
    bbe0:	de b7       	in	r29, 0x3e	; 62
    bbe2:	9b 83       	std	Y+3, r25	; 0x03
    bbe4:	8a 83       	std	Y+2, r24	; 0x02
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    bbe6:	8a 81       	ldd	r24, Y+2	; 0x02
    bbe8:	9b 81       	ldd	r25, Y+3	; 0x03
    bbea:	fc 01       	movw	r30, r24
    bbec:	24 81       	ldd	r18, Z+4	; 0x04
    bbee:	35 81       	ldd	r19, Z+5	; 0x05
    bbf0:	8a 81       	ldd	r24, Y+2	; 0x02
    bbf2:	9b 81       	ldd	r25, Y+3	; 0x03
    bbf4:	b9 01       	movw	r22, r18
    bbf6:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <dir_sdi>
    bbfa:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    bbfc:	89 81       	ldd	r24, Y+1	; 0x01
    bbfe:	88 23       	and	r24, r24
    bc00:	21 f5       	brne	.+72     	; 0xbc4a <dir_remove+0x74>
		res = move_window(dj->fs, dj->sect);
    bc02:	8a 81       	ldd	r24, Y+2	; 0x02
    bc04:	9b 81       	ldd	r25, Y+3	; 0x03
    bc06:	fc 01       	movw	r30, r24
    bc08:	80 81       	ld	r24, Z
    bc0a:	91 81       	ldd	r25, Z+1	; 0x01
    bc0c:	2a 81       	ldd	r18, Y+2	; 0x02
    bc0e:	3b 81       	ldd	r19, Y+3	; 0x03
    bc10:	f9 01       	movw	r30, r18
    bc12:	26 85       	ldd	r18, Z+14	; 0x0e
    bc14:	37 85       	ldd	r19, Z+15	; 0x0f
    bc16:	40 89       	ldd	r20, Z+16	; 0x10
    bc18:	51 89       	ldd	r21, Z+17	; 0x11
    bc1a:	ba 01       	movw	r22, r20
    bc1c:	a9 01       	movw	r20, r18
    bc1e:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    bc22:	89 83       	std	Y+1, r24	; 0x01
		if (res == FR_OK) {
    bc24:	89 81       	ldd	r24, Y+1	; 0x01
    bc26:	88 23       	and	r24, r24
    bc28:	81 f4       	brne	.+32     	; 0xbc4a <dir_remove+0x74>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    bc2a:	8a 81       	ldd	r24, Y+2	; 0x02
    bc2c:	9b 81       	ldd	r25, Y+3	; 0x03
    bc2e:	fc 01       	movw	r30, r24
    bc30:	82 89       	ldd	r24, Z+18	; 0x12
    bc32:	93 89       	ldd	r25, Z+19	; 0x13
    bc34:	25 ee       	ldi	r18, 0xE5	; 229
    bc36:	fc 01       	movw	r30, r24
    bc38:	20 83       	st	Z, r18
			dj->fs->wflag = 1;
    bc3a:	8a 81       	ldd	r24, Y+2	; 0x02
    bc3c:	9b 81       	ldd	r25, Y+3	; 0x03
    bc3e:	fc 01       	movw	r30, r24
    bc40:	80 81       	ld	r24, Z
    bc42:	91 81       	ldd	r25, Z+1	; 0x01
    bc44:	21 e0       	ldi	r18, 0x01	; 1
    bc46:	fc 01       	movw	r30, r24
    bc48:	24 83       	std	Z+4, r18	; 0x04
		}
	}
#endif

	return res;
    bc4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    bc4c:	0f 90       	pop	r0
    bc4e:	0f 90       	pop	r0
    bc50:	0f 90       	pop	r0
    bc52:	cf 91       	pop	r28
    bc54:	df 91       	pop	r29
    bc56:	08 95       	ret

0000bc58 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    bc58:	df 93       	push	r29
    bc5a:	cf 93       	push	r28
    bc5c:	cd b7       	in	r28, 0x3d	; 61
    bc5e:	de b7       	in	r29, 0x3e	; 62
    bc60:	61 97       	sbiw	r28, 0x11	; 17
    bc62:	0f b6       	in	r0, 0x3f	; 63
    bc64:	f8 94       	cli
    bc66:	de bf       	out	0x3e, r29	; 62
    bc68:	0f be       	out	0x3f, r0	; 63
    bc6a:	cd bf       	out	0x3d, r28	; 61
    bc6c:	9f 87       	std	Y+15, r25	; 0x0f
    bc6e:	8e 87       	std	Y+14, r24	; 0x0e
    bc70:	79 8b       	std	Y+17, r23	; 0x11
    bc72:	68 8b       	std	Y+16, r22	; 0x10
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    bc74:	88 89       	ldd	r24, Y+16	; 0x10
    bc76:	99 89       	ldd	r25, Y+17	; 0x11
    bc78:	fc 01       	movw	r30, r24
    bc7a:	80 81       	ld	r24, Z
    bc7c:	91 81       	ldd	r25, Z+1	; 0x01
    bc7e:	9a 87       	std	Y+10, r25	; 0x0a
    bc80:	89 87       	std	Y+9, r24	; 0x09
    bc82:	05 c0       	rjmp	.+10     	; 0xbc8e <create_name+0x36>
    bc84:	89 85       	ldd	r24, Y+9	; 0x09
    bc86:	9a 85       	ldd	r25, Y+10	; 0x0a
    bc88:	01 96       	adiw	r24, 0x01	; 1
    bc8a:	9a 87       	std	Y+10, r25	; 0x0a
    bc8c:	89 87       	std	Y+9, r24	; 0x09
    bc8e:	89 85       	ldd	r24, Y+9	; 0x09
    bc90:	9a 85       	ldd	r25, Y+10	; 0x0a
    bc92:	fc 01       	movw	r30, r24
    bc94:	80 81       	ld	r24, Z
    bc96:	8f 32       	cpi	r24, 0x2F	; 47
    bc98:	a9 f3       	breq	.-22     	; 0xbc84 <create_name+0x2c>
    bc9a:	89 85       	ldd	r24, Y+9	; 0x09
    bc9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bc9e:	fc 01       	movw	r30, r24
    bca0:	80 81       	ld	r24, Z
    bca2:	8c 35       	cpi	r24, 0x5C	; 92
    bca4:	79 f3       	breq	.-34     	; 0xbc84 <create_name+0x2c>
	sfn = dj->fn;
    bca6:	8e 85       	ldd	r24, Y+14	; 0x0e
    bca8:	9f 85       	ldd	r25, Y+15	; 0x0f
    bcaa:	fc 01       	movw	r30, r24
    bcac:	84 89       	ldd	r24, Z+20	; 0x14
    bcae:	95 89       	ldd	r25, Z+21	; 0x15
    bcb0:	9c 87       	std	Y+12, r25	; 0x0c
    bcb2:	8b 87       	std	Y+11, r24	; 0x0b
	mem_set(sfn, ' ', 11);
    bcb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    bcb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    bcb8:	60 e2       	ldi	r22, 0x20	; 32
    bcba:	70 e0       	ldi	r23, 0x00	; 0
    bcbc:	4b e0       	ldi	r20, 0x0B	; 11
    bcbe:	50 e0       	ldi	r21, 0x00	; 0
    bcc0:	0e 94 8d 50 	call	0xa11a	; 0xa11a <mem_set>
	si = i = b = 0; ni = 8;
    bcc4:	19 82       	std	Y+1, r1	; 0x01
    bcc6:	18 86       	std	Y+8, r1	; 0x08
    bcc8:	1f 82       	std	Y+7, r1	; 0x07
    bcca:	8f 81       	ldd	r24, Y+7	; 0x07
    bccc:	98 85       	ldd	r25, Y+8	; 0x08
    bcce:	9e 83       	std	Y+6, r25	; 0x06
    bcd0:	8d 83       	std	Y+5, r24	; 0x05
    bcd2:	88 e0       	ldi	r24, 0x08	; 8
    bcd4:	90 e0       	ldi	r25, 0x00	; 0
    bcd6:	9c 83       	std	Y+4, r25	; 0x04
    bcd8:	8b 83       	std	Y+3, r24	; 0x03
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    bcda:	29 85       	ldd	r18, Y+9	; 0x09
    bcdc:	3a 85       	ldd	r19, Y+10	; 0x0a
    bcde:	8d 81       	ldd	r24, Y+5	; 0x05
    bce0:	9e 81       	ldd	r25, Y+6	; 0x06
    bce2:	82 0f       	add	r24, r18
    bce4:	93 1f       	adc	r25, r19
    bce6:	fc 01       	movw	r30, r24
    bce8:	80 81       	ld	r24, Z
    bcea:	8a 83       	std	Y+2, r24	; 0x02
    bcec:	8d 81       	ldd	r24, Y+5	; 0x05
    bcee:	9e 81       	ldd	r25, Y+6	; 0x06
    bcf0:	01 96       	adiw	r24, 0x01	; 1
    bcf2:	9e 83       	std	Y+6, r25	; 0x06
    bcf4:	8d 83       	std	Y+5, r24	; 0x05
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    bcf6:	8a 81       	ldd	r24, Y+2	; 0x02
    bcf8:	81 32       	cpi	r24, 0x21	; 33
    bcfa:	08 f4       	brcc	.+2      	; 0xbcfe <create_name+0xa6>
    bcfc:	b2 c0       	rjmp	.+356    	; 0xbe62 <create_name+0x20a>
    bcfe:	8a 81       	ldd	r24, Y+2	; 0x02
    bd00:	8f 32       	cpi	r24, 0x2F	; 47
    bd02:	09 f4       	brne	.+2      	; 0xbd06 <create_name+0xae>
    bd04:	ae c0       	rjmp	.+348    	; 0xbe62 <create_name+0x20a>
    bd06:	8a 81       	ldd	r24, Y+2	; 0x02
    bd08:	8c 35       	cpi	r24, 0x5C	; 92
    bd0a:	09 f4       	brne	.+2      	; 0xbd0e <create_name+0xb6>
    bd0c:	aa c0       	rjmp	.+340    	; 0xbe62 <create_name+0x20a>
		if (c == '.' || i >= ni) {
    bd0e:	8a 81       	ldd	r24, Y+2	; 0x02
    bd10:	8e 32       	cpi	r24, 0x2E	; 46
    bd12:	39 f0       	breq	.+14     	; 0xbd22 <create_name+0xca>
    bd14:	2f 81       	ldd	r18, Y+7	; 0x07
    bd16:	38 85       	ldd	r19, Y+8	; 0x08
    bd18:	8b 81       	ldd	r24, Y+3	; 0x03
    bd1a:	9c 81       	ldd	r25, Y+4	; 0x04
    bd1c:	28 17       	cp	r18, r24
    bd1e:	39 07       	cpc	r19, r25
    bd20:	b8 f0       	brcs	.+46     	; 0xbd50 <create_name+0xf8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    bd22:	8b 81       	ldd	r24, Y+3	; 0x03
    bd24:	9c 81       	ldd	r25, Y+4	; 0x04
    bd26:	88 30       	cpi	r24, 0x08	; 8
    bd28:	91 05       	cpc	r25, r1
    bd2a:	19 f4       	brne	.+6      	; 0xbd32 <create_name+0xda>
    bd2c:	8a 81       	ldd	r24, Y+2	; 0x02
    bd2e:	8e 32       	cpi	r24, 0x2E	; 46
    bd30:	11 f0       	breq	.+4      	; 0xbd36 <create_name+0xde>
    bd32:	86 e0       	ldi	r24, 0x06	; 6
    bd34:	df c0       	rjmp	.+446    	; 0xbef4 <create_name+0x29c>
			i = 8; ni = 11;
    bd36:	88 e0       	ldi	r24, 0x08	; 8
    bd38:	90 e0       	ldi	r25, 0x00	; 0
    bd3a:	98 87       	std	Y+8, r25	; 0x08
    bd3c:	8f 83       	std	Y+7, r24	; 0x07
    bd3e:	8b e0       	ldi	r24, 0x0B	; 11
    bd40:	90 e0       	ldi	r25, 0x00	; 0
    bd42:	9c 83       	std	Y+4, r25	; 0x04
    bd44:	8b 83       	std	Y+3, r24	; 0x03
			b <<= 2; continue;
    bd46:	89 81       	ldd	r24, Y+1	; 0x01
    bd48:	88 0f       	add	r24, r24
    bd4a:	88 0f       	add	r24, r24
    bd4c:	89 83       	std	Y+1, r24	; 0x01
    bd4e:	88 c0       	rjmp	.+272    	; 0xbe60 <create_name+0x208>
		}
		if (c >= 0x80) {				/* Extended char? */
    bd50:	8a 81       	ldd	r24, Y+2	; 0x02
    bd52:	88 23       	and	r24, r24
    bd54:	1c f4       	brge	.+6      	; 0xbd5c <create_name+0x104>
			b |= 3;						/* Eliminate NT flag */
    bd56:	89 81       	ldd	r24, Y+1	; 0x01
    bd58:	83 60       	ori	r24, 0x03	; 3
    bd5a:	89 83       	std	Y+1, r24	; 0x01
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    bd5c:	8a 81       	ldd	r24, Y+2	; 0x02
    bd5e:	81 38       	cpi	r24, 0x81	; 129
    bd60:	18 f0       	brcs	.+6      	; 0xbd68 <create_name+0x110>
    bd62:	8a 81       	ldd	r24, Y+2	; 0x02
    bd64:	80 3a       	cpi	r24, 0xA0	; 160
    bd66:	40 f0       	brcs	.+16     	; 0xbd78 <create_name+0x120>
    bd68:	8a 81       	ldd	r24, Y+2	; 0x02
    bd6a:	80 3e       	cpi	r24, 0xE0	; 224
    bd6c:	08 f4       	brcc	.+2      	; 0xbd70 <create_name+0x118>
    bd6e:	47 c0       	rjmp	.+142    	; 0xbdfe <create_name+0x1a6>
    bd70:	8a 81       	ldd	r24, Y+2	; 0x02
    bd72:	8d 3f       	cpi	r24, 0xFD	; 253
    bd74:	08 f0       	brcs	.+2      	; 0xbd78 <create_name+0x120>
    bd76:	43 c0       	rjmp	.+134    	; 0xbdfe <create_name+0x1a6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    bd78:	29 85       	ldd	r18, Y+9	; 0x09
    bd7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    bd7c:	8d 81       	ldd	r24, Y+5	; 0x05
    bd7e:	9e 81       	ldd	r25, Y+6	; 0x06
    bd80:	82 0f       	add	r24, r18
    bd82:	93 1f       	adc	r25, r19
    bd84:	fc 01       	movw	r30, r24
    bd86:	80 81       	ld	r24, Z
    bd88:	8d 87       	std	Y+13, r24	; 0x0d
    bd8a:	8d 81       	ldd	r24, Y+5	; 0x05
    bd8c:	9e 81       	ldd	r25, Y+6	; 0x06
    bd8e:	01 96       	adiw	r24, 0x01	; 1
    bd90:	9e 83       	std	Y+6, r25	; 0x06
    bd92:	8d 83       	std	Y+5, r24	; 0x05
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    bd94:	8d 85       	ldd	r24, Y+13	; 0x0d
    bd96:	80 34       	cpi	r24, 0x40	; 64
    bd98:	18 f0       	brcs	.+6      	; 0xbda0 <create_name+0x148>
    bd9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    bd9c:	8f 37       	cpi	r24, 0x7F	; 127
    bd9e:	30 f0       	brcs	.+12     	; 0xbdac <create_name+0x154>
    bda0:	8d 85       	ldd	r24, Y+13	; 0x0d
    bda2:	88 23       	and	r24, r24
    bda4:	6c f4       	brge	.+26     	; 0xbdc0 <create_name+0x168>
    bda6:	8d 85       	ldd	r24, Y+13	; 0x0d
    bda8:	8d 3f       	cpi	r24, 0xFD	; 253
    bdaa:	50 f4       	brcc	.+20     	; 0xbdc0 <create_name+0x168>
    bdac:	8b 81       	ldd	r24, Y+3	; 0x03
    bdae:	9c 81       	ldd	r25, Y+4	; 0x04
    bdb0:	9c 01       	movw	r18, r24
    bdb2:	21 50       	subi	r18, 0x01	; 1
    bdb4:	30 40       	sbci	r19, 0x00	; 0
    bdb6:	8f 81       	ldd	r24, Y+7	; 0x07
    bdb8:	98 85       	ldd	r25, Y+8	; 0x08
    bdba:	82 17       	cp	r24, r18
    bdbc:	93 07       	cpc	r25, r19
    bdbe:	10 f0       	brcs	.+4      	; 0xbdc4 <create_name+0x16c>
				return FR_INVALID_NAME;
    bdc0:	86 e0       	ldi	r24, 0x06	; 6
    bdc2:	98 c0       	rjmp	.+304    	; 0xbef4 <create_name+0x29c>
			sfn[i++] = c;
    bdc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    bdc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    bdc8:	8f 81       	ldd	r24, Y+7	; 0x07
    bdca:	98 85       	ldd	r25, Y+8	; 0x08
    bdcc:	82 0f       	add	r24, r18
    bdce:	93 1f       	adc	r25, r19
    bdd0:	2a 81       	ldd	r18, Y+2	; 0x02
    bdd2:	fc 01       	movw	r30, r24
    bdd4:	20 83       	st	Z, r18
    bdd6:	8f 81       	ldd	r24, Y+7	; 0x07
    bdd8:	98 85       	ldd	r25, Y+8	; 0x08
    bdda:	01 96       	adiw	r24, 0x01	; 1
    bddc:	98 87       	std	Y+8, r25	; 0x08
    bdde:	8f 83       	std	Y+7, r24	; 0x07
			sfn[i++] = d;
    bde0:	2b 85       	ldd	r18, Y+11	; 0x0b
    bde2:	3c 85       	ldd	r19, Y+12	; 0x0c
    bde4:	8f 81       	ldd	r24, Y+7	; 0x07
    bde6:	98 85       	ldd	r25, Y+8	; 0x08
    bde8:	82 0f       	add	r24, r18
    bdea:	93 1f       	adc	r25, r19
    bdec:	2d 85       	ldd	r18, Y+13	; 0x0d
    bdee:	fc 01       	movw	r30, r24
    bdf0:	20 83       	st	Z, r18
    bdf2:	8f 81       	ldd	r24, Y+7	; 0x07
    bdf4:	98 85       	ldd	r25, Y+8	; 0x08
    bdf6:	01 96       	adiw	r24, 0x01	; 1
    bdf8:	98 87       	std	Y+8, r25	; 0x08
    bdfa:	8f 83       	std	Y+7, r24	; 0x07
    bdfc:	31 c0       	rjmp	.+98     	; 0xbe60 <create_name+0x208>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    bdfe:	8a 81       	ldd	r24, Y+2	; 0x02
    be00:	28 2f       	mov	r18, r24
    be02:	30 e0       	ldi	r19, 0x00	; 0
    be04:	80 e0       	ldi	r24, 0x00	; 0
    be06:	91 e0       	ldi	r25, 0x01	; 1
    be08:	b9 01       	movw	r22, r18
    be0a:	0e 94 19 51 	call	0xa232	; 0xa232 <chk_chr>
    be0e:	00 97       	sbiw	r24, 0x00	; 0
    be10:	11 f0       	breq	.+4      	; 0xbe16 <create_name+0x1be>
				return FR_INVALID_NAME;
    be12:	86 e0       	ldi	r24, 0x06	; 6
    be14:	6f c0       	rjmp	.+222    	; 0xbef4 <create_name+0x29c>
			if (IsUpper(c)) {			/* ASCII large capital? */
    be16:	8a 81       	ldd	r24, Y+2	; 0x02
    be18:	81 34       	cpi	r24, 0x41	; 65
    be1a:	38 f0       	brcs	.+14     	; 0xbe2a <create_name+0x1d2>
    be1c:	8a 81       	ldd	r24, Y+2	; 0x02
    be1e:	8b 35       	cpi	r24, 0x5B	; 91
    be20:	20 f4       	brcc	.+8      	; 0xbe2a <create_name+0x1d2>
				b |= 2;
    be22:	89 81       	ldd	r24, Y+1	; 0x01
    be24:	82 60       	ori	r24, 0x02	; 2
    be26:	89 83       	std	Y+1, r24	; 0x01
    be28:	0c c0       	rjmp	.+24     	; 0xbe42 <create_name+0x1ea>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    be2a:	8a 81       	ldd	r24, Y+2	; 0x02
    be2c:	81 36       	cpi	r24, 0x61	; 97
    be2e:	48 f0       	brcs	.+18     	; 0xbe42 <create_name+0x1ea>
    be30:	8a 81       	ldd	r24, Y+2	; 0x02
    be32:	8b 37       	cpi	r24, 0x7B	; 123
    be34:	30 f4       	brcc	.+12     	; 0xbe42 <create_name+0x1ea>
					b |= 1; c -= 0x20;
    be36:	89 81       	ldd	r24, Y+1	; 0x01
    be38:	81 60       	ori	r24, 0x01	; 1
    be3a:	89 83       	std	Y+1, r24	; 0x01
    be3c:	8a 81       	ldd	r24, Y+2	; 0x02
    be3e:	80 52       	subi	r24, 0x20	; 32
    be40:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
			sfn[i++] = c;
    be42:	2b 85       	ldd	r18, Y+11	; 0x0b
    be44:	3c 85       	ldd	r19, Y+12	; 0x0c
    be46:	8f 81       	ldd	r24, Y+7	; 0x07
    be48:	98 85       	ldd	r25, Y+8	; 0x08
    be4a:	82 0f       	add	r24, r18
    be4c:	93 1f       	adc	r25, r19
    be4e:	2a 81       	ldd	r18, Y+2	; 0x02
    be50:	fc 01       	movw	r30, r24
    be52:	20 83       	st	Z, r18
    be54:	8f 81       	ldd	r24, Y+7	; 0x07
    be56:	98 85       	ldd	r25, Y+8	; 0x08
    be58:	01 96       	adiw	r24, 0x01	; 1
    be5a:	98 87       	std	Y+8, r25	; 0x08
    be5c:	8f 83       	std	Y+7, r24	; 0x07
		}
	}
    be5e:	3d cf       	rjmp	.-390    	; 0xbcda <create_name+0x82>
    be60:	3c cf       	rjmp	.-392    	; 0xbcda <create_name+0x82>
	*path = &p[si];						/* Return pointer to the next segment */
    be62:	29 85       	ldd	r18, Y+9	; 0x09
    be64:	3a 85       	ldd	r19, Y+10	; 0x0a
    be66:	8d 81       	ldd	r24, Y+5	; 0x05
    be68:	9e 81       	ldd	r25, Y+6	; 0x06
    be6a:	28 0f       	add	r18, r24
    be6c:	39 1f       	adc	r19, r25
    be6e:	88 89       	ldd	r24, Y+16	; 0x10
    be70:	99 89       	ldd	r25, Y+17	; 0x11
    be72:	fc 01       	movw	r30, r24
    be74:	31 83       	std	Z+1, r19	; 0x01
    be76:	20 83       	st	Z, r18
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    be78:	8a 81       	ldd	r24, Y+2	; 0x02
    be7a:	81 32       	cpi	r24, 0x21	; 33
    be7c:	10 f4       	brcc	.+4      	; 0xbe82 <create_name+0x22a>
    be7e:	84 e0       	ldi	r24, 0x04	; 4
    be80:	01 c0       	rjmp	.+2      	; 0xbe84 <create_name+0x22c>
    be82:	80 e0       	ldi	r24, 0x00	; 0
    be84:	8a 83       	std	Y+2, r24	; 0x02

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    be86:	8f 81       	ldd	r24, Y+7	; 0x07
    be88:	98 85       	ldd	r25, Y+8	; 0x08
    be8a:	00 97       	sbiw	r24, 0x00	; 0
    be8c:	11 f4       	brne	.+4      	; 0xbe92 <create_name+0x23a>
    be8e:	86 e0       	ldi	r24, 0x06	; 6
    be90:	31 c0       	rjmp	.+98     	; 0xbef4 <create_name+0x29c>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    be92:	8b 85       	ldd	r24, Y+11	; 0x0b
    be94:	9c 85       	ldd	r25, Y+12	; 0x0c
    be96:	fc 01       	movw	r30, r24
    be98:	80 81       	ld	r24, Z
    be9a:	85 3e       	cpi	r24, 0xE5	; 229
    be9c:	29 f4       	brne	.+10     	; 0xbea8 <create_name+0x250>
    be9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    bea0:	9c 85       	ldd	r25, Y+12	; 0x0c
    bea2:	25 e0       	ldi	r18, 0x05	; 5
    bea4:	fc 01       	movw	r30, r24
    bea6:	20 83       	st	Z, r18

	if (ni == 8) b <<= 2;
    bea8:	8b 81       	ldd	r24, Y+3	; 0x03
    beaa:	9c 81       	ldd	r25, Y+4	; 0x04
    beac:	88 30       	cpi	r24, 0x08	; 8
    beae:	91 05       	cpc	r25, r1
    beb0:	21 f4       	brne	.+8      	; 0xbeba <create_name+0x262>
    beb2:	89 81       	ldd	r24, Y+1	; 0x01
    beb4:	88 0f       	add	r24, r24
    beb6:	88 0f       	add	r24, r24
    beb8:	89 83       	std	Y+1, r24	; 0x01
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    beba:	89 81       	ldd	r24, Y+1	; 0x01
    bebc:	88 2f       	mov	r24, r24
    bebe:	90 e0       	ldi	r25, 0x00	; 0
    bec0:	83 70       	andi	r24, 0x03	; 3
    bec2:	90 70       	andi	r25, 0x00	; 0
    bec4:	81 30       	cpi	r24, 0x01	; 1
    bec6:	91 05       	cpc	r25, r1
    bec8:	19 f4       	brne	.+6      	; 0xbed0 <create_name+0x278>
    beca:	8a 81       	ldd	r24, Y+2	; 0x02
    becc:	80 61       	ori	r24, 0x10	; 16
    bece:	8a 83       	std	Y+2, r24	; 0x02
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    bed0:	89 81       	ldd	r24, Y+1	; 0x01
    bed2:	88 2f       	mov	r24, r24
    bed4:	90 e0       	ldi	r25, 0x00	; 0
    bed6:	8c 70       	andi	r24, 0x0C	; 12
    bed8:	90 70       	andi	r25, 0x00	; 0
    beda:	84 30       	cpi	r24, 0x04	; 4
    bedc:	91 05       	cpc	r25, r1
    bede:	19 f4       	brne	.+6      	; 0xbee6 <create_name+0x28e>
    bee0:	8a 81       	ldd	r24, Y+2	; 0x02
    bee2:	88 60       	ori	r24, 0x08	; 8
    bee4:	8a 83       	std	Y+2, r24	; 0x02

	sfn[NS] = c;		/* Store NT flag, File name is created */
    bee6:	8b 85       	ldd	r24, Y+11	; 0x0b
    bee8:	9c 85       	ldd	r25, Y+12	; 0x0c
    beea:	0b 96       	adiw	r24, 0x0b	; 11
    beec:	2a 81       	ldd	r18, Y+2	; 0x02
    beee:	fc 01       	movw	r30, r24
    bef0:	20 83       	st	Z, r18

	return FR_OK;
    bef2:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    bef4:	61 96       	adiw	r28, 0x11	; 17
    bef6:	0f b6       	in	r0, 0x3f	; 63
    bef8:	f8 94       	cli
    befa:	de bf       	out	0x3e, r29	; 62
    befc:	0f be       	out	0x3f, r0	; 63
    befe:	cd bf       	out	0x3d, r28	; 61
    bf00:	cf 91       	pop	r28
    bf02:	df 91       	pop	r29
    bf04:	08 95       	ret

0000bf06 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    bf06:	df 93       	push	r29
    bf08:	cf 93       	push	r28
    bf0a:	cd b7       	in	r28, 0x3d	; 61
    bf0c:	de b7       	in	r29, 0x3e	; 62
    bf0e:	2c 97       	sbiw	r28, 0x0c	; 12
    bf10:	0f b6       	in	r0, 0x3f	; 63
    bf12:	f8 94       	cli
    bf14:	de bf       	out	0x3e, r29	; 62
    bf16:	0f be       	out	0x3f, r0	; 63
    bf18:	cd bf       	out	0x3d, r28	; 61
    bf1a:	9a 87       	std	Y+10, r25	; 0x0a
    bf1c:	89 87       	std	Y+9, r24	; 0x09
    bf1e:	7c 87       	std	Y+12, r23	; 0x0c
    bf20:	6b 87       	std	Y+11, r22	; 0x0b
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    bf22:	8b 85       	ldd	r24, Y+11	; 0x0b
    bf24:	9c 85       	ldd	r25, Y+12	; 0x0c
    bf26:	09 96       	adiw	r24, 0x09	; 9
    bf28:	9c 83       	std	Y+4, r25	; 0x04
    bf2a:	8b 83       	std	Y+3, r24	; 0x03
	if (dj->sect) {
    bf2c:	89 85       	ldd	r24, Y+9	; 0x09
    bf2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    bf30:	fc 01       	movw	r30, r24
    bf32:	86 85       	ldd	r24, Z+14	; 0x0e
    bf34:	97 85       	ldd	r25, Z+15	; 0x0f
    bf36:	a0 89       	ldd	r26, Z+16	; 0x10
    bf38:	b1 89       	ldd	r27, Z+17	; 0x11
    bf3a:	00 97       	sbiw	r24, 0x00	; 0
    bf3c:	a1 05       	cpc	r26, r1
    bf3e:	b1 05       	cpc	r27, r1
    bf40:	09 f4       	brne	.+2      	; 0xbf44 <get_fileinfo+0x3e>
    bf42:	e7 c0       	rjmp	.+462    	; 0xc112 <get_fileinfo+0x20c>
		dir = dj->dir;
    bf44:	89 85       	ldd	r24, Y+9	; 0x09
    bf46:	9a 85       	ldd	r25, Y+10	; 0x0a
    bf48:	fc 01       	movw	r30, r24
    bf4a:	82 89       	ldd	r24, Z+18	; 0x12
    bf4c:	93 89       	ldd	r25, Z+19	; 0x13
    bf4e:	9f 83       	std	Y+7, r25	; 0x07
    bf50:	8e 83       	std	Y+6, r24	; 0x06
		nt = dir[DIR_NTres];		/* NT flag */
    bf52:	8e 81       	ldd	r24, Y+6	; 0x06
    bf54:	9f 81       	ldd	r25, Y+7	; 0x07
    bf56:	0c 96       	adiw	r24, 0x0c	; 12
    bf58:	fc 01       	movw	r30, r24
    bf5a:	80 81       	ld	r24, Z
    bf5c:	88 87       	std	Y+8, r24	; 0x08
		for (i = 0; i < 8; i++) {	/* Copy name body */
    bf5e:	1a 82       	std	Y+2, r1	; 0x02
    bf60:	19 82       	std	Y+1, r1	; 0x01
    bf62:	20 c0       	rjmp	.+64     	; 0xbfa4 <get_fileinfo+0x9e>
			c = dir[i];
    bf64:	2e 81       	ldd	r18, Y+6	; 0x06
    bf66:	3f 81       	ldd	r19, Y+7	; 0x07
    bf68:	89 81       	ldd	r24, Y+1	; 0x01
    bf6a:	9a 81       	ldd	r25, Y+2	; 0x02
    bf6c:	82 0f       	add	r24, r18
    bf6e:	93 1f       	adc	r25, r19
    bf70:	fc 01       	movw	r30, r24
    bf72:	80 81       	ld	r24, Z
    bf74:	8d 83       	std	Y+5, r24	; 0x05
			if (c == ' ') break;
    bf76:	8d 81       	ldd	r24, Y+5	; 0x05
    bf78:	80 32       	cpi	r24, 0x20	; 32
    bf7a:	d1 f0       	breq	.+52     	; 0xbfb0 <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
    bf7c:	8d 81       	ldd	r24, Y+5	; 0x05
    bf7e:	85 30       	cpi	r24, 0x05	; 5
    bf80:	11 f4       	brne	.+4      	; 0xbf86 <get_fileinfo+0x80>
    bf82:	85 ee       	ldi	r24, 0xE5	; 229
    bf84:	8d 83       	std	Y+5, r24	; 0x05
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    bf86:	8b 81       	ldd	r24, Y+3	; 0x03
    bf88:	9c 81       	ldd	r25, Y+4	; 0x04
    bf8a:	2d 81       	ldd	r18, Y+5	; 0x05
    bf8c:	fc 01       	movw	r30, r24
    bf8e:	20 83       	st	Z, r18
    bf90:	8b 81       	ldd	r24, Y+3	; 0x03
    bf92:	9c 81       	ldd	r25, Y+4	; 0x04
    bf94:	01 96       	adiw	r24, 0x01	; 1
    bf96:	9c 83       	std	Y+4, r25	; 0x04
    bf98:	8b 83       	std	Y+3, r24	; 0x03

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    bf9a:	89 81       	ldd	r24, Y+1	; 0x01
    bf9c:	9a 81       	ldd	r25, Y+2	; 0x02
    bf9e:	01 96       	adiw	r24, 0x01	; 1
    bfa0:	9a 83       	std	Y+2, r25	; 0x02
    bfa2:	89 83       	std	Y+1, r24	; 0x01
    bfa4:	89 81       	ldd	r24, Y+1	; 0x01
    bfa6:	9a 81       	ldd	r25, Y+2	; 0x02
    bfa8:	88 30       	cpi	r24, 0x08	; 8
    bfaa:	91 05       	cpc	r25, r1
    bfac:	d8 f2       	brcs	.-74     	; 0xbf64 <get_fileinfo+0x5e>
    bfae:	01 c0       	rjmp	.+2      	; 0xbfb2 <get_fileinfo+0xac>
			c = dir[i];
			if (c == ' ') break;
    bfb0:	00 00       	nop
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    bfb2:	8e 81       	ldd	r24, Y+6	; 0x06
    bfb4:	9f 81       	ldd	r25, Y+7	; 0x07
    bfb6:	08 96       	adiw	r24, 0x08	; 8
    bfb8:	fc 01       	movw	r30, r24
    bfba:	80 81       	ld	r24, Z
    bfbc:	80 32       	cpi	r24, 0x20	; 32
    bfbe:	89 f1       	breq	.+98     	; 0xc022 <get_fileinfo+0x11c>
			*p++ = '.';
    bfc0:	8b 81       	ldd	r24, Y+3	; 0x03
    bfc2:	9c 81       	ldd	r25, Y+4	; 0x04
    bfc4:	2e e2       	ldi	r18, 0x2E	; 46
    bfc6:	fc 01       	movw	r30, r24
    bfc8:	20 83       	st	Z, r18
    bfca:	8b 81       	ldd	r24, Y+3	; 0x03
    bfcc:	9c 81       	ldd	r25, Y+4	; 0x04
    bfce:	01 96       	adiw	r24, 0x01	; 1
    bfd0:	9c 83       	std	Y+4, r25	; 0x04
    bfd2:	8b 83       	std	Y+3, r24	; 0x03
			for (i = 8; i < 11; i++) {
    bfd4:	88 e0       	ldi	r24, 0x08	; 8
    bfd6:	90 e0       	ldi	r25, 0x00	; 0
    bfd8:	9a 83       	std	Y+2, r25	; 0x02
    bfda:	89 83       	std	Y+1, r24	; 0x01
    bfdc:	1b c0       	rjmp	.+54     	; 0xc014 <get_fileinfo+0x10e>
				c = dir[i];
    bfde:	2e 81       	ldd	r18, Y+6	; 0x06
    bfe0:	3f 81       	ldd	r19, Y+7	; 0x07
    bfe2:	89 81       	ldd	r24, Y+1	; 0x01
    bfe4:	9a 81       	ldd	r25, Y+2	; 0x02
    bfe6:	82 0f       	add	r24, r18
    bfe8:	93 1f       	adc	r25, r19
    bfea:	fc 01       	movw	r30, r24
    bfec:	80 81       	ld	r24, Z
    bfee:	8d 83       	std	Y+5, r24	; 0x05
				if (c == ' ') break;
    bff0:	8d 81       	ldd	r24, Y+5	; 0x05
    bff2:	80 32       	cpi	r24, 0x20	; 32
    bff4:	a9 f0       	breq	.+42     	; 0xc020 <get_fileinfo+0x11a>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    bff6:	8b 81       	ldd	r24, Y+3	; 0x03
    bff8:	9c 81       	ldd	r25, Y+4	; 0x04
    bffa:	2d 81       	ldd	r18, Y+5	; 0x05
    bffc:	fc 01       	movw	r30, r24
    bffe:	20 83       	st	Z, r18
    c000:	8b 81       	ldd	r24, Y+3	; 0x03
    c002:	9c 81       	ldd	r25, Y+4	; 0x04
    c004:	01 96       	adiw	r24, 0x01	; 1
    c006:	9c 83       	std	Y+4, r25	; 0x04
    c008:	8b 83       	std	Y+3, r24	; 0x03
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    c00a:	89 81       	ldd	r24, Y+1	; 0x01
    c00c:	9a 81       	ldd	r25, Y+2	; 0x02
    c00e:	01 96       	adiw	r24, 0x01	; 1
    c010:	9a 83       	std	Y+2, r25	; 0x02
    c012:	89 83       	std	Y+1, r24	; 0x01
    c014:	89 81       	ldd	r24, Y+1	; 0x01
    c016:	9a 81       	ldd	r25, Y+2	; 0x02
    c018:	8b 30       	cpi	r24, 0x0B	; 11
    c01a:	91 05       	cpc	r25, r1
    c01c:	00 f3       	brcs	.-64     	; 0xbfde <get_fileinfo+0xd8>
    c01e:	01 c0       	rjmp	.+2      	; 0xc022 <get_fileinfo+0x11c>
				c = dir[i];
				if (c == ' ') break;
    c020:	00 00       	nop
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    c022:	8e 81       	ldd	r24, Y+6	; 0x06
    c024:	9f 81       	ldd	r25, Y+7	; 0x07
    c026:	0b 96       	adiw	r24, 0x0b	; 11
    c028:	fc 01       	movw	r30, r24
    c02a:	20 81       	ld	r18, Z
    c02c:	8b 85       	ldd	r24, Y+11	; 0x0b
    c02e:	9c 85       	ldd	r25, Y+12	; 0x0c
    c030:	fc 01       	movw	r30, r24
    c032:	20 87       	std	Z+8, r18	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    c034:	8e 81       	ldd	r24, Y+6	; 0x06
    c036:	9f 81       	ldd	r25, Y+7	; 0x07
    c038:	4f 96       	adiw	r24, 0x1f	; 31
    c03a:	fc 01       	movw	r30, r24
    c03c:	80 81       	ld	r24, Z
    c03e:	88 2f       	mov	r24, r24
    c040:	90 e0       	ldi	r25, 0x00	; 0
    c042:	a0 e0       	ldi	r26, 0x00	; 0
    c044:	b0 e0       	ldi	r27, 0x00	; 0
    c046:	58 2f       	mov	r21, r24
    c048:	44 27       	eor	r20, r20
    c04a:	33 27       	eor	r19, r19
    c04c:	22 27       	eor	r18, r18
    c04e:	8e 81       	ldd	r24, Y+6	; 0x06
    c050:	9f 81       	ldd	r25, Y+7	; 0x07
    c052:	4e 96       	adiw	r24, 0x1e	; 30
    c054:	fc 01       	movw	r30, r24
    c056:	80 81       	ld	r24, Z
    c058:	88 2f       	mov	r24, r24
    c05a:	90 e0       	ldi	r25, 0x00	; 0
    c05c:	a0 e0       	ldi	r26, 0x00	; 0
    c05e:	b0 e0       	ldi	r27, 0x00	; 0
    c060:	dc 01       	movw	r26, r24
    c062:	99 27       	eor	r25, r25
    c064:	88 27       	eor	r24, r24
    c066:	28 2b       	or	r18, r24
    c068:	39 2b       	or	r19, r25
    c06a:	4a 2b       	or	r20, r26
    c06c:	5b 2b       	or	r21, r27
    c06e:	8e 81       	ldd	r24, Y+6	; 0x06
    c070:	9f 81       	ldd	r25, Y+7	; 0x07
    c072:	4d 96       	adiw	r24, 0x1d	; 29
    c074:	fc 01       	movw	r30, r24
    c076:	80 81       	ld	r24, Z
    c078:	88 2f       	mov	r24, r24
    c07a:	90 e0       	ldi	r25, 0x00	; 0
    c07c:	98 2f       	mov	r25, r24
    c07e:	88 27       	eor	r24, r24
    c080:	cc 01       	movw	r24, r24
    c082:	a0 e0       	ldi	r26, 0x00	; 0
    c084:	b0 e0       	ldi	r27, 0x00	; 0
    c086:	28 2b       	or	r18, r24
    c088:	39 2b       	or	r19, r25
    c08a:	4a 2b       	or	r20, r26
    c08c:	5b 2b       	or	r21, r27
    c08e:	8e 81       	ldd	r24, Y+6	; 0x06
    c090:	9f 81       	ldd	r25, Y+7	; 0x07
    c092:	4c 96       	adiw	r24, 0x1c	; 28
    c094:	fc 01       	movw	r30, r24
    c096:	80 81       	ld	r24, Z
    c098:	88 2f       	mov	r24, r24
    c09a:	90 e0       	ldi	r25, 0x00	; 0
    c09c:	a0 e0       	ldi	r26, 0x00	; 0
    c09e:	b0 e0       	ldi	r27, 0x00	; 0
    c0a0:	82 2b       	or	r24, r18
    c0a2:	93 2b       	or	r25, r19
    c0a4:	a4 2b       	or	r26, r20
    c0a6:	b5 2b       	or	r27, r21
    c0a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    c0aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    c0ac:	f9 01       	movw	r30, r18
    c0ae:	80 83       	st	Z, r24
    c0b0:	91 83       	std	Z+1, r25	; 0x01
    c0b2:	a2 83       	std	Z+2, r26	; 0x02
    c0b4:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    c0b6:	8e 81       	ldd	r24, Y+6	; 0x06
    c0b8:	9f 81       	ldd	r25, Y+7	; 0x07
    c0ba:	49 96       	adiw	r24, 0x19	; 25
    c0bc:	fc 01       	movw	r30, r24
    c0be:	80 81       	ld	r24, Z
    c0c0:	88 2f       	mov	r24, r24
    c0c2:	90 e0       	ldi	r25, 0x00	; 0
    c0c4:	38 2f       	mov	r19, r24
    c0c6:	22 27       	eor	r18, r18
    c0c8:	8e 81       	ldd	r24, Y+6	; 0x06
    c0ca:	9f 81       	ldd	r25, Y+7	; 0x07
    c0cc:	48 96       	adiw	r24, 0x18	; 24
    c0ce:	fc 01       	movw	r30, r24
    c0d0:	80 81       	ld	r24, Z
    c0d2:	88 2f       	mov	r24, r24
    c0d4:	90 e0       	ldi	r25, 0x00	; 0
    c0d6:	28 2b       	or	r18, r24
    c0d8:	39 2b       	or	r19, r25
    c0da:	8b 85       	ldd	r24, Y+11	; 0x0b
    c0dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    c0de:	fc 01       	movw	r30, r24
    c0e0:	35 83       	std	Z+5, r19	; 0x05
    c0e2:	24 83       	std	Z+4, r18	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    c0e4:	8e 81       	ldd	r24, Y+6	; 0x06
    c0e6:	9f 81       	ldd	r25, Y+7	; 0x07
    c0e8:	47 96       	adiw	r24, 0x17	; 23
    c0ea:	fc 01       	movw	r30, r24
    c0ec:	80 81       	ld	r24, Z
    c0ee:	88 2f       	mov	r24, r24
    c0f0:	90 e0       	ldi	r25, 0x00	; 0
    c0f2:	38 2f       	mov	r19, r24
    c0f4:	22 27       	eor	r18, r18
    c0f6:	8e 81       	ldd	r24, Y+6	; 0x06
    c0f8:	9f 81       	ldd	r25, Y+7	; 0x07
    c0fa:	46 96       	adiw	r24, 0x16	; 22
    c0fc:	fc 01       	movw	r30, r24
    c0fe:	80 81       	ld	r24, Z
    c100:	88 2f       	mov	r24, r24
    c102:	90 e0       	ldi	r25, 0x00	; 0
    c104:	28 2b       	or	r18, r24
    c106:	39 2b       	or	r19, r25
    c108:	8b 85       	ldd	r24, Y+11	; 0x0b
    c10a:	9c 85       	ldd	r25, Y+12	; 0x0c
    c10c:	fc 01       	movw	r30, r24
    c10e:	37 83       	std	Z+7, r19	; 0x07
    c110:	26 83       	std	Z+6, r18	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    c112:	8b 81       	ldd	r24, Y+3	; 0x03
    c114:	9c 81       	ldd	r25, Y+4	; 0x04
    c116:	fc 01       	movw	r30, r24
    c118:	10 82       	st	Z, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
    c11a:	2c 96       	adiw	r28, 0x0c	; 12
    c11c:	0f b6       	in	r0, 0x3f	; 63
    c11e:	f8 94       	cli
    c120:	de bf       	out	0x3e, r29	; 62
    c122:	0f be       	out	0x3f, r0	; 63
    c124:	cd bf       	out	0x3d, r28	; 61
    c126:	cf 91       	pop	r28
    c128:	df 91       	pop	r29
    c12a:	08 95       	ret

0000c12c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    c12c:	df 93       	push	r29
    c12e:	cf 93       	push	r28
    c130:	cd b7       	in	r28, 0x3d	; 61
    c132:	de b7       	in	r29, 0x3e	; 62
    c134:	28 97       	sbiw	r28, 0x08	; 8
    c136:	0f b6       	in	r0, 0x3f	; 63
    c138:	f8 94       	cli
    c13a:	de bf       	out	0x3e, r29	; 62
    c13c:	0f be       	out	0x3f, r0	; 63
    c13e:	cd bf       	out	0x3d, r28	; 61
    c140:	9e 83       	std	Y+6, r25	; 0x06
    c142:	8d 83       	std	Y+5, r24	; 0x05
    c144:	78 87       	std	Y+8, r23	; 0x08
    c146:	6f 83       	std	Y+7, r22	; 0x07
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    c148:	8f 81       	ldd	r24, Y+7	; 0x07
    c14a:	98 85       	ldd	r25, Y+8	; 0x08
    c14c:	fc 01       	movw	r30, r24
    c14e:	80 81       	ld	r24, Z
    c150:	8f 32       	cpi	r24, 0x2F	; 47
    c152:	31 f0       	breq	.+12     	; 0xc160 <follow_path+0x34>
    c154:	8f 81       	ldd	r24, Y+7	; 0x07
    c156:	98 85       	ldd	r25, Y+8	; 0x08
    c158:	fc 01       	movw	r30, r24
    c15a:	80 81       	ld	r24, Z
    c15c:	8c 35       	cpi	r24, 0x5C	; 92
    c15e:	29 f4       	brne	.+10     	; 0xc16a <follow_path+0x3e>
		path++;
    c160:	8f 81       	ldd	r24, Y+7	; 0x07
    c162:	98 85       	ldd	r25, Y+8	; 0x08
    c164:	01 96       	adiw	r24, 0x01	; 1
    c166:	98 87       	std	Y+8, r25	; 0x08
    c168:	8f 83       	std	Y+7, r24	; 0x07
	dj->sclust = 0;						/* Start from the root dir */
    c16a:	8d 81       	ldd	r24, Y+5	; 0x05
    c16c:	9e 81       	ldd	r25, Y+6	; 0x06
    c16e:	fc 01       	movw	r30, r24
    c170:	16 82       	std	Z+6, r1	; 0x06
    c172:	17 82       	std	Z+7, r1	; 0x07
    c174:	10 86       	std	Z+8, r1	; 0x08
    c176:	11 86       	std	Z+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    c178:	8f 81       	ldd	r24, Y+7	; 0x07
    c17a:	98 85       	ldd	r25, Y+8	; 0x08
    c17c:	fc 01       	movw	r30, r24
    c17e:	80 81       	ld	r24, Z
    c180:	80 32       	cpi	r24, 0x20	; 32
    c182:	68 f4       	brcc	.+26     	; 0xc19e <follow_path+0x72>
		res = dir_sdi(dj, 0);
    c184:	8d 81       	ldd	r24, Y+5	; 0x05
    c186:	9e 81       	ldd	r25, Y+6	; 0x06
    c188:	60 e0       	ldi	r22, 0x00	; 0
    c18a:	70 e0       	ldi	r23, 0x00	; 0
    c18c:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <dir_sdi>
    c190:	89 83       	std	Y+1, r24	; 0x01
		dj->dir = 0;
    c192:	8d 81       	ldd	r24, Y+5	; 0x05
    c194:	9e 81       	ldd	r25, Y+6	; 0x06
    c196:	fc 01       	movw	r30, r24
    c198:	13 8a       	std	Z+19, r1	; 0x13
    c19a:	12 8a       	std	Z+18, r1	; 0x12
    c19c:	8a c0       	rjmp	.+276    	; 0xc2b2 <follow_path+0x186>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    c19e:	8d 81       	ldd	r24, Y+5	; 0x05
    c1a0:	9e 81       	ldd	r25, Y+6	; 0x06
    c1a2:	9e 01       	movw	r18, r28
    c1a4:	29 5f       	subi	r18, 0xF9	; 249
    c1a6:	3f 4f       	sbci	r19, 0xFF	; 255
    c1a8:	b9 01       	movw	r22, r18
    c1aa:	0e 94 2c 5e 	call	0xbc58	; 0xbc58 <create_name>
    c1ae:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) break;
    c1b0:	89 81       	ldd	r24, Y+1	; 0x01
    c1b2:	88 23       	and	r24, r24
    c1b4:	09 f0       	breq	.+2      	; 0xc1b8 <follow_path+0x8c>
    c1b6:	76 c0       	rjmp	.+236    	; 0xc2a4 <follow_path+0x178>
			res = dir_find(dj);				/* Find it */
    c1b8:	8d 81       	ldd	r24, Y+5	; 0x05
    c1ba:	9e 81       	ldd	r25, Y+6	; 0x06
    c1bc:	0e 94 86 5c 	call	0xb90c	; 0xb90c <dir_find>
    c1c0:	89 83       	std	Y+1, r24	; 0x01
			ns = *(dj->fn+NS);
    c1c2:	8d 81       	ldd	r24, Y+5	; 0x05
    c1c4:	9e 81       	ldd	r25, Y+6	; 0x06
    c1c6:	fc 01       	movw	r30, r24
    c1c8:	84 89       	ldd	r24, Z+20	; 0x14
    c1ca:	95 89       	ldd	r25, Z+21	; 0x15
    c1cc:	0b 96       	adiw	r24, 0x0b	; 11
    c1ce:	fc 01       	movw	r30, r24
    c1d0:	80 81       	ld	r24, Z
    c1d2:	8a 83       	std	Y+2, r24	; 0x02
			if (res != FR_OK) {				/* Failed to find the object */
    c1d4:	89 81       	ldd	r24, Y+1	; 0x01
    c1d6:	88 23       	and	r24, r24
    c1d8:	79 f0       	breq	.+30     	; 0xc1f8 <follow_path+0xcc>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    c1da:	89 81       	ldd	r24, Y+1	; 0x01
    c1dc:	84 30       	cpi	r24, 0x04	; 4
    c1de:	09 f0       	breq	.+2      	; 0xc1e2 <follow_path+0xb6>
    c1e0:	63 c0       	rjmp	.+198    	; 0xc2a8 <follow_path+0x17c>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    c1e2:	8a 81       	ldd	r24, Y+2	; 0x02
    c1e4:	88 2f       	mov	r24, r24
    c1e6:	90 e0       	ldi	r25, 0x00	; 0
    c1e8:	84 70       	andi	r24, 0x04	; 4
    c1ea:	90 70       	andi	r25, 0x00	; 0
    c1ec:	00 97       	sbiw	r24, 0x00	; 0
    c1ee:	09 f0       	breq	.+2      	; 0xc1f2 <follow_path+0xc6>
    c1f0:	5d c0       	rjmp	.+186    	; 0xc2ac <follow_path+0x180>
    c1f2:	85 e0       	ldi	r24, 0x05	; 5
    c1f4:	89 83       	std	Y+1, r24	; 0x01
				}
				break;
    c1f6:	5d c0       	rjmp	.+186    	; 0xc2b2 <follow_path+0x186>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    c1f8:	8a 81       	ldd	r24, Y+2	; 0x02
    c1fa:	88 2f       	mov	r24, r24
    c1fc:	90 e0       	ldi	r25, 0x00	; 0
    c1fe:	84 70       	andi	r24, 0x04	; 4
    c200:	90 70       	andi	r25, 0x00	; 0
    c202:	00 97       	sbiw	r24, 0x00	; 0
    c204:	09 f0       	breq	.+2      	; 0xc208 <follow_path+0xdc>
    c206:	54 c0       	rjmp	.+168    	; 0xc2b0 <follow_path+0x184>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    c208:	8d 81       	ldd	r24, Y+5	; 0x05
    c20a:	9e 81       	ldd	r25, Y+6	; 0x06
    c20c:	fc 01       	movw	r30, r24
    c20e:	82 89       	ldd	r24, Z+18	; 0x12
    c210:	93 89       	ldd	r25, Z+19	; 0x13
    c212:	9c 83       	std	Y+4, r25	; 0x04
    c214:	8b 83       	std	Y+3, r24	; 0x03
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    c216:	8b 81       	ldd	r24, Y+3	; 0x03
    c218:	9c 81       	ldd	r25, Y+4	; 0x04
    c21a:	0b 96       	adiw	r24, 0x0b	; 11
    c21c:	fc 01       	movw	r30, r24
    c21e:	80 81       	ld	r24, Z
    c220:	88 2f       	mov	r24, r24
    c222:	90 e0       	ldi	r25, 0x00	; 0
    c224:	80 71       	andi	r24, 0x10	; 16
    c226:	90 70       	andi	r25, 0x00	; 0
    c228:	00 97       	sbiw	r24, 0x00	; 0
    c22a:	19 f4       	brne	.+6      	; 0xc232 <follow_path+0x106>
				res = FR_NO_PATH; break;
    c22c:	85 e0       	ldi	r24, 0x05	; 5
    c22e:	89 83       	std	Y+1, r24	; 0x01
    c230:	40 c0       	rjmp	.+128    	; 0xc2b2 <follow_path+0x186>
			}
			dj->sclust = LD_CLUST(dir);
    c232:	8b 81       	ldd	r24, Y+3	; 0x03
    c234:	9c 81       	ldd	r25, Y+4	; 0x04
    c236:	45 96       	adiw	r24, 0x15	; 21
    c238:	fc 01       	movw	r30, r24
    c23a:	80 81       	ld	r24, Z
    c23c:	88 2f       	mov	r24, r24
    c23e:	90 e0       	ldi	r25, 0x00	; 0
    c240:	38 2f       	mov	r19, r24
    c242:	22 27       	eor	r18, r18
    c244:	8b 81       	ldd	r24, Y+3	; 0x03
    c246:	9c 81       	ldd	r25, Y+4	; 0x04
    c248:	44 96       	adiw	r24, 0x14	; 20
    c24a:	fc 01       	movw	r30, r24
    c24c:	80 81       	ld	r24, Z
    c24e:	88 2f       	mov	r24, r24
    c250:	90 e0       	ldi	r25, 0x00	; 0
    c252:	82 2b       	or	r24, r18
    c254:	93 2b       	or	r25, r19
    c256:	cc 01       	movw	r24, r24
    c258:	a0 e0       	ldi	r26, 0x00	; 0
    c25a:	b0 e0       	ldi	r27, 0x00	; 0
    c25c:	ac 01       	movw	r20, r24
    c25e:	33 27       	eor	r19, r19
    c260:	22 27       	eor	r18, r18
    c262:	8b 81       	ldd	r24, Y+3	; 0x03
    c264:	9c 81       	ldd	r25, Y+4	; 0x04
    c266:	4b 96       	adiw	r24, 0x1b	; 27
    c268:	fc 01       	movw	r30, r24
    c26a:	80 81       	ld	r24, Z
    c26c:	88 2f       	mov	r24, r24
    c26e:	90 e0       	ldi	r25, 0x00	; 0
    c270:	78 2f       	mov	r23, r24
    c272:	66 27       	eor	r22, r22
    c274:	8b 81       	ldd	r24, Y+3	; 0x03
    c276:	9c 81       	ldd	r25, Y+4	; 0x04
    c278:	4a 96       	adiw	r24, 0x1a	; 26
    c27a:	fc 01       	movw	r30, r24
    c27c:	80 81       	ld	r24, Z
    c27e:	88 2f       	mov	r24, r24
    c280:	90 e0       	ldi	r25, 0x00	; 0
    c282:	86 2b       	or	r24, r22
    c284:	97 2b       	or	r25, r23
    c286:	cc 01       	movw	r24, r24
    c288:	a0 e0       	ldi	r26, 0x00	; 0
    c28a:	b0 e0       	ldi	r27, 0x00	; 0
    c28c:	82 2b       	or	r24, r18
    c28e:	93 2b       	or	r25, r19
    c290:	a4 2b       	or	r26, r20
    c292:	b5 2b       	or	r27, r21
    c294:	2d 81       	ldd	r18, Y+5	; 0x05
    c296:	3e 81       	ldd	r19, Y+6	; 0x06
    c298:	f9 01       	movw	r30, r18
    c29a:	86 83       	std	Z+6, r24	; 0x06
    c29c:	97 83       	std	Z+7, r25	; 0x07
    c29e:	a0 87       	std	Z+8, r26	; 0x08
    c2a0:	b1 87       	std	Z+9, r27	; 0x09
		}
    c2a2:	7d cf       	rjmp	.-262    	; 0xc19e <follow_path+0x72>
		dj->dir = 0;

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
    c2a4:	00 00       	nop
    c2a6:	05 c0       	rjmp	.+10     	; 0xc2b2 <follow_path+0x186>
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    c2a8:	00 00       	nop
    c2aa:	03 c0       	rjmp	.+6      	; 0xc2b2 <follow_path+0x186>
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
    c2ac:	00 00       	nop
    c2ae:	01 c0       	rjmp	.+2      	; 0xc2b2 <follow_path+0x186>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    c2b0:	00 00       	nop
			}
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
    c2b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    c2b4:	28 96       	adiw	r28, 0x08	; 8
    c2b6:	0f b6       	in	r0, 0x3f	; 63
    c2b8:	f8 94       	cli
    c2ba:	de bf       	out	0x3e, r29	; 62
    c2bc:	0f be       	out	0x3f, r0	; 63
    c2be:	cd bf       	out	0x3d, r28	; 61
    c2c0:	cf 91       	pop	r28
    c2c2:	df 91       	pop	r29
    c2c4:	08 95       	ret

0000c2c6 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    c2c6:	0f 93       	push	r16
    c2c8:	df 93       	push	r29
    c2ca:	cf 93       	push	r28
    c2cc:	00 d0       	rcall	.+0      	; 0xc2ce <check_fs+0x8>
    c2ce:	00 d0       	rcall	.+0      	; 0xc2d0 <check_fs+0xa>
    c2d0:	00 d0       	rcall	.+0      	; 0xc2d2 <check_fs+0xc>
    c2d2:	cd b7       	in	r28, 0x3d	; 61
    c2d4:	de b7       	in	r29, 0x3e	; 62
    c2d6:	9a 83       	std	Y+2, r25	; 0x02
    c2d8:	89 83       	std	Y+1, r24	; 0x01
    c2da:	4b 83       	std	Y+3, r20	; 0x03
    c2dc:	5c 83       	std	Y+4, r21	; 0x04
    c2de:	6d 83       	std	Y+5, r22	; 0x05
    c2e0:	7e 83       	std	Y+6, r23	; 0x06
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    c2e2:	89 81       	ldd	r24, Y+1	; 0x01
    c2e4:	9a 81       	ldd	r25, Y+2	; 0x02
    c2e6:	dc 01       	movw	r26, r24
    c2e8:	11 96       	adiw	r26, 0x01	; 1
    c2ea:	ec 91       	ld	r30, X
    c2ec:	89 81       	ldd	r24, Y+1	; 0x01
    c2ee:	9a 81       	ldd	r25, Y+2	; 0x02
    c2f0:	bc 01       	movw	r22, r24
    c2f2:	62 5d       	subi	r22, 0xD2	; 210
    c2f4:	7f 4f       	sbci	r23, 0xFF	; 255
    c2f6:	2b 81       	ldd	r18, Y+3	; 0x03
    c2f8:	3c 81       	ldd	r19, Y+4	; 0x04
    c2fa:	4d 81       	ldd	r20, Y+5	; 0x05
    c2fc:	5e 81       	ldd	r21, Y+6	; 0x06
    c2fe:	8e 2f       	mov	r24, r30
    c300:	01 e0       	ldi	r16, 0x01	; 1
    c302:	0e 94 3d 82 	call	0x1047a	; 0x1047a <disk_read>
    c306:	88 23       	and	r24, r24
    c308:	11 f0       	breq	.+4      	; 0xc30e <check_fs+0x48>
		return 3;
    c30a:	83 e0       	ldi	r24, 0x03	; 3
    c30c:	ad c0       	rjmp	.+346    	; 0xc468 <check_fs+0x1a2>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    c30e:	89 81       	ldd	r24, Y+1	; 0x01
    c310:	9a 81       	ldd	r25, Y+2	; 0x02
    c312:	83 5d       	subi	r24, 0xD3	; 211
    c314:	9d 4f       	sbci	r25, 0xFD	; 253
    c316:	fc 01       	movw	r30, r24
    c318:	80 81       	ld	r24, Z
    c31a:	88 2f       	mov	r24, r24
    c31c:	90 e0       	ldi	r25, 0x00	; 0
    c31e:	38 2f       	mov	r19, r24
    c320:	22 27       	eor	r18, r18
    c322:	89 81       	ldd	r24, Y+1	; 0x01
    c324:	9a 81       	ldd	r25, Y+2	; 0x02
    c326:	84 5d       	subi	r24, 0xD4	; 212
    c328:	9d 4f       	sbci	r25, 0xFD	; 253
    c32a:	dc 01       	movw	r26, r24
    c32c:	8c 91       	ld	r24, X
    c32e:	88 2f       	mov	r24, r24
    c330:	90 e0       	ldi	r25, 0x00	; 0
    c332:	82 2b       	or	r24, r18
    c334:	93 2b       	or	r25, r19
    c336:	ba ea       	ldi	r27, 0xAA	; 170
    c338:	85 35       	cpi	r24, 0x55	; 85
    c33a:	9b 07       	cpc	r25, r27
    c33c:	11 f0       	breq	.+4      	; 0xc342 <check_fs+0x7c>
		return 2;
    c33e:	82 e0       	ldi	r24, 0x02	; 2
    c340:	93 c0       	rjmp	.+294    	; 0xc468 <check_fs+0x1a2>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    c342:	89 81       	ldd	r24, Y+1	; 0x01
    c344:	9a 81       	ldd	r25, Y+2	; 0x02
    c346:	89 59       	subi	r24, 0x99	; 153
    c348:	9f 4f       	sbci	r25, 0xFF	; 255
    c34a:	fc 01       	movw	r30, r24
    c34c:	80 81       	ld	r24, Z
    c34e:	88 2f       	mov	r24, r24
    c350:	90 e0       	ldi	r25, 0x00	; 0
    c352:	a0 e0       	ldi	r26, 0x00	; 0
    c354:	b0 e0       	ldi	r27, 0x00	; 0
    c356:	58 2f       	mov	r21, r24
    c358:	44 27       	eor	r20, r20
    c35a:	33 27       	eor	r19, r19
    c35c:	22 27       	eor	r18, r18
    c35e:	89 81       	ldd	r24, Y+1	; 0x01
    c360:	9a 81       	ldd	r25, Y+2	; 0x02
    c362:	8a 59       	subi	r24, 0x9A	; 154
    c364:	9f 4f       	sbci	r25, 0xFF	; 255
    c366:	dc 01       	movw	r26, r24
    c368:	8c 91       	ld	r24, X
    c36a:	88 2f       	mov	r24, r24
    c36c:	90 e0       	ldi	r25, 0x00	; 0
    c36e:	a0 e0       	ldi	r26, 0x00	; 0
    c370:	b0 e0       	ldi	r27, 0x00	; 0
    c372:	dc 01       	movw	r26, r24
    c374:	99 27       	eor	r25, r25
    c376:	88 27       	eor	r24, r24
    c378:	28 2b       	or	r18, r24
    c37a:	39 2b       	or	r19, r25
    c37c:	4a 2b       	or	r20, r26
    c37e:	5b 2b       	or	r21, r27
    c380:	89 81       	ldd	r24, Y+1	; 0x01
    c382:	9a 81       	ldd	r25, Y+2	; 0x02
    c384:	8b 59       	subi	r24, 0x9B	; 155
    c386:	9f 4f       	sbci	r25, 0xFF	; 255
    c388:	fc 01       	movw	r30, r24
    c38a:	80 81       	ld	r24, Z
    c38c:	88 2f       	mov	r24, r24
    c38e:	90 e0       	ldi	r25, 0x00	; 0
    c390:	98 2f       	mov	r25, r24
    c392:	88 27       	eor	r24, r24
    c394:	cc 01       	movw	r24, r24
    c396:	a0 e0       	ldi	r26, 0x00	; 0
    c398:	b0 e0       	ldi	r27, 0x00	; 0
    c39a:	28 2b       	or	r18, r24
    c39c:	39 2b       	or	r19, r25
    c39e:	4a 2b       	or	r20, r26
    c3a0:	5b 2b       	or	r21, r27
    c3a2:	89 81       	ldd	r24, Y+1	; 0x01
    c3a4:	9a 81       	ldd	r25, Y+2	; 0x02
    c3a6:	8c 59       	subi	r24, 0x9C	; 156
    c3a8:	9f 4f       	sbci	r25, 0xFF	; 255
    c3aa:	dc 01       	movw	r26, r24
    c3ac:	8c 91       	ld	r24, X
    c3ae:	88 2f       	mov	r24, r24
    c3b0:	90 e0       	ldi	r25, 0x00	; 0
    c3b2:	a0 e0       	ldi	r26, 0x00	; 0
    c3b4:	b0 e0       	ldi	r27, 0x00	; 0
    c3b6:	82 2b       	or	r24, r18
    c3b8:	93 2b       	or	r25, r19
    c3ba:	a4 2b       	or	r26, r20
    c3bc:	b5 2b       	or	r27, r21
    c3be:	b0 70       	andi	r27, 0x00	; 0
    c3c0:	86 34       	cpi	r24, 0x46	; 70
    c3c2:	e1 e4       	ldi	r30, 0x41	; 65
    c3c4:	9e 07       	cpc	r25, r30
    c3c6:	e4 e5       	ldi	r30, 0x54	; 84
    c3c8:	ae 07       	cpc	r26, r30
    c3ca:	e0 e0       	ldi	r30, 0x00	; 0
    c3cc:	be 07       	cpc	r27, r30
    c3ce:	11 f4       	brne	.+4      	; 0xc3d4 <check_fs+0x10e>
		return 0;
    c3d0:	80 e0       	ldi	r24, 0x00	; 0
    c3d2:	4a c0       	rjmp	.+148    	; 0xc468 <check_fs+0x1a2>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    c3d4:	89 81       	ldd	r24, Y+1	; 0x01
    c3d6:	9a 81       	ldd	r25, Y+2	; 0x02
    c3d8:	8d 57       	subi	r24, 0x7D	; 125
    c3da:	9f 4f       	sbci	r25, 0xFF	; 255
    c3dc:	dc 01       	movw	r26, r24
    c3de:	8c 91       	ld	r24, X
    c3e0:	88 2f       	mov	r24, r24
    c3e2:	90 e0       	ldi	r25, 0x00	; 0
    c3e4:	a0 e0       	ldi	r26, 0x00	; 0
    c3e6:	b0 e0       	ldi	r27, 0x00	; 0
    c3e8:	58 2f       	mov	r21, r24
    c3ea:	44 27       	eor	r20, r20
    c3ec:	33 27       	eor	r19, r19
    c3ee:	22 27       	eor	r18, r18
    c3f0:	89 81       	ldd	r24, Y+1	; 0x01
    c3f2:	9a 81       	ldd	r25, Y+2	; 0x02
    c3f4:	8e 57       	subi	r24, 0x7E	; 126
    c3f6:	9f 4f       	sbci	r25, 0xFF	; 255
    c3f8:	fc 01       	movw	r30, r24
    c3fa:	80 81       	ld	r24, Z
    c3fc:	88 2f       	mov	r24, r24
    c3fe:	90 e0       	ldi	r25, 0x00	; 0
    c400:	a0 e0       	ldi	r26, 0x00	; 0
    c402:	b0 e0       	ldi	r27, 0x00	; 0
    c404:	dc 01       	movw	r26, r24
    c406:	99 27       	eor	r25, r25
    c408:	88 27       	eor	r24, r24
    c40a:	28 2b       	or	r18, r24
    c40c:	39 2b       	or	r19, r25
    c40e:	4a 2b       	or	r20, r26
    c410:	5b 2b       	or	r21, r27
    c412:	89 81       	ldd	r24, Y+1	; 0x01
    c414:	9a 81       	ldd	r25, Y+2	; 0x02
    c416:	8f 57       	subi	r24, 0x7F	; 127
    c418:	9f 4f       	sbci	r25, 0xFF	; 255
    c41a:	dc 01       	movw	r26, r24
    c41c:	8c 91       	ld	r24, X
    c41e:	88 2f       	mov	r24, r24
    c420:	90 e0       	ldi	r25, 0x00	; 0
    c422:	98 2f       	mov	r25, r24
    c424:	88 27       	eor	r24, r24
    c426:	cc 01       	movw	r24, r24
    c428:	a0 e0       	ldi	r26, 0x00	; 0
    c42a:	b0 e0       	ldi	r27, 0x00	; 0
    c42c:	28 2b       	or	r18, r24
    c42e:	39 2b       	or	r19, r25
    c430:	4a 2b       	or	r20, r26
    c432:	5b 2b       	or	r21, r27
    c434:	89 81       	ldd	r24, Y+1	; 0x01
    c436:	9a 81       	ldd	r25, Y+2	; 0x02
    c438:	80 58       	subi	r24, 0x80	; 128
    c43a:	9f 4f       	sbci	r25, 0xFF	; 255
    c43c:	fc 01       	movw	r30, r24
    c43e:	80 81       	ld	r24, Z
    c440:	88 2f       	mov	r24, r24
    c442:	90 e0       	ldi	r25, 0x00	; 0
    c444:	a0 e0       	ldi	r26, 0x00	; 0
    c446:	b0 e0       	ldi	r27, 0x00	; 0
    c448:	82 2b       	or	r24, r18
    c44a:	93 2b       	or	r25, r19
    c44c:	a4 2b       	or	r26, r20
    c44e:	b5 2b       	or	r27, r21
    c450:	b0 70       	andi	r27, 0x00	; 0
    c452:	86 34       	cpi	r24, 0x46	; 70
    c454:	f1 e4       	ldi	r31, 0x41	; 65
    c456:	9f 07       	cpc	r25, r31
    c458:	f4 e5       	ldi	r31, 0x54	; 84
    c45a:	af 07       	cpc	r26, r31
    c45c:	f0 e0       	ldi	r31, 0x00	; 0
    c45e:	bf 07       	cpc	r27, r31
    c460:	11 f4       	brne	.+4      	; 0xc466 <check_fs+0x1a0>
		return 0;
    c462:	80 e0       	ldi	r24, 0x00	; 0
    c464:	01 c0       	rjmp	.+2      	; 0xc468 <check_fs+0x1a2>

	return 1;
    c466:	81 e0       	ldi	r24, 0x01	; 1
}
    c468:	26 96       	adiw	r28, 0x06	; 6
    c46a:	0f b6       	in	r0, 0x3f	; 63
    c46c:	f8 94       	cli
    c46e:	de bf       	out	0x3e, r29	; 62
    c470:	0f be       	out	0x3f, r0	; 63
    c472:	cd bf       	out	0x3d, r28	; 61
    c474:	cf 91       	pop	r28
    c476:	df 91       	pop	r29
    c478:	0f 91       	pop	r16
    c47a:	08 95       	ret

0000c47c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    c47c:	ef 92       	push	r14
    c47e:	ff 92       	push	r15
    c480:	0f 93       	push	r16
    c482:	1f 93       	push	r17
    c484:	df 93       	push	r29
    c486:	cf 93       	push	r28
    c488:	cd b7       	in	r28, 0x3d	; 61
    c48a:	de b7       	in	r29, 0x3e	; 62
    c48c:	ab 97       	sbiw	r28, 0x2b	; 43
    c48e:	0f b6       	in	r0, 0x3f	; 63
    c490:	f8 94       	cli
    c492:	de bf       	out	0x3e, r29	; 62
    c494:	0f be       	out	0x3f, r0	; 63
    c496:	cd bf       	out	0x3d, r28	; 61
    c498:	98 a7       	std	Y+40, r25	; 0x28
    c49a:	8f a3       	std	Y+39, r24	; 0x27
    c49c:	7a a7       	std	Y+42, r23	; 0x2a
    c49e:	69 a7       	std	Y+41, r22	; 0x29
    c4a0:	4b a7       	std	Y+43, r20	; 0x2b
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    c4a2:	8f a1       	ldd	r24, Y+39	; 0x27
    c4a4:	98 a5       	ldd	r25, Y+40	; 0x28
    c4a6:	dc 01       	movw	r26, r24
    c4a8:	8d 91       	ld	r24, X+
    c4aa:	9c 91       	ld	r25, X
    c4ac:	11 97       	sbiw	r26, 0x01	; 1
    c4ae:	9e 8b       	std	Y+22, r25	; 0x16
    c4b0:	8d 8b       	std	Y+21, r24	; 0x15
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    c4b2:	8d 89       	ldd	r24, Y+21	; 0x15
    c4b4:	9e 89       	ldd	r25, Y+22	; 0x16
    c4b6:	fc 01       	movw	r30, r24
    c4b8:	80 81       	ld	r24, Z
    c4ba:	88 2f       	mov	r24, r24
    c4bc:	90 e0       	ldi	r25, 0x00	; 0
    c4be:	c0 97       	sbiw	r24, 0x30	; 48
    c4c0:	9c 83       	std	Y+4, r25	; 0x04
    c4c2:	8b 83       	std	Y+3, r24	; 0x03
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    c4c4:	8b 81       	ldd	r24, Y+3	; 0x03
    c4c6:	9c 81       	ldd	r25, Y+4	; 0x04
    c4c8:	8a 30       	cpi	r24, 0x0A	; 10
    c4ca:	91 05       	cpc	r25, r1
    c4cc:	a0 f4       	brcc	.+40     	; 0xc4f6 <chk_mounted+0x7a>
    c4ce:	8d 89       	ldd	r24, Y+21	; 0x15
    c4d0:	9e 89       	ldd	r25, Y+22	; 0x16
    c4d2:	01 96       	adiw	r24, 0x01	; 1
    c4d4:	dc 01       	movw	r26, r24
    c4d6:	8c 91       	ld	r24, X
    c4d8:	8a 33       	cpi	r24, 0x3A	; 58
    c4da:	69 f4       	brne	.+26     	; 0xc4f6 <chk_mounted+0x7a>
		p += 2; *path = p;				/* Return pointer to the path name */
    c4dc:	8d 89       	ldd	r24, Y+21	; 0x15
    c4de:	9e 89       	ldd	r25, Y+22	; 0x16
    c4e0:	02 96       	adiw	r24, 0x02	; 2
    c4e2:	9e 8b       	std	Y+22, r25	; 0x16
    c4e4:	8d 8b       	std	Y+21, r24	; 0x15
    c4e6:	8f a1       	ldd	r24, Y+39	; 0x27
    c4e8:	98 a5       	ldd	r25, Y+40	; 0x28
    c4ea:	2d 89       	ldd	r18, Y+21	; 0x15
    c4ec:	3e 89       	ldd	r19, Y+22	; 0x16
    c4ee:	fc 01       	movw	r30, r24
    c4f0:	31 83       	std	Z+1, r19	; 0x01
    c4f2:	20 83       	st	Z, r18
    c4f4:	02 c0       	rjmp	.+4      	; 0xc4fa <chk_mounted+0x7e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    c4f6:	1c 82       	std	Y+4, r1	; 0x04
    c4f8:	1b 82       	std	Y+3, r1	; 0x03
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    c4fa:	8b 81       	ldd	r24, Y+3	; 0x03
    c4fc:	9c 81       	ldd	r25, Y+4	; 0x04
    c4fe:	00 97       	sbiw	r24, 0x00	; 0
    c500:	11 f0       	breq	.+4      	; 0xc506 <chk_mounted+0x8a>
		return FR_INVALID_DRIVE;
    c502:	8b e0       	ldi	r24, 0x0B	; 11
    c504:	9e c5       	rjmp	.+2876   	; 0xd042 <chk_mounted+0xbc6>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    c506:	8b 81       	ldd	r24, Y+3	; 0x03
    c508:	9c 81       	ldd	r25, Y+4	; 0x04
    c50a:	88 0f       	add	r24, r24
    c50c:	99 1f       	adc	r25, r25
    c50e:	8c 54       	subi	r24, 0x4C	; 76
    c510:	9e 4f       	sbci	r25, 0xFE	; 254
    c512:	dc 01       	movw	r26, r24
    c514:	8d 91       	ld	r24, X+
    c516:	9c 91       	ld	r25, X
    c518:	11 97       	sbiw	r26, 0x01	; 1
    c51a:	98 8f       	std	Y+24, r25	; 0x18
    c51c:	8f 8b       	std	Y+23, r24	; 0x17
    c51e:	89 a5       	ldd	r24, Y+41	; 0x29
    c520:	9a a5       	ldd	r25, Y+42	; 0x2a
    c522:	2f 89       	ldd	r18, Y+23	; 0x17
    c524:	38 8d       	ldd	r19, Y+24	; 0x18
    c526:	fc 01       	movw	r30, r24
    c528:	31 83       	std	Z+1, r19	; 0x01
    c52a:	20 83       	st	Z, r18
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    c52c:	8f 89       	ldd	r24, Y+23	; 0x17
    c52e:	98 8d       	ldd	r25, Y+24	; 0x18
    c530:	00 97       	sbiw	r24, 0x00	; 0
    c532:	11 f4       	brne	.+4      	; 0xc538 <chk_mounted+0xbc>
    c534:	8c e0       	ldi	r24, 0x0C	; 12
    c536:	85 c5       	rjmp	.+2826   	; 0xd042 <chk_mounted+0xbc6>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    c538:	8f 89       	ldd	r24, Y+23	; 0x17
    c53a:	98 8d       	ldd	r25, Y+24	; 0x18
    c53c:	dc 01       	movw	r26, r24
    c53e:	8c 91       	ld	r24, X
    c540:	88 23       	and	r24, r24
    c542:	e1 f0       	breq	.+56     	; 0xc57c <chk_mounted+0x100>
		stat = disk_status(fs->drv);
    c544:	8f 89       	ldd	r24, Y+23	; 0x17
    c546:	98 8d       	ldd	r25, Y+24	; 0x18
    c548:	fc 01       	movw	r30, r24
    c54a:	81 81       	ldd	r24, Z+1	; 0x01
    c54c:	0e 94 2c 82 	call	0x10458	; 0x10458 <disk_status>
    c550:	89 8f       	std	Y+25, r24	; 0x19
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    c552:	89 8d       	ldd	r24, Y+25	; 0x19
    c554:	88 2f       	mov	r24, r24
    c556:	90 e0       	ldi	r25, 0x00	; 0
    c558:	81 70       	andi	r24, 0x01	; 1
    c55a:	90 70       	andi	r25, 0x00	; 0
    c55c:	00 97       	sbiw	r24, 0x00	; 0
    c55e:	71 f4       	brne	.+28     	; 0xc57c <chk_mounted+0x100>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    c560:	8b a5       	ldd	r24, Y+43	; 0x2b
    c562:	88 23       	and	r24, r24
    c564:	49 f0       	breq	.+18     	; 0xc578 <chk_mounted+0xfc>
    c566:	89 8d       	ldd	r24, Y+25	; 0x19
    c568:	88 2f       	mov	r24, r24
    c56a:	90 e0       	ldi	r25, 0x00	; 0
    c56c:	84 70       	andi	r24, 0x04	; 4
    c56e:	90 70       	andi	r25, 0x00	; 0
    c570:	00 97       	sbiw	r24, 0x00	; 0
    c572:	11 f0       	breq	.+4      	; 0xc578 <chk_mounted+0xfc>
				return FR_WRITE_PROTECTED;
    c574:	8a e0       	ldi	r24, 0x0A	; 10
    c576:	65 c5       	rjmp	.+2762   	; 0xd042 <chk_mounted+0xbc6>
			return FR_OK;				/* The file system object is valid */
    c578:	80 e0       	ldi	r24, 0x00	; 0
    c57a:	63 c5       	rjmp	.+2758   	; 0xd042 <chk_mounted+0xbc6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    c57c:	8f 89       	ldd	r24, Y+23	; 0x17
    c57e:	98 8d       	ldd	r25, Y+24	; 0x18
    c580:	dc 01       	movw	r26, r24
    c582:	1c 92       	st	X, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    c584:	2b 81       	ldd	r18, Y+3	; 0x03
    c586:	8f 89       	ldd	r24, Y+23	; 0x17
    c588:	98 8d       	ldd	r25, Y+24	; 0x18
    c58a:	fc 01       	movw	r30, r24
    c58c:	21 83       	std	Z+1, r18	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    c58e:	8f 89       	ldd	r24, Y+23	; 0x17
    c590:	98 8d       	ldd	r25, Y+24	; 0x18
    c592:	dc 01       	movw	r26, r24
    c594:	11 96       	adiw	r26, 0x01	; 1
    c596:	8c 91       	ld	r24, X
    c598:	0e 94 40 81 	call	0x10280	; 0x10280 <disk_initialize>
    c59c:	89 8f       	std	Y+25, r24	; 0x19
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    c59e:	89 8d       	ldd	r24, Y+25	; 0x19
    c5a0:	88 2f       	mov	r24, r24
    c5a2:	90 e0       	ldi	r25, 0x00	; 0
    c5a4:	81 70       	andi	r24, 0x01	; 1
    c5a6:	90 70       	andi	r25, 0x00	; 0
    c5a8:	88 23       	and	r24, r24
    c5aa:	11 f0       	breq	.+4      	; 0xc5b0 <chk_mounted+0x134>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    c5ac:	83 e0       	ldi	r24, 0x03	; 3
    c5ae:	49 c5       	rjmp	.+2706   	; 0xd042 <chk_mounted+0xbc6>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    c5b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    c5b2:	88 23       	and	r24, r24
    c5b4:	49 f0       	breq	.+18     	; 0xc5c8 <chk_mounted+0x14c>
    c5b6:	89 8d       	ldd	r24, Y+25	; 0x19
    c5b8:	88 2f       	mov	r24, r24
    c5ba:	90 e0       	ldi	r25, 0x00	; 0
    c5bc:	84 70       	andi	r24, 0x04	; 4
    c5be:	90 70       	andi	r25, 0x00	; 0
    c5c0:	00 97       	sbiw	r24, 0x00	; 0
    c5c2:	11 f0       	breq	.+4      	; 0xc5c8 <chk_mounted+0x14c>
		return FR_WRITE_PROTECTED;
    c5c4:	8a e0       	ldi	r24, 0x0A	; 10
    c5c6:	3d c5       	rjmp	.+2682   	; 0xd042 <chk_mounted+0xbc6>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    c5c8:	1d 82       	std	Y+5, r1	; 0x05
    c5ca:	1e 82       	std	Y+6, r1	; 0x06
    c5cc:	1f 82       	std	Y+7, r1	; 0x07
    c5ce:	18 86       	std	Y+8, r1	; 0x08
    c5d0:	8f 89       	ldd	r24, Y+23	; 0x17
    c5d2:	98 8d       	ldd	r25, Y+24	; 0x18
    c5d4:	2d 81       	ldd	r18, Y+5	; 0x05
    c5d6:	3e 81       	ldd	r19, Y+6	; 0x06
    c5d8:	4f 81       	ldd	r20, Y+7	; 0x07
    c5da:	58 85       	ldd	r21, Y+8	; 0x08
    c5dc:	ba 01       	movw	r22, r20
    c5de:	a9 01       	movw	r20, r18
    c5e0:	0e 94 63 61 	call	0xc2c6	; 0xc2c6 <check_fs>
    c5e4:	89 83       	std	Y+1, r24	; 0x01
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    c5e6:	89 81       	ldd	r24, Y+1	; 0x01
    c5e8:	81 30       	cpi	r24, 0x01	; 1
    c5ea:	09 f0       	breq	.+2      	; 0xc5ee <chk_mounted+0x172>
    c5ec:	6c c0       	rjmp	.+216    	; 0xc6c6 <chk_mounted+0x24a>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    c5ee:	1a 82       	std	Y+2, r1	; 0x02
		if (pi) pi--;
    c5f0:	8a 81       	ldd	r24, Y+2	; 0x02
    c5f2:	88 23       	and	r24, r24
    c5f4:	19 f0       	breq	.+6      	; 0xc5fc <chk_mounted+0x180>
    c5f6:	8a 81       	ldd	r24, Y+2	; 0x02
    c5f8:	81 50       	subi	r24, 0x01	; 1
    c5fa:	8a 83       	std	Y+2, r24	; 0x02
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    c5fc:	8f 89       	ldd	r24, Y+23	; 0x17
    c5fe:	98 8d       	ldd	r25, Y+24	; 0x18
    c600:	9c 01       	movw	r18, r24
    c602:	22 5d       	subi	r18, 0xD2	; 210
    c604:	3f 4f       	sbci	r19, 0xFF	; 255
    c606:	8a 81       	ldd	r24, Y+2	; 0x02
    c608:	88 2f       	mov	r24, r24
    c60a:	90 e0       	ldi	r25, 0x00	; 0
    c60c:	82 95       	swap	r24
    c60e:	92 95       	swap	r25
    c610:	90 7f       	andi	r25, 0xF0	; 240
    c612:	98 27       	eor	r25, r24
    c614:	80 7f       	andi	r24, 0xF0	; 240
    c616:	98 27       	eor	r25, r24
    c618:	82 54       	subi	r24, 0x42	; 66
    c61a:	9e 4f       	sbci	r25, 0xFE	; 254
    c61c:	82 0f       	add	r24, r18
    c61e:	93 1f       	adc	r25, r19
    c620:	9b 8f       	std	Y+27, r25	; 0x1b
    c622:	8a 8f       	std	Y+26, r24	; 0x1a
		if (tbl[4]) {						/* Is the partition existing? */
    c624:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c626:	9b 8d       	ldd	r25, Y+27	; 0x1b
    c628:	04 96       	adiw	r24, 0x04	; 4
    c62a:	fc 01       	movw	r30, r24
    c62c:	80 81       	ld	r24, Z
    c62e:	88 23       	and	r24, r24
    c630:	09 f4       	brne	.+2      	; 0xc634 <chk_mounted+0x1b8>
    c632:	49 c0       	rjmp	.+146    	; 0xc6c6 <chk_mounted+0x24a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    c634:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c636:	9b 8d       	ldd	r25, Y+27	; 0x1b
    c638:	0b 96       	adiw	r24, 0x0b	; 11
    c63a:	dc 01       	movw	r26, r24
    c63c:	8c 91       	ld	r24, X
    c63e:	88 2f       	mov	r24, r24
    c640:	90 e0       	ldi	r25, 0x00	; 0
    c642:	a0 e0       	ldi	r26, 0x00	; 0
    c644:	b0 e0       	ldi	r27, 0x00	; 0
    c646:	58 2f       	mov	r21, r24
    c648:	44 27       	eor	r20, r20
    c64a:	33 27       	eor	r19, r19
    c64c:	22 27       	eor	r18, r18
    c64e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c650:	9b 8d       	ldd	r25, Y+27	; 0x1b
    c652:	0a 96       	adiw	r24, 0x0a	; 10
    c654:	fc 01       	movw	r30, r24
    c656:	80 81       	ld	r24, Z
    c658:	88 2f       	mov	r24, r24
    c65a:	90 e0       	ldi	r25, 0x00	; 0
    c65c:	a0 e0       	ldi	r26, 0x00	; 0
    c65e:	b0 e0       	ldi	r27, 0x00	; 0
    c660:	dc 01       	movw	r26, r24
    c662:	99 27       	eor	r25, r25
    c664:	88 27       	eor	r24, r24
    c666:	28 2b       	or	r18, r24
    c668:	39 2b       	or	r19, r25
    c66a:	4a 2b       	or	r20, r26
    c66c:	5b 2b       	or	r21, r27
    c66e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c670:	9b 8d       	ldd	r25, Y+27	; 0x1b
    c672:	09 96       	adiw	r24, 0x09	; 9
    c674:	dc 01       	movw	r26, r24
    c676:	8c 91       	ld	r24, X
    c678:	88 2f       	mov	r24, r24
    c67a:	90 e0       	ldi	r25, 0x00	; 0
    c67c:	98 2f       	mov	r25, r24
    c67e:	88 27       	eor	r24, r24
    c680:	cc 01       	movw	r24, r24
    c682:	a0 e0       	ldi	r26, 0x00	; 0
    c684:	b0 e0       	ldi	r27, 0x00	; 0
    c686:	28 2b       	or	r18, r24
    c688:	39 2b       	or	r19, r25
    c68a:	4a 2b       	or	r20, r26
    c68c:	5b 2b       	or	r21, r27
    c68e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c690:	9b 8d       	ldd	r25, Y+27	; 0x1b
    c692:	08 96       	adiw	r24, 0x08	; 8
    c694:	fc 01       	movw	r30, r24
    c696:	80 81       	ld	r24, Z
    c698:	88 2f       	mov	r24, r24
    c69a:	90 e0       	ldi	r25, 0x00	; 0
    c69c:	a0 e0       	ldi	r26, 0x00	; 0
    c69e:	b0 e0       	ldi	r27, 0x00	; 0
    c6a0:	82 2b       	or	r24, r18
    c6a2:	93 2b       	or	r25, r19
    c6a4:	a4 2b       	or	r26, r20
    c6a6:	b5 2b       	or	r27, r21
    c6a8:	8d 83       	std	Y+5, r24	; 0x05
    c6aa:	9e 83       	std	Y+6, r25	; 0x06
    c6ac:	af 83       	std	Y+7, r26	; 0x07
    c6ae:	b8 87       	std	Y+8, r27	; 0x08
			fmt = check_fs(fs, bsect);		/* Check the partition */
    c6b0:	8f 89       	ldd	r24, Y+23	; 0x17
    c6b2:	98 8d       	ldd	r25, Y+24	; 0x18
    c6b4:	2d 81       	ldd	r18, Y+5	; 0x05
    c6b6:	3e 81       	ldd	r19, Y+6	; 0x06
    c6b8:	4f 81       	ldd	r20, Y+7	; 0x07
    c6ba:	58 85       	ldd	r21, Y+8	; 0x08
    c6bc:	ba 01       	movw	r22, r20
    c6be:	a9 01       	movw	r20, r18
    c6c0:	0e 94 63 61 	call	0xc2c6	; 0xc2c6 <check_fs>
    c6c4:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    c6c6:	89 81       	ldd	r24, Y+1	; 0x01
    c6c8:	83 30       	cpi	r24, 0x03	; 3
    c6ca:	11 f4       	brne	.+4      	; 0xc6d0 <chk_mounted+0x254>
    c6cc:	81 e0       	ldi	r24, 0x01	; 1
    c6ce:	b9 c4       	rjmp	.+2418   	; 0xd042 <chk_mounted+0xbc6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    c6d0:	89 81       	ldd	r24, Y+1	; 0x01
    c6d2:	88 23       	and	r24, r24
    c6d4:	11 f0       	breq	.+4      	; 0xc6da <chk_mounted+0x25e>
    c6d6:	8d e0       	ldi	r24, 0x0D	; 13
    c6d8:	b4 c4       	rjmp	.+2408   	; 0xd042 <chk_mounted+0xbc6>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    c6da:	8f 89       	ldd	r24, Y+23	; 0x17
    c6dc:	98 8d       	ldd	r25, Y+24	; 0x18
    c6de:	ca 96       	adiw	r24, 0x3a	; 58
    c6e0:	dc 01       	movw	r26, r24
    c6e2:	8c 91       	ld	r24, X
    c6e4:	88 2f       	mov	r24, r24
    c6e6:	90 e0       	ldi	r25, 0x00	; 0
    c6e8:	38 2f       	mov	r19, r24
    c6ea:	22 27       	eor	r18, r18
    c6ec:	8f 89       	ldd	r24, Y+23	; 0x17
    c6ee:	98 8d       	ldd	r25, Y+24	; 0x18
    c6f0:	c9 96       	adiw	r24, 0x39	; 57
    c6f2:	fc 01       	movw	r30, r24
    c6f4:	80 81       	ld	r24, Z
    c6f6:	88 2f       	mov	r24, r24
    c6f8:	90 e0       	ldi	r25, 0x00	; 0
    c6fa:	82 2b       	or	r24, r18
    c6fc:	93 2b       	or	r25, r19
    c6fe:	f2 e0       	ldi	r31, 0x02	; 2
    c700:	80 30       	cpi	r24, 0x00	; 0
    c702:	9f 07       	cpc	r25, r31
    c704:	11 f0       	breq	.+4      	; 0xc70a <chk_mounted+0x28e>
		return FR_NO_FILESYSTEM;
    c706:	8d e0       	ldi	r24, 0x0D	; 13
    c708:	9c c4       	rjmp	.+2360   	; 0xd042 <chk_mounted+0xbc6>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    c70a:	8f 89       	ldd	r24, Y+23	; 0x17
    c70c:	98 8d       	ldd	r25, Y+24	; 0x18
    c70e:	8b 5b       	subi	r24, 0xBB	; 187
    c710:	9f 4f       	sbci	r25, 0xFF	; 255
    c712:	dc 01       	movw	r26, r24
    c714:	8c 91       	ld	r24, X
    c716:	88 2f       	mov	r24, r24
    c718:	90 e0       	ldi	r25, 0x00	; 0
    c71a:	38 2f       	mov	r19, r24
    c71c:	22 27       	eor	r18, r18
    c71e:	8f 89       	ldd	r24, Y+23	; 0x17
    c720:	98 8d       	ldd	r25, Y+24	; 0x18
    c722:	8c 5b       	subi	r24, 0xBC	; 188
    c724:	9f 4f       	sbci	r25, 0xFF	; 255
    c726:	fc 01       	movw	r30, r24
    c728:	80 81       	ld	r24, Z
    c72a:	88 2f       	mov	r24, r24
    c72c:	90 e0       	ldi	r25, 0x00	; 0
    c72e:	82 2b       	or	r24, r18
    c730:	93 2b       	or	r25, r19
    c732:	cc 01       	movw	r24, r24
    c734:	a0 e0       	ldi	r26, 0x00	; 0
    c736:	b0 e0       	ldi	r27, 0x00	; 0
    c738:	89 87       	std	Y+9, r24	; 0x09
    c73a:	9a 87       	std	Y+10, r25	; 0x0a
    c73c:	ab 87       	std	Y+11, r26	; 0x0b
    c73e:	bc 87       	std	Y+12, r27	; 0x0c
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    c740:	89 85       	ldd	r24, Y+9	; 0x09
    c742:	9a 85       	ldd	r25, Y+10	; 0x0a
    c744:	ab 85       	ldd	r26, Y+11	; 0x0b
    c746:	bc 85       	ldd	r27, Y+12	; 0x0c
    c748:	00 97       	sbiw	r24, 0x00	; 0
    c74a:	a1 05       	cpc	r26, r1
    c74c:	b1 05       	cpc	r27, r1
    c74e:	09 f0       	breq	.+2      	; 0xc752 <chk_mounted+0x2d6>
    c750:	42 c0       	rjmp	.+132    	; 0xc7d6 <chk_mounted+0x35a>
    c752:	8f 89       	ldd	r24, Y+23	; 0x17
    c754:	98 8d       	ldd	r25, Y+24	; 0x18
    c756:	8b 5a       	subi	r24, 0xAB	; 171
    c758:	9f 4f       	sbci	r25, 0xFF	; 255
    c75a:	dc 01       	movw	r26, r24
    c75c:	8c 91       	ld	r24, X
    c75e:	88 2f       	mov	r24, r24
    c760:	90 e0       	ldi	r25, 0x00	; 0
    c762:	a0 e0       	ldi	r26, 0x00	; 0
    c764:	b0 e0       	ldi	r27, 0x00	; 0
    c766:	58 2f       	mov	r21, r24
    c768:	44 27       	eor	r20, r20
    c76a:	33 27       	eor	r19, r19
    c76c:	22 27       	eor	r18, r18
    c76e:	8f 89       	ldd	r24, Y+23	; 0x17
    c770:	98 8d       	ldd	r25, Y+24	; 0x18
    c772:	8c 5a       	subi	r24, 0xAC	; 172
    c774:	9f 4f       	sbci	r25, 0xFF	; 255
    c776:	fc 01       	movw	r30, r24
    c778:	80 81       	ld	r24, Z
    c77a:	88 2f       	mov	r24, r24
    c77c:	90 e0       	ldi	r25, 0x00	; 0
    c77e:	a0 e0       	ldi	r26, 0x00	; 0
    c780:	b0 e0       	ldi	r27, 0x00	; 0
    c782:	dc 01       	movw	r26, r24
    c784:	99 27       	eor	r25, r25
    c786:	88 27       	eor	r24, r24
    c788:	28 2b       	or	r18, r24
    c78a:	39 2b       	or	r19, r25
    c78c:	4a 2b       	or	r20, r26
    c78e:	5b 2b       	or	r21, r27
    c790:	8f 89       	ldd	r24, Y+23	; 0x17
    c792:	98 8d       	ldd	r25, Y+24	; 0x18
    c794:	8d 5a       	subi	r24, 0xAD	; 173
    c796:	9f 4f       	sbci	r25, 0xFF	; 255
    c798:	dc 01       	movw	r26, r24
    c79a:	8c 91       	ld	r24, X
    c79c:	88 2f       	mov	r24, r24
    c79e:	90 e0       	ldi	r25, 0x00	; 0
    c7a0:	98 2f       	mov	r25, r24
    c7a2:	88 27       	eor	r24, r24
    c7a4:	cc 01       	movw	r24, r24
    c7a6:	a0 e0       	ldi	r26, 0x00	; 0
    c7a8:	b0 e0       	ldi	r27, 0x00	; 0
    c7aa:	28 2b       	or	r18, r24
    c7ac:	39 2b       	or	r19, r25
    c7ae:	4a 2b       	or	r20, r26
    c7b0:	5b 2b       	or	r21, r27
    c7b2:	8f 89       	ldd	r24, Y+23	; 0x17
    c7b4:	98 8d       	ldd	r25, Y+24	; 0x18
    c7b6:	8e 5a       	subi	r24, 0xAE	; 174
    c7b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ba:	fc 01       	movw	r30, r24
    c7bc:	80 81       	ld	r24, Z
    c7be:	88 2f       	mov	r24, r24
    c7c0:	90 e0       	ldi	r25, 0x00	; 0
    c7c2:	a0 e0       	ldi	r26, 0x00	; 0
    c7c4:	b0 e0       	ldi	r27, 0x00	; 0
    c7c6:	82 2b       	or	r24, r18
    c7c8:	93 2b       	or	r25, r19
    c7ca:	a4 2b       	or	r26, r20
    c7cc:	b5 2b       	or	r27, r21
    c7ce:	89 87       	std	Y+9, r24	; 0x09
    c7d0:	9a 87       	std	Y+10, r25	; 0x0a
    c7d2:	ab 87       	std	Y+11, r26	; 0x0b
    c7d4:	bc 87       	std	Y+12, r27	; 0x0c
	fs->fsize = fasize;
    c7d6:	2f 89       	ldd	r18, Y+23	; 0x17
    c7d8:	38 8d       	ldd	r19, Y+24	; 0x18
    c7da:	89 85       	ldd	r24, Y+9	; 0x09
    c7dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    c7de:	ab 85       	ldd	r26, Y+11	; 0x0b
    c7e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    c7e2:	f9 01       	movw	r30, r18
    c7e4:	82 8f       	std	Z+26, r24	; 0x1a
    c7e6:	93 8f       	std	Z+27, r25	; 0x1b
    c7e8:	a4 8f       	std	Z+28, r26	; 0x1c
    c7ea:	b5 8f       	std	Z+29, r27	; 0x1d

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    c7ec:	8f 89       	ldd	r24, Y+23	; 0x17
    c7ee:	98 8d       	ldd	r25, Y+24	; 0x18
    c7f0:	dc 01       	movw	r26, r24
    c7f2:	de 96       	adiw	r26, 0x3e	; 62
    c7f4:	8c 91       	ld	r24, X
    c7f6:	de 97       	sbiw	r26, 0x3e	; 62
    c7f8:	8c 8f       	std	Y+28, r24	; 0x1c
    c7fa:	8f 89       	ldd	r24, Y+23	; 0x17
    c7fc:	98 8d       	ldd	r25, Y+24	; 0x18
    c7fe:	2c 8d       	ldd	r18, Y+28	; 0x1c
    c800:	fc 01       	movw	r30, r24
    c802:	23 83       	std	Z+3, r18	; 0x03
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    c804:	8c 8d       	ldd	r24, Y+28	; 0x1c
    c806:	81 30       	cpi	r24, 0x01	; 1
    c808:	29 f0       	breq	.+10     	; 0xc814 <chk_mounted+0x398>
    c80a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    c80c:	82 30       	cpi	r24, 0x02	; 2
    c80e:	11 f0       	breq	.+4      	; 0xc814 <chk_mounted+0x398>
    c810:	8d e0       	ldi	r24, 0x0D	; 13
    c812:	17 c4       	rjmp	.+2094   	; 0xd042 <chk_mounted+0xbc6>
	fasize *= b;										/* Number of sectors for FAT area */
    c814:	8c 8d       	ldd	r24, Y+28	; 0x1c
    c816:	28 2f       	mov	r18, r24
    c818:	30 e0       	ldi	r19, 0x00	; 0
    c81a:	40 e0       	ldi	r20, 0x00	; 0
    c81c:	50 e0       	ldi	r21, 0x00	; 0
    c81e:	89 85       	ldd	r24, Y+9	; 0x09
    c820:	9a 85       	ldd	r25, Y+10	; 0x0a
    c822:	ab 85       	ldd	r26, Y+11	; 0x0b
    c824:	bc 85       	ldd	r27, Y+12	; 0x0c
    c826:	bc 01       	movw	r22, r24
    c828:	cd 01       	movw	r24, r26
    c82a:	0e 94 19 91 	call	0x12232	; 0x12232 <__mulsi3>
    c82e:	dc 01       	movw	r26, r24
    c830:	cb 01       	movw	r24, r22
    c832:	89 87       	std	Y+9, r24	; 0x09
    c834:	9a 87       	std	Y+10, r25	; 0x0a
    c836:	ab 87       	std	Y+11, r26	; 0x0b
    c838:	bc 87       	std	Y+12, r27	; 0x0c

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    c83a:	8f 89       	ldd	r24, Y+23	; 0x17
    c83c:	98 8d       	ldd	r25, Y+24	; 0x18
    c83e:	dc 01       	movw	r26, r24
    c840:	db 96       	adiw	r26, 0x3b	; 59
    c842:	8c 91       	ld	r24, X
    c844:	db 97       	sbiw	r26, 0x3b	; 59
    c846:	8c 8f       	std	Y+28, r24	; 0x1c
    c848:	8f 89       	ldd	r24, Y+23	; 0x17
    c84a:	98 8d       	ldd	r25, Y+24	; 0x18
    c84c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    c84e:	fc 01       	movw	r30, r24
    c850:	22 83       	std	Z+2, r18	; 0x02
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    c852:	8c 8d       	ldd	r24, Y+28	; 0x1c
    c854:	88 23       	and	r24, r24
    c856:	59 f0       	breq	.+22     	; 0xc86e <chk_mounted+0x3f2>
    c858:	8c 8d       	ldd	r24, Y+28	; 0x1c
    c85a:	28 2f       	mov	r18, r24
    c85c:	30 e0       	ldi	r19, 0x00	; 0
    c85e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    c860:	88 2f       	mov	r24, r24
    c862:	90 e0       	ldi	r25, 0x00	; 0
    c864:	01 97       	sbiw	r24, 0x01	; 1
    c866:	82 23       	and	r24, r18
    c868:	93 23       	and	r25, r19
    c86a:	00 97       	sbiw	r24, 0x00	; 0
    c86c:	11 f0       	breq	.+4      	; 0xc872 <chk_mounted+0x3f6>
    c86e:	8d e0       	ldi	r24, 0x0D	; 13
    c870:	e8 c3       	rjmp	.+2000   	; 0xd042 <chk_mounted+0xbc6>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    c872:	8f 89       	ldd	r24, Y+23	; 0x17
    c874:	98 8d       	ldd	r25, Y+24	; 0x18
    c876:	80 5c       	subi	r24, 0xC0	; 192
    c878:	9f 4f       	sbci	r25, 0xFF	; 255
    c87a:	dc 01       	movw	r26, r24
    c87c:	8c 91       	ld	r24, X
    c87e:	88 2f       	mov	r24, r24
    c880:	90 e0       	ldi	r25, 0x00	; 0
    c882:	38 2f       	mov	r19, r24
    c884:	22 27       	eor	r18, r18
    c886:	8f 89       	ldd	r24, Y+23	; 0x17
    c888:	98 8d       	ldd	r25, Y+24	; 0x18
    c88a:	cf 96       	adiw	r24, 0x3f	; 63
    c88c:	fc 01       	movw	r30, r24
    c88e:	80 81       	ld	r24, Z
    c890:	88 2f       	mov	r24, r24
    c892:	90 e0       	ldi	r25, 0x00	; 0
    c894:	28 2b       	or	r18, r24
    c896:	39 2b       	or	r19, r25
    c898:	8f 89       	ldd	r24, Y+23	; 0x17
    c89a:	98 8d       	ldd	r25, Y+24	; 0x18
    c89c:	dc 01       	movw	r26, r24
    c89e:	19 96       	adiw	r26, 0x09	; 9
    c8a0:	3c 93       	st	X, r19
    c8a2:	2e 93       	st	-X, r18
    c8a4:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    c8a6:	8f 89       	ldd	r24, Y+23	; 0x17
    c8a8:	98 8d       	ldd	r25, Y+24	; 0x18
    c8aa:	fc 01       	movw	r30, r24
    c8ac:	80 85       	ldd	r24, Z+8	; 0x08
    c8ae:	91 85       	ldd	r25, Z+9	; 0x09
    c8b0:	8f 70       	andi	r24, 0x0F	; 15
    c8b2:	90 70       	andi	r25, 0x00	; 0
    c8b4:	00 97       	sbiw	r24, 0x00	; 0
    c8b6:	11 f0       	breq	.+4      	; 0xc8bc <chk_mounted+0x440>
    c8b8:	8d e0       	ldi	r24, 0x0D	; 13
    c8ba:	c3 c3       	rjmp	.+1926   	; 0xd042 <chk_mounted+0xbc6>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    c8bc:	8f 89       	ldd	r24, Y+23	; 0x17
    c8be:	98 8d       	ldd	r25, Y+24	; 0x18
    c8c0:	8e 5b       	subi	r24, 0xBE	; 190
    c8c2:	9f 4f       	sbci	r25, 0xFF	; 255
    c8c4:	dc 01       	movw	r26, r24
    c8c6:	8c 91       	ld	r24, X
    c8c8:	88 2f       	mov	r24, r24
    c8ca:	90 e0       	ldi	r25, 0x00	; 0
    c8cc:	38 2f       	mov	r19, r24
    c8ce:	22 27       	eor	r18, r18
    c8d0:	8f 89       	ldd	r24, Y+23	; 0x17
    c8d2:	98 8d       	ldd	r25, Y+24	; 0x18
    c8d4:	8f 5b       	subi	r24, 0xBF	; 191
    c8d6:	9f 4f       	sbci	r25, 0xFF	; 255
    c8d8:	fc 01       	movw	r30, r24
    c8da:	80 81       	ld	r24, Z
    c8dc:	88 2f       	mov	r24, r24
    c8de:	90 e0       	ldi	r25, 0x00	; 0
    c8e0:	82 2b       	or	r24, r18
    c8e2:	93 2b       	or	r25, r19
    c8e4:	cc 01       	movw	r24, r24
    c8e6:	a0 e0       	ldi	r26, 0x00	; 0
    c8e8:	b0 e0       	ldi	r27, 0x00	; 0
    c8ea:	8d 87       	std	Y+13, r24	; 0x0d
    c8ec:	9e 87       	std	Y+14, r25	; 0x0e
    c8ee:	af 87       	std	Y+15, r26	; 0x0f
    c8f0:	b8 8b       	std	Y+16, r27	; 0x10
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    c8f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    c8f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    c8f6:	af 85       	ldd	r26, Y+15	; 0x0f
    c8f8:	b8 89       	ldd	r27, Y+16	; 0x10
    c8fa:	00 97       	sbiw	r24, 0x00	; 0
    c8fc:	a1 05       	cpc	r26, r1
    c8fe:	b1 05       	cpc	r27, r1
    c900:	09 f0       	breq	.+2      	; 0xc904 <chk_mounted+0x488>
    c902:	42 c0       	rjmp	.+132    	; 0xc988 <chk_mounted+0x50c>
    c904:	8f 89       	ldd	r24, Y+23	; 0x17
    c906:	98 8d       	ldd	r25, Y+24	; 0x18
    c908:	8f 5a       	subi	r24, 0xAF	; 175
    c90a:	9f 4f       	sbci	r25, 0xFF	; 255
    c90c:	dc 01       	movw	r26, r24
    c90e:	8c 91       	ld	r24, X
    c910:	88 2f       	mov	r24, r24
    c912:	90 e0       	ldi	r25, 0x00	; 0
    c914:	a0 e0       	ldi	r26, 0x00	; 0
    c916:	b0 e0       	ldi	r27, 0x00	; 0
    c918:	58 2f       	mov	r21, r24
    c91a:	44 27       	eor	r20, r20
    c91c:	33 27       	eor	r19, r19
    c91e:	22 27       	eor	r18, r18
    c920:	8f 89       	ldd	r24, Y+23	; 0x17
    c922:	98 8d       	ldd	r25, Y+24	; 0x18
    c924:	80 5b       	subi	r24, 0xB0	; 176
    c926:	9f 4f       	sbci	r25, 0xFF	; 255
    c928:	fc 01       	movw	r30, r24
    c92a:	80 81       	ld	r24, Z
    c92c:	88 2f       	mov	r24, r24
    c92e:	90 e0       	ldi	r25, 0x00	; 0
    c930:	a0 e0       	ldi	r26, 0x00	; 0
    c932:	b0 e0       	ldi	r27, 0x00	; 0
    c934:	dc 01       	movw	r26, r24
    c936:	99 27       	eor	r25, r25
    c938:	88 27       	eor	r24, r24
    c93a:	28 2b       	or	r18, r24
    c93c:	39 2b       	or	r19, r25
    c93e:	4a 2b       	or	r20, r26
    c940:	5b 2b       	or	r21, r27
    c942:	8f 89       	ldd	r24, Y+23	; 0x17
    c944:	98 8d       	ldd	r25, Y+24	; 0x18
    c946:	81 5b       	subi	r24, 0xB1	; 177
    c948:	9f 4f       	sbci	r25, 0xFF	; 255
    c94a:	dc 01       	movw	r26, r24
    c94c:	8c 91       	ld	r24, X
    c94e:	88 2f       	mov	r24, r24
    c950:	90 e0       	ldi	r25, 0x00	; 0
    c952:	98 2f       	mov	r25, r24
    c954:	88 27       	eor	r24, r24
    c956:	cc 01       	movw	r24, r24
    c958:	a0 e0       	ldi	r26, 0x00	; 0
    c95a:	b0 e0       	ldi	r27, 0x00	; 0
    c95c:	28 2b       	or	r18, r24
    c95e:	39 2b       	or	r19, r25
    c960:	4a 2b       	or	r20, r26
    c962:	5b 2b       	or	r21, r27
    c964:	8f 89       	ldd	r24, Y+23	; 0x17
    c966:	98 8d       	ldd	r25, Y+24	; 0x18
    c968:	82 5b       	subi	r24, 0xB2	; 178
    c96a:	9f 4f       	sbci	r25, 0xFF	; 255
    c96c:	fc 01       	movw	r30, r24
    c96e:	80 81       	ld	r24, Z
    c970:	88 2f       	mov	r24, r24
    c972:	90 e0       	ldi	r25, 0x00	; 0
    c974:	a0 e0       	ldi	r26, 0x00	; 0
    c976:	b0 e0       	ldi	r27, 0x00	; 0
    c978:	82 2b       	or	r24, r18
    c97a:	93 2b       	or	r25, r19
    c97c:	a4 2b       	or	r26, r20
    c97e:	b5 2b       	or	r27, r21
    c980:	8d 87       	std	Y+13, r24	; 0x0d
    c982:	9e 87       	std	Y+14, r25	; 0x0e
    c984:	af 87       	std	Y+15, r26	; 0x0f
    c986:	b8 8b       	std	Y+16, r27	; 0x10

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    c988:	8f 89       	ldd	r24, Y+23	; 0x17
    c98a:	98 8d       	ldd	r25, Y+24	; 0x18
    c98c:	cd 96       	adiw	r24, 0x3d	; 61
    c98e:	dc 01       	movw	r26, r24
    c990:	8c 91       	ld	r24, X
    c992:	88 2f       	mov	r24, r24
    c994:	90 e0       	ldi	r25, 0x00	; 0
    c996:	38 2f       	mov	r19, r24
    c998:	22 27       	eor	r18, r18
    c99a:	8f 89       	ldd	r24, Y+23	; 0x17
    c99c:	98 8d       	ldd	r25, Y+24	; 0x18
    c99e:	cc 96       	adiw	r24, 0x3c	; 60
    c9a0:	fc 01       	movw	r30, r24
    c9a2:	80 81       	ld	r24, Z
    c9a4:	88 2f       	mov	r24, r24
    c9a6:	90 e0       	ldi	r25, 0x00	; 0
    c9a8:	82 2b       	or	r24, r18
    c9aa:	93 2b       	or	r25, r19
    c9ac:	9e 8f       	std	Y+30, r25	; 0x1e
    c9ae:	8d 8f       	std	Y+29, r24	; 0x1d
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    c9b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c9b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c9b4:	00 97       	sbiw	r24, 0x00	; 0
    c9b6:	11 f4       	brne	.+4      	; 0xc9bc <chk_mounted+0x540>
    c9b8:	8d e0       	ldi	r24, 0x0D	; 13
    c9ba:	43 c3       	rjmp	.+1670   	; 0xd042 <chk_mounted+0xbc6>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    c9bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c9be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c9c0:	9c 01       	movw	r18, r24
    c9c2:	40 e0       	ldi	r20, 0x00	; 0
    c9c4:	50 e0       	ldi	r21, 0x00	; 0
    c9c6:	89 85       	ldd	r24, Y+9	; 0x09
    c9c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    c9ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    c9cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    c9ce:	28 0f       	add	r18, r24
    c9d0:	39 1f       	adc	r19, r25
    c9d2:	4a 1f       	adc	r20, r26
    c9d4:	5b 1f       	adc	r21, r27
    c9d6:	8f 89       	ldd	r24, Y+23	; 0x17
    c9d8:	98 8d       	ldd	r25, Y+24	; 0x18
    c9da:	dc 01       	movw	r26, r24
    c9dc:	18 96       	adiw	r26, 0x08	; 8
    c9de:	8d 91       	ld	r24, X+
    c9e0:	9c 91       	ld	r25, X
    c9e2:	19 97       	sbiw	r26, 0x09	; 9
    c9e4:	92 95       	swap	r25
    c9e6:	82 95       	swap	r24
    c9e8:	8f 70       	andi	r24, 0x0F	; 15
    c9ea:	89 27       	eor	r24, r25
    c9ec:	9f 70       	andi	r25, 0x0F	; 15
    c9ee:	89 27       	eor	r24, r25
    c9f0:	cc 01       	movw	r24, r24
    c9f2:	a0 e0       	ldi	r26, 0x00	; 0
    c9f4:	b0 e0       	ldi	r27, 0x00	; 0
    c9f6:	82 0f       	add	r24, r18
    c9f8:	93 1f       	adc	r25, r19
    c9fa:	a4 1f       	adc	r26, r20
    c9fc:	b5 1f       	adc	r27, r21
    c9fe:	8f 8f       	std	Y+31, r24	; 0x1f
    ca00:	98 a3       	std	Y+32, r25	; 0x20
    ca02:	a9 a3       	std	Y+33, r26	; 0x21
    ca04:	ba a3       	std	Y+34, r27	; 0x22
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    ca06:	2d 85       	ldd	r18, Y+13	; 0x0d
    ca08:	3e 85       	ldd	r19, Y+14	; 0x0e
    ca0a:	4f 85       	ldd	r20, Y+15	; 0x0f
    ca0c:	58 89       	ldd	r21, Y+16	; 0x10
    ca0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ca10:	98 a1       	ldd	r25, Y+32	; 0x20
    ca12:	a9 a1       	ldd	r26, Y+33	; 0x21
    ca14:	ba a1       	ldd	r27, Y+34	; 0x22
    ca16:	28 17       	cp	r18, r24
    ca18:	39 07       	cpc	r19, r25
    ca1a:	4a 07       	cpc	r20, r26
    ca1c:	5b 07       	cpc	r21, r27
    ca1e:	10 f4       	brcc	.+4      	; 0xca24 <chk_mounted+0x5a8>
    ca20:	8d e0       	ldi	r24, 0x0D	; 13
    ca22:	0f c3       	rjmp	.+1566   	; 0xd042 <chk_mounted+0xbc6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    ca24:	2d 85       	ldd	r18, Y+13	; 0x0d
    ca26:	3e 85       	ldd	r19, Y+14	; 0x0e
    ca28:	4f 85       	ldd	r20, Y+15	; 0x0f
    ca2a:	58 89       	ldd	r21, Y+16	; 0x10
    ca2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ca2e:	98 a1       	ldd	r25, Y+32	; 0x20
    ca30:	a9 a1       	ldd	r26, Y+33	; 0x21
    ca32:	ba a1       	ldd	r27, Y+34	; 0x22
    ca34:	79 01       	movw	r14, r18
    ca36:	8a 01       	movw	r16, r20
    ca38:	e8 1a       	sub	r14, r24
    ca3a:	f9 0a       	sbc	r15, r25
    ca3c:	0a 0b       	sbc	r16, r26
    ca3e:	1b 0b       	sbc	r17, r27
    ca40:	d8 01       	movw	r26, r16
    ca42:	c7 01       	movw	r24, r14
    ca44:	2f 89       	ldd	r18, Y+23	; 0x17
    ca46:	38 8d       	ldd	r19, Y+24	; 0x18
    ca48:	f9 01       	movw	r30, r18
    ca4a:	22 81       	ldd	r18, Z+2	; 0x02
    ca4c:	22 2f       	mov	r18, r18
    ca4e:	30 e0       	ldi	r19, 0x00	; 0
    ca50:	40 e0       	ldi	r20, 0x00	; 0
    ca52:	50 e0       	ldi	r21, 0x00	; 0
    ca54:	bc 01       	movw	r22, r24
    ca56:	cd 01       	movw	r24, r26
    ca58:	0e 94 38 91 	call	0x12270	; 0x12270 <__udivmodsi4>
    ca5c:	2b a3       	std	Y+35, r18	; 0x23
    ca5e:	3c a3       	std	Y+36, r19	; 0x24
    ca60:	4d a3       	std	Y+37, r20	; 0x25
    ca62:	5e a3       	std	Y+38, r21	; 0x26
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    ca64:	8b a1       	ldd	r24, Y+35	; 0x23
    ca66:	9c a1       	ldd	r25, Y+36	; 0x24
    ca68:	ad a1       	ldd	r26, Y+37	; 0x25
    ca6a:	be a1       	ldd	r27, Y+38	; 0x26
    ca6c:	00 97       	sbiw	r24, 0x00	; 0
    ca6e:	a1 05       	cpc	r26, r1
    ca70:	b1 05       	cpc	r27, r1
    ca72:	11 f4       	brne	.+4      	; 0xca78 <chk_mounted+0x5fc>
    ca74:	8d e0       	ldi	r24, 0x0D	; 13
    ca76:	e5 c2       	rjmp	.+1482   	; 0xd042 <chk_mounted+0xbc6>
	fmt = FS_FAT12;
    ca78:	81 e0       	ldi	r24, 0x01	; 1
    ca7a:	89 83       	std	Y+1, r24	; 0x01
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    ca7c:	8b a1       	ldd	r24, Y+35	; 0x23
    ca7e:	9c a1       	ldd	r25, Y+36	; 0x24
    ca80:	ad a1       	ldd	r26, Y+37	; 0x25
    ca82:	be a1       	ldd	r27, Y+38	; 0x26
    ca84:	86 3f       	cpi	r24, 0xF6	; 246
    ca86:	ff e0       	ldi	r31, 0x0F	; 15
    ca88:	9f 07       	cpc	r25, r31
    ca8a:	f0 e0       	ldi	r31, 0x00	; 0
    ca8c:	af 07       	cpc	r26, r31
    ca8e:	f0 e0       	ldi	r31, 0x00	; 0
    ca90:	bf 07       	cpc	r27, r31
    ca92:	10 f0       	brcs	.+4      	; 0xca98 <chk_mounted+0x61c>
    ca94:	82 e0       	ldi	r24, 0x02	; 2
    ca96:	89 83       	std	Y+1, r24	; 0x01
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    ca98:	8b a1       	ldd	r24, Y+35	; 0x23
    ca9a:	9c a1       	ldd	r25, Y+36	; 0x24
    ca9c:	ad a1       	ldd	r26, Y+37	; 0x25
    ca9e:	be a1       	ldd	r27, Y+38	; 0x26
    caa0:	86 3f       	cpi	r24, 0xF6	; 246
    caa2:	0f ef       	ldi	r16, 0xFF	; 255
    caa4:	90 07       	cpc	r25, r16
    caa6:	00 e0       	ldi	r16, 0x00	; 0
    caa8:	a0 07       	cpc	r26, r16
    caaa:	00 e0       	ldi	r16, 0x00	; 0
    caac:	b0 07       	cpc	r27, r16
    caae:	10 f0       	brcs	.+4      	; 0xcab4 <chk_mounted+0x638>
    cab0:	83 e0       	ldi	r24, 0x03	; 3
    cab2:	89 83       	std	Y+1, r24	; 0x01

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    cab4:	8b a1       	ldd	r24, Y+35	; 0x23
    cab6:	9c a1       	ldd	r25, Y+36	; 0x24
    cab8:	ad a1       	ldd	r26, Y+37	; 0x25
    caba:	be a1       	ldd	r27, Y+38	; 0x26
    cabc:	02 96       	adiw	r24, 0x02	; 2
    cabe:	a1 1d       	adc	r26, r1
    cac0:	b1 1d       	adc	r27, r1
    cac2:	2f 89       	ldd	r18, Y+23	; 0x17
    cac4:	38 8d       	ldd	r19, Y+24	; 0x18
    cac6:	f9 01       	movw	r30, r18
    cac8:	86 8b       	std	Z+22, r24	; 0x16
    caca:	97 8b       	std	Z+23, r25	; 0x17
    cacc:	a0 8f       	std	Z+24, r26	; 0x18
    cace:	b1 8f       	std	Z+25, r27	; 0x19
	fs->database = bsect + sysect;						/* Data start sector */
    cad0:	2d 81       	ldd	r18, Y+5	; 0x05
    cad2:	3e 81       	ldd	r19, Y+6	; 0x06
    cad4:	4f 81       	ldd	r20, Y+7	; 0x07
    cad6:	58 85       	ldd	r21, Y+8	; 0x08
    cad8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    cada:	98 a1       	ldd	r25, Y+32	; 0x20
    cadc:	a9 a1       	ldd	r26, Y+33	; 0x21
    cade:	ba a1       	ldd	r27, Y+34	; 0x22
    cae0:	82 0f       	add	r24, r18
    cae2:	93 1f       	adc	r25, r19
    cae4:	a4 1f       	adc	r26, r20
    cae6:	b5 1f       	adc	r27, r21
    cae8:	2f 89       	ldd	r18, Y+23	; 0x17
    caea:	38 8d       	ldd	r19, Y+24	; 0x18
    caec:	f9 01       	movw	r30, r18
    caee:	86 a3       	std	Z+38, r24	; 0x26
    caf0:	97 a3       	std	Z+39, r25	; 0x27
    caf2:	a0 a7       	std	Z+40, r26	; 0x28
    caf4:	b1 a7       	std	Z+41, r27	; 0x29
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    caf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    caf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    cafa:	9c 01       	movw	r18, r24
    cafc:	40 e0       	ldi	r20, 0x00	; 0
    cafe:	50 e0       	ldi	r21, 0x00	; 0
    cb00:	8d 81       	ldd	r24, Y+5	; 0x05
    cb02:	9e 81       	ldd	r25, Y+6	; 0x06
    cb04:	af 81       	ldd	r26, Y+7	; 0x07
    cb06:	b8 85       	ldd	r27, Y+8	; 0x08
    cb08:	82 0f       	add	r24, r18
    cb0a:	93 1f       	adc	r25, r19
    cb0c:	a4 1f       	adc	r26, r20
    cb0e:	b5 1f       	adc	r27, r21
    cb10:	2f 89       	ldd	r18, Y+23	; 0x17
    cb12:	38 8d       	ldd	r19, Y+24	; 0x18
    cb14:	f9 01       	movw	r30, r18
    cb16:	86 8f       	std	Z+30, r24	; 0x1e
    cb18:	97 8f       	std	Z+31, r25	; 0x1f
    cb1a:	a0 a3       	std	Z+32, r26	; 0x20
    cb1c:	b1 a3       	std	Z+33, r27	; 0x21
	if (fmt == FS_FAT32) {
    cb1e:	89 81       	ldd	r24, Y+1	; 0x01
    cb20:	83 30       	cpi	r24, 0x03	; 3
    cb22:	09 f0       	breq	.+2      	; 0xcb26 <chk_mounted+0x6aa>
    cb24:	64 c0       	rjmp	.+200    	; 0xcbee <chk_mounted+0x772>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    cb26:	8f 89       	ldd	r24, Y+23	; 0x17
    cb28:	98 8d       	ldd	r25, Y+24	; 0x18
    cb2a:	dc 01       	movw	r26, r24
    cb2c:	18 96       	adiw	r26, 0x08	; 8
    cb2e:	8d 91       	ld	r24, X+
    cb30:	9c 91       	ld	r25, X
    cb32:	19 97       	sbiw	r26, 0x09	; 9
    cb34:	00 97       	sbiw	r24, 0x00	; 0
    cb36:	11 f0       	breq	.+4      	; 0xcb3c <chk_mounted+0x6c0>
    cb38:	8d e0       	ldi	r24, 0x0D	; 13
    cb3a:	83 c2       	rjmp	.+1286   	; 0xd042 <chk_mounted+0xbc6>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    cb3c:	8f 89       	ldd	r24, Y+23	; 0x17
    cb3e:	98 8d       	ldd	r25, Y+24	; 0x18
    cb40:	83 5a       	subi	r24, 0xA3	; 163
    cb42:	9f 4f       	sbci	r25, 0xFF	; 255
    cb44:	fc 01       	movw	r30, r24
    cb46:	80 81       	ld	r24, Z
    cb48:	88 2f       	mov	r24, r24
    cb4a:	90 e0       	ldi	r25, 0x00	; 0
    cb4c:	a0 e0       	ldi	r26, 0x00	; 0
    cb4e:	b0 e0       	ldi	r27, 0x00	; 0
    cb50:	58 2f       	mov	r21, r24
    cb52:	44 27       	eor	r20, r20
    cb54:	33 27       	eor	r19, r19
    cb56:	22 27       	eor	r18, r18
    cb58:	8f 89       	ldd	r24, Y+23	; 0x17
    cb5a:	98 8d       	ldd	r25, Y+24	; 0x18
    cb5c:	84 5a       	subi	r24, 0xA4	; 164
    cb5e:	9f 4f       	sbci	r25, 0xFF	; 255
    cb60:	dc 01       	movw	r26, r24
    cb62:	8c 91       	ld	r24, X
    cb64:	88 2f       	mov	r24, r24
    cb66:	90 e0       	ldi	r25, 0x00	; 0
    cb68:	a0 e0       	ldi	r26, 0x00	; 0
    cb6a:	b0 e0       	ldi	r27, 0x00	; 0
    cb6c:	dc 01       	movw	r26, r24
    cb6e:	99 27       	eor	r25, r25
    cb70:	88 27       	eor	r24, r24
    cb72:	28 2b       	or	r18, r24
    cb74:	39 2b       	or	r19, r25
    cb76:	4a 2b       	or	r20, r26
    cb78:	5b 2b       	or	r21, r27
    cb7a:	8f 89       	ldd	r24, Y+23	; 0x17
    cb7c:	98 8d       	ldd	r25, Y+24	; 0x18
    cb7e:	85 5a       	subi	r24, 0xA5	; 165
    cb80:	9f 4f       	sbci	r25, 0xFF	; 255
    cb82:	fc 01       	movw	r30, r24
    cb84:	80 81       	ld	r24, Z
    cb86:	88 2f       	mov	r24, r24
    cb88:	90 e0       	ldi	r25, 0x00	; 0
    cb8a:	98 2f       	mov	r25, r24
    cb8c:	88 27       	eor	r24, r24
    cb8e:	cc 01       	movw	r24, r24
    cb90:	a0 e0       	ldi	r26, 0x00	; 0
    cb92:	b0 e0       	ldi	r27, 0x00	; 0
    cb94:	28 2b       	or	r18, r24
    cb96:	39 2b       	or	r19, r25
    cb98:	4a 2b       	or	r20, r26
    cb9a:	5b 2b       	or	r21, r27
    cb9c:	8f 89       	ldd	r24, Y+23	; 0x17
    cb9e:	98 8d       	ldd	r25, Y+24	; 0x18
    cba0:	86 5a       	subi	r24, 0xA6	; 166
    cba2:	9f 4f       	sbci	r25, 0xFF	; 255
    cba4:	dc 01       	movw	r26, r24
    cba6:	8c 91       	ld	r24, X
    cba8:	88 2f       	mov	r24, r24
    cbaa:	90 e0       	ldi	r25, 0x00	; 0
    cbac:	a0 e0       	ldi	r26, 0x00	; 0
    cbae:	b0 e0       	ldi	r27, 0x00	; 0
    cbb0:	82 2b       	or	r24, r18
    cbb2:	93 2b       	or	r25, r19
    cbb4:	a4 2b       	or	r26, r20
    cbb6:	b5 2b       	or	r27, r21
    cbb8:	2f 89       	ldd	r18, Y+23	; 0x17
    cbba:	38 8d       	ldd	r19, Y+24	; 0x18
    cbbc:	f9 01       	movw	r30, r18
    cbbe:	82 a3       	std	Z+34, r24	; 0x22
    cbc0:	93 a3       	std	Z+35, r25	; 0x23
    cbc2:	a4 a3       	std	Z+36, r26	; 0x24
    cbc4:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    cbc6:	8f 89       	ldd	r24, Y+23	; 0x17
    cbc8:	98 8d       	ldd	r25, Y+24	; 0x18
    cbca:	fc 01       	movw	r30, r24
    cbcc:	86 89       	ldd	r24, Z+22	; 0x16
    cbce:	97 89       	ldd	r25, Z+23	; 0x17
    cbd0:	a0 8d       	ldd	r26, Z+24	; 0x18
    cbd2:	b1 8d       	ldd	r27, Z+25	; 0x19
    cbd4:	88 0f       	add	r24, r24
    cbd6:	99 1f       	adc	r25, r25
    cbd8:	aa 1f       	adc	r26, r26
    cbda:	bb 1f       	adc	r27, r27
    cbdc:	88 0f       	add	r24, r24
    cbde:	99 1f       	adc	r25, r25
    cbe0:	aa 1f       	adc	r26, r26
    cbe2:	bb 1f       	adc	r27, r27
    cbe4:	89 8b       	std	Y+17, r24	; 0x11
    cbe6:	9a 8b       	std	Y+18, r25	; 0x12
    cbe8:	ab 8b       	std	Y+19, r26	; 0x13
    cbea:	bc 8b       	std	Y+20, r27	; 0x14
    cbec:	5c c0       	rjmp	.+184    	; 0xcca6 <chk_mounted+0x82a>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    cbee:	8f 89       	ldd	r24, Y+23	; 0x17
    cbf0:	98 8d       	ldd	r25, Y+24	; 0x18
    cbf2:	dc 01       	movw	r26, r24
    cbf4:	18 96       	adiw	r26, 0x08	; 8
    cbf6:	8d 91       	ld	r24, X+
    cbf8:	9c 91       	ld	r25, X
    cbfa:	19 97       	sbiw	r26, 0x09	; 9
    cbfc:	00 97       	sbiw	r24, 0x00	; 0
    cbfe:	11 f4       	brne	.+4      	; 0xcc04 <chk_mounted+0x788>
    cc00:	8d e0       	ldi	r24, 0x0D	; 13
    cc02:	1f c2       	rjmp	.+1086   	; 0xd042 <chk_mounted+0xbc6>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    cc04:	8f 89       	ldd	r24, Y+23	; 0x17
    cc06:	98 8d       	ldd	r25, Y+24	; 0x18
    cc08:	fc 01       	movw	r30, r24
    cc0a:	26 8d       	ldd	r18, Z+30	; 0x1e
    cc0c:	37 8d       	ldd	r19, Z+31	; 0x1f
    cc0e:	40 a1       	ldd	r20, Z+32	; 0x20
    cc10:	51 a1       	ldd	r21, Z+33	; 0x21
    cc12:	89 85       	ldd	r24, Y+9	; 0x09
    cc14:	9a 85       	ldd	r25, Y+10	; 0x0a
    cc16:	ab 85       	ldd	r26, Y+11	; 0x0b
    cc18:	bc 85       	ldd	r27, Y+12	; 0x0c
    cc1a:	82 0f       	add	r24, r18
    cc1c:	93 1f       	adc	r25, r19
    cc1e:	a4 1f       	adc	r26, r20
    cc20:	b5 1f       	adc	r27, r21
    cc22:	2f 89       	ldd	r18, Y+23	; 0x17
    cc24:	38 8d       	ldd	r19, Y+24	; 0x18
    cc26:	f9 01       	movw	r30, r18
    cc28:	82 a3       	std	Z+34, r24	; 0x22
    cc2a:	93 a3       	std	Z+35, r25	; 0x23
    cc2c:	a4 a3       	std	Z+36, r26	; 0x24
    cc2e:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    cc30:	89 81       	ldd	r24, Y+1	; 0x01
    cc32:	82 30       	cpi	r24, 0x02	; 2
    cc34:	61 f4       	brne	.+24     	; 0xcc4e <chk_mounted+0x7d2>
    cc36:	8f 89       	ldd	r24, Y+23	; 0x17
    cc38:	98 8d       	ldd	r25, Y+24	; 0x18
    cc3a:	fc 01       	movw	r30, r24
    cc3c:	86 89       	ldd	r24, Z+22	; 0x16
    cc3e:	97 89       	ldd	r25, Z+23	; 0x17
    cc40:	a0 8d       	ldd	r26, Z+24	; 0x18
    cc42:	b1 8d       	ldd	r27, Z+25	; 0x19
    cc44:	88 0f       	add	r24, r24
    cc46:	99 1f       	adc	r25, r25
    cc48:	aa 1f       	adc	r26, r26
    cc4a:	bb 1f       	adc	r27, r27
    cc4c:	28 c0       	rjmp	.+80     	; 0xcc9e <chk_mounted+0x822>
    cc4e:	8f 89       	ldd	r24, Y+23	; 0x17
    cc50:	98 8d       	ldd	r25, Y+24	; 0x18
    cc52:	dc 01       	movw	r26, r24
    cc54:	56 96       	adiw	r26, 0x16	; 22
    cc56:	2d 91       	ld	r18, X+
    cc58:	3d 91       	ld	r19, X+
    cc5a:	4d 91       	ld	r20, X+
    cc5c:	5c 91       	ld	r21, X
    cc5e:	59 97       	sbiw	r26, 0x19	; 25
    cc60:	da 01       	movw	r26, r20
    cc62:	c9 01       	movw	r24, r18
    cc64:	88 0f       	add	r24, r24
    cc66:	99 1f       	adc	r25, r25
    cc68:	aa 1f       	adc	r26, r26
    cc6a:	bb 1f       	adc	r27, r27
    cc6c:	82 0f       	add	r24, r18
    cc6e:	93 1f       	adc	r25, r19
    cc70:	a4 1f       	adc	r26, r20
    cc72:	b5 1f       	adc	r27, r21
    cc74:	9c 01       	movw	r18, r24
    cc76:	ad 01       	movw	r20, r26
    cc78:	56 95       	lsr	r21
    cc7a:	47 95       	ror	r20
    cc7c:	37 95       	ror	r19
    cc7e:	27 95       	ror	r18
    cc80:	8f 89       	ldd	r24, Y+23	; 0x17
    cc82:	98 8d       	ldd	r25, Y+24	; 0x18
    cc84:	fc 01       	movw	r30, r24
    cc86:	86 89       	ldd	r24, Z+22	; 0x16
    cc88:	97 89       	ldd	r25, Z+23	; 0x17
    cc8a:	a0 8d       	ldd	r26, Z+24	; 0x18
    cc8c:	b1 8d       	ldd	r27, Z+25	; 0x19
    cc8e:	81 70       	andi	r24, 0x01	; 1
    cc90:	90 70       	andi	r25, 0x00	; 0
    cc92:	a0 70       	andi	r26, 0x00	; 0
    cc94:	b0 70       	andi	r27, 0x00	; 0
    cc96:	82 0f       	add	r24, r18
    cc98:	93 1f       	adc	r25, r19
    cc9a:	a4 1f       	adc	r26, r20
    cc9c:	b5 1f       	adc	r27, r21
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    cc9e:	89 8b       	std	Y+17, r24	; 0x11
    cca0:	9a 8b       	std	Y+18, r25	; 0x12
    cca2:	ab 8b       	std	Y+19, r26	; 0x13
    cca4:	bc 8b       	std	Y+20, r27	; 0x14
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    cca6:	8f 89       	ldd	r24, Y+23	; 0x17
    cca8:	98 8d       	ldd	r25, Y+24	; 0x18
    ccaa:	dc 01       	movw	r26, r24
    ccac:	5a 96       	adiw	r26, 0x1a	; 26
    ccae:	2d 91       	ld	r18, X+
    ccb0:	3d 91       	ld	r19, X+
    ccb2:	4d 91       	ld	r20, X+
    ccb4:	5c 91       	ld	r21, X
    ccb6:	5d 97       	sbiw	r26, 0x1d	; 29
    ccb8:	89 89       	ldd	r24, Y+17	; 0x11
    ccba:	9a 89       	ldd	r25, Y+18	; 0x12
    ccbc:	ab 89       	ldd	r26, Y+19	; 0x13
    ccbe:	bc 89       	ldd	r27, Y+20	; 0x14
    ccc0:	81 50       	subi	r24, 0x01	; 1
    ccc2:	9e 4f       	sbci	r25, 0xFE	; 254
    ccc4:	af 4f       	sbci	r26, 0xFF	; 255
    ccc6:	bf 4f       	sbci	r27, 0xFF	; 255
    ccc8:	07 2e       	mov	r0, r23
    ccca:	79 e0       	ldi	r23, 0x09	; 9
    cccc:	b6 95       	lsr	r27
    ccce:	a7 95       	ror	r26
    ccd0:	97 95       	ror	r25
    ccd2:	87 95       	ror	r24
    ccd4:	7a 95       	dec	r23
    ccd6:	d1 f7       	brne	.-12     	; 0xcccc <chk_mounted+0x850>
    ccd8:	70 2d       	mov	r23, r0
    ccda:	28 17       	cp	r18, r24
    ccdc:	39 07       	cpc	r19, r25
    ccde:	4a 07       	cpc	r20, r26
    cce0:	5b 07       	cpc	r21, r27
    cce2:	10 f4       	brcc	.+4      	; 0xcce8 <chk_mounted+0x86c>
		return FR_NO_FILESYSTEM;
    cce4:	8d e0       	ldi	r24, 0x0D	; 13
    cce6:	ad c1       	rjmp	.+858    	; 0xd042 <chk_mounted+0xbc6>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    cce8:	2f 89       	ldd	r18, Y+23	; 0x17
    ccea:	38 8d       	ldd	r19, Y+24	; 0x18
    ccec:	8f ef       	ldi	r24, 0xFF	; 255
    ccee:	9f ef       	ldi	r25, 0xFF	; 255
    ccf0:	dc 01       	movw	r26, r24
    ccf2:	f9 01       	movw	r30, r18
    ccf4:	86 87       	std	Z+14, r24	; 0x0e
    ccf6:	97 87       	std	Z+15, r25	; 0x0f
    ccf8:	a0 8b       	std	Z+16, r26	; 0x10
    ccfa:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    ccfc:	8f 89       	ldd	r24, Y+23	; 0x17
    ccfe:	98 8d       	ldd	r25, Y+24	; 0x18
    cd00:	dc 01       	movw	r26, r24
    cd02:	1a 96       	adiw	r26, 0x0a	; 10
    cd04:	1d 92       	st	X+, r1
    cd06:	1d 92       	st	X+, r1
    cd08:	1d 92       	st	X+, r1
    cd0a:	1c 92       	st	X, r1
    cd0c:	1d 97       	sbiw	r26, 0x0d	; 13

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    cd0e:	89 81       	ldd	r24, Y+1	; 0x01
    cd10:	83 30       	cpi	r24, 0x03	; 3
    cd12:	09 f0       	breq	.+2      	; 0xcd16 <chk_mounted+0x89a>
    cd14:	71 c1       	rjmp	.+738    	; 0xcff8 <chk_mounted+0xb7c>
	 	fs->fsi_flag = 0;
    cd16:	8f 89       	ldd	r24, Y+23	; 0x17
    cd18:	98 8d       	ldd	r25, Y+24	; 0x18
    cd1a:	fc 01       	movw	r30, r24
    cd1c:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    cd1e:	8f 89       	ldd	r24, Y+23	; 0x17
    cd20:	98 8d       	ldd	r25, Y+24	; 0x18
    cd22:	81 5a       	subi	r24, 0xA1	; 161
    cd24:	9f 4f       	sbci	r25, 0xFF	; 255
    cd26:	dc 01       	movw	r26, r24
    cd28:	8c 91       	ld	r24, X
    cd2a:	88 2f       	mov	r24, r24
    cd2c:	90 e0       	ldi	r25, 0x00	; 0
    cd2e:	38 2f       	mov	r19, r24
    cd30:	22 27       	eor	r18, r18
    cd32:	8f 89       	ldd	r24, Y+23	; 0x17
    cd34:	98 8d       	ldd	r25, Y+24	; 0x18
    cd36:	82 5a       	subi	r24, 0xA2	; 162
    cd38:	9f 4f       	sbci	r25, 0xFF	; 255
    cd3a:	fc 01       	movw	r30, r24
    cd3c:	80 81       	ld	r24, Z
    cd3e:	88 2f       	mov	r24, r24
    cd40:	90 e0       	ldi	r25, 0x00	; 0
    cd42:	82 2b       	or	r24, r18
    cd44:	93 2b       	or	r25, r19
    cd46:	9c 01       	movw	r18, r24
    cd48:	40 e0       	ldi	r20, 0x00	; 0
    cd4a:	50 e0       	ldi	r21, 0x00	; 0
    cd4c:	8d 81       	ldd	r24, Y+5	; 0x05
    cd4e:	9e 81       	ldd	r25, Y+6	; 0x06
    cd50:	af 81       	ldd	r26, Y+7	; 0x07
    cd52:	b8 85       	ldd	r27, Y+8	; 0x08
    cd54:	82 0f       	add	r24, r18
    cd56:	93 1f       	adc	r25, r19
    cd58:	a4 1f       	adc	r26, r20
    cd5a:	b5 1f       	adc	r27, r21
    cd5c:	2f 89       	ldd	r18, Y+23	; 0x17
    cd5e:	38 8d       	ldd	r19, Y+24	; 0x18
    cd60:	f9 01       	movw	r30, r18
    cd62:	82 8b       	std	Z+18, r24	; 0x12
    cd64:	93 8b       	std	Z+19, r25	; 0x13
    cd66:	a4 8b       	std	Z+20, r26	; 0x14
    cd68:	b5 8b       	std	Z+21, r27	; 0x15
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    cd6a:	8f 89       	ldd	r24, Y+23	; 0x17
    cd6c:	98 8d       	ldd	r25, Y+24	; 0x18
    cd6e:	dc 01       	movw	r26, r24
    cd70:	11 96       	adiw	r26, 0x01	; 1
    cd72:	ec 91       	ld	r30, X
    cd74:	8f 89       	ldd	r24, Y+23	; 0x17
    cd76:	98 8d       	ldd	r25, Y+24	; 0x18
    cd78:	bc 01       	movw	r22, r24
    cd7a:	62 5d       	subi	r22, 0xD2	; 210
    cd7c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd7e:	8f 89       	ldd	r24, Y+23	; 0x17
    cd80:	98 8d       	ldd	r25, Y+24	; 0x18
    cd82:	dc 01       	movw	r26, r24
    cd84:	52 96       	adiw	r26, 0x12	; 18
    cd86:	2d 91       	ld	r18, X+
    cd88:	3d 91       	ld	r19, X+
    cd8a:	4d 91       	ld	r20, X+
    cd8c:	5c 91       	ld	r21, X
    cd8e:	55 97       	sbiw	r26, 0x15	; 21
    cd90:	8e 2f       	mov	r24, r30
    cd92:	01 e0       	ldi	r16, 0x01	; 1
    cd94:	0e 94 3d 82 	call	0x1047a	; 0x1047a <disk_read>
    cd98:	88 23       	and	r24, r24
    cd9a:	09 f0       	breq	.+2      	; 0xcd9e <chk_mounted+0x922>
    cd9c:	2d c1       	rjmp	.+602    	; 0xcff8 <chk_mounted+0xb7c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    cd9e:	8f 89       	ldd	r24, Y+23	; 0x17
    cda0:	98 8d       	ldd	r25, Y+24	; 0x18
    cda2:	83 5d       	subi	r24, 0xD3	; 211
    cda4:	9d 4f       	sbci	r25, 0xFD	; 253
    cda6:	fc 01       	movw	r30, r24
    cda8:	80 81       	ld	r24, Z
    cdaa:	88 2f       	mov	r24, r24
    cdac:	90 e0       	ldi	r25, 0x00	; 0
    cdae:	38 2f       	mov	r19, r24
    cdb0:	22 27       	eor	r18, r18
    cdb2:	8f 89       	ldd	r24, Y+23	; 0x17
    cdb4:	98 8d       	ldd	r25, Y+24	; 0x18
    cdb6:	84 5d       	subi	r24, 0xD4	; 212
    cdb8:	9d 4f       	sbci	r25, 0xFD	; 253
    cdba:	dc 01       	movw	r26, r24
    cdbc:	8c 91       	ld	r24, X
    cdbe:	88 2f       	mov	r24, r24
    cdc0:	90 e0       	ldi	r25, 0x00	; 0
    cdc2:	82 2b       	or	r24, r18
    cdc4:	93 2b       	or	r25, r19

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    cdc6:	ba ea       	ldi	r27, 0xAA	; 170
    cdc8:	85 35       	cpi	r24, 0x55	; 85
    cdca:	9b 07       	cpc	r25, r27
    cdcc:	09 f0       	breq	.+2      	; 0xcdd0 <chk_mounted+0x954>
    cdce:	14 c1       	rjmp	.+552    	; 0xcff8 <chk_mounted+0xb7c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    cdd0:	8f 89       	ldd	r24, Y+23	; 0x17
    cdd2:	98 8d       	ldd	r25, Y+24	; 0x18
    cdd4:	c1 96       	adiw	r24, 0x31	; 49
    cdd6:	fc 01       	movw	r30, r24
    cdd8:	80 81       	ld	r24, Z
    cdda:	88 2f       	mov	r24, r24
    cddc:	90 e0       	ldi	r25, 0x00	; 0
    cdde:	a0 e0       	ldi	r26, 0x00	; 0
    cde0:	b0 e0       	ldi	r27, 0x00	; 0
    cde2:	58 2f       	mov	r21, r24
    cde4:	44 27       	eor	r20, r20
    cde6:	33 27       	eor	r19, r19
    cde8:	22 27       	eor	r18, r18
    cdea:	8f 89       	ldd	r24, Y+23	; 0x17
    cdec:	98 8d       	ldd	r25, Y+24	; 0x18
    cdee:	c0 96       	adiw	r24, 0x30	; 48
    cdf0:	dc 01       	movw	r26, r24
    cdf2:	8c 91       	ld	r24, X
    cdf4:	88 2f       	mov	r24, r24
    cdf6:	90 e0       	ldi	r25, 0x00	; 0
    cdf8:	a0 e0       	ldi	r26, 0x00	; 0
    cdfa:	b0 e0       	ldi	r27, 0x00	; 0
    cdfc:	dc 01       	movw	r26, r24
    cdfe:	99 27       	eor	r25, r25
    ce00:	88 27       	eor	r24, r24
    ce02:	28 2b       	or	r18, r24
    ce04:	39 2b       	or	r19, r25
    ce06:	4a 2b       	or	r20, r26
    ce08:	5b 2b       	or	r21, r27
    ce0a:	8f 89       	ldd	r24, Y+23	; 0x17
    ce0c:	98 8d       	ldd	r25, Y+24	; 0x18
    ce0e:	8f 96       	adiw	r24, 0x2f	; 47
    ce10:	fc 01       	movw	r30, r24
    ce12:	80 81       	ld	r24, Z
    ce14:	88 2f       	mov	r24, r24
    ce16:	90 e0       	ldi	r25, 0x00	; 0
    ce18:	98 2f       	mov	r25, r24
    ce1a:	88 27       	eor	r24, r24
    ce1c:	cc 01       	movw	r24, r24
    ce1e:	a0 e0       	ldi	r26, 0x00	; 0
    ce20:	b0 e0       	ldi	r27, 0x00	; 0
    ce22:	28 2b       	or	r18, r24
    ce24:	39 2b       	or	r19, r25
    ce26:	4a 2b       	or	r20, r26
    ce28:	5b 2b       	or	r21, r27
    ce2a:	8f 89       	ldd	r24, Y+23	; 0x17
    ce2c:	98 8d       	ldd	r25, Y+24	; 0x18
    ce2e:	dc 01       	movw	r26, r24
    ce30:	9e 96       	adiw	r26, 0x2e	; 46
    ce32:	8c 91       	ld	r24, X
    ce34:	88 2f       	mov	r24, r24
    ce36:	90 e0       	ldi	r25, 0x00	; 0
    ce38:	a0 e0       	ldi	r26, 0x00	; 0
    ce3a:	b0 e0       	ldi	r27, 0x00	; 0
    ce3c:	82 2b       	or	r24, r18
    ce3e:	93 2b       	or	r25, r19
    ce40:	a4 2b       	or	r26, r20
    ce42:	b5 2b       	or	r27, r21
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    ce44:	82 35       	cpi	r24, 0x52	; 82
    ce46:	e2 e5       	ldi	r30, 0x52	; 82
    ce48:	9e 07       	cpc	r25, r30
    ce4a:	e1 e6       	ldi	r30, 0x61	; 97
    ce4c:	ae 07       	cpc	r26, r30
    ce4e:	e1 e4       	ldi	r30, 0x41	; 65
    ce50:	be 07       	cpc	r27, r30
    ce52:	09 f0       	breq	.+2      	; 0xce56 <chk_mounted+0x9da>
    ce54:	d1 c0       	rjmp	.+418    	; 0xcff8 <chk_mounted+0xb7c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    ce56:	8f 89       	ldd	r24, Y+23	; 0x17
    ce58:	98 8d       	ldd	r25, Y+24	; 0x18
    ce5a:	8b 5e       	subi	r24, 0xEB	; 235
    ce5c:	9d 4f       	sbci	r25, 0xFD	; 253
    ce5e:	dc 01       	movw	r26, r24
    ce60:	8c 91       	ld	r24, X
    ce62:	88 2f       	mov	r24, r24
    ce64:	90 e0       	ldi	r25, 0x00	; 0
    ce66:	a0 e0       	ldi	r26, 0x00	; 0
    ce68:	b0 e0       	ldi	r27, 0x00	; 0
    ce6a:	58 2f       	mov	r21, r24
    ce6c:	44 27       	eor	r20, r20
    ce6e:	33 27       	eor	r19, r19
    ce70:	22 27       	eor	r18, r18
    ce72:	8f 89       	ldd	r24, Y+23	; 0x17
    ce74:	98 8d       	ldd	r25, Y+24	; 0x18
    ce76:	8c 5e       	subi	r24, 0xEC	; 236
    ce78:	9d 4f       	sbci	r25, 0xFD	; 253
    ce7a:	fc 01       	movw	r30, r24
    ce7c:	80 81       	ld	r24, Z
    ce7e:	88 2f       	mov	r24, r24
    ce80:	90 e0       	ldi	r25, 0x00	; 0
    ce82:	a0 e0       	ldi	r26, 0x00	; 0
    ce84:	b0 e0       	ldi	r27, 0x00	; 0
    ce86:	dc 01       	movw	r26, r24
    ce88:	99 27       	eor	r25, r25
    ce8a:	88 27       	eor	r24, r24
    ce8c:	28 2b       	or	r18, r24
    ce8e:	39 2b       	or	r19, r25
    ce90:	4a 2b       	or	r20, r26
    ce92:	5b 2b       	or	r21, r27
    ce94:	8f 89       	ldd	r24, Y+23	; 0x17
    ce96:	98 8d       	ldd	r25, Y+24	; 0x18
    ce98:	8d 5e       	subi	r24, 0xED	; 237
    ce9a:	9d 4f       	sbci	r25, 0xFD	; 253
    ce9c:	dc 01       	movw	r26, r24
    ce9e:	8c 91       	ld	r24, X
    cea0:	88 2f       	mov	r24, r24
    cea2:	90 e0       	ldi	r25, 0x00	; 0
    cea4:	98 2f       	mov	r25, r24
    cea6:	88 27       	eor	r24, r24
    cea8:	cc 01       	movw	r24, r24
    ceaa:	a0 e0       	ldi	r26, 0x00	; 0
    ceac:	b0 e0       	ldi	r27, 0x00	; 0
    ceae:	28 2b       	or	r18, r24
    ceb0:	39 2b       	or	r19, r25
    ceb2:	4a 2b       	or	r20, r26
    ceb4:	5b 2b       	or	r21, r27
    ceb6:	8f 89       	ldd	r24, Y+23	; 0x17
    ceb8:	98 8d       	ldd	r25, Y+24	; 0x18
    ceba:	8e 5e       	subi	r24, 0xEE	; 238
    cebc:	9d 4f       	sbci	r25, 0xFD	; 253
    cebe:	fc 01       	movw	r30, r24
    cec0:	80 81       	ld	r24, Z
    cec2:	88 2f       	mov	r24, r24
    cec4:	90 e0       	ldi	r25, 0x00	; 0
    cec6:	a0 e0       	ldi	r26, 0x00	; 0
    cec8:	b0 e0       	ldi	r27, 0x00	; 0
    ceca:	82 2b       	or	r24, r18
    cecc:	93 2b       	or	r25, r19
    cece:	a4 2b       	or	r26, r20
    ced0:	b5 2b       	or	r27, r21
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    ced2:	82 37       	cpi	r24, 0x72	; 114
    ced4:	f2 e7       	ldi	r31, 0x72	; 114
    ced6:	9f 07       	cpc	r25, r31
    ced8:	f1 e4       	ldi	r31, 0x41	; 65
    ceda:	af 07       	cpc	r26, r31
    cedc:	f1 e6       	ldi	r31, 0x61	; 97
    cede:	bf 07       	cpc	r27, r31
    cee0:	09 f0       	breq	.+2      	; 0xcee4 <chk_mounted+0xa68>
    cee2:	8a c0       	rjmp	.+276    	; 0xcff8 <chk_mounted+0xb7c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    cee4:	8f 89       	ldd	r24, Y+23	; 0x17
    cee6:	98 8d       	ldd	r25, Y+24	; 0x18
    cee8:	83 5e       	subi	r24, 0xE3	; 227
    ceea:	9d 4f       	sbci	r25, 0xFD	; 253
    ceec:	dc 01       	movw	r26, r24
    ceee:	8c 91       	ld	r24, X
    cef0:	88 2f       	mov	r24, r24
    cef2:	90 e0       	ldi	r25, 0x00	; 0
    cef4:	a0 e0       	ldi	r26, 0x00	; 0
    cef6:	b0 e0       	ldi	r27, 0x00	; 0
    cef8:	58 2f       	mov	r21, r24
    cefa:	44 27       	eor	r20, r20
    cefc:	33 27       	eor	r19, r19
    cefe:	22 27       	eor	r18, r18
    cf00:	8f 89       	ldd	r24, Y+23	; 0x17
    cf02:	98 8d       	ldd	r25, Y+24	; 0x18
    cf04:	84 5e       	subi	r24, 0xE4	; 228
    cf06:	9d 4f       	sbci	r25, 0xFD	; 253
    cf08:	fc 01       	movw	r30, r24
    cf0a:	80 81       	ld	r24, Z
    cf0c:	88 2f       	mov	r24, r24
    cf0e:	90 e0       	ldi	r25, 0x00	; 0
    cf10:	a0 e0       	ldi	r26, 0x00	; 0
    cf12:	b0 e0       	ldi	r27, 0x00	; 0
    cf14:	dc 01       	movw	r26, r24
    cf16:	99 27       	eor	r25, r25
    cf18:	88 27       	eor	r24, r24
    cf1a:	28 2b       	or	r18, r24
    cf1c:	39 2b       	or	r19, r25
    cf1e:	4a 2b       	or	r20, r26
    cf20:	5b 2b       	or	r21, r27
    cf22:	8f 89       	ldd	r24, Y+23	; 0x17
    cf24:	98 8d       	ldd	r25, Y+24	; 0x18
    cf26:	85 5e       	subi	r24, 0xE5	; 229
    cf28:	9d 4f       	sbci	r25, 0xFD	; 253
    cf2a:	dc 01       	movw	r26, r24
    cf2c:	8c 91       	ld	r24, X
    cf2e:	88 2f       	mov	r24, r24
    cf30:	90 e0       	ldi	r25, 0x00	; 0
    cf32:	98 2f       	mov	r25, r24
    cf34:	88 27       	eor	r24, r24
    cf36:	cc 01       	movw	r24, r24
    cf38:	a0 e0       	ldi	r26, 0x00	; 0
    cf3a:	b0 e0       	ldi	r27, 0x00	; 0
    cf3c:	28 2b       	or	r18, r24
    cf3e:	39 2b       	or	r19, r25
    cf40:	4a 2b       	or	r20, r26
    cf42:	5b 2b       	or	r21, r27
    cf44:	8f 89       	ldd	r24, Y+23	; 0x17
    cf46:	98 8d       	ldd	r25, Y+24	; 0x18
    cf48:	86 5e       	subi	r24, 0xE6	; 230
    cf4a:	9d 4f       	sbci	r25, 0xFD	; 253
    cf4c:	fc 01       	movw	r30, r24
    cf4e:	80 81       	ld	r24, Z
    cf50:	88 2f       	mov	r24, r24
    cf52:	90 e0       	ldi	r25, 0x00	; 0
    cf54:	a0 e0       	ldi	r26, 0x00	; 0
    cf56:	b0 e0       	ldi	r27, 0x00	; 0
    cf58:	82 2b       	or	r24, r18
    cf5a:	93 2b       	or	r25, r19
    cf5c:	a4 2b       	or	r26, r20
    cf5e:	b5 2b       	or	r27, r21
    cf60:	2f 89       	ldd	r18, Y+23	; 0x17
    cf62:	38 8d       	ldd	r19, Y+24	; 0x18
    cf64:	f9 01       	movw	r30, r18
    cf66:	82 87       	std	Z+10, r24	; 0x0a
    cf68:	93 87       	std	Z+11, r25	; 0x0b
    cf6a:	a4 87       	std	Z+12, r26	; 0x0c
    cf6c:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    cf6e:	8f 89       	ldd	r24, Y+23	; 0x17
    cf70:	98 8d       	ldd	r25, Y+24	; 0x18
    cf72:	87 5e       	subi	r24, 0xE7	; 231
    cf74:	9d 4f       	sbci	r25, 0xFD	; 253
    cf76:	dc 01       	movw	r26, r24
    cf78:	8c 91       	ld	r24, X
    cf7a:	88 2f       	mov	r24, r24
    cf7c:	90 e0       	ldi	r25, 0x00	; 0
    cf7e:	a0 e0       	ldi	r26, 0x00	; 0
    cf80:	b0 e0       	ldi	r27, 0x00	; 0
    cf82:	58 2f       	mov	r21, r24
    cf84:	44 27       	eor	r20, r20
    cf86:	33 27       	eor	r19, r19
    cf88:	22 27       	eor	r18, r18
    cf8a:	8f 89       	ldd	r24, Y+23	; 0x17
    cf8c:	98 8d       	ldd	r25, Y+24	; 0x18
    cf8e:	88 5e       	subi	r24, 0xE8	; 232
    cf90:	9d 4f       	sbci	r25, 0xFD	; 253
    cf92:	fc 01       	movw	r30, r24
    cf94:	80 81       	ld	r24, Z
    cf96:	88 2f       	mov	r24, r24
    cf98:	90 e0       	ldi	r25, 0x00	; 0
    cf9a:	a0 e0       	ldi	r26, 0x00	; 0
    cf9c:	b0 e0       	ldi	r27, 0x00	; 0
    cf9e:	dc 01       	movw	r26, r24
    cfa0:	99 27       	eor	r25, r25
    cfa2:	88 27       	eor	r24, r24
    cfa4:	28 2b       	or	r18, r24
    cfa6:	39 2b       	or	r19, r25
    cfa8:	4a 2b       	or	r20, r26
    cfaa:	5b 2b       	or	r21, r27
    cfac:	8f 89       	ldd	r24, Y+23	; 0x17
    cfae:	98 8d       	ldd	r25, Y+24	; 0x18
    cfb0:	89 5e       	subi	r24, 0xE9	; 233
    cfb2:	9d 4f       	sbci	r25, 0xFD	; 253
    cfb4:	dc 01       	movw	r26, r24
    cfb6:	8c 91       	ld	r24, X
    cfb8:	88 2f       	mov	r24, r24
    cfba:	90 e0       	ldi	r25, 0x00	; 0
    cfbc:	98 2f       	mov	r25, r24
    cfbe:	88 27       	eor	r24, r24
    cfc0:	cc 01       	movw	r24, r24
    cfc2:	a0 e0       	ldi	r26, 0x00	; 0
    cfc4:	b0 e0       	ldi	r27, 0x00	; 0
    cfc6:	28 2b       	or	r18, r24
    cfc8:	39 2b       	or	r19, r25
    cfca:	4a 2b       	or	r20, r26
    cfcc:	5b 2b       	or	r21, r27
    cfce:	8f 89       	ldd	r24, Y+23	; 0x17
    cfd0:	98 8d       	ldd	r25, Y+24	; 0x18
    cfd2:	8a 5e       	subi	r24, 0xEA	; 234
    cfd4:	9d 4f       	sbci	r25, 0xFD	; 253
    cfd6:	fc 01       	movw	r30, r24
    cfd8:	80 81       	ld	r24, Z
    cfda:	88 2f       	mov	r24, r24
    cfdc:	90 e0       	ldi	r25, 0x00	; 0
    cfde:	a0 e0       	ldi	r26, 0x00	; 0
    cfe0:	b0 e0       	ldi	r27, 0x00	; 0
    cfe2:	82 2b       	or	r24, r18
    cfe4:	93 2b       	or	r25, r19
    cfe6:	a4 2b       	or	r26, r20
    cfe8:	b5 2b       	or	r27, r21
    cfea:	2f 89       	ldd	r18, Y+23	; 0x17
    cfec:	38 8d       	ldd	r19, Y+24	; 0x18
    cfee:	f9 01       	movw	r30, r18
    cff0:	86 87       	std	Z+14, r24	; 0x0e
    cff2:	97 87       	std	Z+15, r25	; 0x0f
    cff4:	a0 8b       	std	Z+16, r26	; 0x10
    cff6:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    cff8:	8f 89       	ldd	r24, Y+23	; 0x17
    cffa:	98 8d       	ldd	r25, Y+24	; 0x18
    cffc:	29 81       	ldd	r18, Y+1	; 0x01
    cffe:	dc 01       	movw	r26, r24
    d000:	2c 93       	st	X, r18
	fs->id = ++Fsid;		/* File system mount ID */
    d002:	80 91 b6 01 	lds	r24, 0x01B6
    d006:	90 91 b7 01 	lds	r25, 0x01B7
    d00a:	01 96       	adiw	r24, 0x01	; 1
    d00c:	90 93 b7 01 	sts	0x01B7, r25
    d010:	80 93 b6 01 	sts	0x01B6, r24
    d014:	20 91 b6 01 	lds	r18, 0x01B6
    d018:	30 91 b7 01 	lds	r19, 0x01B7
    d01c:	8f 89       	ldd	r24, Y+23	; 0x17
    d01e:	98 8d       	ldd	r25, Y+24	; 0x18
    d020:	fc 01       	movw	r30, r24
    d022:	37 83       	std	Z+7, r19	; 0x07
    d024:	26 83       	std	Z+6, r18	; 0x06
	fs->winsect = 0;		/* Invalidate sector cache */
    d026:	8f 89       	ldd	r24, Y+23	; 0x17
    d028:	98 8d       	ldd	r25, Y+24	; 0x18
    d02a:	dc 01       	movw	r26, r24
    d02c:	9a 96       	adiw	r26, 0x2a	; 42
    d02e:	1d 92       	st	X+, r1
    d030:	1d 92       	st	X+, r1
    d032:	1d 92       	st	X+, r1
    d034:	1c 92       	st	X, r1
    d036:	9d 97       	sbiw	r26, 0x2d	; 45
	fs->wflag = 0;
    d038:	8f 89       	ldd	r24, Y+23	; 0x17
    d03a:	98 8d       	ldd	r25, Y+24	; 0x18
    d03c:	fc 01       	movw	r30, r24
    d03e:	14 82       	std	Z+4, r1	; 0x04
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    d040:	80 e0       	ldi	r24, 0x00	; 0
}
    d042:	ab 96       	adiw	r28, 0x2b	; 43
    d044:	0f b6       	in	r0, 0x3f	; 63
    d046:	f8 94       	cli
    d048:	de bf       	out	0x3e, r29	; 62
    d04a:	0f be       	out	0x3f, r0	; 63
    d04c:	cd bf       	out	0x3d, r28	; 61
    d04e:	cf 91       	pop	r28
    d050:	df 91       	pop	r29
    d052:	1f 91       	pop	r17
    d054:	0f 91       	pop	r16
    d056:	ff 90       	pop	r15
    d058:	ef 90       	pop	r14
    d05a:	08 95       	ret

0000d05c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    d05c:	df 93       	push	r29
    d05e:	cf 93       	push	r28
    d060:	00 d0       	rcall	.+0      	; 0xd062 <validate+0x6>
    d062:	00 d0       	rcall	.+0      	; 0xd064 <validate+0x8>
    d064:	cd b7       	in	r28, 0x3d	; 61
    d066:	de b7       	in	r29, 0x3e	; 62
    d068:	9a 83       	std	Y+2, r25	; 0x02
    d06a:	89 83       	std	Y+1, r24	; 0x01
    d06c:	7c 83       	std	Y+4, r23	; 0x04
    d06e:	6b 83       	std	Y+3, r22	; 0x03
	if (!fs || !fs->fs_type || fs->id != id)
    d070:	89 81       	ldd	r24, Y+1	; 0x01
    d072:	9a 81       	ldd	r25, Y+2	; 0x02
    d074:	00 97       	sbiw	r24, 0x00	; 0
    d076:	81 f0       	breq	.+32     	; 0xd098 <validate+0x3c>
    d078:	89 81       	ldd	r24, Y+1	; 0x01
    d07a:	9a 81       	ldd	r25, Y+2	; 0x02
    d07c:	fc 01       	movw	r30, r24
    d07e:	80 81       	ld	r24, Z
    d080:	88 23       	and	r24, r24
    d082:	51 f0       	breq	.+20     	; 0xd098 <validate+0x3c>
    d084:	89 81       	ldd	r24, Y+1	; 0x01
    d086:	9a 81       	ldd	r25, Y+2	; 0x02
    d088:	fc 01       	movw	r30, r24
    d08a:	26 81       	ldd	r18, Z+6	; 0x06
    d08c:	37 81       	ldd	r19, Z+7	; 0x07
    d08e:	8b 81       	ldd	r24, Y+3	; 0x03
    d090:	9c 81       	ldd	r25, Y+4	; 0x04
    d092:	28 17       	cp	r18, r24
    d094:	39 07       	cpc	r19, r25
    d096:	11 f0       	breq	.+4      	; 0xd09c <validate+0x40>
		return FR_INVALID_OBJECT;
    d098:	89 e0       	ldi	r24, 0x09	; 9
    d09a:	0f c0       	rjmp	.+30     	; 0xd0ba <validate+0x5e>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    d09c:	89 81       	ldd	r24, Y+1	; 0x01
    d09e:	9a 81       	ldd	r25, Y+2	; 0x02
    d0a0:	fc 01       	movw	r30, r24
    d0a2:	81 81       	ldd	r24, Z+1	; 0x01
    d0a4:	0e 94 2c 82 	call	0x10458	; 0x10458 <disk_status>
    d0a8:	88 2f       	mov	r24, r24
    d0aa:	90 e0       	ldi	r25, 0x00	; 0
    d0ac:	81 70       	andi	r24, 0x01	; 1
    d0ae:	90 70       	andi	r25, 0x00	; 0
    d0b0:	88 23       	and	r24, r24
    d0b2:	11 f0       	breq	.+4      	; 0xd0b8 <validate+0x5c>
		return FR_NOT_READY;
    d0b4:	83 e0       	ldi	r24, 0x03	; 3
    d0b6:	01 c0       	rjmp	.+2      	; 0xd0ba <validate+0x5e>

	return FR_OK;
    d0b8:	80 e0       	ldi	r24, 0x00	; 0
}
    d0ba:	0f 90       	pop	r0
    d0bc:	0f 90       	pop	r0
    d0be:	0f 90       	pop	r0
    d0c0:	0f 90       	pop	r0
    d0c2:	cf 91       	pop	r28
    d0c4:	df 91       	pop	r29
    d0c6:	08 95       	ret

0000d0c8 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    d0c8:	df 93       	push	r29
    d0ca:	cf 93       	push	r28
    d0cc:	00 d0       	rcall	.+0      	; 0xd0ce <f_mount+0x6>
    d0ce:	00 d0       	rcall	.+0      	; 0xd0d0 <f_mount+0x8>
    d0d0:	0f 92       	push	r0
    d0d2:	cd b7       	in	r28, 0x3d	; 61
    d0d4:	de b7       	in	r29, 0x3e	; 62
    d0d6:	8b 83       	std	Y+3, r24	; 0x03
    d0d8:	7d 83       	std	Y+5, r23	; 0x05
    d0da:	6c 83       	std	Y+4, r22	; 0x04
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    d0dc:	8b 81       	ldd	r24, Y+3	; 0x03
    d0de:	88 23       	and	r24, r24
    d0e0:	11 f0       	breq	.+4      	; 0xd0e6 <f_mount+0x1e>
		return FR_INVALID_DRIVE;
    d0e2:	8b e0       	ldi	r24, 0x0B	; 11
    d0e4:	29 c0       	rjmp	.+82     	; 0xd138 <f_mount+0x70>
	rfs = FatFs[vol];			/* Get current fs object */
    d0e6:	8b 81       	ldd	r24, Y+3	; 0x03
    d0e8:	88 2f       	mov	r24, r24
    d0ea:	90 e0       	ldi	r25, 0x00	; 0
    d0ec:	88 0f       	add	r24, r24
    d0ee:	99 1f       	adc	r25, r25
    d0f0:	8c 54       	subi	r24, 0x4C	; 76
    d0f2:	9e 4f       	sbci	r25, 0xFE	; 254
    d0f4:	fc 01       	movw	r30, r24
    d0f6:	80 81       	ld	r24, Z
    d0f8:	91 81       	ldd	r25, Z+1	; 0x01
    d0fa:	9a 83       	std	Y+2, r25	; 0x02
    d0fc:	89 83       	std	Y+1, r24	; 0x01

	if (rfs) {
    d0fe:	89 81       	ldd	r24, Y+1	; 0x01
    d100:	9a 81       	ldd	r25, Y+2	; 0x02
    d102:	00 97       	sbiw	r24, 0x00	; 0
    d104:	21 f0       	breq	.+8      	; 0xd10e <f_mount+0x46>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    d106:	89 81       	ldd	r24, Y+1	; 0x01
    d108:	9a 81       	ldd	r25, Y+2	; 0x02
    d10a:	fc 01       	movw	r30, r24
    d10c:	10 82       	st	Z, r1
	}

	if (fs) {
    d10e:	8c 81       	ldd	r24, Y+4	; 0x04
    d110:	9d 81       	ldd	r25, Y+5	; 0x05
    d112:	00 97       	sbiw	r24, 0x00	; 0
    d114:	21 f0       	breq	.+8      	; 0xd11e <f_mount+0x56>
		fs->fs_type = 0;		/* Clear new fs object */
    d116:	8c 81       	ldd	r24, Y+4	; 0x04
    d118:	9d 81       	ldd	r25, Y+5	; 0x05
    d11a:	fc 01       	movw	r30, r24
    d11c:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    d11e:	8b 81       	ldd	r24, Y+3	; 0x03
    d120:	88 2f       	mov	r24, r24
    d122:	90 e0       	ldi	r25, 0x00	; 0
    d124:	88 0f       	add	r24, r24
    d126:	99 1f       	adc	r25, r25
    d128:	8c 54       	subi	r24, 0x4C	; 76
    d12a:	9e 4f       	sbci	r25, 0xFE	; 254
    d12c:	2c 81       	ldd	r18, Y+4	; 0x04
    d12e:	3d 81       	ldd	r19, Y+5	; 0x05
    d130:	fc 01       	movw	r30, r24
    d132:	31 83       	std	Z+1, r19	; 0x01
    d134:	20 83       	st	Z, r18

	return FR_OK;
    d136:	80 e0       	ldi	r24, 0x00	; 0
}
    d138:	0f 90       	pop	r0
    d13a:	0f 90       	pop	r0
    d13c:	0f 90       	pop	r0
    d13e:	0f 90       	pop	r0
    d140:	0f 90       	pop	r0
    d142:	cf 91       	pop	r28
    d144:	df 91       	pop	r29
    d146:	08 95       	ret

0000d148 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    d148:	df 93       	push	r29
    d14a:	cf 93       	push	r28
    d14c:	cd b7       	in	r28, 0x3d	; 61
    d14e:	de b7       	in	r29, 0x3e	; 62
    d150:	e2 97       	sbiw	r28, 0x32	; 50
    d152:	0f b6       	in	r0, 0x3f	; 63
    d154:	f8 94       	cli
    d156:	de bf       	out	0x3e, r29	; 62
    d158:	0f be       	out	0x3f, r0	; 63
    d15a:	cd bf       	out	0x3d, r28	; 61
    d15c:	9f a7       	std	Y+47, r25	; 0x2f
    d15e:	8e a7       	std	Y+46, r24	; 0x2e
    d160:	79 ab       	std	Y+49, r23	; 0x31
    d162:	68 ab       	std	Y+48, r22	; 0x30
    d164:	4a ab       	std	Y+50, r20	; 0x32
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    d166:	8e a5       	ldd	r24, Y+46	; 0x2e
    d168:	9f a5       	ldd	r25, Y+47	; 0x2f
    d16a:	fc 01       	movw	r30, r24
    d16c:	11 82       	std	Z+1, r1	; 0x01
    d16e:	10 82       	st	Z, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    d170:	8a a9       	ldd	r24, Y+50	; 0x32
    d172:	8f 71       	andi	r24, 0x1F	; 31
    d174:	8a ab       	std	Y+50, r24	; 0x32
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    d176:	8a a9       	ldd	r24, Y+50	; 0x32
    d178:	48 2f       	mov	r20, r24
    d17a:	4e 7f       	andi	r20, 0xFE	; 254
    d17c:	ce 01       	movw	r24, r28
    d17e:	c0 96       	adiw	r24, 0x30	; 48
    d180:	9e 01       	movw	r18, r28
    d182:	24 5f       	subi	r18, 0xF4	; 244
    d184:	3f 4f       	sbci	r19, 0xFF	; 255
    d186:	b9 01       	movw	r22, r18
    d188:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    d18c:	89 83       	std	Y+1, r24	; 0x01
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    d18e:	ce 01       	movw	r24, r28
    d190:	82 96       	adiw	r24, 0x22	; 34
    d192:	99 a3       	std	Y+33, r25	; 0x21
    d194:	88 a3       	std	Y+32, r24	; 0x20
	if (res == FR_OK)
    d196:	89 81       	ldd	r24, Y+1	; 0x01
    d198:	88 23       	and	r24, r24
    d19a:	41 f4       	brne	.+16     	; 0xd1ac <f_open+0x64>
		res = follow_path(&dj, path);	/* Follow the file path */
    d19c:	28 a9       	ldd	r18, Y+48	; 0x30
    d19e:	39 a9       	ldd	r19, Y+49	; 0x31
    d1a0:	ce 01       	movw	r24, r28
    d1a2:	0c 96       	adiw	r24, 0x0c	; 12
    d1a4:	b9 01       	movw	r22, r18
    d1a6:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    d1aa:	89 83       	std	Y+1, r24	; 0x01
	dir = dj.dir;
    d1ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    d1ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    d1b0:	9b 83       	std	Y+3, r25	; 0x03
    d1b2:	8a 83       	std	Y+2, r24	; 0x02

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    d1b4:	89 81       	ldd	r24, Y+1	; 0x01
    d1b6:	88 23       	and	r24, r24
    d1b8:	31 f4       	brne	.+12     	; 0xd1c6 <f_open+0x7e>
		if (!dir)	/* Current dir itself */
    d1ba:	8a 81       	ldd	r24, Y+2	; 0x02
    d1bc:	9b 81       	ldd	r25, Y+3	; 0x03
    d1be:	00 97       	sbiw	r24, 0x00	; 0
    d1c0:	11 f4       	brne	.+4      	; 0xd1c6 <f_open+0x7e>
			res = FR_INVALID_NAME;
    d1c2:	86 e0       	ldi	r24, 0x06	; 6
    d1c4:	89 83       	std	Y+1, r24	; 0x01
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    d1c6:	8a a9       	ldd	r24, Y+50	; 0x32
    d1c8:	88 2f       	mov	r24, r24
    d1ca:	90 e0       	ldi	r25, 0x00	; 0
    d1cc:	8c 71       	andi	r24, 0x1C	; 28
    d1ce:	90 70       	andi	r25, 0x00	; 0
    d1d0:	00 97       	sbiw	r24, 0x00	; 0
    d1d2:	09 f4       	brne	.+2      	; 0xd1d6 <f_open+0x8e>
    d1d4:	0e c1       	rjmp	.+540    	; 0xd3f2 <f_open+0x2aa>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    d1d6:	89 81       	ldd	r24, Y+1	; 0x01
    d1d8:	88 23       	and	r24, r24
    d1da:	81 f0       	breq	.+32     	; 0xd1fc <f_open+0xb4>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    d1dc:	89 81       	ldd	r24, Y+1	; 0x01
    d1de:	84 30       	cpi	r24, 0x04	; 4
    d1e0:	29 f4       	brne	.+10     	; 0xd1ec <f_open+0xa4>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    d1e2:	ce 01       	movw	r24, r28
    d1e4:	0c 96       	adiw	r24, 0x0c	; 12
    d1e6:	0e 94 66 5d 	call	0xbacc	; 0xbacc <dir_register>
    d1ea:	89 83       	std	Y+1, r24	; 0x01
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    d1ec:	8a a9       	ldd	r24, Y+50	; 0x32
    d1ee:	88 60       	ori	r24, 0x08	; 8
    d1f0:	8a ab       	std	Y+50, r24	; 0x32
			dir = dj.dir;					/* New entry */
    d1f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    d1f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    d1f6:	9b 83       	std	Y+3, r25	; 0x03
    d1f8:	8a 83       	std	Y+2, r24	; 0x02
    d1fa:	17 c0       	rjmp	.+46     	; 0xd22a <f_open+0xe2>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    d1fc:	8a 81       	ldd	r24, Y+2	; 0x02
    d1fe:	9b 81       	ldd	r25, Y+3	; 0x03
    d200:	0b 96       	adiw	r24, 0x0b	; 11
    d202:	fc 01       	movw	r30, r24
    d204:	80 81       	ld	r24, Z
    d206:	88 2f       	mov	r24, r24
    d208:	90 e0       	ldi	r25, 0x00	; 0
    d20a:	81 71       	andi	r24, 0x11	; 17
    d20c:	90 70       	andi	r25, 0x00	; 0
    d20e:	00 97       	sbiw	r24, 0x00	; 0
    d210:	19 f0       	breq	.+6      	; 0xd218 <f_open+0xd0>
				res = FR_DENIED;
    d212:	87 e0       	ldi	r24, 0x07	; 7
    d214:	89 83       	std	Y+1, r24	; 0x01
    d216:	09 c0       	rjmp	.+18     	; 0xd22a <f_open+0xe2>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    d218:	8a a9       	ldd	r24, Y+50	; 0x32
    d21a:	88 2f       	mov	r24, r24
    d21c:	90 e0       	ldi	r25, 0x00	; 0
    d21e:	84 70       	andi	r24, 0x04	; 4
    d220:	90 70       	andi	r25, 0x00	; 0
    d222:	00 97       	sbiw	r24, 0x00	; 0
    d224:	11 f0       	breq	.+4      	; 0xd22a <f_open+0xe2>
					res = FR_EXIST;
    d226:	88 e0       	ldi	r24, 0x08	; 8
    d228:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    d22a:	89 81       	ldd	r24, Y+1	; 0x01
    d22c:	88 23       	and	r24, r24
    d22e:	09 f0       	breq	.+2      	; 0xd232 <f_open+0xea>
    d230:	05 c1       	rjmp	.+522    	; 0xd43c <f_open+0x2f4>
    d232:	8a a9       	ldd	r24, Y+50	; 0x32
    d234:	88 2f       	mov	r24, r24
    d236:	90 e0       	ldi	r25, 0x00	; 0
    d238:	88 70       	andi	r24, 0x08	; 8
    d23a:	90 70       	andi	r25, 0x00	; 0
    d23c:	00 97       	sbiw	r24, 0x00	; 0
    d23e:	09 f4       	brne	.+2      	; 0xd242 <f_open+0xfa>
    d240:	fd c0       	rjmp	.+506    	; 0xd43c <f_open+0x2f4>
			dw = get_fattime();					/* Created time */
    d242:	0e 94 f8 85 	call	0x10bf0	; 0x10bf0 <get_fattime>
    d246:	dc 01       	movw	r26, r24
    d248:	cb 01       	movw	r24, r22
    d24a:	8c 83       	std	Y+4, r24	; 0x04
    d24c:	9d 83       	std	Y+5, r25	; 0x05
    d24e:	ae 83       	std	Y+6, r26	; 0x06
    d250:	bf 83       	std	Y+7, r27	; 0x07
			ST_DWORD(dir+DIR_CrtTime, dw);
    d252:	8a 81       	ldd	r24, Y+2	; 0x02
    d254:	9b 81       	ldd	r25, Y+3	; 0x03
    d256:	0e 96       	adiw	r24, 0x0e	; 14
    d258:	2c 81       	ldd	r18, Y+4	; 0x04
    d25a:	fc 01       	movw	r30, r24
    d25c:	20 83       	st	Z, r18
    d25e:	8a 81       	ldd	r24, Y+2	; 0x02
    d260:	9b 81       	ldd	r25, Y+3	; 0x03
    d262:	0f 96       	adiw	r24, 0x0f	; 15
    d264:	2c 81       	ldd	r18, Y+4	; 0x04
    d266:	3d 81       	ldd	r19, Y+5	; 0x05
    d268:	23 2f       	mov	r18, r19
    d26a:	33 27       	eor	r19, r19
    d26c:	fc 01       	movw	r30, r24
    d26e:	20 83       	st	Z, r18
    d270:	8a 81       	ldd	r24, Y+2	; 0x02
    d272:	9b 81       	ldd	r25, Y+3	; 0x03
    d274:	9c 01       	movw	r18, r24
    d276:	20 5f       	subi	r18, 0xF0	; 240
    d278:	3f 4f       	sbci	r19, 0xFF	; 255
    d27a:	8c 81       	ldd	r24, Y+4	; 0x04
    d27c:	9d 81       	ldd	r25, Y+5	; 0x05
    d27e:	ae 81       	ldd	r26, Y+6	; 0x06
    d280:	bf 81       	ldd	r27, Y+7	; 0x07
    d282:	cd 01       	movw	r24, r26
    d284:	aa 27       	eor	r26, r26
    d286:	bb 27       	eor	r27, r27
    d288:	f9 01       	movw	r30, r18
    d28a:	80 83       	st	Z, r24
    d28c:	8a 81       	ldd	r24, Y+2	; 0x02
    d28e:	9b 81       	ldd	r25, Y+3	; 0x03
    d290:	9c 01       	movw	r18, r24
    d292:	2f 5e       	subi	r18, 0xEF	; 239
    d294:	3f 4f       	sbci	r19, 0xFF	; 255
    d296:	8c 81       	ldd	r24, Y+4	; 0x04
    d298:	9d 81       	ldd	r25, Y+5	; 0x05
    d29a:	ae 81       	ldd	r26, Y+6	; 0x06
    d29c:	bf 81       	ldd	r27, Y+7	; 0x07
    d29e:	8b 2f       	mov	r24, r27
    d2a0:	99 27       	eor	r25, r25
    d2a2:	aa 27       	eor	r26, r26
    d2a4:	bb 27       	eor	r27, r27
    d2a6:	f9 01       	movw	r30, r18
    d2a8:	80 83       	st	Z, r24
			dir[DIR_Attr] = 0;					/* Reset attribute */
    d2aa:	8a 81       	ldd	r24, Y+2	; 0x02
    d2ac:	9b 81       	ldd	r25, Y+3	; 0x03
    d2ae:	0b 96       	adiw	r24, 0x0b	; 11
    d2b0:	fc 01       	movw	r30, r24
    d2b2:	10 82       	st	Z, r1
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    d2b4:	8a 81       	ldd	r24, Y+2	; 0x02
    d2b6:	9b 81       	ldd	r25, Y+3	; 0x03
    d2b8:	4c 96       	adiw	r24, 0x1c	; 28
    d2ba:	fc 01       	movw	r30, r24
    d2bc:	10 82       	st	Z, r1
    d2be:	8a 81       	ldd	r24, Y+2	; 0x02
    d2c0:	9b 81       	ldd	r25, Y+3	; 0x03
    d2c2:	4d 96       	adiw	r24, 0x1d	; 29
    d2c4:	fc 01       	movw	r30, r24
    d2c6:	10 82       	st	Z, r1
    d2c8:	8a 81       	ldd	r24, Y+2	; 0x02
    d2ca:	9b 81       	ldd	r25, Y+3	; 0x03
    d2cc:	4e 96       	adiw	r24, 0x1e	; 30
    d2ce:	fc 01       	movw	r30, r24
    d2d0:	10 82       	st	Z, r1
    d2d2:	8a 81       	ldd	r24, Y+2	; 0x02
    d2d4:	9b 81       	ldd	r25, Y+3	; 0x03
    d2d6:	4f 96       	adiw	r24, 0x1f	; 31
    d2d8:	fc 01       	movw	r30, r24
    d2da:	10 82       	st	Z, r1
			cl = LD_CLUST(dir);					/* Get start cluster */
    d2dc:	8a 81       	ldd	r24, Y+2	; 0x02
    d2de:	9b 81       	ldd	r25, Y+3	; 0x03
    d2e0:	45 96       	adiw	r24, 0x15	; 21
    d2e2:	fc 01       	movw	r30, r24
    d2e4:	80 81       	ld	r24, Z
    d2e6:	88 2f       	mov	r24, r24
    d2e8:	90 e0       	ldi	r25, 0x00	; 0
    d2ea:	38 2f       	mov	r19, r24
    d2ec:	22 27       	eor	r18, r18
    d2ee:	8a 81       	ldd	r24, Y+2	; 0x02
    d2f0:	9b 81       	ldd	r25, Y+3	; 0x03
    d2f2:	44 96       	adiw	r24, 0x14	; 20
    d2f4:	fc 01       	movw	r30, r24
    d2f6:	80 81       	ld	r24, Z
    d2f8:	88 2f       	mov	r24, r24
    d2fa:	90 e0       	ldi	r25, 0x00	; 0
    d2fc:	82 2b       	or	r24, r18
    d2fe:	93 2b       	or	r25, r19
    d300:	cc 01       	movw	r24, r24
    d302:	a0 e0       	ldi	r26, 0x00	; 0
    d304:	b0 e0       	ldi	r27, 0x00	; 0
    d306:	ac 01       	movw	r20, r24
    d308:	33 27       	eor	r19, r19
    d30a:	22 27       	eor	r18, r18
    d30c:	8a 81       	ldd	r24, Y+2	; 0x02
    d30e:	9b 81       	ldd	r25, Y+3	; 0x03
    d310:	4b 96       	adiw	r24, 0x1b	; 27
    d312:	fc 01       	movw	r30, r24
    d314:	80 81       	ld	r24, Z
    d316:	88 2f       	mov	r24, r24
    d318:	90 e0       	ldi	r25, 0x00	; 0
    d31a:	78 2f       	mov	r23, r24
    d31c:	66 27       	eor	r22, r22
    d31e:	8a 81       	ldd	r24, Y+2	; 0x02
    d320:	9b 81       	ldd	r25, Y+3	; 0x03
    d322:	4a 96       	adiw	r24, 0x1a	; 26
    d324:	fc 01       	movw	r30, r24
    d326:	80 81       	ld	r24, Z
    d328:	88 2f       	mov	r24, r24
    d32a:	90 e0       	ldi	r25, 0x00	; 0
    d32c:	86 2b       	or	r24, r22
    d32e:	97 2b       	or	r25, r23
    d330:	cc 01       	movw	r24, r24
    d332:	a0 e0       	ldi	r26, 0x00	; 0
    d334:	b0 e0       	ldi	r27, 0x00	; 0
    d336:	82 2b       	or	r24, r18
    d338:	93 2b       	or	r25, r19
    d33a:	a4 2b       	or	r26, r20
    d33c:	b5 2b       	or	r27, r21
    d33e:	88 87       	std	Y+8, r24	; 0x08
    d340:	99 87       	std	Y+9, r25	; 0x09
    d342:	aa 87       	std	Y+10, r26	; 0x0a
    d344:	bb 87       	std	Y+11, r27	; 0x0b
			ST_CLUST(dir, 0);					/* cluster = 0 */
    d346:	8a 81       	ldd	r24, Y+2	; 0x02
    d348:	9b 81       	ldd	r25, Y+3	; 0x03
    d34a:	4a 96       	adiw	r24, 0x1a	; 26
    d34c:	fc 01       	movw	r30, r24
    d34e:	10 82       	st	Z, r1
    d350:	8a 81       	ldd	r24, Y+2	; 0x02
    d352:	9b 81       	ldd	r25, Y+3	; 0x03
    d354:	4b 96       	adiw	r24, 0x1b	; 27
    d356:	fc 01       	movw	r30, r24
    d358:	10 82       	st	Z, r1
    d35a:	8a 81       	ldd	r24, Y+2	; 0x02
    d35c:	9b 81       	ldd	r25, Y+3	; 0x03
    d35e:	44 96       	adiw	r24, 0x14	; 20
    d360:	fc 01       	movw	r30, r24
    d362:	10 82       	st	Z, r1
    d364:	8a 81       	ldd	r24, Y+2	; 0x02
    d366:	9b 81       	ldd	r25, Y+3	; 0x03
    d368:	45 96       	adiw	r24, 0x15	; 21
    d36a:	fc 01       	movw	r30, r24
    d36c:	10 82       	st	Z, r1
			dj.fs->wflag = 1;
    d36e:	8c 85       	ldd	r24, Y+12	; 0x0c
    d370:	9d 85       	ldd	r25, Y+13	; 0x0d
    d372:	21 e0       	ldi	r18, 0x01	; 1
    d374:	fc 01       	movw	r30, r24
    d376:	24 83       	std	Z+4, r18	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    d378:	88 85       	ldd	r24, Y+8	; 0x08
    d37a:	99 85       	ldd	r25, Y+9	; 0x09
    d37c:	aa 85       	ldd	r26, Y+10	; 0x0a
    d37e:	bb 85       	ldd	r27, Y+11	; 0x0b
    d380:	00 97       	sbiw	r24, 0x00	; 0
    d382:	a1 05       	cpc	r26, r1
    d384:	b1 05       	cpc	r27, r1
    d386:	09 f4       	brne	.+2      	; 0xd38a <f_open+0x242>
    d388:	59 c0       	rjmp	.+178    	; 0xd43c <f_open+0x2f4>
				dw = dj.fs->winsect;
    d38a:	8c 85       	ldd	r24, Y+12	; 0x0c
    d38c:	9d 85       	ldd	r25, Y+13	; 0x0d
    d38e:	fc 01       	movw	r30, r24
    d390:	82 a5       	ldd	r24, Z+42	; 0x2a
    d392:	93 a5       	ldd	r25, Z+43	; 0x2b
    d394:	a4 a5       	ldd	r26, Z+44	; 0x2c
    d396:	b5 a5       	ldd	r27, Z+45	; 0x2d
    d398:	8c 83       	std	Y+4, r24	; 0x04
    d39a:	9d 83       	std	Y+5, r25	; 0x05
    d39c:	ae 83       	std	Y+6, r26	; 0x06
    d39e:	bf 83       	std	Y+7, r27	; 0x07
				res = remove_chain(dj.fs, cl);
    d3a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    d3a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    d3a4:	28 85       	ldd	r18, Y+8	; 0x08
    d3a6:	39 85       	ldd	r19, Y+9	; 0x09
    d3a8:	4a 85       	ldd	r20, Y+10	; 0x0a
    d3aa:	5b 85       	ldd	r21, Y+11	; 0x0b
    d3ac:	ba 01       	movw	r22, r20
    d3ae:	a9 01       	movw	r20, r18
    d3b0:	0e 94 16 57 	call	0xae2c	; 0xae2c <remove_chain>
    d3b4:	89 83       	std	Y+1, r24	; 0x01
				if (res == FR_OK) {
    d3b6:	89 81       	ldd	r24, Y+1	; 0x01
    d3b8:	88 23       	and	r24, r24
    d3ba:	09 f0       	breq	.+2      	; 0xd3be <f_open+0x276>
    d3bc:	3f c0       	rjmp	.+126    	; 0xd43c <f_open+0x2f4>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    d3be:	2c 85       	ldd	r18, Y+12	; 0x0c
    d3c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    d3c2:	88 85       	ldd	r24, Y+8	; 0x08
    d3c4:	99 85       	ldd	r25, Y+9	; 0x09
    d3c6:	aa 85       	ldd	r26, Y+10	; 0x0a
    d3c8:	bb 85       	ldd	r27, Y+11	; 0x0b
    d3ca:	01 97       	sbiw	r24, 0x01	; 1
    d3cc:	a1 09       	sbc	r26, r1
    d3ce:	b1 09       	sbc	r27, r1
    d3d0:	f9 01       	movw	r30, r18
    d3d2:	82 87       	std	Z+10, r24	; 0x0a
    d3d4:	93 87       	std	Z+11, r25	; 0x0b
    d3d6:	a4 87       	std	Z+12, r26	; 0x0c
    d3d8:	b5 87       	std	Z+13, r27	; 0x0d
					res = move_window(dj.fs, dw);
    d3da:	8c 85       	ldd	r24, Y+12	; 0x0c
    d3dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    d3de:	2c 81       	ldd	r18, Y+4	; 0x04
    d3e0:	3d 81       	ldd	r19, Y+5	; 0x05
    d3e2:	4e 81       	ldd	r20, Y+6	; 0x06
    d3e4:	5f 81       	ldd	r21, Y+7	; 0x07
    d3e6:	ba 01       	movw	r22, r20
    d3e8:	a9 01       	movw	r20, r18
    d3ea:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    d3ee:	89 83       	std	Y+1, r24	; 0x01
    d3f0:	25 c0       	rjmp	.+74     	; 0xd43c <f_open+0x2f4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    d3f2:	89 81       	ldd	r24, Y+1	; 0x01
    d3f4:	88 23       	and	r24, r24
    d3f6:	11 f5       	brne	.+68     	; 0xd43c <f_open+0x2f4>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    d3f8:	8a 81       	ldd	r24, Y+2	; 0x02
    d3fa:	9b 81       	ldd	r25, Y+3	; 0x03
    d3fc:	0b 96       	adiw	r24, 0x0b	; 11
    d3fe:	fc 01       	movw	r30, r24
    d400:	80 81       	ld	r24, Z
    d402:	88 2f       	mov	r24, r24
    d404:	90 e0       	ldi	r25, 0x00	; 0
    d406:	80 71       	andi	r24, 0x10	; 16
    d408:	90 70       	andi	r25, 0x00	; 0
    d40a:	00 97       	sbiw	r24, 0x00	; 0
    d40c:	19 f0       	breq	.+6      	; 0xd414 <f_open+0x2cc>
				res = FR_NO_FILE;
    d40e:	84 e0       	ldi	r24, 0x04	; 4
    d410:	89 83       	std	Y+1, r24	; 0x01
    d412:	14 c0       	rjmp	.+40     	; 0xd43c <f_open+0x2f4>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    d414:	8a a9       	ldd	r24, Y+50	; 0x32
    d416:	88 2f       	mov	r24, r24
    d418:	90 e0       	ldi	r25, 0x00	; 0
    d41a:	82 70       	andi	r24, 0x02	; 2
    d41c:	90 70       	andi	r25, 0x00	; 0
    d41e:	00 97       	sbiw	r24, 0x00	; 0
    d420:	69 f0       	breq	.+26     	; 0xd43c <f_open+0x2f4>
    d422:	8a 81       	ldd	r24, Y+2	; 0x02
    d424:	9b 81       	ldd	r25, Y+3	; 0x03
    d426:	0b 96       	adiw	r24, 0x0b	; 11
    d428:	fc 01       	movw	r30, r24
    d42a:	80 81       	ld	r24, Z
    d42c:	88 2f       	mov	r24, r24
    d42e:	90 e0       	ldi	r25, 0x00	; 0
    d430:	81 70       	andi	r24, 0x01	; 1
    d432:	90 70       	andi	r25, 0x00	; 0
    d434:	88 23       	and	r24, r24
    d436:	11 f0       	breq	.+4      	; 0xd43c <f_open+0x2f4>
					res = FR_DENIED;
    d438:	87 e0       	ldi	r24, 0x07	; 7
    d43a:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	if (res == FR_OK) {
    d43c:	89 81       	ldd	r24, Y+1	; 0x01
    d43e:	88 23       	and	r24, r24
    d440:	f9 f4       	brne	.+62     	; 0xd480 <f_open+0x338>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    d442:	8a a9       	ldd	r24, Y+50	; 0x32
    d444:	88 2f       	mov	r24, r24
    d446:	90 e0       	ldi	r25, 0x00	; 0
    d448:	88 70       	andi	r24, 0x08	; 8
    d44a:	90 70       	andi	r25, 0x00	; 0
    d44c:	00 97       	sbiw	r24, 0x00	; 0
    d44e:	19 f0       	breq	.+6      	; 0xd456 <f_open+0x30e>
			mode |= FA__WRITTEN;
    d450:	8a a9       	ldd	r24, Y+50	; 0x32
    d452:	80 62       	ori	r24, 0x20	; 32
    d454:	8a ab       	std	Y+50, r24	; 0x32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    d456:	8c 85       	ldd	r24, Y+12	; 0x0c
    d458:	9d 85       	ldd	r25, Y+13	; 0x0d
    d45a:	fc 01       	movw	r30, r24
    d45c:	82 a5       	ldd	r24, Z+42	; 0x2a
    d45e:	93 a5       	ldd	r25, Z+43	; 0x2b
    d460:	a4 a5       	ldd	r26, Z+44	; 0x2c
    d462:	b5 a5       	ldd	r27, Z+45	; 0x2d
    d464:	2e a5       	ldd	r18, Y+46	; 0x2e
    d466:	3f a5       	ldd	r19, Y+47	; 0x2f
    d468:	f9 01       	movw	r30, r18
    d46a:	82 8f       	std	Z+26, r24	; 0x1a
    d46c:	93 8f       	std	Z+27, r25	; 0x1b
    d46e:	a4 8f       	std	Z+28, r26	; 0x1c
    d470:	b5 8f       	std	Z+29, r27	; 0x1d
		fp->dir_ptr = dir;
    d472:	8e a5       	ldd	r24, Y+46	; 0x2e
    d474:	9f a5       	ldd	r25, Y+47	; 0x2f
    d476:	2a 81       	ldd	r18, Y+2	; 0x02
    d478:	3b 81       	ldd	r19, Y+3	; 0x03
    d47a:	fc 01       	movw	r30, r24
    d47c:	37 8f       	std	Z+31, r19	; 0x1f
    d47e:	26 8f       	std	Z+30, r18	; 0x1e
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    d480:	89 81       	ldd	r24, Y+1	; 0x01
    d482:	88 23       	and	r24, r24
    d484:	09 f0       	breq	.+2      	; 0xd488 <f_open+0x340>
    d486:	9d c0       	rjmp	.+314    	; 0xd5c2 <f_open+0x47a>
		fp->flag = mode;					/* File access mode */
    d488:	8e a5       	ldd	r24, Y+46	; 0x2e
    d48a:	9f a5       	ldd	r25, Y+47	; 0x2f
    d48c:	2a a9       	ldd	r18, Y+50	; 0x32
    d48e:	fc 01       	movw	r30, r24
    d490:	24 83       	std	Z+4, r18	; 0x04
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    d492:	8a 81       	ldd	r24, Y+2	; 0x02
    d494:	9b 81       	ldd	r25, Y+3	; 0x03
    d496:	45 96       	adiw	r24, 0x15	; 21
    d498:	fc 01       	movw	r30, r24
    d49a:	80 81       	ld	r24, Z
    d49c:	88 2f       	mov	r24, r24
    d49e:	90 e0       	ldi	r25, 0x00	; 0
    d4a0:	38 2f       	mov	r19, r24
    d4a2:	22 27       	eor	r18, r18
    d4a4:	8a 81       	ldd	r24, Y+2	; 0x02
    d4a6:	9b 81       	ldd	r25, Y+3	; 0x03
    d4a8:	44 96       	adiw	r24, 0x14	; 20
    d4aa:	fc 01       	movw	r30, r24
    d4ac:	80 81       	ld	r24, Z
    d4ae:	88 2f       	mov	r24, r24
    d4b0:	90 e0       	ldi	r25, 0x00	; 0
    d4b2:	82 2b       	or	r24, r18
    d4b4:	93 2b       	or	r25, r19
    d4b6:	cc 01       	movw	r24, r24
    d4b8:	a0 e0       	ldi	r26, 0x00	; 0
    d4ba:	b0 e0       	ldi	r27, 0x00	; 0
    d4bc:	ac 01       	movw	r20, r24
    d4be:	33 27       	eor	r19, r19
    d4c0:	22 27       	eor	r18, r18
    d4c2:	8a 81       	ldd	r24, Y+2	; 0x02
    d4c4:	9b 81       	ldd	r25, Y+3	; 0x03
    d4c6:	4b 96       	adiw	r24, 0x1b	; 27
    d4c8:	fc 01       	movw	r30, r24
    d4ca:	80 81       	ld	r24, Z
    d4cc:	88 2f       	mov	r24, r24
    d4ce:	90 e0       	ldi	r25, 0x00	; 0
    d4d0:	78 2f       	mov	r23, r24
    d4d2:	66 27       	eor	r22, r22
    d4d4:	8a 81       	ldd	r24, Y+2	; 0x02
    d4d6:	9b 81       	ldd	r25, Y+3	; 0x03
    d4d8:	4a 96       	adiw	r24, 0x1a	; 26
    d4da:	fc 01       	movw	r30, r24
    d4dc:	80 81       	ld	r24, Z
    d4de:	88 2f       	mov	r24, r24
    d4e0:	90 e0       	ldi	r25, 0x00	; 0
    d4e2:	86 2b       	or	r24, r22
    d4e4:	97 2b       	or	r25, r23
    d4e6:	cc 01       	movw	r24, r24
    d4e8:	a0 e0       	ldi	r26, 0x00	; 0
    d4ea:	b0 e0       	ldi	r27, 0x00	; 0
    d4ec:	82 2b       	or	r24, r18
    d4ee:	93 2b       	or	r25, r19
    d4f0:	a4 2b       	or	r26, r20
    d4f2:	b5 2b       	or	r27, r21
    d4f4:	2e a5       	ldd	r18, Y+46	; 0x2e
    d4f6:	3f a5       	ldd	r19, Y+47	; 0x2f
    d4f8:	f9 01       	movw	r30, r18
    d4fa:	86 87       	std	Z+14, r24	; 0x0e
    d4fc:	97 87       	std	Z+15, r25	; 0x0f
    d4fe:	a0 8b       	std	Z+16, r26	; 0x10
    d500:	b1 8b       	std	Z+17, r27	; 0x11
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    d502:	8a 81       	ldd	r24, Y+2	; 0x02
    d504:	9b 81       	ldd	r25, Y+3	; 0x03
    d506:	4f 96       	adiw	r24, 0x1f	; 31
    d508:	fc 01       	movw	r30, r24
    d50a:	80 81       	ld	r24, Z
    d50c:	88 2f       	mov	r24, r24
    d50e:	90 e0       	ldi	r25, 0x00	; 0
    d510:	a0 e0       	ldi	r26, 0x00	; 0
    d512:	b0 e0       	ldi	r27, 0x00	; 0
    d514:	58 2f       	mov	r21, r24
    d516:	44 27       	eor	r20, r20
    d518:	33 27       	eor	r19, r19
    d51a:	22 27       	eor	r18, r18
    d51c:	8a 81       	ldd	r24, Y+2	; 0x02
    d51e:	9b 81       	ldd	r25, Y+3	; 0x03
    d520:	4e 96       	adiw	r24, 0x1e	; 30
    d522:	fc 01       	movw	r30, r24
    d524:	80 81       	ld	r24, Z
    d526:	88 2f       	mov	r24, r24
    d528:	90 e0       	ldi	r25, 0x00	; 0
    d52a:	a0 e0       	ldi	r26, 0x00	; 0
    d52c:	b0 e0       	ldi	r27, 0x00	; 0
    d52e:	dc 01       	movw	r26, r24
    d530:	99 27       	eor	r25, r25
    d532:	88 27       	eor	r24, r24
    d534:	28 2b       	or	r18, r24
    d536:	39 2b       	or	r19, r25
    d538:	4a 2b       	or	r20, r26
    d53a:	5b 2b       	or	r21, r27
    d53c:	8a 81       	ldd	r24, Y+2	; 0x02
    d53e:	9b 81       	ldd	r25, Y+3	; 0x03
    d540:	4d 96       	adiw	r24, 0x1d	; 29
    d542:	fc 01       	movw	r30, r24
    d544:	80 81       	ld	r24, Z
    d546:	88 2f       	mov	r24, r24
    d548:	90 e0       	ldi	r25, 0x00	; 0
    d54a:	98 2f       	mov	r25, r24
    d54c:	88 27       	eor	r24, r24
    d54e:	cc 01       	movw	r24, r24
    d550:	a0 e0       	ldi	r26, 0x00	; 0
    d552:	b0 e0       	ldi	r27, 0x00	; 0
    d554:	28 2b       	or	r18, r24
    d556:	39 2b       	or	r19, r25
    d558:	4a 2b       	or	r20, r26
    d55a:	5b 2b       	or	r21, r27
    d55c:	8a 81       	ldd	r24, Y+2	; 0x02
    d55e:	9b 81       	ldd	r25, Y+3	; 0x03
    d560:	4c 96       	adiw	r24, 0x1c	; 28
    d562:	fc 01       	movw	r30, r24
    d564:	80 81       	ld	r24, Z
    d566:	88 2f       	mov	r24, r24
    d568:	90 e0       	ldi	r25, 0x00	; 0
    d56a:	a0 e0       	ldi	r26, 0x00	; 0
    d56c:	b0 e0       	ldi	r27, 0x00	; 0
    d56e:	82 2b       	or	r24, r18
    d570:	93 2b       	or	r25, r19
    d572:	a4 2b       	or	r26, r20
    d574:	b5 2b       	or	r27, r21
    d576:	2e a5       	ldd	r18, Y+46	; 0x2e
    d578:	3f a5       	ldd	r19, Y+47	; 0x2f
    d57a:	f9 01       	movw	r30, r18
    d57c:	82 87       	std	Z+10, r24	; 0x0a
    d57e:	93 87       	std	Z+11, r25	; 0x0b
    d580:	a4 87       	std	Z+12, r26	; 0x0c
    d582:	b5 87       	std	Z+13, r27	; 0x0d
		fp->fptr = 0;						/* File pointer */
    d584:	8e a5       	ldd	r24, Y+46	; 0x2e
    d586:	9f a5       	ldd	r25, Y+47	; 0x2f
    d588:	fc 01       	movw	r30, r24
    d58a:	16 82       	std	Z+6, r1	; 0x06
    d58c:	17 82       	std	Z+7, r1	; 0x07
    d58e:	10 86       	std	Z+8, r1	; 0x08
    d590:	11 86       	std	Z+9, r1	; 0x09
		fp->dsect = 0;
    d592:	8e a5       	ldd	r24, Y+46	; 0x2e
    d594:	9f a5       	ldd	r25, Y+47	; 0x2f
    d596:	fc 01       	movw	r30, r24
    d598:	16 8a       	std	Z+22, r1	; 0x16
    d59a:	17 8a       	std	Z+23, r1	; 0x17
    d59c:	10 8e       	std	Z+24, r1	; 0x18
    d59e:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    d5a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    d5a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    d5a4:	8e a5       	ldd	r24, Y+46	; 0x2e
    d5a6:	9f a5       	ldd	r25, Y+47	; 0x2f
    d5a8:	fc 01       	movw	r30, r24
    d5aa:	31 83       	std	Z+1, r19	; 0x01
    d5ac:	20 83       	st	Z, r18
    d5ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    d5b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    d5b2:	fc 01       	movw	r30, r24
    d5b4:	26 81       	ldd	r18, Z+6	; 0x06
    d5b6:	37 81       	ldd	r19, Z+7	; 0x07
    d5b8:	8e a5       	ldd	r24, Y+46	; 0x2e
    d5ba:	9f a5       	ldd	r25, Y+47	; 0x2f
    d5bc:	fc 01       	movw	r30, r24
    d5be:	33 83       	std	Z+3, r19	; 0x03
    d5c0:	22 83       	std	Z+2, r18	; 0x02
	}

	LEAVE_FF(dj.fs, res);
    d5c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    d5c4:	e2 96       	adiw	r28, 0x32	; 50
    d5c6:	0f b6       	in	r0, 0x3f	; 63
    d5c8:	f8 94       	cli
    d5ca:	de bf       	out	0x3e, r29	; 62
    d5cc:	0f be       	out	0x3f, r0	; 63
    d5ce:	cd bf       	out	0x3d, r28	; 61
    d5d0:	cf 91       	pop	r28
    d5d2:	df 91       	pop	r29
    d5d4:	08 95       	ret

0000d5d6 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    d5d6:	ef 92       	push	r14
    d5d8:	ff 92       	push	r15
    d5da:	0f 93       	push	r16
    d5dc:	1f 93       	push	r17
    d5de:	df 93       	push	r29
    d5e0:	cf 93       	push	r28
    d5e2:	cd b7       	in	r28, 0x3d	; 61
    d5e4:	de b7       	in	r29, 0x3e	; 62
    d5e6:	6c 97       	sbiw	r28, 0x1c	; 28
    d5e8:	0f b6       	in	r0, 0x3f	; 63
    d5ea:	f8 94       	cli
    d5ec:	de bf       	out	0x3e, r29	; 62
    d5ee:	0f be       	out	0x3f, r0	; 63
    d5f0:	cd bf       	out	0x3d, r28	; 61
    d5f2:	9e 8b       	std	Y+22, r25	; 0x16
    d5f4:	8d 8b       	std	Y+21, r24	; 0x15
    d5f6:	78 8f       	std	Y+24, r23	; 0x18
    d5f8:	6f 8b       	std	Y+23, r22	; 0x17
    d5fa:	5a 8f       	std	Y+26, r21	; 0x1a
    d5fc:	49 8f       	std	Y+25, r20	; 0x19
    d5fe:	3c 8f       	std	Y+28, r19	; 0x1c
    d600:	2b 8f       	std	Y+27, r18	; 0x1b
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    d602:	8f 89       	ldd	r24, Y+23	; 0x17
    d604:	98 8d       	ldd	r25, Y+24	; 0x18
    d606:	9a 87       	std	Y+10, r25	; 0x0a
    d608:	89 87       	std	Y+9, r24	; 0x09


	*br = 0;	/* Initialize byte counter */
    d60a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d60c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d60e:	fc 01       	movw	r30, r24
    d610:	11 82       	std	Z+1, r1	; 0x01
    d612:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);				/* Check validity */
    d614:	8d 89       	ldd	r24, Y+21	; 0x15
    d616:	9e 89       	ldd	r25, Y+22	; 0x16
    d618:	fc 01       	movw	r30, r24
    d61a:	80 81       	ld	r24, Z
    d61c:	91 81       	ldd	r25, Z+1	; 0x01
    d61e:	2d 89       	ldd	r18, Y+21	; 0x15
    d620:	3e 89       	ldd	r19, Y+22	; 0x16
    d622:	f9 01       	movw	r30, r18
    d624:	22 81       	ldd	r18, Z+2	; 0x02
    d626:	33 81       	ldd	r19, Z+3	; 0x03
    d628:	b9 01       	movw	r22, r18
    d62a:	0e 94 2e 68 	call	0xd05c	; 0xd05c <validate>
    d62e:	8b 87       	std	Y+11, r24	; 0x0b
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    d630:	8b 85       	ldd	r24, Y+11	; 0x0b
    d632:	88 23       	and	r24, r24
    d634:	11 f0       	breq	.+4      	; 0xd63a <f_read+0x64>
    d636:	8b 85       	ldd	r24, Y+11	; 0x0b
    d638:	53 c2       	rjmp	.+1190   	; 0xdae0 <f_read+0x50a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    d63a:	8d 89       	ldd	r24, Y+21	; 0x15
    d63c:	9e 89       	ldd	r25, Y+22	; 0x16
    d63e:	fc 01       	movw	r30, r24
    d640:	84 81       	ldd	r24, Z+4	; 0x04
    d642:	88 23       	and	r24, r24
    d644:	14 f4       	brge	.+4      	; 0xd64a <f_read+0x74>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    d646:	82 e0       	ldi	r24, 0x02	; 2
    d648:	4b c2       	rjmp	.+1174   	; 0xdae0 <f_read+0x50a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    d64a:	8d 89       	ldd	r24, Y+21	; 0x15
    d64c:	9e 89       	ldd	r25, Y+22	; 0x16
    d64e:	fc 01       	movw	r30, r24
    d650:	84 81       	ldd	r24, Z+4	; 0x04
    d652:	88 2f       	mov	r24, r24
    d654:	90 e0       	ldi	r25, 0x00	; 0
    d656:	81 70       	andi	r24, 0x01	; 1
    d658:	90 70       	andi	r25, 0x00	; 0
    d65a:	00 97       	sbiw	r24, 0x00	; 0
    d65c:	11 f4       	brne	.+4      	; 0xd662 <f_read+0x8c>
		LEAVE_FF(fp->fs, FR_DENIED);
    d65e:	87 e0       	ldi	r24, 0x07	; 7
    d660:	3f c2       	rjmp	.+1150   	; 0xdae0 <f_read+0x50a>
	remain = fp->fsize - fp->fptr;
    d662:	8d 89       	ldd	r24, Y+21	; 0x15
    d664:	9e 89       	ldd	r25, Y+22	; 0x16
    d666:	fc 01       	movw	r30, r24
    d668:	22 85       	ldd	r18, Z+10	; 0x0a
    d66a:	33 85       	ldd	r19, Z+11	; 0x0b
    d66c:	44 85       	ldd	r20, Z+12	; 0x0c
    d66e:	55 85       	ldd	r21, Z+13	; 0x0d
    d670:	8d 89       	ldd	r24, Y+21	; 0x15
    d672:	9e 89       	ldd	r25, Y+22	; 0x16
    d674:	fc 01       	movw	r30, r24
    d676:	86 81       	ldd	r24, Z+6	; 0x06
    d678:	97 81       	ldd	r25, Z+7	; 0x07
    d67a:	a0 85       	ldd	r26, Z+8	; 0x08
    d67c:	b1 85       	ldd	r27, Z+9	; 0x09
    d67e:	79 01       	movw	r14, r18
    d680:	8a 01       	movw	r16, r20
    d682:	e8 1a       	sub	r14, r24
    d684:	f9 0a       	sbc	r15, r25
    d686:	0a 0b       	sbc	r16, r26
    d688:	1b 0b       	sbc	r17, r27
    d68a:	d8 01       	movw	r26, r16
    d68c:	c7 01       	movw	r24, r14
    d68e:	8c 87       	std	Y+12, r24	; 0x0c
    d690:	9d 87       	std	Y+13, r25	; 0x0d
    d692:	ae 87       	std	Y+14, r26	; 0x0e
    d694:	bf 87       	std	Y+15, r27	; 0x0f
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    d696:	89 8d       	ldd	r24, Y+25	; 0x19
    d698:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d69a:	9c 01       	movw	r18, r24
    d69c:	40 e0       	ldi	r20, 0x00	; 0
    d69e:	50 e0       	ldi	r21, 0x00	; 0
    d6a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    d6a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    d6a4:	ae 85       	ldd	r26, Y+14	; 0x0e
    d6a6:	bf 85       	ldd	r27, Y+15	; 0x0f
    d6a8:	82 17       	cp	r24, r18
    d6aa:	93 07       	cpc	r25, r19
    d6ac:	a4 07       	cpc	r26, r20
    d6ae:	b5 07       	cpc	r27, r21
    d6b0:	08 f0       	brcs	.+2      	; 0xd6b4 <f_read+0xde>
    d6b2:	10 c2       	rjmp	.+1056   	; 0xdad4 <f_read+0x4fe>
    d6b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    d6b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    d6b8:	9a 8f       	std	Y+26, r25	; 0x1a
    d6ba:	89 8f       	std	Y+25, r24	; 0x19

	for ( ;  btr;								/* Repeat until all data read */
    d6bc:	0b c2       	rjmp	.+1046   	; 0xdad4 <f_read+0x4fe>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    d6be:	8d 89       	ldd	r24, Y+21	; 0x15
    d6c0:	9e 89       	ldd	r25, Y+22	; 0x16
    d6c2:	fc 01       	movw	r30, r24
    d6c4:	86 81       	ldd	r24, Z+6	; 0x06
    d6c6:	97 81       	ldd	r25, Z+7	; 0x07
    d6c8:	a0 85       	ldd	r26, Z+8	; 0x08
    d6ca:	b1 85       	ldd	r27, Z+9	; 0x09
    d6cc:	91 70       	andi	r25, 0x01	; 1
    d6ce:	a0 70       	andi	r26, 0x00	; 0
    d6d0:	b0 70       	andi	r27, 0x00	; 0
    d6d2:	00 97       	sbiw	r24, 0x00	; 0
    d6d4:	a1 05       	cpc	r26, r1
    d6d6:	b1 05       	cpc	r27, r1
    d6d8:	09 f0       	breq	.+2      	; 0xd6dc <f_read+0x106>
    d6da:	71 c1       	rjmp	.+738    	; 0xd9be <f_read+0x3e8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    d6dc:	8d 89       	ldd	r24, Y+21	; 0x15
    d6de:	9e 89       	ldd	r25, Y+22	; 0x16
    d6e0:	fc 01       	movw	r30, r24
    d6e2:	86 81       	ldd	r24, Z+6	; 0x06
    d6e4:	97 81       	ldd	r25, Z+7	; 0x07
    d6e6:	a0 85       	ldd	r26, Z+8	; 0x08
    d6e8:	b1 85       	ldd	r27, Z+9	; 0x09
    d6ea:	07 2e       	mov	r0, r23
    d6ec:	79 e0       	ldi	r23, 0x09	; 9
    d6ee:	b6 95       	lsr	r27
    d6f0:	a7 95       	ror	r26
    d6f2:	97 95       	ror	r25
    d6f4:	87 95       	ror	r24
    d6f6:	7a 95       	dec	r23
    d6f8:	d1 f7       	brne	.-12     	; 0xd6ee <f_read+0x118>
    d6fa:	70 2d       	mov	r23, r0
    d6fc:	28 2f       	mov	r18, r24
    d6fe:	8d 89       	ldd	r24, Y+21	; 0x15
    d700:	9e 89       	ldd	r25, Y+22	; 0x16
    d702:	fc 01       	movw	r30, r24
    d704:	80 81       	ld	r24, Z
    d706:	91 81       	ldd	r25, Z+1	; 0x01
    d708:	fc 01       	movw	r30, r24
    d70a:	82 81       	ldd	r24, Z+2	; 0x02
    d70c:	81 50       	subi	r24, 0x01	; 1
    d70e:	82 23       	and	r24, r18
    d710:	88 8b       	std	Y+16, r24	; 0x10
			if (!csect) {						/* On the cluster boundary? */
    d712:	88 89       	ldd	r24, Y+16	; 0x10
    d714:	88 23       	and	r24, r24
    d716:	09 f0       	breq	.+2      	; 0xd71a <f_read+0x144>
    d718:	65 c0       	rjmp	.+202    	; 0xd7e4 <f_read+0x20e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    d71a:	8d 89       	ldd	r24, Y+21	; 0x15
    d71c:	9e 89       	ldd	r25, Y+22	; 0x16
    d71e:	fc 01       	movw	r30, r24
    d720:	86 81       	ldd	r24, Z+6	; 0x06
    d722:	97 81       	ldd	r25, Z+7	; 0x07
    d724:	a0 85       	ldd	r26, Z+8	; 0x08
    d726:	b1 85       	ldd	r27, Z+9	; 0x09
    d728:	00 97       	sbiw	r24, 0x00	; 0
    d72a:	a1 05       	cpc	r26, r1
    d72c:	b1 05       	cpc	r27, r1
    d72e:	61 f4       	brne	.+24     	; 0xd748 <f_read+0x172>
					clst = fp->sclust;			/* Follow from the origin */
    d730:	8d 89       	ldd	r24, Y+21	; 0x15
    d732:	9e 89       	ldd	r25, Y+22	; 0x16
    d734:	fc 01       	movw	r30, r24
    d736:	86 85       	ldd	r24, Z+14	; 0x0e
    d738:	97 85       	ldd	r25, Z+15	; 0x0f
    d73a:	a0 89       	ldd	r26, Z+16	; 0x10
    d73c:	b1 89       	ldd	r27, Z+17	; 0x11
    d73e:	89 83       	std	Y+1, r24	; 0x01
    d740:	9a 83       	std	Y+2, r25	; 0x02
    d742:	ab 83       	std	Y+3, r26	; 0x03
    d744:	bc 83       	std	Y+4, r27	; 0x04
    d746:	16 c0       	rjmp	.+44     	; 0xd774 <f_read+0x19e>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    d748:	8d 89       	ldd	r24, Y+21	; 0x15
    d74a:	9e 89       	ldd	r25, Y+22	; 0x16
    d74c:	fc 01       	movw	r30, r24
    d74e:	80 81       	ld	r24, Z
    d750:	91 81       	ldd	r25, Z+1	; 0x01
    d752:	2d 89       	ldd	r18, Y+21	; 0x15
    d754:	3e 89       	ldd	r19, Y+22	; 0x16
    d756:	f9 01       	movw	r30, r18
    d758:	22 89       	ldd	r18, Z+18	; 0x12
    d75a:	33 89       	ldd	r19, Z+19	; 0x13
    d75c:	44 89       	ldd	r20, Z+20	; 0x14
    d75e:	55 89       	ldd	r21, Z+21	; 0x15
    d760:	ba 01       	movw	r22, r20
    d762:	a9 01       	movw	r20, r18
    d764:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    d768:	dc 01       	movw	r26, r24
    d76a:	cb 01       	movw	r24, r22
    d76c:	89 83       	std	Y+1, r24	; 0x01
    d76e:	9a 83       	std	Y+2, r25	; 0x02
    d770:	ab 83       	std	Y+3, r26	; 0x03
    d772:	bc 83       	std	Y+4, r27	; 0x04
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    d774:	89 81       	ldd	r24, Y+1	; 0x01
    d776:	9a 81       	ldd	r25, Y+2	; 0x02
    d778:	ab 81       	ldd	r26, Y+3	; 0x03
    d77a:	bc 81       	ldd	r27, Y+4	; 0x04
    d77c:	82 30       	cpi	r24, 0x02	; 2
    d77e:	91 05       	cpc	r25, r1
    d780:	a1 05       	cpc	r26, r1
    d782:	b1 05       	cpc	r27, r1
    d784:	60 f4       	brcc	.+24     	; 0xd79e <f_read+0x1c8>
    d786:	8d 89       	ldd	r24, Y+21	; 0x15
    d788:	9e 89       	ldd	r25, Y+22	; 0x16
    d78a:	fc 01       	movw	r30, r24
    d78c:	84 81       	ldd	r24, Z+4	; 0x04
    d78e:	28 2f       	mov	r18, r24
    d790:	20 68       	ori	r18, 0x80	; 128
    d792:	8d 89       	ldd	r24, Y+21	; 0x15
    d794:	9e 89       	ldd	r25, Y+22	; 0x16
    d796:	fc 01       	movw	r30, r24
    d798:	24 83       	std	Z+4, r18	; 0x04
    d79a:	82 e0       	ldi	r24, 0x02	; 2
    d79c:	a1 c1       	rjmp	.+834    	; 0xdae0 <f_read+0x50a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    d79e:	89 81       	ldd	r24, Y+1	; 0x01
    d7a0:	9a 81       	ldd	r25, Y+2	; 0x02
    d7a2:	ab 81       	ldd	r26, Y+3	; 0x03
    d7a4:	bc 81       	ldd	r27, Y+4	; 0x04
    d7a6:	8f 3f       	cpi	r24, 0xFF	; 255
    d7a8:	ff ef       	ldi	r31, 0xFF	; 255
    d7aa:	9f 07       	cpc	r25, r31
    d7ac:	ff ef       	ldi	r31, 0xFF	; 255
    d7ae:	af 07       	cpc	r26, r31
    d7b0:	ff ef       	ldi	r31, 0xFF	; 255
    d7b2:	bf 07       	cpc	r27, r31
    d7b4:	61 f4       	brne	.+24     	; 0xd7ce <f_read+0x1f8>
    d7b6:	8d 89       	ldd	r24, Y+21	; 0x15
    d7b8:	9e 89       	ldd	r25, Y+22	; 0x16
    d7ba:	fc 01       	movw	r30, r24
    d7bc:	84 81       	ldd	r24, Z+4	; 0x04
    d7be:	28 2f       	mov	r18, r24
    d7c0:	20 68       	ori	r18, 0x80	; 128
    d7c2:	8d 89       	ldd	r24, Y+21	; 0x15
    d7c4:	9e 89       	ldd	r25, Y+22	; 0x16
    d7c6:	fc 01       	movw	r30, r24
    d7c8:	24 83       	std	Z+4, r18	; 0x04
    d7ca:	81 e0       	ldi	r24, 0x01	; 1
    d7cc:	89 c1       	rjmp	.+786    	; 0xdae0 <f_read+0x50a>
				fp->clust = clst;				/* Update current cluster */
    d7ce:	2d 89       	ldd	r18, Y+21	; 0x15
    d7d0:	3e 89       	ldd	r19, Y+22	; 0x16
    d7d2:	89 81       	ldd	r24, Y+1	; 0x01
    d7d4:	9a 81       	ldd	r25, Y+2	; 0x02
    d7d6:	ab 81       	ldd	r26, Y+3	; 0x03
    d7d8:	bc 81       	ldd	r27, Y+4	; 0x04
    d7da:	f9 01       	movw	r30, r18
    d7dc:	82 8b       	std	Z+18, r24	; 0x12
    d7de:	93 8b       	std	Z+19, r25	; 0x13
    d7e0:	a4 8b       	std	Z+20, r26	; 0x14
    d7e2:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    d7e4:	8d 89       	ldd	r24, Y+21	; 0x15
    d7e6:	9e 89       	ldd	r25, Y+22	; 0x16
    d7e8:	fc 01       	movw	r30, r24
    d7ea:	80 81       	ld	r24, Z
    d7ec:	91 81       	ldd	r25, Z+1	; 0x01
    d7ee:	2d 89       	ldd	r18, Y+21	; 0x15
    d7f0:	3e 89       	ldd	r19, Y+22	; 0x16
    d7f2:	f9 01       	movw	r30, r18
    d7f4:	22 89       	ldd	r18, Z+18	; 0x12
    d7f6:	33 89       	ldd	r19, Z+19	; 0x13
    d7f8:	44 89       	ldd	r20, Z+20	; 0x14
    d7fa:	55 89       	ldd	r21, Z+21	; 0x15
    d7fc:	ba 01       	movw	r22, r20
    d7fe:	a9 01       	movw	r20, r18
    d800:	0e 94 41 53 	call	0xa682	; 0xa682 <clust2sect>
    d804:	dc 01       	movw	r26, r24
    d806:	cb 01       	movw	r24, r22
    d808:	89 8b       	std	Y+17, r24	; 0x11
    d80a:	9a 8b       	std	Y+18, r25	; 0x12
    d80c:	ab 8b       	std	Y+19, r26	; 0x13
    d80e:	bc 8b       	std	Y+20, r27	; 0x14
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    d810:	89 89       	ldd	r24, Y+17	; 0x11
    d812:	9a 89       	ldd	r25, Y+18	; 0x12
    d814:	ab 89       	ldd	r26, Y+19	; 0x13
    d816:	bc 89       	ldd	r27, Y+20	; 0x14
    d818:	00 97       	sbiw	r24, 0x00	; 0
    d81a:	a1 05       	cpc	r26, r1
    d81c:	b1 05       	cpc	r27, r1
    d81e:	61 f4       	brne	.+24     	; 0xd838 <f_read+0x262>
    d820:	8d 89       	ldd	r24, Y+21	; 0x15
    d822:	9e 89       	ldd	r25, Y+22	; 0x16
    d824:	fc 01       	movw	r30, r24
    d826:	84 81       	ldd	r24, Z+4	; 0x04
    d828:	28 2f       	mov	r18, r24
    d82a:	20 68       	ori	r18, 0x80	; 128
    d82c:	8d 89       	ldd	r24, Y+21	; 0x15
    d82e:	9e 89       	ldd	r25, Y+22	; 0x16
    d830:	fc 01       	movw	r30, r24
    d832:	24 83       	std	Z+4, r18	; 0x04
    d834:	82 e0       	ldi	r24, 0x02	; 2
    d836:	54 c1       	rjmp	.+680    	; 0xdae0 <f_read+0x50a>
			sect += csect;
    d838:	88 89       	ldd	r24, Y+16	; 0x10
    d83a:	88 2f       	mov	r24, r24
    d83c:	90 e0       	ldi	r25, 0x00	; 0
    d83e:	a0 e0       	ldi	r26, 0x00	; 0
    d840:	b0 e0       	ldi	r27, 0x00	; 0
    d842:	29 89       	ldd	r18, Y+17	; 0x11
    d844:	3a 89       	ldd	r19, Y+18	; 0x12
    d846:	4b 89       	ldd	r20, Y+19	; 0x13
    d848:	5c 89       	ldd	r21, Y+20	; 0x14
    d84a:	82 0f       	add	r24, r18
    d84c:	93 1f       	adc	r25, r19
    d84e:	a4 1f       	adc	r26, r20
    d850:	b5 1f       	adc	r27, r21
    d852:	89 8b       	std	Y+17, r24	; 0x11
    d854:	9a 8b       	std	Y+18, r25	; 0x12
    d856:	ab 8b       	std	Y+19, r26	; 0x13
    d858:	bc 8b       	std	Y+20, r27	; 0x14
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    d85a:	89 8d       	ldd	r24, Y+25	; 0x19
    d85c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d85e:	89 2f       	mov	r24, r25
    d860:	99 27       	eor	r25, r25
    d862:	86 95       	lsr	r24
    d864:	98 87       	std	Y+8, r25	; 0x08
    d866:	8f 83       	std	Y+7, r24	; 0x07
			if (cc) {							/* Read maximum contiguous sectors directly */
    d868:	8f 81       	ldd	r24, Y+7	; 0x07
    d86a:	98 85       	ldd	r25, Y+8	; 0x08
    d86c:	00 97       	sbiw	r24, 0x00	; 0
    d86e:	09 f4       	brne	.+2      	; 0xd872 <f_read+0x29c>
    d870:	9b c0       	rjmp	.+310    	; 0xd9a8 <f_read+0x3d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    d872:	88 89       	ldd	r24, Y+16	; 0x10
    d874:	28 2f       	mov	r18, r24
    d876:	30 e0       	ldi	r19, 0x00	; 0
    d878:	8f 81       	ldd	r24, Y+7	; 0x07
    d87a:	98 85       	ldd	r25, Y+8	; 0x08
    d87c:	28 0f       	add	r18, r24
    d87e:	39 1f       	adc	r19, r25
    d880:	8d 89       	ldd	r24, Y+21	; 0x15
    d882:	9e 89       	ldd	r25, Y+22	; 0x16
    d884:	fc 01       	movw	r30, r24
    d886:	80 81       	ld	r24, Z
    d888:	91 81       	ldd	r25, Z+1	; 0x01
    d88a:	fc 01       	movw	r30, r24
    d88c:	82 81       	ldd	r24, Z+2	; 0x02
    d88e:	88 2f       	mov	r24, r24
    d890:	90 e0       	ldi	r25, 0x00	; 0
    d892:	82 17       	cp	r24, r18
    d894:	93 07       	cpc	r25, r19
    d896:	90 f4       	brcc	.+36     	; 0xd8bc <f_read+0x2e6>
					cc = fp->fs->csize - csect;
    d898:	8d 89       	ldd	r24, Y+21	; 0x15
    d89a:	9e 89       	ldd	r25, Y+22	; 0x16
    d89c:	fc 01       	movw	r30, r24
    d89e:	80 81       	ld	r24, Z
    d8a0:	91 81       	ldd	r25, Z+1	; 0x01
    d8a2:	fc 01       	movw	r30, r24
    d8a4:	82 81       	ldd	r24, Z+2	; 0x02
    d8a6:	28 2f       	mov	r18, r24
    d8a8:	30 e0       	ldi	r19, 0x00	; 0
    d8aa:	88 89       	ldd	r24, Y+16	; 0x10
    d8ac:	88 2f       	mov	r24, r24
    d8ae:	90 e0       	ldi	r25, 0x00	; 0
    d8b0:	79 01       	movw	r14, r18
    d8b2:	e8 1a       	sub	r14, r24
    d8b4:	f9 0a       	sbc	r15, r25
    d8b6:	c7 01       	movw	r24, r14
    d8b8:	98 87       	std	Y+8, r25	; 0x08
    d8ba:	8f 83       	std	Y+7, r24	; 0x07
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    d8bc:	8d 89       	ldd	r24, Y+21	; 0x15
    d8be:	9e 89       	ldd	r25, Y+22	; 0x16
    d8c0:	fc 01       	movw	r30, r24
    d8c2:	80 81       	ld	r24, Z
    d8c4:	91 81       	ldd	r25, Z+1	; 0x01
    d8c6:	fc 01       	movw	r30, r24
    d8c8:	81 81       	ldd	r24, Z+1	; 0x01
    d8ca:	9f 81       	ldd	r25, Y+7	; 0x07
    d8cc:	69 85       	ldd	r22, Y+9	; 0x09
    d8ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    d8d0:	29 89       	ldd	r18, Y+17	; 0x11
    d8d2:	3a 89       	ldd	r19, Y+18	; 0x12
    d8d4:	4b 89       	ldd	r20, Y+19	; 0x13
    d8d6:	5c 89       	ldd	r21, Y+20	; 0x14
    d8d8:	09 2f       	mov	r16, r25
    d8da:	0e 94 3d 82 	call	0x1047a	; 0x1047a <disk_read>
    d8de:	88 23       	and	r24, r24
    d8e0:	61 f0       	breq	.+24     	; 0xd8fa <f_read+0x324>
					ABORT(fp->fs, FR_DISK_ERR);
    d8e2:	8d 89       	ldd	r24, Y+21	; 0x15
    d8e4:	9e 89       	ldd	r25, Y+22	; 0x16
    d8e6:	fc 01       	movw	r30, r24
    d8e8:	84 81       	ldd	r24, Z+4	; 0x04
    d8ea:	28 2f       	mov	r18, r24
    d8ec:	20 68       	ori	r18, 0x80	; 128
    d8ee:	8d 89       	ldd	r24, Y+21	; 0x15
    d8f0:	9e 89       	ldd	r25, Y+22	; 0x16
    d8f2:	fc 01       	movw	r30, r24
    d8f4:	24 83       	std	Z+4, r18	; 0x04
    d8f6:	81 e0       	ldi	r24, 0x01	; 1
    d8f8:	f3 c0       	rjmp	.+486    	; 0xdae0 <f_read+0x50a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    d8fa:	8d 89       	ldd	r24, Y+21	; 0x15
    d8fc:	9e 89       	ldd	r25, Y+22	; 0x16
    d8fe:	fc 01       	movw	r30, r24
    d900:	80 81       	ld	r24, Z
    d902:	91 81       	ldd	r25, Z+1	; 0x01
    d904:	fc 01       	movw	r30, r24
    d906:	84 81       	ldd	r24, Z+4	; 0x04
    d908:	88 23       	and	r24, r24
    d90a:	09 f4       	brne	.+2      	; 0xd90e <f_read+0x338>
    d90c:	45 c0       	rjmp	.+138    	; 0xd998 <f_read+0x3c2>
    d90e:	8d 89       	ldd	r24, Y+21	; 0x15
    d910:	9e 89       	ldd	r25, Y+22	; 0x16
    d912:	fc 01       	movw	r30, r24
    d914:	80 81       	ld	r24, Z
    d916:	91 81       	ldd	r25, Z+1	; 0x01
    d918:	fc 01       	movw	r30, r24
    d91a:	22 a5       	ldd	r18, Z+42	; 0x2a
    d91c:	33 a5       	ldd	r19, Z+43	; 0x2b
    d91e:	44 a5       	ldd	r20, Z+44	; 0x2c
    d920:	55 a5       	ldd	r21, Z+45	; 0x2d
    d922:	89 89       	ldd	r24, Y+17	; 0x11
    d924:	9a 89       	ldd	r25, Y+18	; 0x12
    d926:	ab 89       	ldd	r26, Y+19	; 0x13
    d928:	bc 89       	ldd	r27, Y+20	; 0x14
    d92a:	28 1b       	sub	r18, r24
    d92c:	39 0b       	sbc	r19, r25
    d92e:	4a 0b       	sbc	r20, r26
    d930:	5b 0b       	sbc	r21, r27
    d932:	8f 81       	ldd	r24, Y+7	; 0x07
    d934:	98 85       	ldd	r25, Y+8	; 0x08
    d936:	cc 01       	movw	r24, r24
    d938:	a0 e0       	ldi	r26, 0x00	; 0
    d93a:	b0 e0       	ldi	r27, 0x00	; 0
    d93c:	28 17       	cp	r18, r24
    d93e:	39 07       	cpc	r19, r25
    d940:	4a 07       	cpc	r20, r26
    d942:	5b 07       	cpc	r21, r27
    d944:	48 f5       	brcc	.+82     	; 0xd998 <f_read+0x3c2>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    d946:	8d 89       	ldd	r24, Y+21	; 0x15
    d948:	9e 89       	ldd	r25, Y+22	; 0x16
    d94a:	fc 01       	movw	r30, r24
    d94c:	80 81       	ld	r24, Z
    d94e:	91 81       	ldd	r25, Z+1	; 0x01
    d950:	fc 01       	movw	r30, r24
    d952:	22 a5       	ldd	r18, Z+42	; 0x2a
    d954:	33 a5       	ldd	r19, Z+43	; 0x2b
    d956:	44 a5       	ldd	r20, Z+44	; 0x2c
    d958:	55 a5       	ldd	r21, Z+45	; 0x2d
    d95a:	89 89       	ldd	r24, Y+17	; 0x11
    d95c:	9a 89       	ldd	r25, Y+18	; 0x12
    d95e:	ab 89       	ldd	r26, Y+19	; 0x13
    d960:	bc 89       	ldd	r27, Y+20	; 0x14
    d962:	79 01       	movw	r14, r18
    d964:	8a 01       	movw	r16, r20
    d966:	e8 1a       	sub	r14, r24
    d968:	f9 0a       	sbc	r15, r25
    d96a:	0a 0b       	sbc	r16, r26
    d96c:	1b 0b       	sbc	r17, r27
    d96e:	d8 01       	movw	r26, r16
    d970:	c7 01       	movw	r24, r14
    d972:	98 2f       	mov	r25, r24
    d974:	88 27       	eor	r24, r24
    d976:	99 0f       	add	r25, r25
    d978:	29 85       	ldd	r18, Y+9	; 0x09
    d97a:	3a 85       	ldd	r19, Y+10	; 0x0a
    d97c:	82 0f       	add	r24, r18
    d97e:	93 1f       	adc	r25, r19
    d980:	2d 89       	ldd	r18, Y+21	; 0x15
    d982:	3e 89       	ldd	r19, Y+22	; 0x16
    d984:	f9 01       	movw	r30, r18
    d986:	20 81       	ld	r18, Z
    d988:	31 81       	ldd	r19, Z+1	; 0x01
    d98a:	22 5d       	subi	r18, 0xD2	; 210
    d98c:	3f 4f       	sbci	r19, 0xFF	; 255
    d98e:	b9 01       	movw	r22, r18
    d990:	40 e0       	ldi	r20, 0x00	; 0
    d992:	52 e0       	ldi	r21, 0x02	; 2
    d994:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    d998:	8f 81       	ldd	r24, Y+7	; 0x07
    d99a:	98 85       	ldd	r25, Y+8	; 0x08
    d99c:	98 2f       	mov	r25, r24
    d99e:	88 27       	eor	r24, r24
    d9a0:	99 0f       	add	r25, r25
    d9a2:	9e 83       	std	Y+6, r25	; 0x06
    d9a4:	8d 83       	std	Y+5, r24	; 0x05
				continue;
    d9a6:	5f c0       	rjmp	.+190    	; 0xda66 <f_read+0x490>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    d9a8:	2d 89       	ldd	r18, Y+21	; 0x15
    d9aa:	3e 89       	ldd	r19, Y+22	; 0x16
    d9ac:	89 89       	ldd	r24, Y+17	; 0x11
    d9ae:	9a 89       	ldd	r25, Y+18	; 0x12
    d9b0:	ab 89       	ldd	r26, Y+19	; 0x13
    d9b2:	bc 89       	ldd	r27, Y+20	; 0x14
    d9b4:	f9 01       	movw	r30, r18
    d9b6:	86 8b       	std	Z+22, r24	; 0x16
    d9b8:	97 8b       	std	Z+23, r25	; 0x17
    d9ba:	a0 8f       	std	Z+24, r26	; 0x18
    d9bc:	b1 8f       	std	Z+25, r27	; 0x19
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    d9be:	8d 89       	ldd	r24, Y+21	; 0x15
    d9c0:	9e 89       	ldd	r25, Y+22	; 0x16
    d9c2:	fc 01       	movw	r30, r24
    d9c4:	86 81       	ldd	r24, Z+6	; 0x06
    d9c6:	97 81       	ldd	r25, Z+7	; 0x07
    d9c8:	a0 85       	ldd	r26, Z+8	; 0x08
    d9ca:	b1 85       	ldd	r27, Z+9	; 0x09
    d9cc:	91 70       	andi	r25, 0x01	; 1
    d9ce:	20 e0       	ldi	r18, 0x00	; 0
    d9d0:	32 e0       	ldi	r19, 0x02	; 2
    d9d2:	79 01       	movw	r14, r18
    d9d4:	e8 1a       	sub	r14, r24
    d9d6:	f9 0a       	sbc	r15, r25
    d9d8:	c7 01       	movw	r24, r14
    d9da:	9e 83       	std	Y+6, r25	; 0x06
    d9dc:	8d 83       	std	Y+5, r24	; 0x05
		if (rcnt > btr) rcnt = btr;
    d9de:	2d 81       	ldd	r18, Y+5	; 0x05
    d9e0:	3e 81       	ldd	r19, Y+6	; 0x06
    d9e2:	89 8d       	ldd	r24, Y+25	; 0x19
    d9e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d9e6:	82 17       	cp	r24, r18
    d9e8:	93 07       	cpc	r25, r19
    d9ea:	20 f4       	brcc	.+8      	; 0xd9f4 <f_read+0x41e>
    d9ec:	89 8d       	ldd	r24, Y+25	; 0x19
    d9ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d9f0:	9e 83       	std	Y+6, r25	; 0x06
    d9f2:	8d 83       	std	Y+5, r24	; 0x05
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    d9f4:	8d 89       	ldd	r24, Y+21	; 0x15
    d9f6:	9e 89       	ldd	r25, Y+22	; 0x16
    d9f8:	fc 01       	movw	r30, r24
    d9fa:	80 81       	ld	r24, Z
    d9fc:	91 81       	ldd	r25, Z+1	; 0x01
    d9fe:	2d 89       	ldd	r18, Y+21	; 0x15
    da00:	3e 89       	ldd	r19, Y+22	; 0x16
    da02:	f9 01       	movw	r30, r18
    da04:	26 89       	ldd	r18, Z+22	; 0x16
    da06:	37 89       	ldd	r19, Z+23	; 0x17
    da08:	40 8d       	ldd	r20, Z+24	; 0x18
    da0a:	51 8d       	ldd	r21, Z+25	; 0x19
    da0c:	ba 01       	movw	r22, r20
    da0e:	a9 01       	movw	r20, r18
    da10:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    da14:	88 23       	and	r24, r24
    da16:	61 f0       	breq	.+24     	; 0xda30 <f_read+0x45a>
			ABORT(fp->fs, FR_DISK_ERR);
    da18:	8d 89       	ldd	r24, Y+21	; 0x15
    da1a:	9e 89       	ldd	r25, Y+22	; 0x16
    da1c:	fc 01       	movw	r30, r24
    da1e:	84 81       	ldd	r24, Z+4	; 0x04
    da20:	28 2f       	mov	r18, r24
    da22:	20 68       	ori	r18, 0x80	; 128
    da24:	8d 89       	ldd	r24, Y+21	; 0x15
    da26:	9e 89       	ldd	r25, Y+22	; 0x16
    da28:	fc 01       	movw	r30, r24
    da2a:	24 83       	std	Z+4, r18	; 0x04
    da2c:	81 e0       	ldi	r24, 0x01	; 1
    da2e:	58 c0       	rjmp	.+176    	; 0xdae0 <f_read+0x50a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    da30:	8d 89       	ldd	r24, Y+21	; 0x15
    da32:	9e 89       	ldd	r25, Y+22	; 0x16
    da34:	fc 01       	movw	r30, r24
    da36:	80 81       	ld	r24, Z
    da38:	91 81       	ldd	r25, Z+1	; 0x01
    da3a:	9c 01       	movw	r18, r24
    da3c:	22 5d       	subi	r18, 0xD2	; 210
    da3e:	3f 4f       	sbci	r19, 0xFF	; 255
    da40:	8d 89       	ldd	r24, Y+21	; 0x15
    da42:	9e 89       	ldd	r25, Y+22	; 0x16
    da44:	fc 01       	movw	r30, r24
    da46:	86 81       	ldd	r24, Z+6	; 0x06
    da48:	97 81       	ldd	r25, Z+7	; 0x07
    da4a:	a0 85       	ldd	r26, Z+8	; 0x08
    da4c:	b1 85       	ldd	r27, Z+9	; 0x09
    da4e:	91 70       	andi	r25, 0x01	; 1
    da50:	a9 01       	movw	r20, r18
    da52:	48 0f       	add	r20, r24
    da54:	59 1f       	adc	r21, r25
    da56:	89 85       	ldd	r24, Y+9	; 0x09
    da58:	9a 85       	ldd	r25, Y+10	; 0x0a
    da5a:	2d 81       	ldd	r18, Y+5	; 0x05
    da5c:	3e 81       	ldd	r19, Y+6	; 0x06
    da5e:	ba 01       	movw	r22, r20
    da60:	a9 01       	movw	r20, r18
    da62:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    da66:	29 85       	ldd	r18, Y+9	; 0x09
    da68:	3a 85       	ldd	r19, Y+10	; 0x0a
    da6a:	8d 81       	ldd	r24, Y+5	; 0x05
    da6c:	9e 81       	ldd	r25, Y+6	; 0x06
    da6e:	82 0f       	add	r24, r18
    da70:	93 1f       	adc	r25, r19
    da72:	9a 87       	std	Y+10, r25	; 0x0a
    da74:	89 87       	std	Y+9, r24	; 0x09
    da76:	8d 89       	ldd	r24, Y+21	; 0x15
    da78:	9e 89       	ldd	r25, Y+22	; 0x16
    da7a:	fc 01       	movw	r30, r24
    da7c:	26 81       	ldd	r18, Z+6	; 0x06
    da7e:	37 81       	ldd	r19, Z+7	; 0x07
    da80:	40 85       	ldd	r20, Z+8	; 0x08
    da82:	51 85       	ldd	r21, Z+9	; 0x09
    da84:	8d 81       	ldd	r24, Y+5	; 0x05
    da86:	9e 81       	ldd	r25, Y+6	; 0x06
    da88:	cc 01       	movw	r24, r24
    da8a:	a0 e0       	ldi	r26, 0x00	; 0
    da8c:	b0 e0       	ldi	r27, 0x00	; 0
    da8e:	82 0f       	add	r24, r18
    da90:	93 1f       	adc	r25, r19
    da92:	a4 1f       	adc	r26, r20
    da94:	b5 1f       	adc	r27, r21
    da96:	2d 89       	ldd	r18, Y+21	; 0x15
    da98:	3e 89       	ldd	r19, Y+22	; 0x16
    da9a:	f9 01       	movw	r30, r18
    da9c:	86 83       	std	Z+6, r24	; 0x06
    da9e:	97 83       	std	Z+7, r25	; 0x07
    daa0:	a0 87       	std	Z+8, r26	; 0x08
    daa2:	b1 87       	std	Z+9, r27	; 0x09
    daa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    daa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    daa8:	fc 01       	movw	r30, r24
    daaa:	20 81       	ld	r18, Z
    daac:	31 81       	ldd	r19, Z+1	; 0x01
    daae:	8d 81       	ldd	r24, Y+5	; 0x05
    dab0:	9e 81       	ldd	r25, Y+6	; 0x06
    dab2:	28 0f       	add	r18, r24
    dab4:	39 1f       	adc	r19, r25
    dab6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    dab8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    daba:	fc 01       	movw	r30, r24
    dabc:	31 83       	std	Z+1, r19	; 0x01
    dabe:	20 83       	st	Z, r18
    dac0:	29 8d       	ldd	r18, Y+25	; 0x19
    dac2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    dac4:	8d 81       	ldd	r24, Y+5	; 0x05
    dac6:	9e 81       	ldd	r25, Y+6	; 0x06
    dac8:	79 01       	movw	r14, r18
    daca:	e8 1a       	sub	r14, r24
    dacc:	f9 0a       	sbc	r15, r25
    dace:	c7 01       	movw	r24, r14
    dad0:	9a 8f       	std	Y+26, r25	; 0x1a
    dad2:	89 8f       	std	Y+25, r24	; 0x19
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    dad4:	89 8d       	ldd	r24, Y+25	; 0x19
    dad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    dad8:	00 97       	sbiw	r24, 0x00	; 0
    dada:	09 f0       	breq	.+2      	; 0xdade <f_read+0x508>
    dadc:	f0 cd       	rjmp	.-1056   	; 0xd6be <f_read+0xe8>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    dade:	80 e0       	ldi	r24, 0x00	; 0
}
    dae0:	6c 96       	adiw	r28, 0x1c	; 28
    dae2:	0f b6       	in	r0, 0x3f	; 63
    dae4:	f8 94       	cli
    dae6:	de bf       	out	0x3e, r29	; 62
    dae8:	0f be       	out	0x3f, r0	; 63
    daea:	cd bf       	out	0x3d, r28	; 61
    daec:	cf 91       	pop	r28
    daee:	df 91       	pop	r29
    daf0:	1f 91       	pop	r17
    daf2:	0f 91       	pop	r16
    daf4:	ff 90       	pop	r15
    daf6:	ef 90       	pop	r14
    daf8:	08 95       	ret

0000dafa <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    dafa:	ef 92       	push	r14
    dafc:	ff 92       	push	r15
    dafe:	0f 93       	push	r16
    db00:	1f 93       	push	r17
    db02:	df 93       	push	r29
    db04:	cf 93       	push	r28
    db06:	cd b7       	in	r28, 0x3d	; 61
    db08:	de b7       	in	r29, 0x3e	; 62
    db0a:	68 97       	sbiw	r28, 0x18	; 24
    db0c:	0f b6       	in	r0, 0x3f	; 63
    db0e:	f8 94       	cli
    db10:	de bf       	out	0x3e, r29	; 62
    db12:	0f be       	out	0x3f, r0	; 63
    db14:	cd bf       	out	0x3d, r28	; 61
    db16:	9a 8b       	std	Y+18, r25	; 0x12
    db18:	89 8b       	std	Y+17, r24	; 0x11
    db1a:	7c 8b       	std	Y+20, r23	; 0x14
    db1c:	6b 8b       	std	Y+19, r22	; 0x13
    db1e:	5e 8b       	std	Y+22, r21	; 0x16
    db20:	4d 8b       	std	Y+21, r20	; 0x15
    db22:	38 8f       	std	Y+24, r19	; 0x18
    db24:	2f 8b       	std	Y+23, r18	; 0x17
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    db26:	8b 89       	ldd	r24, Y+19	; 0x13
    db28:	9c 89       	ldd	r25, Y+20	; 0x14
    db2a:	9a 87       	std	Y+10, r25	; 0x0a
    db2c:	89 87       	std	Y+9, r24	; 0x09
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    db2e:	8f 89       	ldd	r24, Y+23	; 0x17
    db30:	98 8d       	ldd	r25, Y+24	; 0x18
    db32:	fc 01       	movw	r30, r24
    db34:	11 82       	std	Z+1, r1	; 0x01
    db36:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);			/* Check validity */
    db38:	89 89       	ldd	r24, Y+17	; 0x11
    db3a:	9a 89       	ldd	r25, Y+18	; 0x12
    db3c:	fc 01       	movw	r30, r24
    db3e:	80 81       	ld	r24, Z
    db40:	91 81       	ldd	r25, Z+1	; 0x01
    db42:	29 89       	ldd	r18, Y+17	; 0x11
    db44:	3a 89       	ldd	r19, Y+18	; 0x12
    db46:	f9 01       	movw	r30, r18
    db48:	22 81       	ldd	r18, Z+2	; 0x02
    db4a:	33 81       	ldd	r19, Z+3	; 0x03
    db4c:	b9 01       	movw	r22, r18
    db4e:	0e 94 2e 68 	call	0xd05c	; 0xd05c <validate>
    db52:	8b 87       	std	Y+11, r24	; 0x0b
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    db54:	8b 85       	ldd	r24, Y+11	; 0x0b
    db56:	88 23       	and	r24, r24
    db58:	11 f0       	breq	.+4      	; 0xdb5e <f_write+0x64>
    db5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    db5c:	0b c3       	rjmp	.+1558   	; 0xe174 <f_write+0x67a>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    db5e:	89 89       	ldd	r24, Y+17	; 0x11
    db60:	9a 89       	ldd	r25, Y+18	; 0x12
    db62:	fc 01       	movw	r30, r24
    db64:	84 81       	ldd	r24, Z+4	; 0x04
    db66:	88 23       	and	r24, r24
    db68:	14 f4       	brge	.+4      	; 0xdb6e <f_write+0x74>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    db6a:	82 e0       	ldi	r24, 0x02	; 2
    db6c:	03 c3       	rjmp	.+1542   	; 0xe174 <f_write+0x67a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    db6e:	89 89       	ldd	r24, Y+17	; 0x11
    db70:	9a 89       	ldd	r25, Y+18	; 0x12
    db72:	fc 01       	movw	r30, r24
    db74:	84 81       	ldd	r24, Z+4	; 0x04
    db76:	88 2f       	mov	r24, r24
    db78:	90 e0       	ldi	r25, 0x00	; 0
    db7a:	82 70       	andi	r24, 0x02	; 2
    db7c:	90 70       	andi	r25, 0x00	; 0
    db7e:	00 97       	sbiw	r24, 0x00	; 0
    db80:	11 f4       	brne	.+4      	; 0xdb86 <f_write+0x8c>
		LEAVE_FF(fp->fs, FR_DENIED);
    db82:	87 e0       	ldi	r24, 0x07	; 7
    db84:	f7 c2       	rjmp	.+1518   	; 0xe174 <f_write+0x67a>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    db86:	89 89       	ldd	r24, Y+17	; 0x11
    db88:	9a 89       	ldd	r25, Y+18	; 0x12
    db8a:	fc 01       	movw	r30, r24
    db8c:	22 85       	ldd	r18, Z+10	; 0x0a
    db8e:	33 85       	ldd	r19, Z+11	; 0x0b
    db90:	44 85       	ldd	r20, Z+12	; 0x0c
    db92:	55 85       	ldd	r21, Z+13	; 0x0d
    db94:	8d 89       	ldd	r24, Y+21	; 0x15
    db96:	9e 89       	ldd	r25, Y+22	; 0x16
    db98:	cc 01       	movw	r24, r24
    db9a:	a0 e0       	ldi	r26, 0x00	; 0
    db9c:	b0 e0       	ldi	r27, 0x00	; 0
    db9e:	28 0f       	add	r18, r24
    dba0:	39 1f       	adc	r19, r25
    dba2:	4a 1f       	adc	r20, r26
    dba4:	5b 1f       	adc	r21, r27
    dba6:	89 89       	ldd	r24, Y+17	; 0x11
    dba8:	9a 89       	ldd	r25, Y+18	; 0x12
    dbaa:	fc 01       	movw	r30, r24
    dbac:	82 85       	ldd	r24, Z+10	; 0x0a
    dbae:	93 85       	ldd	r25, Z+11	; 0x0b
    dbb0:	a4 85       	ldd	r26, Z+12	; 0x0c
    dbb2:	b5 85       	ldd	r27, Z+13	; 0x0d
    dbb4:	28 17       	cp	r18, r24
    dbb6:	39 07       	cpc	r19, r25
    dbb8:	4a 07       	cpc	r20, r26
    dbba:	5b 07       	cpc	r21, r27
    dbbc:	08 f0       	brcs	.+2      	; 0xdbc0 <f_write+0xc6>
    dbbe:	a7 c2       	rjmp	.+1358   	; 0xe10e <f_write+0x614>
    dbc0:	1e 8a       	std	Y+22, r1	; 0x16
    dbc2:	1d 8a       	std	Y+21, r1	; 0x15

	for ( ;  btw;							/* Repeat until all data written */
    dbc4:	a4 c2       	rjmp	.+1352   	; 0xe10e <f_write+0x614>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    dbc6:	89 89       	ldd	r24, Y+17	; 0x11
    dbc8:	9a 89       	ldd	r25, Y+18	; 0x12
    dbca:	fc 01       	movw	r30, r24
    dbcc:	86 81       	ldd	r24, Z+6	; 0x06
    dbce:	97 81       	ldd	r25, Z+7	; 0x07
    dbd0:	a0 85       	ldd	r26, Z+8	; 0x08
    dbd2:	b1 85       	ldd	r27, Z+9	; 0x09
    dbd4:	91 70       	andi	r25, 0x01	; 1
    dbd6:	a0 70       	andi	r26, 0x00	; 0
    dbd8:	b0 70       	andi	r27, 0x00	; 0
    dbda:	00 97       	sbiw	r24, 0x00	; 0
    dbdc:	a1 05       	cpc	r26, r1
    dbde:	b1 05       	cpc	r27, r1
    dbe0:	09 f0       	breq	.+2      	; 0xdbe4 <f_write+0xea>
    dbe2:	03 c2       	rjmp	.+1030   	; 0xdfea <f_write+0x4f0>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    dbe4:	89 89       	ldd	r24, Y+17	; 0x11
    dbe6:	9a 89       	ldd	r25, Y+18	; 0x12
    dbe8:	fc 01       	movw	r30, r24
    dbea:	86 81       	ldd	r24, Z+6	; 0x06
    dbec:	97 81       	ldd	r25, Z+7	; 0x07
    dbee:	a0 85       	ldd	r26, Z+8	; 0x08
    dbf0:	b1 85       	ldd	r27, Z+9	; 0x09
    dbf2:	07 2e       	mov	r0, r23
    dbf4:	79 e0       	ldi	r23, 0x09	; 9
    dbf6:	b6 95       	lsr	r27
    dbf8:	a7 95       	ror	r26
    dbfa:	97 95       	ror	r25
    dbfc:	87 95       	ror	r24
    dbfe:	7a 95       	dec	r23
    dc00:	d1 f7       	brne	.-12     	; 0xdbf6 <f_write+0xfc>
    dc02:	70 2d       	mov	r23, r0
    dc04:	28 2f       	mov	r18, r24
    dc06:	89 89       	ldd	r24, Y+17	; 0x11
    dc08:	9a 89       	ldd	r25, Y+18	; 0x12
    dc0a:	fc 01       	movw	r30, r24
    dc0c:	80 81       	ld	r24, Z
    dc0e:	91 81       	ldd	r25, Z+1	; 0x01
    dc10:	fc 01       	movw	r30, r24
    dc12:	82 81       	ldd	r24, Z+2	; 0x02
    dc14:	81 50       	subi	r24, 0x01	; 1
    dc16:	82 23       	and	r24, r18
    dc18:	8c 87       	std	Y+12, r24	; 0x0c
			if (!csect) {					/* On the cluster boundary? */
    dc1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    dc1c:	88 23       	and	r24, r24
    dc1e:	09 f0       	breq	.+2      	; 0xdc22 <f_write+0x128>
    dc20:	91 c0       	rjmp	.+290    	; 0xdd44 <f_write+0x24a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    dc22:	89 89       	ldd	r24, Y+17	; 0x11
    dc24:	9a 89       	ldd	r25, Y+18	; 0x12
    dc26:	fc 01       	movw	r30, r24
    dc28:	86 81       	ldd	r24, Z+6	; 0x06
    dc2a:	97 81       	ldd	r25, Z+7	; 0x07
    dc2c:	a0 85       	ldd	r26, Z+8	; 0x08
    dc2e:	b1 85       	ldd	r27, Z+9	; 0x09
    dc30:	00 97       	sbiw	r24, 0x00	; 0
    dc32:	a1 05       	cpc	r26, r1
    dc34:	b1 05       	cpc	r27, r1
    dc36:	79 f5       	brne	.+94     	; 0xdc96 <f_write+0x19c>
					clst = fp->sclust;		/* Follow from the origin */
    dc38:	89 89       	ldd	r24, Y+17	; 0x11
    dc3a:	9a 89       	ldd	r25, Y+18	; 0x12
    dc3c:	fc 01       	movw	r30, r24
    dc3e:	86 85       	ldd	r24, Z+14	; 0x0e
    dc40:	97 85       	ldd	r25, Z+15	; 0x0f
    dc42:	a0 89       	ldd	r26, Z+16	; 0x10
    dc44:	b1 89       	ldd	r27, Z+17	; 0x11
    dc46:	89 83       	std	Y+1, r24	; 0x01
    dc48:	9a 83       	std	Y+2, r25	; 0x02
    dc4a:	ab 83       	std	Y+3, r26	; 0x03
    dc4c:	bc 83       	std	Y+4, r27	; 0x04
					if (clst == 0)			/* When no cluster is allocated, */
    dc4e:	89 81       	ldd	r24, Y+1	; 0x01
    dc50:	9a 81       	ldd	r25, Y+2	; 0x02
    dc52:	ab 81       	ldd	r26, Y+3	; 0x03
    dc54:	bc 81       	ldd	r27, Y+4	; 0x04
    dc56:	00 97       	sbiw	r24, 0x00	; 0
    dc58:	a1 05       	cpc	r26, r1
    dc5a:	b1 05       	cpc	r27, r1
    dc5c:	91 f5       	brne	.+100    	; 0xdcc2 <f_write+0x1c8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    dc5e:	89 89       	ldd	r24, Y+17	; 0x11
    dc60:	9a 89       	ldd	r25, Y+18	; 0x12
    dc62:	fc 01       	movw	r30, r24
    dc64:	80 81       	ld	r24, Z
    dc66:	91 81       	ldd	r25, Z+1	; 0x01
    dc68:	40 e0       	ldi	r20, 0x00	; 0
    dc6a:	50 e0       	ldi	r21, 0x00	; 0
    dc6c:	ba 01       	movw	r22, r20
    dc6e:	0e 94 da 57 	call	0xafb4	; 0xafb4 <create_chain>
    dc72:	dc 01       	movw	r26, r24
    dc74:	cb 01       	movw	r24, r22
    dc76:	89 83       	std	Y+1, r24	; 0x01
    dc78:	9a 83       	std	Y+2, r25	; 0x02
    dc7a:	ab 83       	std	Y+3, r26	; 0x03
    dc7c:	bc 83       	std	Y+4, r27	; 0x04
    dc7e:	29 89       	ldd	r18, Y+17	; 0x11
    dc80:	3a 89       	ldd	r19, Y+18	; 0x12
    dc82:	89 81       	ldd	r24, Y+1	; 0x01
    dc84:	9a 81       	ldd	r25, Y+2	; 0x02
    dc86:	ab 81       	ldd	r26, Y+3	; 0x03
    dc88:	bc 81       	ldd	r27, Y+4	; 0x04
    dc8a:	f9 01       	movw	r30, r18
    dc8c:	86 87       	std	Z+14, r24	; 0x0e
    dc8e:	97 87       	std	Z+15, r25	; 0x0f
    dc90:	a0 8b       	std	Z+16, r26	; 0x10
    dc92:	b1 8b       	std	Z+17, r27	; 0x11
    dc94:	16 c0       	rjmp	.+44     	; 0xdcc2 <f_write+0x1c8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    dc96:	89 89       	ldd	r24, Y+17	; 0x11
    dc98:	9a 89       	ldd	r25, Y+18	; 0x12
    dc9a:	fc 01       	movw	r30, r24
    dc9c:	80 81       	ld	r24, Z
    dc9e:	91 81       	ldd	r25, Z+1	; 0x01
    dca0:	29 89       	ldd	r18, Y+17	; 0x11
    dca2:	3a 89       	ldd	r19, Y+18	; 0x12
    dca4:	f9 01       	movw	r30, r18
    dca6:	22 89       	ldd	r18, Z+18	; 0x12
    dca8:	33 89       	ldd	r19, Z+19	; 0x13
    dcaa:	44 89       	ldd	r20, Z+20	; 0x14
    dcac:	55 89       	ldd	r21, Z+21	; 0x15
    dcae:	ba 01       	movw	r22, r20
    dcb0:	a9 01       	movw	r20, r18
    dcb2:	0e 94 da 57 	call	0xafb4	; 0xafb4 <create_chain>
    dcb6:	dc 01       	movw	r26, r24
    dcb8:	cb 01       	movw	r24, r22
    dcba:	89 83       	std	Y+1, r24	; 0x01
    dcbc:	9a 83       	std	Y+2, r25	; 0x02
    dcbe:	ab 83       	std	Y+3, r26	; 0x03
    dcc0:	bc 83       	std	Y+4, r27	; 0x04
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    dcc2:	89 81       	ldd	r24, Y+1	; 0x01
    dcc4:	9a 81       	ldd	r25, Y+2	; 0x02
    dcc6:	ab 81       	ldd	r26, Y+3	; 0x03
    dcc8:	bc 81       	ldd	r27, Y+4	; 0x04
    dcca:	00 97       	sbiw	r24, 0x00	; 0
    dccc:	a1 05       	cpc	r26, r1
    dcce:	b1 05       	cpc	r27, r1
    dcd0:	09 f4       	brne	.+2      	; 0xdcd4 <f_write+0x1da>
    dcd2:	23 c2       	rjmp	.+1094   	; 0xe11a <f_write+0x620>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    dcd4:	89 81       	ldd	r24, Y+1	; 0x01
    dcd6:	9a 81       	ldd	r25, Y+2	; 0x02
    dcd8:	ab 81       	ldd	r26, Y+3	; 0x03
    dcda:	bc 81       	ldd	r27, Y+4	; 0x04
    dcdc:	81 30       	cpi	r24, 0x01	; 1
    dcde:	91 05       	cpc	r25, r1
    dce0:	a1 05       	cpc	r26, r1
    dce2:	b1 05       	cpc	r27, r1
    dce4:	61 f4       	brne	.+24     	; 0xdcfe <f_write+0x204>
    dce6:	89 89       	ldd	r24, Y+17	; 0x11
    dce8:	9a 89       	ldd	r25, Y+18	; 0x12
    dcea:	fc 01       	movw	r30, r24
    dcec:	84 81       	ldd	r24, Z+4	; 0x04
    dcee:	28 2f       	mov	r18, r24
    dcf0:	20 68       	ori	r18, 0x80	; 128
    dcf2:	89 89       	ldd	r24, Y+17	; 0x11
    dcf4:	9a 89       	ldd	r25, Y+18	; 0x12
    dcf6:	fc 01       	movw	r30, r24
    dcf8:	24 83       	std	Z+4, r18	; 0x04
    dcfa:	82 e0       	ldi	r24, 0x02	; 2
    dcfc:	3b c2       	rjmp	.+1142   	; 0xe174 <f_write+0x67a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    dcfe:	89 81       	ldd	r24, Y+1	; 0x01
    dd00:	9a 81       	ldd	r25, Y+2	; 0x02
    dd02:	ab 81       	ldd	r26, Y+3	; 0x03
    dd04:	bc 81       	ldd	r27, Y+4	; 0x04
    dd06:	8f 3f       	cpi	r24, 0xFF	; 255
    dd08:	ff ef       	ldi	r31, 0xFF	; 255
    dd0a:	9f 07       	cpc	r25, r31
    dd0c:	ff ef       	ldi	r31, 0xFF	; 255
    dd0e:	af 07       	cpc	r26, r31
    dd10:	ff ef       	ldi	r31, 0xFF	; 255
    dd12:	bf 07       	cpc	r27, r31
    dd14:	61 f4       	brne	.+24     	; 0xdd2e <f_write+0x234>
    dd16:	89 89       	ldd	r24, Y+17	; 0x11
    dd18:	9a 89       	ldd	r25, Y+18	; 0x12
    dd1a:	fc 01       	movw	r30, r24
    dd1c:	84 81       	ldd	r24, Z+4	; 0x04
    dd1e:	28 2f       	mov	r18, r24
    dd20:	20 68       	ori	r18, 0x80	; 128
    dd22:	89 89       	ldd	r24, Y+17	; 0x11
    dd24:	9a 89       	ldd	r25, Y+18	; 0x12
    dd26:	fc 01       	movw	r30, r24
    dd28:	24 83       	std	Z+4, r18	; 0x04
    dd2a:	81 e0       	ldi	r24, 0x01	; 1
    dd2c:	23 c2       	rjmp	.+1094   	; 0xe174 <f_write+0x67a>
				fp->clust = clst;			/* Update current cluster */
    dd2e:	29 89       	ldd	r18, Y+17	; 0x11
    dd30:	3a 89       	ldd	r19, Y+18	; 0x12
    dd32:	89 81       	ldd	r24, Y+1	; 0x01
    dd34:	9a 81       	ldd	r25, Y+2	; 0x02
    dd36:	ab 81       	ldd	r26, Y+3	; 0x03
    dd38:	bc 81       	ldd	r27, Y+4	; 0x04
    dd3a:	f9 01       	movw	r30, r18
    dd3c:	82 8b       	std	Z+18, r24	; 0x12
    dd3e:	93 8b       	std	Z+19, r25	; 0x13
    dd40:	a4 8b       	std	Z+20, r26	; 0x14
    dd42:	b5 8b       	std	Z+21, r27	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    dd44:	89 89       	ldd	r24, Y+17	; 0x11
    dd46:	9a 89       	ldd	r25, Y+18	; 0x12
    dd48:	fc 01       	movw	r30, r24
    dd4a:	80 81       	ld	r24, Z
    dd4c:	91 81       	ldd	r25, Z+1	; 0x01
    dd4e:	fc 01       	movw	r30, r24
    dd50:	22 a5       	ldd	r18, Z+42	; 0x2a
    dd52:	33 a5       	ldd	r19, Z+43	; 0x2b
    dd54:	44 a5       	ldd	r20, Z+44	; 0x2c
    dd56:	55 a5       	ldd	r21, Z+45	; 0x2d
    dd58:	89 89       	ldd	r24, Y+17	; 0x11
    dd5a:	9a 89       	ldd	r25, Y+18	; 0x12
    dd5c:	fc 01       	movw	r30, r24
    dd5e:	86 89       	ldd	r24, Z+22	; 0x16
    dd60:	97 89       	ldd	r25, Z+23	; 0x17
    dd62:	a0 8d       	ldd	r26, Z+24	; 0x18
    dd64:	b1 8d       	ldd	r27, Z+25	; 0x19
    dd66:	28 17       	cp	r18, r24
    dd68:	39 07       	cpc	r19, r25
    dd6a:	4a 07       	cpc	r20, r26
    dd6c:	5b 07       	cpc	r21, r27
    dd6e:	c1 f4       	brne	.+48     	; 0xdda0 <f_write+0x2a6>
    dd70:	89 89       	ldd	r24, Y+17	; 0x11
    dd72:	9a 89       	ldd	r25, Y+18	; 0x12
    dd74:	fc 01       	movw	r30, r24
    dd76:	80 81       	ld	r24, Z
    dd78:	91 81       	ldd	r25, Z+1	; 0x01
    dd7a:	40 e0       	ldi	r20, 0x00	; 0
    dd7c:	50 e0       	ldi	r21, 0x00	; 0
    dd7e:	ba 01       	movw	r22, r20
    dd80:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    dd84:	88 23       	and	r24, r24
    dd86:	61 f0       	breq	.+24     	; 0xdda0 <f_write+0x2a6>
				ABORT(fp->fs, FR_DISK_ERR);
    dd88:	89 89       	ldd	r24, Y+17	; 0x11
    dd8a:	9a 89       	ldd	r25, Y+18	; 0x12
    dd8c:	fc 01       	movw	r30, r24
    dd8e:	84 81       	ldd	r24, Z+4	; 0x04
    dd90:	28 2f       	mov	r18, r24
    dd92:	20 68       	ori	r18, 0x80	; 128
    dd94:	89 89       	ldd	r24, Y+17	; 0x11
    dd96:	9a 89       	ldd	r25, Y+18	; 0x12
    dd98:	fc 01       	movw	r30, r24
    dd9a:	24 83       	std	Z+4, r18	; 0x04
    dd9c:	81 e0       	ldi	r24, 0x01	; 1
    dd9e:	ea c1       	rjmp	.+980    	; 0xe174 <f_write+0x67a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    dda0:	89 89       	ldd	r24, Y+17	; 0x11
    dda2:	9a 89       	ldd	r25, Y+18	; 0x12
    dda4:	fc 01       	movw	r30, r24
    dda6:	80 81       	ld	r24, Z
    dda8:	91 81       	ldd	r25, Z+1	; 0x01
    ddaa:	29 89       	ldd	r18, Y+17	; 0x11
    ddac:	3a 89       	ldd	r19, Y+18	; 0x12
    ddae:	f9 01       	movw	r30, r18
    ddb0:	22 89       	ldd	r18, Z+18	; 0x12
    ddb2:	33 89       	ldd	r19, Z+19	; 0x13
    ddb4:	44 89       	ldd	r20, Z+20	; 0x14
    ddb6:	55 89       	ldd	r21, Z+21	; 0x15
    ddb8:	ba 01       	movw	r22, r20
    ddba:	a9 01       	movw	r20, r18
    ddbc:	0e 94 41 53 	call	0xa682	; 0xa682 <clust2sect>
    ddc0:	dc 01       	movw	r26, r24
    ddc2:	cb 01       	movw	r24, r22
    ddc4:	8d 87       	std	Y+13, r24	; 0x0d
    ddc6:	9e 87       	std	Y+14, r25	; 0x0e
    ddc8:	af 87       	std	Y+15, r26	; 0x0f
    ddca:	b8 8b       	std	Y+16, r27	; 0x10
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    ddcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    ddce:	9e 85       	ldd	r25, Y+14	; 0x0e
    ddd0:	af 85       	ldd	r26, Y+15	; 0x0f
    ddd2:	b8 89       	ldd	r27, Y+16	; 0x10
    ddd4:	00 97       	sbiw	r24, 0x00	; 0
    ddd6:	a1 05       	cpc	r26, r1
    ddd8:	b1 05       	cpc	r27, r1
    ddda:	61 f4       	brne	.+24     	; 0xddf4 <f_write+0x2fa>
    dddc:	89 89       	ldd	r24, Y+17	; 0x11
    ddde:	9a 89       	ldd	r25, Y+18	; 0x12
    dde0:	fc 01       	movw	r30, r24
    dde2:	84 81       	ldd	r24, Z+4	; 0x04
    dde4:	28 2f       	mov	r18, r24
    dde6:	20 68       	ori	r18, 0x80	; 128
    dde8:	89 89       	ldd	r24, Y+17	; 0x11
    ddea:	9a 89       	ldd	r25, Y+18	; 0x12
    ddec:	fc 01       	movw	r30, r24
    ddee:	24 83       	std	Z+4, r18	; 0x04
    ddf0:	82 e0       	ldi	r24, 0x02	; 2
    ddf2:	c0 c1       	rjmp	.+896    	; 0xe174 <f_write+0x67a>
			sect += csect;
    ddf4:	8c 85       	ldd	r24, Y+12	; 0x0c
    ddf6:	88 2f       	mov	r24, r24
    ddf8:	90 e0       	ldi	r25, 0x00	; 0
    ddfa:	a0 e0       	ldi	r26, 0x00	; 0
    ddfc:	b0 e0       	ldi	r27, 0x00	; 0
    ddfe:	2d 85       	ldd	r18, Y+13	; 0x0d
    de00:	3e 85       	ldd	r19, Y+14	; 0x0e
    de02:	4f 85       	ldd	r20, Y+15	; 0x0f
    de04:	58 89       	ldd	r21, Y+16	; 0x10
    de06:	82 0f       	add	r24, r18
    de08:	93 1f       	adc	r25, r19
    de0a:	a4 1f       	adc	r26, r20
    de0c:	b5 1f       	adc	r27, r21
    de0e:	8d 87       	std	Y+13, r24	; 0x0d
    de10:	9e 87       	std	Y+14, r25	; 0x0e
    de12:	af 87       	std	Y+15, r26	; 0x0f
    de14:	b8 8b       	std	Y+16, r27	; 0x10
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    de16:	8d 89       	ldd	r24, Y+21	; 0x15
    de18:	9e 89       	ldd	r25, Y+22	; 0x16
    de1a:	89 2f       	mov	r24, r25
    de1c:	99 27       	eor	r25, r25
    de1e:	86 95       	lsr	r24
    de20:	98 87       	std	Y+8, r25	; 0x08
    de22:	8f 83       	std	Y+7, r24	; 0x07
			if (cc) {						/* Write maximum contiguous sectors directly */
    de24:	8f 81       	ldd	r24, Y+7	; 0x07
    de26:	98 85       	ldd	r25, Y+8	; 0x08
    de28:	00 97       	sbiw	r24, 0x00	; 0
    de2a:	09 f4       	brne	.+2      	; 0xde2e <f_write+0x334>
    de2c:	9a c0       	rjmp	.+308    	; 0xdf62 <f_write+0x468>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    de2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    de30:	28 2f       	mov	r18, r24
    de32:	30 e0       	ldi	r19, 0x00	; 0
    de34:	8f 81       	ldd	r24, Y+7	; 0x07
    de36:	98 85       	ldd	r25, Y+8	; 0x08
    de38:	28 0f       	add	r18, r24
    de3a:	39 1f       	adc	r19, r25
    de3c:	89 89       	ldd	r24, Y+17	; 0x11
    de3e:	9a 89       	ldd	r25, Y+18	; 0x12
    de40:	fc 01       	movw	r30, r24
    de42:	80 81       	ld	r24, Z
    de44:	91 81       	ldd	r25, Z+1	; 0x01
    de46:	fc 01       	movw	r30, r24
    de48:	82 81       	ldd	r24, Z+2	; 0x02
    de4a:	88 2f       	mov	r24, r24
    de4c:	90 e0       	ldi	r25, 0x00	; 0
    de4e:	82 17       	cp	r24, r18
    de50:	93 07       	cpc	r25, r19
    de52:	90 f4       	brcc	.+36     	; 0xde78 <f_write+0x37e>
					cc = fp->fs->csize - csect;
    de54:	89 89       	ldd	r24, Y+17	; 0x11
    de56:	9a 89       	ldd	r25, Y+18	; 0x12
    de58:	fc 01       	movw	r30, r24
    de5a:	80 81       	ld	r24, Z
    de5c:	91 81       	ldd	r25, Z+1	; 0x01
    de5e:	fc 01       	movw	r30, r24
    de60:	82 81       	ldd	r24, Z+2	; 0x02
    de62:	28 2f       	mov	r18, r24
    de64:	30 e0       	ldi	r19, 0x00	; 0
    de66:	8c 85       	ldd	r24, Y+12	; 0x0c
    de68:	88 2f       	mov	r24, r24
    de6a:	90 e0       	ldi	r25, 0x00	; 0
    de6c:	79 01       	movw	r14, r18
    de6e:	e8 1a       	sub	r14, r24
    de70:	f9 0a       	sbc	r15, r25
    de72:	c7 01       	movw	r24, r14
    de74:	98 87       	std	Y+8, r25	; 0x08
    de76:	8f 83       	std	Y+7, r24	; 0x07
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    de78:	89 89       	ldd	r24, Y+17	; 0x11
    de7a:	9a 89       	ldd	r25, Y+18	; 0x12
    de7c:	fc 01       	movw	r30, r24
    de7e:	80 81       	ld	r24, Z
    de80:	91 81       	ldd	r25, Z+1	; 0x01
    de82:	fc 01       	movw	r30, r24
    de84:	81 81       	ldd	r24, Z+1	; 0x01
    de86:	9f 81       	ldd	r25, Y+7	; 0x07
    de88:	69 85       	ldd	r22, Y+9	; 0x09
    de8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    de8c:	2d 85       	ldd	r18, Y+13	; 0x0d
    de8e:	3e 85       	ldd	r19, Y+14	; 0x0e
    de90:	4f 85       	ldd	r20, Y+15	; 0x0f
    de92:	58 89       	ldd	r21, Y+16	; 0x10
    de94:	09 2f       	mov	r16, r25
    de96:	0e 94 cb 82 	call	0x10596	; 0x10596 <disk_write>
    de9a:	88 23       	and	r24, r24
    de9c:	61 f0       	breq	.+24     	; 0xdeb6 <f_write+0x3bc>
					ABORT(fp->fs, FR_DISK_ERR);
    de9e:	89 89       	ldd	r24, Y+17	; 0x11
    dea0:	9a 89       	ldd	r25, Y+18	; 0x12
    dea2:	fc 01       	movw	r30, r24
    dea4:	84 81       	ldd	r24, Z+4	; 0x04
    dea6:	28 2f       	mov	r18, r24
    dea8:	20 68       	ori	r18, 0x80	; 128
    deaa:	89 89       	ldd	r24, Y+17	; 0x11
    deac:	9a 89       	ldd	r25, Y+18	; 0x12
    deae:	fc 01       	movw	r30, r24
    deb0:	24 83       	std	Z+4, r18	; 0x04
    deb2:	81 e0       	ldi	r24, 0x01	; 1
    deb4:	5f c1       	rjmp	.+702    	; 0xe174 <f_write+0x67a>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    deb6:	89 89       	ldd	r24, Y+17	; 0x11
    deb8:	9a 89       	ldd	r25, Y+18	; 0x12
    deba:	fc 01       	movw	r30, r24
    debc:	80 81       	ld	r24, Z
    debe:	91 81       	ldd	r25, Z+1	; 0x01
    dec0:	fc 01       	movw	r30, r24
    dec2:	22 a5       	ldd	r18, Z+42	; 0x2a
    dec4:	33 a5       	ldd	r19, Z+43	; 0x2b
    dec6:	44 a5       	ldd	r20, Z+44	; 0x2c
    dec8:	55 a5       	ldd	r21, Z+45	; 0x2d
    deca:	8d 85       	ldd	r24, Y+13	; 0x0d
    decc:	9e 85       	ldd	r25, Y+14	; 0x0e
    dece:	af 85       	ldd	r26, Y+15	; 0x0f
    ded0:	b8 89       	ldd	r27, Y+16	; 0x10
    ded2:	28 1b       	sub	r18, r24
    ded4:	39 0b       	sbc	r19, r25
    ded6:	4a 0b       	sbc	r20, r26
    ded8:	5b 0b       	sbc	r21, r27
    deda:	8f 81       	ldd	r24, Y+7	; 0x07
    dedc:	98 85       	ldd	r25, Y+8	; 0x08
    dede:	cc 01       	movw	r24, r24
    dee0:	a0 e0       	ldi	r26, 0x00	; 0
    dee2:	b0 e0       	ldi	r27, 0x00	; 0
    dee4:	28 17       	cp	r18, r24
    dee6:	39 07       	cpc	r19, r25
    dee8:	4a 07       	cpc	r20, r26
    deea:	5b 07       	cpc	r21, r27
    deec:	90 f5       	brcc	.+100    	; 0xdf52 <f_write+0x458>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    deee:	89 89       	ldd	r24, Y+17	; 0x11
    def0:	9a 89       	ldd	r25, Y+18	; 0x12
    def2:	fc 01       	movw	r30, r24
    def4:	80 81       	ld	r24, Z
    def6:	91 81       	ldd	r25, Z+1	; 0x01
    def8:	bc 01       	movw	r22, r24
    defa:	62 5d       	subi	r22, 0xD2	; 210
    defc:	7f 4f       	sbci	r23, 0xFF	; 255
    defe:	89 89       	ldd	r24, Y+17	; 0x11
    df00:	9a 89       	ldd	r25, Y+18	; 0x12
    df02:	fc 01       	movw	r30, r24
    df04:	80 81       	ld	r24, Z
    df06:	91 81       	ldd	r25, Z+1	; 0x01
    df08:	fc 01       	movw	r30, r24
    df0a:	22 a5       	ldd	r18, Z+42	; 0x2a
    df0c:	33 a5       	ldd	r19, Z+43	; 0x2b
    df0e:	44 a5       	ldd	r20, Z+44	; 0x2c
    df10:	55 a5       	ldd	r21, Z+45	; 0x2d
    df12:	8d 85       	ldd	r24, Y+13	; 0x0d
    df14:	9e 85       	ldd	r25, Y+14	; 0x0e
    df16:	af 85       	ldd	r26, Y+15	; 0x0f
    df18:	b8 89       	ldd	r27, Y+16	; 0x10
    df1a:	79 01       	movw	r14, r18
    df1c:	8a 01       	movw	r16, r20
    df1e:	e8 1a       	sub	r14, r24
    df20:	f9 0a       	sbc	r15, r25
    df22:	0a 0b       	sbc	r16, r26
    df24:	1b 0b       	sbc	r17, r27
    df26:	d8 01       	movw	r26, r16
    df28:	c7 01       	movw	r24, r14
    df2a:	98 2f       	mov	r25, r24
    df2c:	88 27       	eor	r24, r24
    df2e:	99 0f       	add	r25, r25
    df30:	29 85       	ldd	r18, Y+9	; 0x09
    df32:	3a 85       	ldd	r19, Y+10	; 0x0a
    df34:	28 0f       	add	r18, r24
    df36:	39 1f       	adc	r19, r25
    df38:	cb 01       	movw	r24, r22
    df3a:	b9 01       	movw	r22, r18
    df3c:	40 e0       	ldi	r20, 0x00	; 0
    df3e:	52 e0       	ldi	r21, 0x02	; 2
    df40:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
					fp->fs->wflag = 0;
    df44:	89 89       	ldd	r24, Y+17	; 0x11
    df46:	9a 89       	ldd	r25, Y+18	; 0x12
    df48:	fc 01       	movw	r30, r24
    df4a:	80 81       	ld	r24, Z
    df4c:	91 81       	ldd	r25, Z+1	; 0x01
    df4e:	fc 01       	movw	r30, r24
    df50:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    df52:	8f 81       	ldd	r24, Y+7	; 0x07
    df54:	98 85       	ldd	r25, Y+8	; 0x08
    df56:	98 2f       	mov	r25, r24
    df58:	88 27       	eor	r24, r24
    df5a:	99 0f       	add	r25, r25
    df5c:	9e 83       	std	Y+6, r25	; 0x06
    df5e:	8d 83       	std	Y+5, r24	; 0x05
				continue;
    df60:	9f c0       	rjmp	.+318    	; 0xe0a0 <f_write+0x5a6>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    df62:	89 89       	ldd	r24, Y+17	; 0x11
    df64:	9a 89       	ldd	r25, Y+18	; 0x12
    df66:	fc 01       	movw	r30, r24
    df68:	26 81       	ldd	r18, Z+6	; 0x06
    df6a:	37 81       	ldd	r19, Z+7	; 0x07
    df6c:	40 85       	ldd	r20, Z+8	; 0x08
    df6e:	51 85       	ldd	r21, Z+9	; 0x09
    df70:	89 89       	ldd	r24, Y+17	; 0x11
    df72:	9a 89       	ldd	r25, Y+18	; 0x12
    df74:	fc 01       	movw	r30, r24
    df76:	82 85       	ldd	r24, Z+10	; 0x0a
    df78:	93 85       	ldd	r25, Z+11	; 0x0b
    df7a:	a4 85       	ldd	r26, Z+12	; 0x0c
    df7c:	b5 85       	ldd	r27, Z+13	; 0x0d
    df7e:	28 17       	cp	r18, r24
    df80:	39 07       	cpc	r19, r25
    df82:	4a 07       	cpc	r20, r26
    df84:	5b 07       	cpc	r21, r27
    df86:	30 f1       	brcs	.+76     	; 0xdfd4 <f_write+0x4da>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    df88:	89 89       	ldd	r24, Y+17	; 0x11
    df8a:	9a 89       	ldd	r25, Y+18	; 0x12
    df8c:	fc 01       	movw	r30, r24
    df8e:	80 81       	ld	r24, Z
    df90:	91 81       	ldd	r25, Z+1	; 0x01
    df92:	40 e0       	ldi	r20, 0x00	; 0
    df94:	50 e0       	ldi	r21, 0x00	; 0
    df96:	ba 01       	movw	r22, r20
    df98:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    df9c:	88 23       	and	r24, r24
    df9e:	61 f0       	breq	.+24     	; 0xdfb8 <f_write+0x4be>
    dfa0:	89 89       	ldd	r24, Y+17	; 0x11
    dfa2:	9a 89       	ldd	r25, Y+18	; 0x12
    dfa4:	fc 01       	movw	r30, r24
    dfa6:	84 81       	ldd	r24, Z+4	; 0x04
    dfa8:	28 2f       	mov	r18, r24
    dfaa:	20 68       	ori	r18, 0x80	; 128
    dfac:	89 89       	ldd	r24, Y+17	; 0x11
    dfae:	9a 89       	ldd	r25, Y+18	; 0x12
    dfb0:	fc 01       	movw	r30, r24
    dfb2:	24 83       	std	Z+4, r18	; 0x04
    dfb4:	81 e0       	ldi	r24, 0x01	; 1
    dfb6:	de c0       	rjmp	.+444    	; 0xe174 <f_write+0x67a>
				fp->fs->winsect = sect;
    dfb8:	89 89       	ldd	r24, Y+17	; 0x11
    dfba:	9a 89       	ldd	r25, Y+18	; 0x12
    dfbc:	fc 01       	movw	r30, r24
    dfbe:	20 81       	ld	r18, Z
    dfc0:	31 81       	ldd	r19, Z+1	; 0x01
    dfc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    dfc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    dfc6:	af 85       	ldd	r26, Y+15	; 0x0f
    dfc8:	b8 89       	ldd	r27, Y+16	; 0x10
    dfca:	f9 01       	movw	r30, r18
    dfcc:	82 a7       	std	Z+42, r24	; 0x2a
    dfce:	93 a7       	std	Z+43, r25	; 0x2b
    dfd0:	a4 a7       	std	Z+44, r26	; 0x2c
    dfd2:	b5 a7       	std	Z+45, r27	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    dfd4:	29 89       	ldd	r18, Y+17	; 0x11
    dfd6:	3a 89       	ldd	r19, Y+18	; 0x12
    dfd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    dfda:	9e 85       	ldd	r25, Y+14	; 0x0e
    dfdc:	af 85       	ldd	r26, Y+15	; 0x0f
    dfde:	b8 89       	ldd	r27, Y+16	; 0x10
    dfe0:	f9 01       	movw	r30, r18
    dfe2:	86 8b       	std	Z+22, r24	; 0x16
    dfe4:	97 8b       	std	Z+23, r25	; 0x17
    dfe6:	a0 8f       	std	Z+24, r26	; 0x18
    dfe8:	b1 8f       	std	Z+25, r27	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    dfea:	89 89       	ldd	r24, Y+17	; 0x11
    dfec:	9a 89       	ldd	r25, Y+18	; 0x12
    dfee:	fc 01       	movw	r30, r24
    dff0:	86 81       	ldd	r24, Z+6	; 0x06
    dff2:	97 81       	ldd	r25, Z+7	; 0x07
    dff4:	a0 85       	ldd	r26, Z+8	; 0x08
    dff6:	b1 85       	ldd	r27, Z+9	; 0x09
    dff8:	91 70       	andi	r25, 0x01	; 1
    dffa:	20 e0       	ldi	r18, 0x00	; 0
    dffc:	32 e0       	ldi	r19, 0x02	; 2
    dffe:	79 01       	movw	r14, r18
    e000:	e8 1a       	sub	r14, r24
    e002:	f9 0a       	sbc	r15, r25
    e004:	c7 01       	movw	r24, r14
    e006:	9e 83       	std	Y+6, r25	; 0x06
    e008:	8d 83       	std	Y+5, r24	; 0x05
		if (wcnt > btw) wcnt = btw;
    e00a:	2d 81       	ldd	r18, Y+5	; 0x05
    e00c:	3e 81       	ldd	r19, Y+6	; 0x06
    e00e:	8d 89       	ldd	r24, Y+21	; 0x15
    e010:	9e 89       	ldd	r25, Y+22	; 0x16
    e012:	82 17       	cp	r24, r18
    e014:	93 07       	cpc	r25, r19
    e016:	20 f4       	brcc	.+8      	; 0xe020 <f_write+0x526>
    e018:	8d 89       	ldd	r24, Y+21	; 0x15
    e01a:	9e 89       	ldd	r25, Y+22	; 0x16
    e01c:	9e 83       	std	Y+6, r25	; 0x06
    e01e:	8d 83       	std	Y+5, r24	; 0x05
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    e020:	89 89       	ldd	r24, Y+17	; 0x11
    e022:	9a 89       	ldd	r25, Y+18	; 0x12
    e024:	fc 01       	movw	r30, r24
    e026:	80 81       	ld	r24, Z
    e028:	91 81       	ldd	r25, Z+1	; 0x01
    e02a:	29 89       	ldd	r18, Y+17	; 0x11
    e02c:	3a 89       	ldd	r19, Y+18	; 0x12
    e02e:	f9 01       	movw	r30, r18
    e030:	26 89       	ldd	r18, Z+22	; 0x16
    e032:	37 89       	ldd	r19, Z+23	; 0x17
    e034:	40 8d       	ldd	r20, Z+24	; 0x18
    e036:	51 8d       	ldd	r21, Z+25	; 0x19
    e038:	ba 01       	movw	r22, r20
    e03a:	a9 01       	movw	r20, r18
    e03c:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    e040:	88 23       	and	r24, r24
    e042:	61 f0       	breq	.+24     	; 0xe05c <f_write+0x562>
			ABORT(fp->fs, FR_DISK_ERR);
    e044:	89 89       	ldd	r24, Y+17	; 0x11
    e046:	9a 89       	ldd	r25, Y+18	; 0x12
    e048:	fc 01       	movw	r30, r24
    e04a:	84 81       	ldd	r24, Z+4	; 0x04
    e04c:	28 2f       	mov	r18, r24
    e04e:	20 68       	ori	r18, 0x80	; 128
    e050:	89 89       	ldd	r24, Y+17	; 0x11
    e052:	9a 89       	ldd	r25, Y+18	; 0x12
    e054:	fc 01       	movw	r30, r24
    e056:	24 83       	std	Z+4, r18	; 0x04
    e058:	81 e0       	ldi	r24, 0x01	; 1
    e05a:	8c c0       	rjmp	.+280    	; 0xe174 <f_write+0x67a>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    e05c:	89 89       	ldd	r24, Y+17	; 0x11
    e05e:	9a 89       	ldd	r25, Y+18	; 0x12
    e060:	fc 01       	movw	r30, r24
    e062:	80 81       	ld	r24, Z
    e064:	91 81       	ldd	r25, Z+1	; 0x01
    e066:	9c 01       	movw	r18, r24
    e068:	22 5d       	subi	r18, 0xD2	; 210
    e06a:	3f 4f       	sbci	r19, 0xFF	; 255
    e06c:	89 89       	ldd	r24, Y+17	; 0x11
    e06e:	9a 89       	ldd	r25, Y+18	; 0x12
    e070:	fc 01       	movw	r30, r24
    e072:	86 81       	ldd	r24, Z+6	; 0x06
    e074:	97 81       	ldd	r25, Z+7	; 0x07
    e076:	a0 85       	ldd	r26, Z+8	; 0x08
    e078:	b1 85       	ldd	r27, Z+9	; 0x09
    e07a:	91 70       	andi	r25, 0x01	; 1
    e07c:	82 0f       	add	r24, r18
    e07e:	93 1f       	adc	r25, r19
    e080:	49 85       	ldd	r20, Y+9	; 0x09
    e082:	5a 85       	ldd	r21, Y+10	; 0x0a
    e084:	2d 81       	ldd	r18, Y+5	; 0x05
    e086:	3e 81       	ldd	r19, Y+6	; 0x06
    e088:	ba 01       	movw	r22, r20
    e08a:	a9 01       	movw	r20, r18
    e08c:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
		fp->fs->wflag = 1;
    e090:	89 89       	ldd	r24, Y+17	; 0x11
    e092:	9a 89       	ldd	r25, Y+18	; 0x12
    e094:	fc 01       	movw	r30, r24
    e096:	80 81       	ld	r24, Z
    e098:	91 81       	ldd	r25, Z+1	; 0x01
    e09a:	21 e0       	ldi	r18, 0x01	; 1
    e09c:	fc 01       	movw	r30, r24
    e09e:	24 83       	std	Z+4, r18	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    e0a0:	29 85       	ldd	r18, Y+9	; 0x09
    e0a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    e0a4:	8d 81       	ldd	r24, Y+5	; 0x05
    e0a6:	9e 81       	ldd	r25, Y+6	; 0x06
    e0a8:	82 0f       	add	r24, r18
    e0aa:	93 1f       	adc	r25, r19
    e0ac:	9a 87       	std	Y+10, r25	; 0x0a
    e0ae:	89 87       	std	Y+9, r24	; 0x09
    e0b0:	89 89       	ldd	r24, Y+17	; 0x11
    e0b2:	9a 89       	ldd	r25, Y+18	; 0x12
    e0b4:	fc 01       	movw	r30, r24
    e0b6:	26 81       	ldd	r18, Z+6	; 0x06
    e0b8:	37 81       	ldd	r19, Z+7	; 0x07
    e0ba:	40 85       	ldd	r20, Z+8	; 0x08
    e0bc:	51 85       	ldd	r21, Z+9	; 0x09
    e0be:	8d 81       	ldd	r24, Y+5	; 0x05
    e0c0:	9e 81       	ldd	r25, Y+6	; 0x06
    e0c2:	cc 01       	movw	r24, r24
    e0c4:	a0 e0       	ldi	r26, 0x00	; 0
    e0c6:	b0 e0       	ldi	r27, 0x00	; 0
    e0c8:	82 0f       	add	r24, r18
    e0ca:	93 1f       	adc	r25, r19
    e0cc:	a4 1f       	adc	r26, r20
    e0ce:	b5 1f       	adc	r27, r21
    e0d0:	29 89       	ldd	r18, Y+17	; 0x11
    e0d2:	3a 89       	ldd	r19, Y+18	; 0x12
    e0d4:	f9 01       	movw	r30, r18
    e0d6:	86 83       	std	Z+6, r24	; 0x06
    e0d8:	97 83       	std	Z+7, r25	; 0x07
    e0da:	a0 87       	std	Z+8, r26	; 0x08
    e0dc:	b1 87       	std	Z+9, r27	; 0x09
    e0de:	8f 89       	ldd	r24, Y+23	; 0x17
    e0e0:	98 8d       	ldd	r25, Y+24	; 0x18
    e0e2:	fc 01       	movw	r30, r24
    e0e4:	20 81       	ld	r18, Z
    e0e6:	31 81       	ldd	r19, Z+1	; 0x01
    e0e8:	8d 81       	ldd	r24, Y+5	; 0x05
    e0ea:	9e 81       	ldd	r25, Y+6	; 0x06
    e0ec:	28 0f       	add	r18, r24
    e0ee:	39 1f       	adc	r19, r25
    e0f0:	8f 89       	ldd	r24, Y+23	; 0x17
    e0f2:	98 8d       	ldd	r25, Y+24	; 0x18
    e0f4:	fc 01       	movw	r30, r24
    e0f6:	31 83       	std	Z+1, r19	; 0x01
    e0f8:	20 83       	st	Z, r18
    e0fa:	2d 89       	ldd	r18, Y+21	; 0x15
    e0fc:	3e 89       	ldd	r19, Y+22	; 0x16
    e0fe:	8d 81       	ldd	r24, Y+5	; 0x05
    e100:	9e 81       	ldd	r25, Y+6	; 0x06
    e102:	79 01       	movw	r14, r18
    e104:	e8 1a       	sub	r14, r24
    e106:	f9 0a       	sbc	r15, r25
    e108:	c7 01       	movw	r24, r14
    e10a:	9e 8b       	std	Y+22, r25	; 0x16
    e10c:	8d 8b       	std	Y+21, r24	; 0x15
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    e10e:	8d 89       	ldd	r24, Y+21	; 0x15
    e110:	9e 89       	ldd	r25, Y+22	; 0x16
    e112:	00 97       	sbiw	r24, 0x00	; 0
    e114:	09 f0       	breq	.+2      	; 0xe118 <f_write+0x61e>
    e116:	57 cd       	rjmp	.-1362   	; 0xdbc6 <f_write+0xcc>
    e118:	01 c0       	rjmp	.+2      	; 0xe11c <f_write+0x622>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    e11a:	00 00       	nop
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    e11c:	89 89       	ldd	r24, Y+17	; 0x11
    e11e:	9a 89       	ldd	r25, Y+18	; 0x12
    e120:	fc 01       	movw	r30, r24
    e122:	26 81       	ldd	r18, Z+6	; 0x06
    e124:	37 81       	ldd	r19, Z+7	; 0x07
    e126:	40 85       	ldd	r20, Z+8	; 0x08
    e128:	51 85       	ldd	r21, Z+9	; 0x09
    e12a:	89 89       	ldd	r24, Y+17	; 0x11
    e12c:	9a 89       	ldd	r25, Y+18	; 0x12
    e12e:	fc 01       	movw	r30, r24
    e130:	82 85       	ldd	r24, Z+10	; 0x0a
    e132:	93 85       	ldd	r25, Z+11	; 0x0b
    e134:	a4 85       	ldd	r26, Z+12	; 0x0c
    e136:	b5 85       	ldd	r27, Z+13	; 0x0d
    e138:	82 17       	cp	r24, r18
    e13a:	93 07       	cpc	r25, r19
    e13c:	a4 07       	cpc	r26, r20
    e13e:	b5 07       	cpc	r27, r21
    e140:	70 f4       	brcc	.+28     	; 0xe15e <f_write+0x664>
    e142:	89 89       	ldd	r24, Y+17	; 0x11
    e144:	9a 89       	ldd	r25, Y+18	; 0x12
    e146:	fc 01       	movw	r30, r24
    e148:	86 81       	ldd	r24, Z+6	; 0x06
    e14a:	97 81       	ldd	r25, Z+7	; 0x07
    e14c:	a0 85       	ldd	r26, Z+8	; 0x08
    e14e:	b1 85       	ldd	r27, Z+9	; 0x09
    e150:	29 89       	ldd	r18, Y+17	; 0x11
    e152:	3a 89       	ldd	r19, Y+18	; 0x12
    e154:	f9 01       	movw	r30, r18
    e156:	82 87       	std	Z+10, r24	; 0x0a
    e158:	93 87       	std	Z+11, r25	; 0x0b
    e15a:	a4 87       	std	Z+12, r26	; 0x0c
    e15c:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    e15e:	89 89       	ldd	r24, Y+17	; 0x11
    e160:	9a 89       	ldd	r25, Y+18	; 0x12
    e162:	fc 01       	movw	r30, r24
    e164:	84 81       	ldd	r24, Z+4	; 0x04
    e166:	28 2f       	mov	r18, r24
    e168:	20 62       	ori	r18, 0x20	; 32
    e16a:	89 89       	ldd	r24, Y+17	; 0x11
    e16c:	9a 89       	ldd	r25, Y+18	; 0x12
    e16e:	fc 01       	movw	r30, r24
    e170:	24 83       	std	Z+4, r18	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    e172:	80 e0       	ldi	r24, 0x00	; 0
}
    e174:	68 96       	adiw	r28, 0x18	; 24
    e176:	0f b6       	in	r0, 0x3f	; 63
    e178:	f8 94       	cli
    e17a:	de bf       	out	0x3e, r29	; 62
    e17c:	0f be       	out	0x3f, r0	; 63
    e17e:	cd bf       	out	0x3d, r28	; 61
    e180:	cf 91       	pop	r28
    e182:	df 91       	pop	r29
    e184:	1f 91       	pop	r17
    e186:	0f 91       	pop	r16
    e188:	ff 90       	pop	r15
    e18a:	ef 90       	pop	r14
    e18c:	08 95       	ret

0000e18e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    e18e:	df 93       	push	r29
    e190:	cf 93       	push	r28
    e192:	cd b7       	in	r28, 0x3d	; 61
    e194:	de b7       	in	r29, 0x3e	; 62
    e196:	29 97       	sbiw	r28, 0x09	; 9
    e198:	0f b6       	in	r0, 0x3f	; 63
    e19a:	f8 94       	cli
    e19c:	de bf       	out	0x3e, r29	; 62
    e19e:	0f be       	out	0x3f, r0	; 63
    e1a0:	cd bf       	out	0x3d, r28	; 61
    e1a2:	99 87       	std	Y+9, r25	; 0x09
    e1a4:	88 87       	std	Y+8, r24	; 0x08
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    e1a6:	88 85       	ldd	r24, Y+8	; 0x08
    e1a8:	99 85       	ldd	r25, Y+9	; 0x09
    e1aa:	fc 01       	movw	r30, r24
    e1ac:	80 81       	ld	r24, Z
    e1ae:	91 81       	ldd	r25, Z+1	; 0x01
    e1b0:	28 85       	ldd	r18, Y+8	; 0x08
    e1b2:	39 85       	ldd	r19, Y+9	; 0x09
    e1b4:	f9 01       	movw	r30, r18
    e1b6:	22 81       	ldd	r18, Z+2	; 0x02
    e1b8:	33 81       	ldd	r19, Z+3	; 0x03
    e1ba:	b9 01       	movw	r22, r18
    e1bc:	0e 94 2e 68 	call	0xd05c	; 0xd05c <validate>
    e1c0:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    e1c2:	89 81       	ldd	r24, Y+1	; 0x01
    e1c4:	88 23       	and	r24, r24
    e1c6:	09 f0       	breq	.+2      	; 0xe1ca <f_sync+0x3c>
    e1c8:	04 c1       	rjmp	.+520    	; 0xe3d2 <f_sync+0x244>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    e1ca:	88 85       	ldd	r24, Y+8	; 0x08
    e1cc:	99 85       	ldd	r25, Y+9	; 0x09
    e1ce:	fc 01       	movw	r30, r24
    e1d0:	84 81       	ldd	r24, Z+4	; 0x04
    e1d2:	88 2f       	mov	r24, r24
    e1d4:	90 e0       	ldi	r25, 0x00	; 0
    e1d6:	80 72       	andi	r24, 0x20	; 32
    e1d8:	90 70       	andi	r25, 0x00	; 0
    e1da:	00 97       	sbiw	r24, 0x00	; 0
    e1dc:	09 f4       	brne	.+2      	; 0xe1e0 <f_sync+0x52>
    e1de:	f9 c0       	rjmp	.+498    	; 0xe3d2 <f_sync+0x244>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    e1e0:	88 85       	ldd	r24, Y+8	; 0x08
    e1e2:	99 85       	ldd	r25, Y+9	; 0x09
    e1e4:	fc 01       	movw	r30, r24
    e1e6:	80 81       	ld	r24, Z
    e1e8:	91 81       	ldd	r25, Z+1	; 0x01
    e1ea:	28 85       	ldd	r18, Y+8	; 0x08
    e1ec:	39 85       	ldd	r19, Y+9	; 0x09
    e1ee:	f9 01       	movw	r30, r18
    e1f0:	22 8d       	ldd	r18, Z+26	; 0x1a
    e1f2:	33 8d       	ldd	r19, Z+27	; 0x1b
    e1f4:	44 8d       	ldd	r20, Z+28	; 0x1c
    e1f6:	55 8d       	ldd	r21, Z+29	; 0x1d
    e1f8:	ba 01       	movw	r22, r20
    e1fa:	a9 01       	movw	r20, r18
    e1fc:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    e200:	89 83       	std	Y+1, r24	; 0x01
			if (res == FR_OK) {
    e202:	89 81       	ldd	r24, Y+1	; 0x01
    e204:	88 23       	and	r24, r24
    e206:	09 f0       	breq	.+2      	; 0xe20a <f_sync+0x7c>
    e208:	e4 c0       	rjmp	.+456    	; 0xe3d2 <f_sync+0x244>
				dir = fp->dir_ptr;
    e20a:	88 85       	ldd	r24, Y+8	; 0x08
    e20c:	99 85       	ldd	r25, Y+9	; 0x09
    e20e:	fc 01       	movw	r30, r24
    e210:	86 8d       	ldd	r24, Z+30	; 0x1e
    e212:	97 8d       	ldd	r25, Z+31	; 0x1f
    e214:	9b 83       	std	Y+3, r25	; 0x03
    e216:	8a 83       	std	Y+2, r24	; 0x02
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    e218:	8a 81       	ldd	r24, Y+2	; 0x02
    e21a:	9b 81       	ldd	r25, Y+3	; 0x03
    e21c:	0b 96       	adiw	r24, 0x0b	; 11
    e21e:	2a 81       	ldd	r18, Y+2	; 0x02
    e220:	3b 81       	ldd	r19, Y+3	; 0x03
    e222:	25 5f       	subi	r18, 0xF5	; 245
    e224:	3f 4f       	sbci	r19, 0xFF	; 255
    e226:	f9 01       	movw	r30, r18
    e228:	20 81       	ld	r18, Z
    e22a:	20 62       	ori	r18, 0x20	; 32
    e22c:	fc 01       	movw	r30, r24
    e22e:	20 83       	st	Z, r18
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    e230:	8a 81       	ldd	r24, Y+2	; 0x02
    e232:	9b 81       	ldd	r25, Y+3	; 0x03
    e234:	9c 01       	movw	r18, r24
    e236:	24 5e       	subi	r18, 0xE4	; 228
    e238:	3f 4f       	sbci	r19, 0xFF	; 255
    e23a:	88 85       	ldd	r24, Y+8	; 0x08
    e23c:	99 85       	ldd	r25, Y+9	; 0x09
    e23e:	fc 01       	movw	r30, r24
    e240:	82 85       	ldd	r24, Z+10	; 0x0a
    e242:	93 85       	ldd	r25, Z+11	; 0x0b
    e244:	a4 85       	ldd	r26, Z+12	; 0x0c
    e246:	b5 85       	ldd	r27, Z+13	; 0x0d
    e248:	f9 01       	movw	r30, r18
    e24a:	80 83       	st	Z, r24
    e24c:	8a 81       	ldd	r24, Y+2	; 0x02
    e24e:	9b 81       	ldd	r25, Y+3	; 0x03
    e250:	9c 01       	movw	r18, r24
    e252:	23 5e       	subi	r18, 0xE3	; 227
    e254:	3f 4f       	sbci	r19, 0xFF	; 255
    e256:	88 85       	ldd	r24, Y+8	; 0x08
    e258:	99 85       	ldd	r25, Y+9	; 0x09
    e25a:	fc 01       	movw	r30, r24
    e25c:	82 85       	ldd	r24, Z+10	; 0x0a
    e25e:	93 85       	ldd	r25, Z+11	; 0x0b
    e260:	a4 85       	ldd	r26, Z+12	; 0x0c
    e262:	b5 85       	ldd	r27, Z+13	; 0x0d
    e264:	89 2f       	mov	r24, r25
    e266:	99 27       	eor	r25, r25
    e268:	f9 01       	movw	r30, r18
    e26a:	80 83       	st	Z, r24
    e26c:	8a 81       	ldd	r24, Y+2	; 0x02
    e26e:	9b 81       	ldd	r25, Y+3	; 0x03
    e270:	9c 01       	movw	r18, r24
    e272:	22 5e       	subi	r18, 0xE2	; 226
    e274:	3f 4f       	sbci	r19, 0xFF	; 255
    e276:	88 85       	ldd	r24, Y+8	; 0x08
    e278:	99 85       	ldd	r25, Y+9	; 0x09
    e27a:	fc 01       	movw	r30, r24
    e27c:	82 85       	ldd	r24, Z+10	; 0x0a
    e27e:	93 85       	ldd	r25, Z+11	; 0x0b
    e280:	a4 85       	ldd	r26, Z+12	; 0x0c
    e282:	b5 85       	ldd	r27, Z+13	; 0x0d
    e284:	cd 01       	movw	r24, r26
    e286:	aa 27       	eor	r26, r26
    e288:	bb 27       	eor	r27, r27
    e28a:	f9 01       	movw	r30, r18
    e28c:	80 83       	st	Z, r24
    e28e:	8a 81       	ldd	r24, Y+2	; 0x02
    e290:	9b 81       	ldd	r25, Y+3	; 0x03
    e292:	9c 01       	movw	r18, r24
    e294:	21 5e       	subi	r18, 0xE1	; 225
    e296:	3f 4f       	sbci	r19, 0xFF	; 255
    e298:	88 85       	ldd	r24, Y+8	; 0x08
    e29a:	99 85       	ldd	r25, Y+9	; 0x09
    e29c:	fc 01       	movw	r30, r24
    e29e:	82 85       	ldd	r24, Z+10	; 0x0a
    e2a0:	93 85       	ldd	r25, Z+11	; 0x0b
    e2a2:	a4 85       	ldd	r26, Z+12	; 0x0c
    e2a4:	b5 85       	ldd	r27, Z+13	; 0x0d
    e2a6:	8b 2f       	mov	r24, r27
    e2a8:	99 27       	eor	r25, r25
    e2aa:	aa 27       	eor	r26, r26
    e2ac:	bb 27       	eor	r27, r27
    e2ae:	f9 01       	movw	r30, r18
    e2b0:	80 83       	st	Z, r24
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    e2b2:	8a 81       	ldd	r24, Y+2	; 0x02
    e2b4:	9b 81       	ldd	r25, Y+3	; 0x03
    e2b6:	9c 01       	movw	r18, r24
    e2b8:	26 5e       	subi	r18, 0xE6	; 230
    e2ba:	3f 4f       	sbci	r19, 0xFF	; 255
    e2bc:	88 85       	ldd	r24, Y+8	; 0x08
    e2be:	99 85       	ldd	r25, Y+9	; 0x09
    e2c0:	fc 01       	movw	r30, r24
    e2c2:	86 85       	ldd	r24, Z+14	; 0x0e
    e2c4:	97 85       	ldd	r25, Z+15	; 0x0f
    e2c6:	a0 89       	ldd	r26, Z+16	; 0x10
    e2c8:	b1 89       	ldd	r27, Z+17	; 0x11
    e2ca:	f9 01       	movw	r30, r18
    e2cc:	80 83       	st	Z, r24
    e2ce:	8a 81       	ldd	r24, Y+2	; 0x02
    e2d0:	9b 81       	ldd	r25, Y+3	; 0x03
    e2d2:	9c 01       	movw	r18, r24
    e2d4:	25 5e       	subi	r18, 0xE5	; 229
    e2d6:	3f 4f       	sbci	r19, 0xFF	; 255
    e2d8:	88 85       	ldd	r24, Y+8	; 0x08
    e2da:	99 85       	ldd	r25, Y+9	; 0x09
    e2dc:	fc 01       	movw	r30, r24
    e2de:	86 85       	ldd	r24, Z+14	; 0x0e
    e2e0:	97 85       	ldd	r25, Z+15	; 0x0f
    e2e2:	a0 89       	ldd	r26, Z+16	; 0x10
    e2e4:	b1 89       	ldd	r27, Z+17	; 0x11
    e2e6:	89 2f       	mov	r24, r25
    e2e8:	99 27       	eor	r25, r25
    e2ea:	f9 01       	movw	r30, r18
    e2ec:	80 83       	st	Z, r24
    e2ee:	8a 81       	ldd	r24, Y+2	; 0x02
    e2f0:	9b 81       	ldd	r25, Y+3	; 0x03
    e2f2:	9c 01       	movw	r18, r24
    e2f4:	2c 5e       	subi	r18, 0xEC	; 236
    e2f6:	3f 4f       	sbci	r19, 0xFF	; 255
    e2f8:	88 85       	ldd	r24, Y+8	; 0x08
    e2fa:	99 85       	ldd	r25, Y+9	; 0x09
    e2fc:	fc 01       	movw	r30, r24
    e2fe:	86 85       	ldd	r24, Z+14	; 0x0e
    e300:	97 85       	ldd	r25, Z+15	; 0x0f
    e302:	a0 89       	ldd	r26, Z+16	; 0x10
    e304:	b1 89       	ldd	r27, Z+17	; 0x11
    e306:	cd 01       	movw	r24, r26
    e308:	aa 27       	eor	r26, r26
    e30a:	bb 27       	eor	r27, r27
    e30c:	f9 01       	movw	r30, r18
    e30e:	80 83       	st	Z, r24
    e310:	8a 81       	ldd	r24, Y+2	; 0x02
    e312:	9b 81       	ldd	r25, Y+3	; 0x03
    e314:	9c 01       	movw	r18, r24
    e316:	2b 5e       	subi	r18, 0xEB	; 235
    e318:	3f 4f       	sbci	r19, 0xFF	; 255
    e31a:	88 85       	ldd	r24, Y+8	; 0x08
    e31c:	99 85       	ldd	r25, Y+9	; 0x09
    e31e:	fc 01       	movw	r30, r24
    e320:	86 85       	ldd	r24, Z+14	; 0x0e
    e322:	97 85       	ldd	r25, Z+15	; 0x0f
    e324:	a0 89       	ldd	r26, Z+16	; 0x10
    e326:	b1 89       	ldd	r27, Z+17	; 0x11
    e328:	cd 01       	movw	r24, r26
    e32a:	aa 27       	eor	r26, r26
    e32c:	bb 27       	eor	r27, r27
    e32e:	89 2f       	mov	r24, r25
    e330:	99 27       	eor	r25, r25
    e332:	f9 01       	movw	r30, r18
    e334:	80 83       	st	Z, r24
				tim = get_fattime();						/* Update updated time */
    e336:	0e 94 f8 85 	call	0x10bf0	; 0x10bf0 <get_fattime>
    e33a:	dc 01       	movw	r26, r24
    e33c:	cb 01       	movw	r24, r22
    e33e:	8c 83       	std	Y+4, r24	; 0x04
    e340:	9d 83       	std	Y+5, r25	; 0x05
    e342:	ae 83       	std	Y+6, r26	; 0x06
    e344:	bf 83       	std	Y+7, r27	; 0x07
				ST_DWORD(dir+DIR_WrtTime, tim);
    e346:	8a 81       	ldd	r24, Y+2	; 0x02
    e348:	9b 81       	ldd	r25, Y+3	; 0x03
    e34a:	46 96       	adiw	r24, 0x16	; 22
    e34c:	2c 81       	ldd	r18, Y+4	; 0x04
    e34e:	fc 01       	movw	r30, r24
    e350:	20 83       	st	Z, r18
    e352:	8a 81       	ldd	r24, Y+2	; 0x02
    e354:	9b 81       	ldd	r25, Y+3	; 0x03
    e356:	47 96       	adiw	r24, 0x17	; 23
    e358:	2c 81       	ldd	r18, Y+4	; 0x04
    e35a:	3d 81       	ldd	r19, Y+5	; 0x05
    e35c:	23 2f       	mov	r18, r19
    e35e:	33 27       	eor	r19, r19
    e360:	fc 01       	movw	r30, r24
    e362:	20 83       	st	Z, r18
    e364:	8a 81       	ldd	r24, Y+2	; 0x02
    e366:	9b 81       	ldd	r25, Y+3	; 0x03
    e368:	9c 01       	movw	r18, r24
    e36a:	28 5e       	subi	r18, 0xE8	; 232
    e36c:	3f 4f       	sbci	r19, 0xFF	; 255
    e36e:	8c 81       	ldd	r24, Y+4	; 0x04
    e370:	9d 81       	ldd	r25, Y+5	; 0x05
    e372:	ae 81       	ldd	r26, Y+6	; 0x06
    e374:	bf 81       	ldd	r27, Y+7	; 0x07
    e376:	cd 01       	movw	r24, r26
    e378:	aa 27       	eor	r26, r26
    e37a:	bb 27       	eor	r27, r27
    e37c:	f9 01       	movw	r30, r18
    e37e:	80 83       	st	Z, r24
    e380:	8a 81       	ldd	r24, Y+2	; 0x02
    e382:	9b 81       	ldd	r25, Y+3	; 0x03
    e384:	9c 01       	movw	r18, r24
    e386:	27 5e       	subi	r18, 0xE7	; 231
    e388:	3f 4f       	sbci	r19, 0xFF	; 255
    e38a:	8c 81       	ldd	r24, Y+4	; 0x04
    e38c:	9d 81       	ldd	r25, Y+5	; 0x05
    e38e:	ae 81       	ldd	r26, Y+6	; 0x06
    e390:	bf 81       	ldd	r27, Y+7	; 0x07
    e392:	8b 2f       	mov	r24, r27
    e394:	99 27       	eor	r25, r25
    e396:	aa 27       	eor	r26, r26
    e398:	bb 27       	eor	r27, r27
    e39a:	f9 01       	movw	r30, r18
    e39c:	80 83       	st	Z, r24
				fp->flag &= ~FA__WRITTEN;
    e39e:	88 85       	ldd	r24, Y+8	; 0x08
    e3a0:	99 85       	ldd	r25, Y+9	; 0x09
    e3a2:	fc 01       	movw	r30, r24
    e3a4:	84 81       	ldd	r24, Z+4	; 0x04
    e3a6:	28 2f       	mov	r18, r24
    e3a8:	2f 7d       	andi	r18, 0xDF	; 223
    e3aa:	88 85       	ldd	r24, Y+8	; 0x08
    e3ac:	99 85       	ldd	r25, Y+9	; 0x09
    e3ae:	fc 01       	movw	r30, r24
    e3b0:	24 83       	std	Z+4, r18	; 0x04
				fp->fs->wflag = 1;
    e3b2:	88 85       	ldd	r24, Y+8	; 0x08
    e3b4:	99 85       	ldd	r25, Y+9	; 0x09
    e3b6:	fc 01       	movw	r30, r24
    e3b8:	80 81       	ld	r24, Z
    e3ba:	91 81       	ldd	r25, Z+1	; 0x01
    e3bc:	21 e0       	ldi	r18, 0x01	; 1
    e3be:	fc 01       	movw	r30, r24
    e3c0:	24 83       	std	Z+4, r18	; 0x04
				res = sync(fp->fs);
    e3c2:	88 85       	ldd	r24, Y+8	; 0x08
    e3c4:	99 85       	ldd	r25, Y+9	; 0x09
    e3c6:	fc 01       	movw	r30, r24
    e3c8:	80 81       	ld	r24, Z
    e3ca:	91 81       	ldd	r25, Z+1	; 0x01
    e3cc:	0e 94 18 52 	call	0xa430	; 0xa430 <sync>
    e3d0:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    e3d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    e3d4:	29 96       	adiw	r28, 0x09	; 9
    e3d6:	0f b6       	in	r0, 0x3f	; 63
    e3d8:	f8 94       	cli
    e3da:	de bf       	out	0x3e, r29	; 62
    e3dc:	0f be       	out	0x3f, r0	; 63
    e3de:	cd bf       	out	0x3d, r28	; 61
    e3e0:	cf 91       	pop	r28
    e3e2:	df 91       	pop	r29
    e3e4:	08 95       	ret

0000e3e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    e3e6:	df 93       	push	r29
    e3e8:	cf 93       	push	r28
    e3ea:	00 d0       	rcall	.+0      	; 0xe3ec <f_close+0x6>
    e3ec:	0f 92       	push	r0
    e3ee:	cd b7       	in	r28, 0x3d	; 61
    e3f0:	de b7       	in	r29, 0x3e	; 62
    e3f2:	9b 83       	std	Y+3, r25	; 0x03
    e3f4:	8a 83       	std	Y+2, r24	; 0x02
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    e3f6:	8a 81       	ldd	r24, Y+2	; 0x02
    e3f8:	9b 81       	ldd	r25, Y+3	; 0x03
    e3fa:	0e 94 c7 70 	call	0xe18e	; 0xe18e <f_sync>
    e3fe:	89 83       	std	Y+1, r24	; 0x01
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    e400:	89 81       	ldd	r24, Y+1	; 0x01
    e402:	88 23       	and	r24, r24
    e404:	29 f4       	brne	.+10     	; 0xe410 <f_close+0x2a>
    e406:	8a 81       	ldd	r24, Y+2	; 0x02
    e408:	9b 81       	ldd	r25, Y+3	; 0x03
    e40a:	fc 01       	movw	r30, r24
    e40c:	11 82       	std	Z+1, r1	; 0x01
    e40e:	10 82       	st	Z, r1
	return res;
    e410:	89 81       	ldd	r24, Y+1	; 0x01
#endif
}
    e412:	0f 90       	pop	r0
    e414:	0f 90       	pop	r0
    e416:	0f 90       	pop	r0
    e418:	cf 91       	pop	r28
    e41a:	df 91       	pop	r29
    e41c:	08 95       	ret

0000e41e <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    e41e:	ef 92       	push	r14
    e420:	ff 92       	push	r15
    e422:	0f 93       	push	r16
    e424:	1f 93       	push	r17
    e426:	df 93       	push	r29
    e428:	cf 93       	push	r28
    e42a:	cd b7       	in	r28, 0x3d	; 61
    e42c:	de b7       	in	r29, 0x3e	; 62
    e42e:	67 97       	sbiw	r28, 0x17	; 23
    e430:	0f b6       	in	r0, 0x3f	; 63
    e432:	f8 94       	cli
    e434:	de bf       	out	0x3e, r29	; 62
    e436:	0f be       	out	0x3f, r0	; 63
    e438:	cd bf       	out	0x3d, r28	; 61
    e43a:	9b 8b       	std	Y+19, r25	; 0x13
    e43c:	8a 8b       	std	Y+18, r24	; 0x12
    e43e:	4c 8b       	std	Y+20, r20	; 0x14
    e440:	5d 8b       	std	Y+21, r21	; 0x15
    e442:	6e 8b       	std	Y+22, r22	; 0x16
    e444:	7f 8b       	std	Y+23, r23	; 0x17
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    e446:	8a 89       	ldd	r24, Y+18	; 0x12
    e448:	9b 89       	ldd	r25, Y+19	; 0x13
    e44a:	fc 01       	movw	r30, r24
    e44c:	80 81       	ld	r24, Z
    e44e:	91 81       	ldd	r25, Z+1	; 0x01
    e450:	2a 89       	ldd	r18, Y+18	; 0x12
    e452:	3b 89       	ldd	r19, Y+19	; 0x13
    e454:	f9 01       	movw	r30, r18
    e456:	22 81       	ldd	r18, Z+2	; 0x02
    e458:	33 81       	ldd	r19, Z+3	; 0x03
    e45a:	b9 01       	movw	r22, r18
    e45c:	0e 94 2e 68 	call	0xd05c	; 0xd05c <validate>
    e460:	89 87       	std	Y+9, r24	; 0x09
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    e462:	89 85       	ldd	r24, Y+9	; 0x09
    e464:	88 23       	and	r24, r24
    e466:	11 f0       	breq	.+4      	; 0xe46c <f_lseek+0x4e>
    e468:	89 85       	ldd	r24, Y+9	; 0x09
    e46a:	c8 c2       	rjmp	.+1424   	; 0xe9fc <f_lseek+0x5de>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    e46c:	8a 89       	ldd	r24, Y+18	; 0x12
    e46e:	9b 89       	ldd	r25, Y+19	; 0x13
    e470:	fc 01       	movw	r30, r24
    e472:	84 81       	ldd	r24, Z+4	; 0x04
    e474:	88 23       	and	r24, r24
    e476:	14 f4       	brge	.+4      	; 0xe47c <f_lseek+0x5e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    e478:	82 e0       	ldi	r24, 0x02	; 2
    e47a:	c0 c2       	rjmp	.+1408   	; 0xe9fc <f_lseek+0x5de>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    e47c:	8a 89       	ldd	r24, Y+18	; 0x12
    e47e:	9b 89       	ldd	r25, Y+19	; 0x13
    e480:	fc 01       	movw	r30, r24
    e482:	22 85       	ldd	r18, Z+10	; 0x0a
    e484:	33 85       	ldd	r19, Z+11	; 0x0b
    e486:	44 85       	ldd	r20, Z+12	; 0x0c
    e488:	55 85       	ldd	r21, Z+13	; 0x0d
    e48a:	8c 89       	ldd	r24, Y+20	; 0x14
    e48c:	9d 89       	ldd	r25, Y+21	; 0x15
    e48e:	ae 89       	ldd	r26, Y+22	; 0x16
    e490:	bf 89       	ldd	r27, Y+23	; 0x17
    e492:	28 17       	cp	r18, r24
    e494:	39 07       	cpc	r19, r25
    e496:	4a 07       	cpc	r20, r26
    e498:	5b 07       	cpc	r21, r27
    e49a:	a8 f4       	brcc	.+42     	; 0xe4c6 <f_lseek+0xa8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    e49c:	8a 89       	ldd	r24, Y+18	; 0x12
    e49e:	9b 89       	ldd	r25, Y+19	; 0x13
    e4a0:	fc 01       	movw	r30, r24
    e4a2:	84 81       	ldd	r24, Z+4	; 0x04
    e4a4:	88 2f       	mov	r24, r24
    e4a6:	90 e0       	ldi	r25, 0x00	; 0
    e4a8:	82 70       	andi	r24, 0x02	; 2
    e4aa:	90 70       	andi	r25, 0x00	; 0
    e4ac:	00 97       	sbiw	r24, 0x00	; 0
    e4ae:	59 f4       	brne	.+22     	; 0xe4c6 <f_lseek+0xa8>
#endif
			) ofs = fp->fsize;
    e4b0:	8a 89       	ldd	r24, Y+18	; 0x12
    e4b2:	9b 89       	ldd	r25, Y+19	; 0x13
    e4b4:	fc 01       	movw	r30, r24
    e4b6:	82 85       	ldd	r24, Z+10	; 0x0a
    e4b8:	93 85       	ldd	r25, Z+11	; 0x0b
    e4ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    e4bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    e4be:	8c 8b       	std	Y+20, r24	; 0x14
    e4c0:	9d 8b       	std	Y+21, r25	; 0x15
    e4c2:	ae 8b       	std	Y+22, r26	; 0x16
    e4c4:	bf 8b       	std	Y+23, r27	; 0x17

		ifptr = fp->fptr;
    e4c6:	8a 89       	ldd	r24, Y+18	; 0x12
    e4c8:	9b 89       	ldd	r25, Y+19	; 0x13
    e4ca:	fc 01       	movw	r30, r24
    e4cc:	86 81       	ldd	r24, Z+6	; 0x06
    e4ce:	97 81       	ldd	r25, Z+7	; 0x07
    e4d0:	a0 85       	ldd	r26, Z+8	; 0x08
    e4d2:	b1 85       	ldd	r27, Z+9	; 0x09
    e4d4:	8a 87       	std	Y+10, r24	; 0x0a
    e4d6:	9b 87       	std	Y+11, r25	; 0x0b
    e4d8:	ac 87       	std	Y+12, r26	; 0x0c
    e4da:	bd 87       	std	Y+13, r27	; 0x0d
		fp->fptr = nsect = 0;
    e4dc:	1d 82       	std	Y+5, r1	; 0x05
    e4de:	1e 82       	std	Y+6, r1	; 0x06
    e4e0:	1f 82       	std	Y+7, r1	; 0x07
    e4e2:	18 86       	std	Y+8, r1	; 0x08
    e4e4:	2a 89       	ldd	r18, Y+18	; 0x12
    e4e6:	3b 89       	ldd	r19, Y+19	; 0x13
    e4e8:	8d 81       	ldd	r24, Y+5	; 0x05
    e4ea:	9e 81       	ldd	r25, Y+6	; 0x06
    e4ec:	af 81       	ldd	r26, Y+7	; 0x07
    e4ee:	b8 85       	ldd	r27, Y+8	; 0x08
    e4f0:	f9 01       	movw	r30, r18
    e4f2:	86 83       	std	Z+6, r24	; 0x06
    e4f4:	97 83       	std	Z+7, r25	; 0x07
    e4f6:	a0 87       	std	Z+8, r26	; 0x08
    e4f8:	b1 87       	std	Z+9, r27	; 0x09
		if (ofs) {
    e4fa:	8c 89       	ldd	r24, Y+20	; 0x14
    e4fc:	9d 89       	ldd	r25, Y+21	; 0x15
    e4fe:	ae 89       	ldd	r26, Y+22	; 0x16
    e500:	bf 89       	ldd	r27, Y+23	; 0x17
    e502:	00 97       	sbiw	r24, 0x00	; 0
    e504:	a1 05       	cpc	r26, r1
    e506:	b1 05       	cpc	r27, r1
    e508:	09 f4       	brne	.+2      	; 0xe50c <f_lseek+0xee>
    e50a:	23 c2       	rjmp	.+1094   	; 0xe952 <f_lseek+0x534>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    e50c:	8a 89       	ldd	r24, Y+18	; 0x12
    e50e:	9b 89       	ldd	r25, Y+19	; 0x13
    e510:	fc 01       	movw	r30, r24
    e512:	80 81       	ld	r24, Z
    e514:	91 81       	ldd	r25, Z+1	; 0x01
    e516:	fc 01       	movw	r30, r24
    e518:	82 81       	ldd	r24, Z+2	; 0x02
    e51a:	88 2f       	mov	r24, r24
    e51c:	90 e0       	ldi	r25, 0x00	; 0
    e51e:	a0 e0       	ldi	r26, 0x00	; 0
    e520:	b0 e0       	ldi	r27, 0x00	; 0
    e522:	07 2e       	mov	r0, r23
    e524:	79 e0       	ldi	r23, 0x09	; 9
    e526:	88 0f       	add	r24, r24
    e528:	99 1f       	adc	r25, r25
    e52a:	aa 1f       	adc	r26, r26
    e52c:	bb 1f       	adc	r27, r27
    e52e:	7a 95       	dec	r23
    e530:	d1 f7       	brne	.-12     	; 0xe526 <f_lseek+0x108>
    e532:	70 2d       	mov	r23, r0
    e534:	8e 87       	std	Y+14, r24	; 0x0e
    e536:	9f 87       	std	Y+15, r25	; 0x0f
    e538:	a8 8b       	std	Y+16, r26	; 0x10
    e53a:	b9 8b       	std	Y+17, r27	; 0x11
			if (ifptr > 0 &&
    e53c:	8a 85       	ldd	r24, Y+10	; 0x0a
    e53e:	9b 85       	ldd	r25, Y+11	; 0x0b
    e540:	ac 85       	ldd	r26, Y+12	; 0x0c
    e542:	bd 85       	ldd	r27, Y+13	; 0x0d
    e544:	00 97       	sbiw	r24, 0x00	; 0
    e546:	a1 05       	cpc	r26, r1
    e548:	b1 05       	cpc	r27, r1
    e54a:	09 f4       	brne	.+2      	; 0xe54e <f_lseek+0x130>
    e54c:	6b c0       	rjmp	.+214    	; 0xe624 <f_lseek+0x206>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    e54e:	8c 89       	ldd	r24, Y+20	; 0x14
    e550:	9d 89       	ldd	r25, Y+21	; 0x15
    e552:	ae 89       	ldd	r26, Y+22	; 0x16
    e554:	bf 89       	ldd	r27, Y+23	; 0x17
    e556:	01 97       	sbiw	r24, 0x01	; 1
    e558:	a1 09       	sbc	r26, r1
    e55a:	b1 09       	sbc	r27, r1
    e55c:	2e 85       	ldd	r18, Y+14	; 0x0e
    e55e:	3f 85       	ldd	r19, Y+15	; 0x0f
    e560:	48 89       	ldd	r20, Y+16	; 0x10
    e562:	59 89       	ldd	r21, Y+17	; 0x11
    e564:	bc 01       	movw	r22, r24
    e566:	cd 01       	movw	r24, r26
    e568:	0e 94 38 91 	call	0x12270	; 0x12270 <__udivmodsi4>
    e56c:	79 01       	movw	r14, r18
    e56e:	8a 01       	movw	r16, r20
    e570:	8a 85       	ldd	r24, Y+10	; 0x0a
    e572:	9b 85       	ldd	r25, Y+11	; 0x0b
    e574:	ac 85       	ldd	r26, Y+12	; 0x0c
    e576:	bd 85       	ldd	r27, Y+13	; 0x0d
    e578:	01 97       	sbiw	r24, 0x01	; 1
    e57a:	a1 09       	sbc	r26, r1
    e57c:	b1 09       	sbc	r27, r1
    e57e:	2e 85       	ldd	r18, Y+14	; 0x0e
    e580:	3f 85       	ldd	r19, Y+15	; 0x0f
    e582:	48 89       	ldd	r20, Y+16	; 0x10
    e584:	59 89       	ldd	r21, Y+17	; 0x11
    e586:	bc 01       	movw	r22, r24
    e588:	cd 01       	movw	r24, r26
    e58a:	0e 94 38 91 	call	0x12270	; 0x12270 <__udivmodsi4>
    e58e:	da 01       	movw	r26, r20
    e590:	c9 01       	movw	r24, r18

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    e592:	e8 16       	cp	r14, r24
    e594:	f9 06       	cpc	r15, r25
    e596:	0a 07       	cpc	r16, r26
    e598:	1b 07       	cpc	r17, r27
    e59a:	08 f4       	brcc	.+2      	; 0xe59e <f_lseek+0x180>
    e59c:	43 c0       	rjmp	.+134    	; 0xe624 <f_lseek+0x206>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    e59e:	8a 85       	ldd	r24, Y+10	; 0x0a
    e5a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    e5a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    e5a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    e5a6:	9c 01       	movw	r18, r24
    e5a8:	ad 01       	movw	r20, r26
    e5aa:	21 50       	subi	r18, 0x01	; 1
    e5ac:	30 40       	sbci	r19, 0x00	; 0
    e5ae:	40 40       	sbci	r20, 0x00	; 0
    e5b0:	50 40       	sbci	r21, 0x00	; 0
    e5b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    e5b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    e5b6:	a8 89       	ldd	r26, Y+16	; 0x10
    e5b8:	b9 89       	ldd	r27, Y+17	; 0x11
    e5ba:	b0 95       	com	r27
    e5bc:	a0 95       	com	r26
    e5be:	90 95       	com	r25
    e5c0:	81 95       	neg	r24
    e5c2:	9f 4f       	sbci	r25, 0xFF	; 255
    e5c4:	af 4f       	sbci	r26, 0xFF	; 255
    e5c6:	bf 4f       	sbci	r27, 0xFF	; 255
    e5c8:	82 23       	and	r24, r18
    e5ca:	93 23       	and	r25, r19
    e5cc:	a4 23       	and	r26, r20
    e5ce:	b5 23       	and	r27, r21
    e5d0:	2a 89       	ldd	r18, Y+18	; 0x12
    e5d2:	3b 89       	ldd	r19, Y+19	; 0x13
    e5d4:	f9 01       	movw	r30, r18
    e5d6:	86 83       	std	Z+6, r24	; 0x06
    e5d8:	97 83       	std	Z+7, r25	; 0x07
    e5da:	a0 87       	std	Z+8, r26	; 0x08
    e5dc:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    e5de:	8a 89       	ldd	r24, Y+18	; 0x12
    e5e0:	9b 89       	ldd	r25, Y+19	; 0x13
    e5e2:	fc 01       	movw	r30, r24
    e5e4:	86 81       	ldd	r24, Z+6	; 0x06
    e5e6:	97 81       	ldd	r25, Z+7	; 0x07
    e5e8:	a0 85       	ldd	r26, Z+8	; 0x08
    e5ea:	b1 85       	ldd	r27, Z+9	; 0x09
    e5ec:	2c 89       	ldd	r18, Y+20	; 0x14
    e5ee:	3d 89       	ldd	r19, Y+21	; 0x15
    e5f0:	4e 89       	ldd	r20, Y+22	; 0x16
    e5f2:	5f 89       	ldd	r21, Y+23	; 0x17
    e5f4:	79 01       	movw	r14, r18
    e5f6:	8a 01       	movw	r16, r20
    e5f8:	e8 1a       	sub	r14, r24
    e5fa:	f9 0a       	sbc	r15, r25
    e5fc:	0a 0b       	sbc	r16, r26
    e5fe:	1b 0b       	sbc	r17, r27
    e600:	d8 01       	movw	r26, r16
    e602:	c7 01       	movw	r24, r14
    e604:	8c 8b       	std	Y+20, r24	; 0x14
    e606:	9d 8b       	std	Y+21, r25	; 0x15
    e608:	ae 8b       	std	Y+22, r26	; 0x16
    e60a:	bf 8b       	std	Y+23, r27	; 0x17
				clst = fp->clust;
    e60c:	8a 89       	ldd	r24, Y+18	; 0x12
    e60e:	9b 89       	ldd	r25, Y+19	; 0x13
    e610:	fc 01       	movw	r30, r24
    e612:	82 89       	ldd	r24, Z+18	; 0x12
    e614:	93 89       	ldd	r25, Z+19	; 0x13
    e616:	a4 89       	ldd	r26, Z+20	; 0x14
    e618:	b5 89       	ldd	r27, Z+21	; 0x15
    e61a:	89 83       	std	Y+1, r24	; 0x01
    e61c:	9a 83       	std	Y+2, r25	; 0x02
    e61e:	ab 83       	std	Y+3, r26	; 0x03
    e620:	bc 83       	std	Y+4, r27	; 0x04
    e622:	67 c0       	rjmp	.+206    	; 0xe6f2 <f_lseek+0x2d4>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    e624:	8a 89       	ldd	r24, Y+18	; 0x12
    e626:	9b 89       	ldd	r25, Y+19	; 0x13
    e628:	fc 01       	movw	r30, r24
    e62a:	86 85       	ldd	r24, Z+14	; 0x0e
    e62c:	97 85       	ldd	r25, Z+15	; 0x0f
    e62e:	a0 89       	ldd	r26, Z+16	; 0x10
    e630:	b1 89       	ldd	r27, Z+17	; 0x11
    e632:	89 83       	std	Y+1, r24	; 0x01
    e634:	9a 83       	std	Y+2, r25	; 0x02
    e636:	ab 83       	std	Y+3, r26	; 0x03
    e638:	bc 83       	std	Y+4, r27	; 0x04
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    e63a:	89 81       	ldd	r24, Y+1	; 0x01
    e63c:	9a 81       	ldd	r25, Y+2	; 0x02
    e63e:	ab 81       	ldd	r26, Y+3	; 0x03
    e640:	bc 81       	ldd	r27, Y+4	; 0x04
    e642:	00 97       	sbiw	r24, 0x00	; 0
    e644:	a1 05       	cpc	r26, r1
    e646:	b1 05       	cpc	r27, r1
    e648:	09 f0       	breq	.+2      	; 0xe64c <f_lseek+0x22e>
    e64a:	48 c0       	rjmp	.+144    	; 0xe6dc <f_lseek+0x2be>
					clst = create_chain(fp->fs, 0);
    e64c:	8a 89       	ldd	r24, Y+18	; 0x12
    e64e:	9b 89       	ldd	r25, Y+19	; 0x13
    e650:	fc 01       	movw	r30, r24
    e652:	80 81       	ld	r24, Z
    e654:	91 81       	ldd	r25, Z+1	; 0x01
    e656:	40 e0       	ldi	r20, 0x00	; 0
    e658:	50 e0       	ldi	r21, 0x00	; 0
    e65a:	ba 01       	movw	r22, r20
    e65c:	0e 94 da 57 	call	0xafb4	; 0xafb4 <create_chain>
    e660:	dc 01       	movw	r26, r24
    e662:	cb 01       	movw	r24, r22
    e664:	89 83       	std	Y+1, r24	; 0x01
    e666:	9a 83       	std	Y+2, r25	; 0x02
    e668:	ab 83       	std	Y+3, r26	; 0x03
    e66a:	bc 83       	std	Y+4, r27	; 0x04
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    e66c:	89 81       	ldd	r24, Y+1	; 0x01
    e66e:	9a 81       	ldd	r25, Y+2	; 0x02
    e670:	ab 81       	ldd	r26, Y+3	; 0x03
    e672:	bc 81       	ldd	r27, Y+4	; 0x04
    e674:	81 30       	cpi	r24, 0x01	; 1
    e676:	91 05       	cpc	r25, r1
    e678:	a1 05       	cpc	r26, r1
    e67a:	b1 05       	cpc	r27, r1
    e67c:	61 f4       	brne	.+24     	; 0xe696 <f_lseek+0x278>
    e67e:	8a 89       	ldd	r24, Y+18	; 0x12
    e680:	9b 89       	ldd	r25, Y+19	; 0x13
    e682:	fc 01       	movw	r30, r24
    e684:	84 81       	ldd	r24, Z+4	; 0x04
    e686:	28 2f       	mov	r18, r24
    e688:	20 68       	ori	r18, 0x80	; 128
    e68a:	8a 89       	ldd	r24, Y+18	; 0x12
    e68c:	9b 89       	ldd	r25, Y+19	; 0x13
    e68e:	fc 01       	movw	r30, r24
    e690:	24 83       	std	Z+4, r18	; 0x04
    e692:	82 e0       	ldi	r24, 0x02	; 2
    e694:	b3 c1       	rjmp	.+870    	; 0xe9fc <f_lseek+0x5de>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    e696:	89 81       	ldd	r24, Y+1	; 0x01
    e698:	9a 81       	ldd	r25, Y+2	; 0x02
    e69a:	ab 81       	ldd	r26, Y+3	; 0x03
    e69c:	bc 81       	ldd	r27, Y+4	; 0x04
    e69e:	8f 3f       	cpi	r24, 0xFF	; 255
    e6a0:	ff ef       	ldi	r31, 0xFF	; 255
    e6a2:	9f 07       	cpc	r25, r31
    e6a4:	ff ef       	ldi	r31, 0xFF	; 255
    e6a6:	af 07       	cpc	r26, r31
    e6a8:	ff ef       	ldi	r31, 0xFF	; 255
    e6aa:	bf 07       	cpc	r27, r31
    e6ac:	61 f4       	brne	.+24     	; 0xe6c6 <f_lseek+0x2a8>
    e6ae:	8a 89       	ldd	r24, Y+18	; 0x12
    e6b0:	9b 89       	ldd	r25, Y+19	; 0x13
    e6b2:	fc 01       	movw	r30, r24
    e6b4:	84 81       	ldd	r24, Z+4	; 0x04
    e6b6:	28 2f       	mov	r18, r24
    e6b8:	20 68       	ori	r18, 0x80	; 128
    e6ba:	8a 89       	ldd	r24, Y+18	; 0x12
    e6bc:	9b 89       	ldd	r25, Y+19	; 0x13
    e6be:	fc 01       	movw	r30, r24
    e6c0:	24 83       	std	Z+4, r18	; 0x04
    e6c2:	81 e0       	ldi	r24, 0x01	; 1
    e6c4:	9b c1       	rjmp	.+822    	; 0xe9fc <f_lseek+0x5de>
					fp->sclust = clst;
    e6c6:	2a 89       	ldd	r18, Y+18	; 0x12
    e6c8:	3b 89       	ldd	r19, Y+19	; 0x13
    e6ca:	89 81       	ldd	r24, Y+1	; 0x01
    e6cc:	9a 81       	ldd	r25, Y+2	; 0x02
    e6ce:	ab 81       	ldd	r26, Y+3	; 0x03
    e6d0:	bc 81       	ldd	r27, Y+4	; 0x04
    e6d2:	f9 01       	movw	r30, r18
    e6d4:	86 87       	std	Z+14, r24	; 0x0e
    e6d6:	97 87       	std	Z+15, r25	; 0x0f
    e6d8:	a0 8b       	std	Z+16, r26	; 0x10
    e6da:	b1 8b       	std	Z+17, r27	; 0x11
				}
#endif
				fp->clust = clst;
    e6dc:	2a 89       	ldd	r18, Y+18	; 0x12
    e6de:	3b 89       	ldd	r19, Y+19	; 0x13
    e6e0:	89 81       	ldd	r24, Y+1	; 0x01
    e6e2:	9a 81       	ldd	r25, Y+2	; 0x02
    e6e4:	ab 81       	ldd	r26, Y+3	; 0x03
    e6e6:	bc 81       	ldd	r27, Y+4	; 0x04
    e6e8:	f9 01       	movw	r30, r18
    e6ea:	82 8b       	std	Z+18, r24	; 0x12
    e6ec:	93 8b       	std	Z+19, r25	; 0x13
    e6ee:	a4 8b       	std	Z+20, r26	; 0x14
    e6f0:	b5 8b       	std	Z+21, r27	; 0x15
			}
			if (clst != 0) {
    e6f2:	89 81       	ldd	r24, Y+1	; 0x01
    e6f4:	9a 81       	ldd	r25, Y+2	; 0x02
    e6f6:	ab 81       	ldd	r26, Y+3	; 0x03
    e6f8:	bc 81       	ldd	r27, Y+4	; 0x04
    e6fa:	00 97       	sbiw	r24, 0x00	; 0
    e6fc:	a1 05       	cpc	r26, r1
    e6fe:	b1 05       	cpc	r27, r1
    e700:	09 f4       	brne	.+2      	; 0xe704 <f_lseek+0x2e6>
    e702:	27 c1       	rjmp	.+590    	; 0xe952 <f_lseek+0x534>
				while (ofs > bcs) {						/* Cluster following loop */
    e704:	b6 c0       	rjmp	.+364    	; 0xe872 <f_lseek+0x454>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    e706:	8a 89       	ldd	r24, Y+18	; 0x12
    e708:	9b 89       	ldd	r25, Y+19	; 0x13
    e70a:	fc 01       	movw	r30, r24
    e70c:	84 81       	ldd	r24, Z+4	; 0x04
    e70e:	88 2f       	mov	r24, r24
    e710:	90 e0       	ldi	r25, 0x00	; 0
    e712:	82 70       	andi	r24, 0x02	; 2
    e714:	90 70       	andi	r25, 0x00	; 0
    e716:	00 97       	sbiw	r24, 0x00	; 0
    e718:	21 f1       	breq	.+72     	; 0xe762 <f_lseek+0x344>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    e71a:	8a 89       	ldd	r24, Y+18	; 0x12
    e71c:	9b 89       	ldd	r25, Y+19	; 0x13
    e71e:	fc 01       	movw	r30, r24
    e720:	80 81       	ld	r24, Z
    e722:	91 81       	ldd	r25, Z+1	; 0x01
    e724:	29 81       	ldd	r18, Y+1	; 0x01
    e726:	3a 81       	ldd	r19, Y+2	; 0x02
    e728:	4b 81       	ldd	r20, Y+3	; 0x03
    e72a:	5c 81       	ldd	r21, Y+4	; 0x04
    e72c:	ba 01       	movw	r22, r20
    e72e:	a9 01       	movw	r20, r18
    e730:	0e 94 da 57 	call	0xafb4	; 0xafb4 <create_chain>
    e734:	dc 01       	movw	r26, r24
    e736:	cb 01       	movw	r24, r22
    e738:	89 83       	std	Y+1, r24	; 0x01
    e73a:	9a 83       	std	Y+2, r25	; 0x02
    e73c:	ab 83       	std	Y+3, r26	; 0x03
    e73e:	bc 83       	std	Y+4, r27	; 0x04
						if (clst == 0) {				/* When disk gets full, clip file size */
    e740:	89 81       	ldd	r24, Y+1	; 0x01
    e742:	9a 81       	ldd	r25, Y+2	; 0x02
    e744:	ab 81       	ldd	r26, Y+3	; 0x03
    e746:	bc 81       	ldd	r27, Y+4	; 0x04
    e748:	00 97       	sbiw	r24, 0x00	; 0
    e74a:	a1 05       	cpc	r26, r1
    e74c:	b1 05       	cpc	r27, r1
    e74e:	e1 f4       	brne	.+56     	; 0xe788 <f_lseek+0x36a>
							ofs = bcs; break;
    e750:	8e 85       	ldd	r24, Y+14	; 0x0e
    e752:	9f 85       	ldd	r25, Y+15	; 0x0f
    e754:	a8 89       	ldd	r26, Y+16	; 0x10
    e756:	b9 89       	ldd	r27, Y+17	; 0x11
    e758:	8c 8b       	std	Y+20, r24	; 0x14
    e75a:	9d 8b       	std	Y+21, r25	; 0x15
    e75c:	ae 8b       	std	Y+22, r26	; 0x16
    e75e:	bf 8b       	std	Y+23, r27	; 0x17
    e760:	96 c0       	rjmp	.+300    	; 0xe88e <f_lseek+0x470>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    e762:	8a 89       	ldd	r24, Y+18	; 0x12
    e764:	9b 89       	ldd	r25, Y+19	; 0x13
    e766:	fc 01       	movw	r30, r24
    e768:	80 81       	ld	r24, Z
    e76a:	91 81       	ldd	r25, Z+1	; 0x01
    e76c:	29 81       	ldd	r18, Y+1	; 0x01
    e76e:	3a 81       	ldd	r19, Y+2	; 0x02
    e770:	4b 81       	ldd	r20, Y+3	; 0x03
    e772:	5c 81       	ldd	r21, Y+4	; 0x04
    e774:	ba 01       	movw	r22, r20
    e776:	a9 01       	movw	r20, r18
    e778:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    e77c:	dc 01       	movw	r26, r24
    e77e:	cb 01       	movw	r24, r22
    e780:	89 83       	std	Y+1, r24	; 0x01
    e782:	9a 83       	std	Y+2, r25	; 0x02
    e784:	ab 83       	std	Y+3, r26	; 0x03
    e786:	bc 83       	std	Y+4, r27	; 0x04
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    e788:	89 81       	ldd	r24, Y+1	; 0x01
    e78a:	9a 81       	ldd	r25, Y+2	; 0x02
    e78c:	ab 81       	ldd	r26, Y+3	; 0x03
    e78e:	bc 81       	ldd	r27, Y+4	; 0x04
    e790:	8f 3f       	cpi	r24, 0xFF	; 255
    e792:	ff ef       	ldi	r31, 0xFF	; 255
    e794:	9f 07       	cpc	r25, r31
    e796:	ff ef       	ldi	r31, 0xFF	; 255
    e798:	af 07       	cpc	r26, r31
    e79a:	ff ef       	ldi	r31, 0xFF	; 255
    e79c:	bf 07       	cpc	r27, r31
    e79e:	61 f4       	brne	.+24     	; 0xe7b8 <f_lseek+0x39a>
    e7a0:	8a 89       	ldd	r24, Y+18	; 0x12
    e7a2:	9b 89       	ldd	r25, Y+19	; 0x13
    e7a4:	fc 01       	movw	r30, r24
    e7a6:	84 81       	ldd	r24, Z+4	; 0x04
    e7a8:	28 2f       	mov	r18, r24
    e7aa:	20 68       	ori	r18, 0x80	; 128
    e7ac:	8a 89       	ldd	r24, Y+18	; 0x12
    e7ae:	9b 89       	ldd	r25, Y+19	; 0x13
    e7b0:	fc 01       	movw	r30, r24
    e7b2:	24 83       	std	Z+4, r18	; 0x04
    e7b4:	81 e0       	ldi	r24, 0x01	; 1
    e7b6:	22 c1       	rjmp	.+580    	; 0xe9fc <f_lseek+0x5de>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    e7b8:	89 81       	ldd	r24, Y+1	; 0x01
    e7ba:	9a 81       	ldd	r25, Y+2	; 0x02
    e7bc:	ab 81       	ldd	r26, Y+3	; 0x03
    e7be:	bc 81       	ldd	r27, Y+4	; 0x04
    e7c0:	82 30       	cpi	r24, 0x02	; 2
    e7c2:	91 05       	cpc	r25, r1
    e7c4:	a1 05       	cpc	r26, r1
    e7c6:	b1 05       	cpc	r27, r1
    e7c8:	98 f0       	brcs	.+38     	; 0xe7f0 <f_lseek+0x3d2>
    e7ca:	8a 89       	ldd	r24, Y+18	; 0x12
    e7cc:	9b 89       	ldd	r25, Y+19	; 0x13
    e7ce:	fc 01       	movw	r30, r24
    e7d0:	80 81       	ld	r24, Z
    e7d2:	91 81       	ldd	r25, Z+1	; 0x01
    e7d4:	fc 01       	movw	r30, r24
    e7d6:	26 89       	ldd	r18, Z+22	; 0x16
    e7d8:	37 89       	ldd	r19, Z+23	; 0x17
    e7da:	40 8d       	ldd	r20, Z+24	; 0x18
    e7dc:	51 8d       	ldd	r21, Z+25	; 0x19
    e7de:	89 81       	ldd	r24, Y+1	; 0x01
    e7e0:	9a 81       	ldd	r25, Y+2	; 0x02
    e7e2:	ab 81       	ldd	r26, Y+3	; 0x03
    e7e4:	bc 81       	ldd	r27, Y+4	; 0x04
    e7e6:	82 17       	cp	r24, r18
    e7e8:	93 07       	cpc	r25, r19
    e7ea:	a4 07       	cpc	r26, r20
    e7ec:	b5 07       	cpc	r27, r21
    e7ee:	60 f0       	brcs	.+24     	; 0xe808 <f_lseek+0x3ea>
    e7f0:	8a 89       	ldd	r24, Y+18	; 0x12
    e7f2:	9b 89       	ldd	r25, Y+19	; 0x13
    e7f4:	fc 01       	movw	r30, r24
    e7f6:	84 81       	ldd	r24, Z+4	; 0x04
    e7f8:	28 2f       	mov	r18, r24
    e7fa:	20 68       	ori	r18, 0x80	; 128
    e7fc:	8a 89       	ldd	r24, Y+18	; 0x12
    e7fe:	9b 89       	ldd	r25, Y+19	; 0x13
    e800:	fc 01       	movw	r30, r24
    e802:	24 83       	std	Z+4, r18	; 0x04
    e804:	82 e0       	ldi	r24, 0x02	; 2
    e806:	fa c0       	rjmp	.+500    	; 0xe9fc <f_lseek+0x5de>
					fp->clust = clst;
    e808:	2a 89       	ldd	r18, Y+18	; 0x12
    e80a:	3b 89       	ldd	r19, Y+19	; 0x13
    e80c:	89 81       	ldd	r24, Y+1	; 0x01
    e80e:	9a 81       	ldd	r25, Y+2	; 0x02
    e810:	ab 81       	ldd	r26, Y+3	; 0x03
    e812:	bc 81       	ldd	r27, Y+4	; 0x04
    e814:	f9 01       	movw	r30, r18
    e816:	82 8b       	std	Z+18, r24	; 0x12
    e818:	93 8b       	std	Z+19, r25	; 0x13
    e81a:	a4 8b       	std	Z+20, r26	; 0x14
    e81c:	b5 8b       	std	Z+21, r27	; 0x15
					fp->fptr += bcs;
    e81e:	8a 89       	ldd	r24, Y+18	; 0x12
    e820:	9b 89       	ldd	r25, Y+19	; 0x13
    e822:	fc 01       	movw	r30, r24
    e824:	26 81       	ldd	r18, Z+6	; 0x06
    e826:	37 81       	ldd	r19, Z+7	; 0x07
    e828:	40 85       	ldd	r20, Z+8	; 0x08
    e82a:	51 85       	ldd	r21, Z+9	; 0x09
    e82c:	8e 85       	ldd	r24, Y+14	; 0x0e
    e82e:	9f 85       	ldd	r25, Y+15	; 0x0f
    e830:	a8 89       	ldd	r26, Y+16	; 0x10
    e832:	b9 89       	ldd	r27, Y+17	; 0x11
    e834:	82 0f       	add	r24, r18
    e836:	93 1f       	adc	r25, r19
    e838:	a4 1f       	adc	r26, r20
    e83a:	b5 1f       	adc	r27, r21
    e83c:	2a 89       	ldd	r18, Y+18	; 0x12
    e83e:	3b 89       	ldd	r19, Y+19	; 0x13
    e840:	f9 01       	movw	r30, r18
    e842:	86 83       	std	Z+6, r24	; 0x06
    e844:	97 83       	std	Z+7, r25	; 0x07
    e846:	a0 87       	std	Z+8, r26	; 0x08
    e848:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    e84a:	2c 89       	ldd	r18, Y+20	; 0x14
    e84c:	3d 89       	ldd	r19, Y+21	; 0x15
    e84e:	4e 89       	ldd	r20, Y+22	; 0x16
    e850:	5f 89       	ldd	r21, Y+23	; 0x17
    e852:	8e 85       	ldd	r24, Y+14	; 0x0e
    e854:	9f 85       	ldd	r25, Y+15	; 0x0f
    e856:	a8 89       	ldd	r26, Y+16	; 0x10
    e858:	b9 89       	ldd	r27, Y+17	; 0x11
    e85a:	79 01       	movw	r14, r18
    e85c:	8a 01       	movw	r16, r20
    e85e:	e8 1a       	sub	r14, r24
    e860:	f9 0a       	sbc	r15, r25
    e862:	0a 0b       	sbc	r16, r26
    e864:	1b 0b       	sbc	r17, r27
    e866:	d8 01       	movw	r26, r16
    e868:	c7 01       	movw	r24, r14
    e86a:	8c 8b       	std	Y+20, r24	; 0x14
    e86c:	9d 8b       	std	Y+21, r25	; 0x15
    e86e:	ae 8b       	std	Y+22, r26	; 0x16
    e870:	bf 8b       	std	Y+23, r27	; 0x17
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    e872:	2c 89       	ldd	r18, Y+20	; 0x14
    e874:	3d 89       	ldd	r19, Y+21	; 0x15
    e876:	4e 89       	ldd	r20, Y+22	; 0x16
    e878:	5f 89       	ldd	r21, Y+23	; 0x17
    e87a:	8e 85       	ldd	r24, Y+14	; 0x0e
    e87c:	9f 85       	ldd	r25, Y+15	; 0x0f
    e87e:	a8 89       	ldd	r26, Y+16	; 0x10
    e880:	b9 89       	ldd	r27, Y+17	; 0x11
    e882:	82 17       	cp	r24, r18
    e884:	93 07       	cpc	r25, r19
    e886:	a4 07       	cpc	r26, r20
    e888:	b5 07       	cpc	r27, r21
    e88a:	08 f4       	brcc	.+2      	; 0xe88e <f_lseek+0x470>
    e88c:	3c cf       	rjmp	.-392    	; 0xe706 <f_lseek+0x2e8>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    e88e:	8a 89       	ldd	r24, Y+18	; 0x12
    e890:	9b 89       	ldd	r25, Y+19	; 0x13
    e892:	fc 01       	movw	r30, r24
    e894:	26 81       	ldd	r18, Z+6	; 0x06
    e896:	37 81       	ldd	r19, Z+7	; 0x07
    e898:	40 85       	ldd	r20, Z+8	; 0x08
    e89a:	51 85       	ldd	r21, Z+9	; 0x09
    e89c:	8c 89       	ldd	r24, Y+20	; 0x14
    e89e:	9d 89       	ldd	r25, Y+21	; 0x15
    e8a0:	ae 89       	ldd	r26, Y+22	; 0x16
    e8a2:	bf 89       	ldd	r27, Y+23	; 0x17
    e8a4:	82 0f       	add	r24, r18
    e8a6:	93 1f       	adc	r25, r19
    e8a8:	a4 1f       	adc	r26, r20
    e8aa:	b5 1f       	adc	r27, r21
    e8ac:	2a 89       	ldd	r18, Y+18	; 0x12
    e8ae:	3b 89       	ldd	r19, Y+19	; 0x13
    e8b0:	f9 01       	movw	r30, r18
    e8b2:	86 83       	std	Z+6, r24	; 0x06
    e8b4:	97 83       	std	Z+7, r25	; 0x07
    e8b6:	a0 87       	std	Z+8, r26	; 0x08
    e8b8:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    e8ba:	8c 89       	ldd	r24, Y+20	; 0x14
    e8bc:	9d 89       	ldd	r25, Y+21	; 0x15
    e8be:	ae 89       	ldd	r26, Y+22	; 0x16
    e8c0:	bf 89       	ldd	r27, Y+23	; 0x17
    e8c2:	91 70       	andi	r25, 0x01	; 1
    e8c4:	a0 70       	andi	r26, 0x00	; 0
    e8c6:	b0 70       	andi	r27, 0x00	; 0
    e8c8:	00 97       	sbiw	r24, 0x00	; 0
    e8ca:	a1 05       	cpc	r26, r1
    e8cc:	b1 05       	cpc	r27, r1
    e8ce:	09 f4       	brne	.+2      	; 0xe8d2 <f_lseek+0x4b4>
    e8d0:	40 c0       	rjmp	.+128    	; 0xe952 <f_lseek+0x534>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    e8d2:	8a 89       	ldd	r24, Y+18	; 0x12
    e8d4:	9b 89       	ldd	r25, Y+19	; 0x13
    e8d6:	fc 01       	movw	r30, r24
    e8d8:	80 81       	ld	r24, Z
    e8da:	91 81       	ldd	r25, Z+1	; 0x01
    e8dc:	29 81       	ldd	r18, Y+1	; 0x01
    e8de:	3a 81       	ldd	r19, Y+2	; 0x02
    e8e0:	4b 81       	ldd	r20, Y+3	; 0x03
    e8e2:	5c 81       	ldd	r21, Y+4	; 0x04
    e8e4:	ba 01       	movw	r22, r20
    e8e6:	a9 01       	movw	r20, r18
    e8e8:	0e 94 41 53 	call	0xa682	; 0xa682 <clust2sect>
    e8ec:	dc 01       	movw	r26, r24
    e8ee:	cb 01       	movw	r24, r22
    e8f0:	8d 83       	std	Y+5, r24	; 0x05
    e8f2:	9e 83       	std	Y+6, r25	; 0x06
    e8f4:	af 83       	std	Y+7, r26	; 0x07
    e8f6:	b8 87       	std	Y+8, r27	; 0x08
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    e8f8:	8d 81       	ldd	r24, Y+5	; 0x05
    e8fa:	9e 81       	ldd	r25, Y+6	; 0x06
    e8fc:	af 81       	ldd	r26, Y+7	; 0x07
    e8fe:	b8 85       	ldd	r27, Y+8	; 0x08
    e900:	00 97       	sbiw	r24, 0x00	; 0
    e902:	a1 05       	cpc	r26, r1
    e904:	b1 05       	cpc	r27, r1
    e906:	61 f4       	brne	.+24     	; 0xe920 <f_lseek+0x502>
    e908:	8a 89       	ldd	r24, Y+18	; 0x12
    e90a:	9b 89       	ldd	r25, Y+19	; 0x13
    e90c:	fc 01       	movw	r30, r24
    e90e:	84 81       	ldd	r24, Z+4	; 0x04
    e910:	28 2f       	mov	r18, r24
    e912:	20 68       	ori	r18, 0x80	; 128
    e914:	8a 89       	ldd	r24, Y+18	; 0x12
    e916:	9b 89       	ldd	r25, Y+19	; 0x13
    e918:	fc 01       	movw	r30, r24
    e91a:	24 83       	std	Z+4, r18	; 0x04
    e91c:	82 e0       	ldi	r24, 0x02	; 2
    e91e:	6e c0       	rjmp	.+220    	; 0xe9fc <f_lseek+0x5de>
					nsect += ofs / SS(fp->fs);
    e920:	8c 89       	ldd	r24, Y+20	; 0x14
    e922:	9d 89       	ldd	r25, Y+21	; 0x15
    e924:	ae 89       	ldd	r26, Y+22	; 0x16
    e926:	bf 89       	ldd	r27, Y+23	; 0x17
    e928:	07 2e       	mov	r0, r23
    e92a:	79 e0       	ldi	r23, 0x09	; 9
    e92c:	b6 95       	lsr	r27
    e92e:	a7 95       	ror	r26
    e930:	97 95       	ror	r25
    e932:	87 95       	ror	r24
    e934:	7a 95       	dec	r23
    e936:	d1 f7       	brne	.-12     	; 0xe92c <f_lseek+0x50e>
    e938:	70 2d       	mov	r23, r0
    e93a:	2d 81       	ldd	r18, Y+5	; 0x05
    e93c:	3e 81       	ldd	r19, Y+6	; 0x06
    e93e:	4f 81       	ldd	r20, Y+7	; 0x07
    e940:	58 85       	ldd	r21, Y+8	; 0x08
    e942:	82 0f       	add	r24, r18
    e944:	93 1f       	adc	r25, r19
    e946:	a4 1f       	adc	r26, r20
    e948:	b5 1f       	adc	r27, r21
    e94a:	8d 83       	std	Y+5, r24	; 0x05
    e94c:	9e 83       	std	Y+6, r25	; 0x06
    e94e:	af 83       	std	Y+7, r26	; 0x07
    e950:	b8 87       	std	Y+8, r27	; 0x08
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    e952:	8a 89       	ldd	r24, Y+18	; 0x12
    e954:	9b 89       	ldd	r25, Y+19	; 0x13
    e956:	fc 01       	movw	r30, r24
    e958:	86 81       	ldd	r24, Z+6	; 0x06
    e95a:	97 81       	ldd	r25, Z+7	; 0x07
    e95c:	a0 85       	ldd	r26, Z+8	; 0x08
    e95e:	b1 85       	ldd	r27, Z+9	; 0x09
    e960:	91 70       	andi	r25, 0x01	; 1
    e962:	a0 70       	andi	r26, 0x00	; 0
    e964:	b0 70       	andi	r27, 0x00	; 0
    e966:	00 97       	sbiw	r24, 0x00	; 0
    e968:	a1 05       	cpc	r26, r1
    e96a:	b1 05       	cpc	r27, r1
    e96c:	d9 f0       	breq	.+54     	; 0xe9a4 <f_lseek+0x586>
    e96e:	8a 89       	ldd	r24, Y+18	; 0x12
    e970:	9b 89       	ldd	r25, Y+19	; 0x13
    e972:	fc 01       	movw	r30, r24
    e974:	26 89       	ldd	r18, Z+22	; 0x16
    e976:	37 89       	ldd	r19, Z+23	; 0x17
    e978:	40 8d       	ldd	r20, Z+24	; 0x18
    e97a:	51 8d       	ldd	r21, Z+25	; 0x19
    e97c:	8d 81       	ldd	r24, Y+5	; 0x05
    e97e:	9e 81       	ldd	r25, Y+6	; 0x06
    e980:	af 81       	ldd	r26, Y+7	; 0x07
    e982:	b8 85       	ldd	r27, Y+8	; 0x08
    e984:	28 17       	cp	r18, r24
    e986:	39 07       	cpc	r19, r25
    e988:	4a 07       	cpc	r20, r26
    e98a:	5b 07       	cpc	r21, r27
    e98c:	59 f0       	breq	.+22     	; 0xe9a4 <f_lseek+0x586>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    e98e:	2a 89       	ldd	r18, Y+18	; 0x12
    e990:	3b 89       	ldd	r19, Y+19	; 0x13
    e992:	8d 81       	ldd	r24, Y+5	; 0x05
    e994:	9e 81       	ldd	r25, Y+6	; 0x06
    e996:	af 81       	ldd	r26, Y+7	; 0x07
    e998:	b8 85       	ldd	r27, Y+8	; 0x08
    e99a:	f9 01       	movw	r30, r18
    e99c:	86 8b       	std	Z+22, r24	; 0x16
    e99e:	97 8b       	std	Z+23, r25	; 0x17
    e9a0:	a0 8f       	std	Z+24, r26	; 0x18
    e9a2:	b1 8f       	std	Z+25, r27	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    e9a4:	8a 89       	ldd	r24, Y+18	; 0x12
    e9a6:	9b 89       	ldd	r25, Y+19	; 0x13
    e9a8:	fc 01       	movw	r30, r24
    e9aa:	26 81       	ldd	r18, Z+6	; 0x06
    e9ac:	37 81       	ldd	r19, Z+7	; 0x07
    e9ae:	40 85       	ldd	r20, Z+8	; 0x08
    e9b0:	51 85       	ldd	r21, Z+9	; 0x09
    e9b2:	8a 89       	ldd	r24, Y+18	; 0x12
    e9b4:	9b 89       	ldd	r25, Y+19	; 0x13
    e9b6:	fc 01       	movw	r30, r24
    e9b8:	82 85       	ldd	r24, Z+10	; 0x0a
    e9ba:	93 85       	ldd	r25, Z+11	; 0x0b
    e9bc:	a4 85       	ldd	r26, Z+12	; 0x0c
    e9be:	b5 85       	ldd	r27, Z+13	; 0x0d
    e9c0:	82 17       	cp	r24, r18
    e9c2:	93 07       	cpc	r25, r19
    e9c4:	a4 07       	cpc	r26, r20
    e9c6:	b5 07       	cpc	r27, r21
    e9c8:	c0 f4       	brcc	.+48     	; 0xe9fa <f_lseek+0x5dc>
			fp->fsize = fp->fptr;
    e9ca:	8a 89       	ldd	r24, Y+18	; 0x12
    e9cc:	9b 89       	ldd	r25, Y+19	; 0x13
    e9ce:	fc 01       	movw	r30, r24
    e9d0:	86 81       	ldd	r24, Z+6	; 0x06
    e9d2:	97 81       	ldd	r25, Z+7	; 0x07
    e9d4:	a0 85       	ldd	r26, Z+8	; 0x08
    e9d6:	b1 85       	ldd	r27, Z+9	; 0x09
    e9d8:	2a 89       	ldd	r18, Y+18	; 0x12
    e9da:	3b 89       	ldd	r19, Y+19	; 0x13
    e9dc:	f9 01       	movw	r30, r18
    e9de:	82 87       	std	Z+10, r24	; 0x0a
    e9e0:	93 87       	std	Z+11, r25	; 0x0b
    e9e2:	a4 87       	std	Z+12, r26	; 0x0c
    e9e4:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    e9e6:	8a 89       	ldd	r24, Y+18	; 0x12
    e9e8:	9b 89       	ldd	r25, Y+19	; 0x13
    e9ea:	fc 01       	movw	r30, r24
    e9ec:	84 81       	ldd	r24, Z+4	; 0x04
    e9ee:	28 2f       	mov	r18, r24
    e9f0:	20 62       	ori	r18, 0x20	; 32
    e9f2:	8a 89       	ldd	r24, Y+18	; 0x12
    e9f4:	9b 89       	ldd	r25, Y+19	; 0x13
    e9f6:	fc 01       	movw	r30, r24
    e9f8:	24 83       	std	Z+4, r18	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    e9fa:	89 85       	ldd	r24, Y+9	; 0x09
}
    e9fc:	67 96       	adiw	r28, 0x17	; 23
    e9fe:	0f b6       	in	r0, 0x3f	; 63
    ea00:	f8 94       	cli
    ea02:	de bf       	out	0x3e, r29	; 62
    ea04:	0f be       	out	0x3f, r0	; 63
    ea06:	cd bf       	out	0x3d, r28	; 61
    ea08:	cf 91       	pop	r28
    ea0a:	df 91       	pop	r29
    ea0c:	1f 91       	pop	r17
    ea0e:	0f 91       	pop	r16
    ea10:	ff 90       	pop	r15
    ea12:	ef 90       	pop	r14
    ea14:	08 95       	ret

0000ea16 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    ea16:	df 93       	push	r29
    ea18:	cf 93       	push	r28
    ea1a:	cd b7       	in	r28, 0x3d	; 61
    ea1c:	de b7       	in	r29, 0x3e	; 62
    ea1e:	61 97       	sbiw	r28, 0x11	; 17
    ea20:	0f b6       	in	r0, 0x3f	; 63
    ea22:	f8 94       	cli
    ea24:	de bf       	out	0x3e, r29	; 62
    ea26:	0f be       	out	0x3f, r0	; 63
    ea28:	cd bf       	out	0x3d, r28	; 61
    ea2a:	9f 87       	std	Y+15, r25	; 0x0f
    ea2c:	8e 87       	std	Y+14, r24	; 0x0e
    ea2e:	79 8b       	std	Y+17, r23	; 0x11
    ea30:	68 8b       	std	Y+16, r22	; 0x10
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    ea32:	2e 85       	ldd	r18, Y+14	; 0x0e
    ea34:	3f 85       	ldd	r19, Y+15	; 0x0f
    ea36:	ce 01       	movw	r24, r28
    ea38:	40 96       	adiw	r24, 0x10	; 16
    ea3a:	b9 01       	movw	r22, r18
    ea3c:	40 e0       	ldi	r20, 0x00	; 0
    ea3e:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    ea42:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    ea44:	89 81       	ldd	r24, Y+1	; 0x01
    ea46:	88 23       	and	r24, r24
    ea48:	09 f0       	breq	.+2      	; 0xea4c <f_opendir+0x36>
    ea4a:	8e c0       	rjmp	.+284    	; 0xeb68 <f_opendir+0x152>
		INIT_BUF(*dj);
    ea4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    ea4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    ea50:	9e 01       	movw	r18, r28
    ea52:	2e 5f       	subi	r18, 0xFE	; 254
    ea54:	3f 4f       	sbci	r19, 0xFF	; 255
    ea56:	fc 01       	movw	r30, r24
    ea58:	35 8b       	std	Z+21, r19	; 0x15
    ea5a:	24 8b       	std	Z+20, r18	; 0x14
		res = follow_path(dj, path);			/* Follow the path to the directory */
    ea5c:	28 89       	ldd	r18, Y+16	; 0x10
    ea5e:	39 89       	ldd	r19, Y+17	; 0x11
    ea60:	8e 85       	ldd	r24, Y+14	; 0x0e
    ea62:	9f 85       	ldd	r25, Y+15	; 0x0f
    ea64:	b9 01       	movw	r22, r18
    ea66:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    ea6a:	89 83       	std	Y+1, r24	; 0x01
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    ea6c:	89 81       	ldd	r24, Y+1	; 0x01
    ea6e:	88 23       	and	r24, r24
    ea70:	09 f0       	breq	.+2      	; 0xea74 <f_opendir+0x5e>
    ea72:	75 c0       	rjmp	.+234    	; 0xeb5e <f_opendir+0x148>
			if (dj->dir) {						/* It is not the root dir */
    ea74:	8e 85       	ldd	r24, Y+14	; 0x0e
    ea76:	9f 85       	ldd	r25, Y+15	; 0x0f
    ea78:	fc 01       	movw	r30, r24
    ea7a:	82 89       	ldd	r24, Z+18	; 0x12
    ea7c:	93 89       	ldd	r25, Z+19	; 0x13
    ea7e:	00 97       	sbiw	r24, 0x00	; 0
    ea80:	09 f4       	brne	.+2      	; 0xea84 <f_opendir+0x6e>
    ea82:	56 c0       	rjmp	.+172    	; 0xeb30 <f_opendir+0x11a>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    ea84:	8e 85       	ldd	r24, Y+14	; 0x0e
    ea86:	9f 85       	ldd	r25, Y+15	; 0x0f
    ea88:	fc 01       	movw	r30, r24
    ea8a:	82 89       	ldd	r24, Z+18	; 0x12
    ea8c:	93 89       	ldd	r25, Z+19	; 0x13
    ea8e:	0b 96       	adiw	r24, 0x0b	; 11
    ea90:	fc 01       	movw	r30, r24
    ea92:	80 81       	ld	r24, Z
    ea94:	88 2f       	mov	r24, r24
    ea96:	90 e0       	ldi	r25, 0x00	; 0
    ea98:	80 71       	andi	r24, 0x10	; 16
    ea9a:	90 70       	andi	r25, 0x00	; 0
    ea9c:	00 97       	sbiw	r24, 0x00	; 0
    ea9e:	09 f4       	brne	.+2      	; 0xeaa2 <f_opendir+0x8c>
    eaa0:	45 c0       	rjmp	.+138    	; 0xeb2c <f_opendir+0x116>
					dj->sclust = LD_CLUST(dj->dir);
    eaa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    eaa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    eaa6:	fc 01       	movw	r30, r24
    eaa8:	82 89       	ldd	r24, Z+18	; 0x12
    eaaa:	93 89       	ldd	r25, Z+19	; 0x13
    eaac:	45 96       	adiw	r24, 0x15	; 21
    eaae:	fc 01       	movw	r30, r24
    eab0:	80 81       	ld	r24, Z
    eab2:	88 2f       	mov	r24, r24
    eab4:	90 e0       	ldi	r25, 0x00	; 0
    eab6:	38 2f       	mov	r19, r24
    eab8:	22 27       	eor	r18, r18
    eaba:	8e 85       	ldd	r24, Y+14	; 0x0e
    eabc:	9f 85       	ldd	r25, Y+15	; 0x0f
    eabe:	fc 01       	movw	r30, r24
    eac0:	82 89       	ldd	r24, Z+18	; 0x12
    eac2:	93 89       	ldd	r25, Z+19	; 0x13
    eac4:	44 96       	adiw	r24, 0x14	; 20
    eac6:	fc 01       	movw	r30, r24
    eac8:	80 81       	ld	r24, Z
    eaca:	88 2f       	mov	r24, r24
    eacc:	90 e0       	ldi	r25, 0x00	; 0
    eace:	82 2b       	or	r24, r18
    ead0:	93 2b       	or	r25, r19
    ead2:	cc 01       	movw	r24, r24
    ead4:	a0 e0       	ldi	r26, 0x00	; 0
    ead6:	b0 e0       	ldi	r27, 0x00	; 0
    ead8:	ac 01       	movw	r20, r24
    eada:	33 27       	eor	r19, r19
    eadc:	22 27       	eor	r18, r18
    eade:	8e 85       	ldd	r24, Y+14	; 0x0e
    eae0:	9f 85       	ldd	r25, Y+15	; 0x0f
    eae2:	fc 01       	movw	r30, r24
    eae4:	82 89       	ldd	r24, Z+18	; 0x12
    eae6:	93 89       	ldd	r25, Z+19	; 0x13
    eae8:	4b 96       	adiw	r24, 0x1b	; 27
    eaea:	fc 01       	movw	r30, r24
    eaec:	80 81       	ld	r24, Z
    eaee:	88 2f       	mov	r24, r24
    eaf0:	90 e0       	ldi	r25, 0x00	; 0
    eaf2:	78 2f       	mov	r23, r24
    eaf4:	66 27       	eor	r22, r22
    eaf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    eaf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    eafa:	fc 01       	movw	r30, r24
    eafc:	82 89       	ldd	r24, Z+18	; 0x12
    eafe:	93 89       	ldd	r25, Z+19	; 0x13
    eb00:	4a 96       	adiw	r24, 0x1a	; 26
    eb02:	fc 01       	movw	r30, r24
    eb04:	80 81       	ld	r24, Z
    eb06:	88 2f       	mov	r24, r24
    eb08:	90 e0       	ldi	r25, 0x00	; 0
    eb0a:	86 2b       	or	r24, r22
    eb0c:	97 2b       	or	r25, r23
    eb0e:	cc 01       	movw	r24, r24
    eb10:	a0 e0       	ldi	r26, 0x00	; 0
    eb12:	b0 e0       	ldi	r27, 0x00	; 0
    eb14:	82 2b       	or	r24, r18
    eb16:	93 2b       	or	r25, r19
    eb18:	a4 2b       	or	r26, r20
    eb1a:	b5 2b       	or	r27, r21
    eb1c:	2e 85       	ldd	r18, Y+14	; 0x0e
    eb1e:	3f 85       	ldd	r19, Y+15	; 0x0f
    eb20:	f9 01       	movw	r30, r18
    eb22:	86 83       	std	Z+6, r24	; 0x06
    eb24:	97 83       	std	Z+7, r25	; 0x07
    eb26:	a0 87       	std	Z+8, r26	; 0x08
    eb28:	b1 87       	std	Z+9, r27	; 0x09
    eb2a:	02 c0       	rjmp	.+4      	; 0xeb30 <f_opendir+0x11a>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    eb2c:	85 e0       	ldi	r24, 0x05	; 5
    eb2e:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			if (res == FR_OK) {
    eb30:	89 81       	ldd	r24, Y+1	; 0x01
    eb32:	88 23       	and	r24, r24
    eb34:	a1 f4       	brne	.+40     	; 0xeb5e <f_opendir+0x148>
				dj->id = dj->fs->id;
    eb36:	8e 85       	ldd	r24, Y+14	; 0x0e
    eb38:	9f 85       	ldd	r25, Y+15	; 0x0f
    eb3a:	fc 01       	movw	r30, r24
    eb3c:	80 81       	ld	r24, Z
    eb3e:	91 81       	ldd	r25, Z+1	; 0x01
    eb40:	fc 01       	movw	r30, r24
    eb42:	26 81       	ldd	r18, Z+6	; 0x06
    eb44:	37 81       	ldd	r19, Z+7	; 0x07
    eb46:	8e 85       	ldd	r24, Y+14	; 0x0e
    eb48:	9f 85       	ldd	r25, Y+15	; 0x0f
    eb4a:	fc 01       	movw	r30, r24
    eb4c:	33 83       	std	Z+3, r19	; 0x03
    eb4e:	22 83       	std	Z+2, r18	; 0x02
				res = dir_sdi(dj, 0);			/* Rewind dir */
    eb50:	8e 85       	ldd	r24, Y+14	; 0x0e
    eb52:	9f 85       	ldd	r25, Y+15	; 0x0f
    eb54:	60 e0       	ldi	r22, 0x00	; 0
    eb56:	70 e0       	ldi	r23, 0x00	; 0
    eb58:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <dir_sdi>
    eb5c:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    eb5e:	89 81       	ldd	r24, Y+1	; 0x01
    eb60:	84 30       	cpi	r24, 0x04	; 4
    eb62:	11 f4       	brne	.+4      	; 0xeb68 <f_opendir+0x152>
    eb64:	85 e0       	ldi	r24, 0x05	; 5
    eb66:	89 83       	std	Y+1, r24	; 0x01
	}

	LEAVE_FF(dj->fs, res);
    eb68:	89 81       	ldd	r24, Y+1	; 0x01
}
    eb6a:	61 96       	adiw	r28, 0x11	; 17
    eb6c:	0f b6       	in	r0, 0x3f	; 63
    eb6e:	f8 94       	cli
    eb70:	de bf       	out	0x3e, r29	; 62
    eb72:	0f be       	out	0x3f, r0	; 63
    eb74:	cd bf       	out	0x3d, r28	; 61
    eb76:	cf 91       	pop	r28
    eb78:	df 91       	pop	r29
    eb7a:	08 95       	ret

0000eb7c <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    eb7c:	df 93       	push	r29
    eb7e:	cf 93       	push	r28
    eb80:	cd b7       	in	r28, 0x3d	; 61
    eb82:	de b7       	in	r29, 0x3e	; 62
    eb84:	61 97       	sbiw	r28, 0x11	; 17
    eb86:	0f b6       	in	r0, 0x3f	; 63
    eb88:	f8 94       	cli
    eb8a:	de bf       	out	0x3e, r29	; 62
    eb8c:	0f be       	out	0x3f, r0	; 63
    eb8e:	cd bf       	out	0x3d, r28	; 61
    eb90:	9f 87       	std	Y+15, r25	; 0x0f
    eb92:	8e 87       	std	Y+14, r24	; 0x0e
    eb94:	79 8b       	std	Y+17, r23	; 0x11
    eb96:	68 8b       	std	Y+16, r22	; 0x10
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    eb98:	8e 85       	ldd	r24, Y+14	; 0x0e
    eb9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    eb9c:	fc 01       	movw	r30, r24
    eb9e:	80 81       	ld	r24, Z
    eba0:	91 81       	ldd	r25, Z+1	; 0x01
    eba2:	2e 85       	ldd	r18, Y+14	; 0x0e
    eba4:	3f 85       	ldd	r19, Y+15	; 0x0f
    eba6:	f9 01       	movw	r30, r18
    eba8:	22 81       	ldd	r18, Z+2	; 0x02
    ebaa:	33 81       	ldd	r19, Z+3	; 0x03
    ebac:	b9 01       	movw	r22, r18
    ebae:	0e 94 2e 68 	call	0xd05c	; 0xd05c <validate>
    ebb2:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    ebb4:	89 81       	ldd	r24, Y+1	; 0x01
    ebb6:	88 23       	and	r24, r24
    ebb8:	09 f0       	breq	.+2      	; 0xebbc <f_readdir+0x40>
    ebba:	40 c0       	rjmp	.+128    	; 0xec3c <f_readdir+0xc0>
		if (!fno) {
    ebbc:	88 89       	ldd	r24, Y+16	; 0x10
    ebbe:	99 89       	ldd	r25, Y+17	; 0x11
    ebc0:	00 97       	sbiw	r24, 0x00	; 0
    ebc2:	41 f4       	brne	.+16     	; 0xebd4 <f_readdir+0x58>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    ebc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    ebc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    ebc8:	60 e0       	ldi	r22, 0x00	; 0
    ebca:	70 e0       	ldi	r23, 0x00	; 0
    ebcc:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <dir_sdi>
    ebd0:	89 83       	std	Y+1, r24	; 0x01
    ebd2:	34 c0       	rjmp	.+104    	; 0xec3c <f_readdir+0xc0>
		} else {
			INIT_BUF(*dj);
    ebd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    ebd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    ebd8:	9e 01       	movw	r18, r28
    ebda:	2e 5f       	subi	r18, 0xFE	; 254
    ebdc:	3f 4f       	sbci	r19, 0xFF	; 255
    ebde:	fc 01       	movw	r30, r24
    ebe0:	35 8b       	std	Z+21, r19	; 0x15
    ebe2:	24 8b       	std	Z+20, r18	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    ebe4:	8e 85       	ldd	r24, Y+14	; 0x0e
    ebe6:	9f 85       	ldd	r25, Y+15	; 0x0f
    ebe8:	0e 94 f3 5c 	call	0xb9e6	; 0xb9e6 <dir_read>
    ebec:	89 83       	std	Y+1, r24	; 0x01
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    ebee:	89 81       	ldd	r24, Y+1	; 0x01
    ebf0:	84 30       	cpi	r24, 0x04	; 4
    ebf2:	41 f4       	brne	.+16     	; 0xec04 <f_readdir+0x88>
				dj->sect = 0;
    ebf4:	8e 85       	ldd	r24, Y+14	; 0x0e
    ebf6:	9f 85       	ldd	r25, Y+15	; 0x0f
    ebf8:	fc 01       	movw	r30, r24
    ebfa:	16 86       	std	Z+14, r1	; 0x0e
    ebfc:	17 86       	std	Z+15, r1	; 0x0f
    ebfe:	10 8a       	std	Z+16, r1	; 0x10
    ec00:	11 8a       	std	Z+17, r1	; 0x11
				res = FR_OK;
    ec02:	19 82       	std	Y+1, r1	; 0x01
			}
			if (res == FR_OK) {				/* A valid entry is found */
    ec04:	89 81       	ldd	r24, Y+1	; 0x01
    ec06:	88 23       	and	r24, r24
    ec08:	c9 f4       	brne	.+50     	; 0xec3c <f_readdir+0xc0>
				get_fileinfo(dj, fno);		/* Get the object information */
    ec0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    ec0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    ec0e:	28 89       	ldd	r18, Y+16	; 0x10
    ec10:	39 89       	ldd	r19, Y+17	; 0x11
    ec12:	b9 01       	movw	r22, r18
    ec14:	0e 94 83 5f 	call	0xbf06	; 0xbf06 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    ec18:	8e 85       	ldd	r24, Y+14	; 0x0e
    ec1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    ec1c:	60 e0       	ldi	r22, 0x00	; 0
    ec1e:	70 e0       	ldi	r23, 0x00	; 0
    ec20:	0e 94 b2 5a 	call	0xb564	; 0xb564 <dir_next>
    ec24:	89 83       	std	Y+1, r24	; 0x01
				if (res == FR_NO_FILE) {
    ec26:	89 81       	ldd	r24, Y+1	; 0x01
    ec28:	84 30       	cpi	r24, 0x04	; 4
    ec2a:	41 f4       	brne	.+16     	; 0xec3c <f_readdir+0xc0>
					dj->sect = 0;
    ec2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    ec2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    ec30:	fc 01       	movw	r30, r24
    ec32:	16 86       	std	Z+14, r1	; 0x0e
    ec34:	17 86       	std	Z+15, r1	; 0x0f
    ec36:	10 8a       	std	Z+16, r1	; 0x10
    ec38:	11 8a       	std	Z+17, r1	; 0x11
					res = FR_OK;
    ec3a:	19 82       	std	Y+1, r1	; 0x01
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
    ec3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    ec3e:	61 96       	adiw	r28, 0x11	; 17
    ec40:	0f b6       	in	r0, 0x3f	; 63
    ec42:	f8 94       	cli
    ec44:	de bf       	out	0x3e, r29	; 62
    ec46:	0f be       	out	0x3f, r0	; 63
    ec48:	cd bf       	out	0x3d, r28	; 61
    ec4a:	cf 91       	pop	r28
    ec4c:	df 91       	pop	r29
    ec4e:	08 95       	ret

0000ec50 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    ec50:	df 93       	push	r29
    ec52:	cf 93       	push	r28
    ec54:	cd b7       	in	r28, 0x3d	; 61
    ec56:	de b7       	in	r29, 0x3e	; 62
    ec58:	a7 97       	sbiw	r28, 0x27	; 39
    ec5a:	0f b6       	in	r0, 0x3f	; 63
    ec5c:	f8 94       	cli
    ec5e:	de bf       	out	0x3e, r29	; 62
    ec60:	0f be       	out	0x3f, r0	; 63
    ec62:	cd bf       	out	0x3d, r28	; 61
    ec64:	9d a3       	std	Y+37, r25	; 0x25
    ec66:	8c a3       	std	Y+36, r24	; 0x24
    ec68:	7f a3       	std	Y+39, r23	; 0x27
    ec6a:	6e a3       	std	Y+38, r22	; 0x26
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    ec6c:	ce 01       	movw	r24, r28
    ec6e:	84 96       	adiw	r24, 0x24	; 36
    ec70:	9e 01       	movw	r18, r28
    ec72:	2e 5f       	subi	r18, 0xFE	; 254
    ec74:	3f 4f       	sbci	r19, 0xFF	; 255
    ec76:	b9 01       	movw	r22, r18
    ec78:	40 e0       	ldi	r20, 0x00	; 0
    ec7a:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    ec7e:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    ec80:	89 81       	ldd	r24, Y+1	; 0x01
    ec82:	88 23       	and	r24, r24
    ec84:	e9 f4       	brne	.+58     	; 0xecc0 <f_stat+0x70>
		INIT_BUF(dj);
    ec86:	ce 01       	movw	r24, r28
    ec88:	48 96       	adiw	r24, 0x18	; 24
    ec8a:	9f 8b       	std	Y+23, r25	; 0x17
    ec8c:	8e 8b       	std	Y+22, r24	; 0x16
		res = follow_path(&dj, path);	/* Follow the file path */
    ec8e:	2c a1       	ldd	r18, Y+36	; 0x24
    ec90:	3d a1       	ldd	r19, Y+37	; 0x25
    ec92:	ce 01       	movw	r24, r28
    ec94:	02 96       	adiw	r24, 0x02	; 2
    ec96:	b9 01       	movw	r22, r18
    ec98:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    ec9c:	89 83       	std	Y+1, r24	; 0x01
		if (res == FR_OK) {				/* Follow completed */
    ec9e:	89 81       	ldd	r24, Y+1	; 0x01
    eca0:	88 23       	and	r24, r24
    eca2:	71 f4       	brne	.+28     	; 0xecc0 <f_stat+0x70>
			if (dj.dir)		/* Found an object */
    eca4:	8c 89       	ldd	r24, Y+20	; 0x14
    eca6:	9d 89       	ldd	r25, Y+21	; 0x15
    eca8:	00 97       	sbiw	r24, 0x00	; 0
    ecaa:	41 f0       	breq	.+16     	; 0xecbc <f_stat+0x6c>
				get_fileinfo(&dj, fno);
    ecac:	ce 01       	movw	r24, r28
    ecae:	02 96       	adiw	r24, 0x02	; 2
    ecb0:	2e a1       	ldd	r18, Y+38	; 0x26
    ecb2:	3f a1       	ldd	r19, Y+39	; 0x27
    ecb4:	b9 01       	movw	r22, r18
    ecb6:	0e 94 83 5f 	call	0xbf06	; 0xbf06 <get_fileinfo>
    ecba:	02 c0       	rjmp	.+4      	; 0xecc0 <f_stat+0x70>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    ecbc:	86 e0       	ldi	r24, 0x06	; 6
    ecbe:	89 83       	std	Y+1, r24	; 0x01
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    ecc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    ecc2:	a7 96       	adiw	r28, 0x27	; 39
    ecc4:	0f b6       	in	r0, 0x3f	; 63
    ecc6:	f8 94       	cli
    ecc8:	de bf       	out	0x3e, r29	; 62
    ecca:	0f be       	out	0x3f, r0	; 63
    eccc:	cd bf       	out	0x3d, r28	; 61
    ecce:	cf 91       	pop	r28
    ecd0:	df 91       	pop	r29
    ecd2:	08 95       	ret

0000ecd4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    ecd4:	df 93       	push	r29
    ecd6:	cf 93       	push	r28
    ecd8:	cd b7       	in	r28, 0x3d	; 61
    ecda:	de b7       	in	r29, 0x3e	; 62
    ecdc:	6c 97       	sbiw	r28, 0x1c	; 28
    ecde:	0f b6       	in	r0, 0x3f	; 63
    ece0:	f8 94       	cli
    ece2:	de bf       	out	0x3e, r29	; 62
    ece4:	0f be       	out	0x3f, r0	; 63
    ece6:	cd bf       	out	0x3d, r28	; 61
    ece8:	98 8f       	std	Y+24, r25	; 0x18
    ecea:	8f 8b       	std	Y+23, r24	; 0x17
    ecec:	7a 8f       	std	Y+26, r23	; 0x1a
    ecee:	69 8f       	std	Y+25, r22	; 0x19
    ecf0:	5c 8f       	std	Y+28, r21	; 0x1c
    ecf2:	4b 8f       	std	Y+27, r20	; 0x1b
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    ecf4:	ce 01       	movw	r24, r28
    ecf6:	47 96       	adiw	r24, 0x17	; 23
    ecf8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    ecfa:	3c 8d       	ldd	r19, Y+28	; 0x1c
    ecfc:	b9 01       	movw	r22, r18
    ecfe:	40 e0       	ldi	r20, 0x00	; 0
    ed00:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    ed04:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    ed06:	89 81       	ldd	r24, Y+1	; 0x01
    ed08:	88 23       	and	r24, r24
    ed0a:	09 f0       	breq	.+2      	; 0xed0e <f_getfree+0x3a>
    ed0c:	af c1       	rjmp	.+862    	; 0xf06c <f_getfree+0x398>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    ed0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ed10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ed12:	fc 01       	movw	r30, r24
    ed14:	80 81       	ld	r24, Z
    ed16:	91 81       	ldd	r25, Z+1	; 0x01
    ed18:	fc 01       	movw	r30, r24
    ed1a:	26 85       	ldd	r18, Z+14	; 0x0e
    ed1c:	37 85       	ldd	r19, Z+15	; 0x0f
    ed1e:	40 89       	ldd	r20, Z+16	; 0x10
    ed20:	51 89       	ldd	r21, Z+17	; 0x11
    ed22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ed24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ed26:	fc 01       	movw	r30, r24
    ed28:	80 81       	ld	r24, Z
    ed2a:	91 81       	ldd	r25, Z+1	; 0x01
    ed2c:	fc 01       	movw	r30, r24
    ed2e:	86 89       	ldd	r24, Z+22	; 0x16
    ed30:	97 89       	ldd	r25, Z+23	; 0x17
    ed32:	a0 8d       	ldd	r26, Z+24	; 0x18
    ed34:	b1 8d       	ldd	r27, Z+25	; 0x19
    ed36:	02 97       	sbiw	r24, 0x02	; 2
    ed38:	a1 09       	sbc	r26, r1
    ed3a:	b1 09       	sbc	r27, r1
    ed3c:	82 17       	cp	r24, r18
    ed3e:	93 07       	cpc	r25, r19
    ed40:	a4 07       	cpc	r26, r20
    ed42:	b5 07       	cpc	r27, r21
    ed44:	90 f0       	brcs	.+36     	; 0xed6a <f_getfree+0x96>
			*nclst = (*fatfs)->free_clust;
    ed46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ed48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ed4a:	fc 01       	movw	r30, r24
    ed4c:	80 81       	ld	r24, Z
    ed4e:	91 81       	ldd	r25, Z+1	; 0x01
    ed50:	fc 01       	movw	r30, r24
    ed52:	86 85       	ldd	r24, Z+14	; 0x0e
    ed54:	97 85       	ldd	r25, Z+15	; 0x0f
    ed56:	a0 89       	ldd	r26, Z+16	; 0x10
    ed58:	b1 89       	ldd	r27, Z+17	; 0x11
    ed5a:	29 8d       	ldd	r18, Y+25	; 0x19
    ed5c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    ed5e:	f9 01       	movw	r30, r18
    ed60:	80 83       	st	Z, r24
    ed62:	91 83       	std	Z+1, r25	; 0x01
    ed64:	a2 83       	std	Z+2, r26	; 0x02
    ed66:	b3 83       	std	Z+3, r27	; 0x03
    ed68:	81 c1       	rjmp	.+770    	; 0xf06c <f_getfree+0x398>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    ed6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ed6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ed6e:	fc 01       	movw	r30, r24
    ed70:	80 81       	ld	r24, Z
    ed72:	91 81       	ldd	r25, Z+1	; 0x01
    ed74:	fc 01       	movw	r30, r24
    ed76:	80 81       	ld	r24, Z
    ed78:	8a 8b       	std	Y+18, r24	; 0x12
			n = 0;
    ed7a:	1a 82       	std	Y+2, r1	; 0x02
    ed7c:	1b 82       	std	Y+3, r1	; 0x03
    ed7e:	1c 82       	std	Y+4, r1	; 0x04
    ed80:	1d 82       	std	Y+5, r1	; 0x05
			if (fat == FS_FAT12) {
    ed82:	8a 89       	ldd	r24, Y+18	; 0x12
    ed84:	81 30       	cpi	r24, 0x01	; 1
    ed86:	09 f0       	breq	.+2      	; 0xed8a <f_getfree+0xb6>
    ed88:	6a c0       	rjmp	.+212    	; 0xee5e <f_getfree+0x18a>
				clst = 2;
    ed8a:	82 e0       	ldi	r24, 0x02	; 2
    ed8c:	90 e0       	ldi	r25, 0x00	; 0
    ed8e:	a0 e0       	ldi	r26, 0x00	; 0
    ed90:	b0 e0       	ldi	r27, 0x00	; 0
    ed92:	8e 83       	std	Y+6, r24	; 0x06
    ed94:	9f 83       	std	Y+7, r25	; 0x07
    ed96:	a8 87       	std	Y+8, r26	; 0x08
    ed98:	b9 87       	std	Y+9, r27	; 0x09
				do {
					stat = get_fat(*fatfs, clst);
    ed9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ed9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ed9e:	fc 01       	movw	r30, r24
    eda0:	80 81       	ld	r24, Z
    eda2:	91 81       	ldd	r25, Z+1	; 0x01
    eda4:	2e 81       	ldd	r18, Y+6	; 0x06
    eda6:	3f 81       	ldd	r19, Y+7	; 0x07
    eda8:	48 85       	ldd	r20, Y+8	; 0x08
    edaa:	59 85       	ldd	r21, Y+9	; 0x09
    edac:	ba 01       	movw	r22, r20
    edae:	a9 01       	movw	r20, r18
    edb0:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    edb4:	dc 01       	movw	r26, r24
    edb6:	cb 01       	movw	r24, r22
    edb8:	8b 8b       	std	Y+19, r24	; 0x13
    edba:	9c 8b       	std	Y+20, r25	; 0x14
    edbc:	ad 8b       	std	Y+21, r26	; 0x15
    edbe:	be 8b       	std	Y+22, r27	; 0x16
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    edc0:	8b 89       	ldd	r24, Y+19	; 0x13
    edc2:	9c 89       	ldd	r25, Y+20	; 0x14
    edc4:	ad 89       	ldd	r26, Y+21	; 0x15
    edc6:	be 89       	ldd	r27, Y+22	; 0x16
    edc8:	8f 3f       	cpi	r24, 0xFF	; 255
    edca:	ff ef       	ldi	r31, 0xFF	; 255
    edcc:	9f 07       	cpc	r25, r31
    edce:	ff ef       	ldi	r31, 0xFF	; 255
    edd0:	af 07       	cpc	r26, r31
    edd2:	ff ef       	ldi	r31, 0xFF	; 255
    edd4:	bf 07       	cpc	r27, r31
    edd6:	19 f4       	brne	.+6      	; 0xedde <f_getfree+0x10a>
    edd8:	81 e0       	ldi	r24, 0x01	; 1
    edda:	89 83       	std	Y+1, r24	; 0x01
    eddc:	23 c1       	rjmp	.+582    	; 0xf024 <f_getfree+0x350>
					if (stat == 1) { res = FR_INT_ERR; break; }
    edde:	8b 89       	ldd	r24, Y+19	; 0x13
    ede0:	9c 89       	ldd	r25, Y+20	; 0x14
    ede2:	ad 89       	ldd	r26, Y+21	; 0x15
    ede4:	be 89       	ldd	r27, Y+22	; 0x16
    ede6:	81 30       	cpi	r24, 0x01	; 1
    ede8:	91 05       	cpc	r25, r1
    edea:	a1 05       	cpc	r26, r1
    edec:	b1 05       	cpc	r27, r1
    edee:	21 f4       	brne	.+8      	; 0xedf8 <f_getfree+0x124>
    edf0:	82 e0       	ldi	r24, 0x02	; 2
    edf2:	89 83       	std	Y+1, r24	; 0x01
    edf4:	00 00       	nop
    edf6:	16 c1       	rjmp	.+556    	; 0xf024 <f_getfree+0x350>
					if (stat == 0) n++;
    edf8:	8b 89       	ldd	r24, Y+19	; 0x13
    edfa:	9c 89       	ldd	r25, Y+20	; 0x14
    edfc:	ad 89       	ldd	r26, Y+21	; 0x15
    edfe:	be 89       	ldd	r27, Y+22	; 0x16
    ee00:	00 97       	sbiw	r24, 0x00	; 0
    ee02:	a1 05       	cpc	r26, r1
    ee04:	b1 05       	cpc	r27, r1
    ee06:	59 f4       	brne	.+22     	; 0xee1e <f_getfree+0x14a>
    ee08:	8a 81       	ldd	r24, Y+2	; 0x02
    ee0a:	9b 81       	ldd	r25, Y+3	; 0x03
    ee0c:	ac 81       	ldd	r26, Y+4	; 0x04
    ee0e:	bd 81       	ldd	r27, Y+5	; 0x05
    ee10:	01 96       	adiw	r24, 0x01	; 1
    ee12:	a1 1d       	adc	r26, r1
    ee14:	b1 1d       	adc	r27, r1
    ee16:	8a 83       	std	Y+2, r24	; 0x02
    ee18:	9b 83       	std	Y+3, r25	; 0x03
    ee1a:	ac 83       	std	Y+4, r26	; 0x04
    ee1c:	bd 83       	std	Y+5, r27	; 0x05
				} while (++clst < (*fatfs)->n_fatent);
    ee1e:	8e 81       	ldd	r24, Y+6	; 0x06
    ee20:	9f 81       	ldd	r25, Y+7	; 0x07
    ee22:	a8 85       	ldd	r26, Y+8	; 0x08
    ee24:	b9 85       	ldd	r27, Y+9	; 0x09
    ee26:	01 96       	adiw	r24, 0x01	; 1
    ee28:	a1 1d       	adc	r26, r1
    ee2a:	b1 1d       	adc	r27, r1
    ee2c:	8e 83       	std	Y+6, r24	; 0x06
    ee2e:	9f 83       	std	Y+7, r25	; 0x07
    ee30:	a8 87       	std	Y+8, r26	; 0x08
    ee32:	b9 87       	std	Y+9, r27	; 0x09
    ee34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ee36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ee38:	fc 01       	movw	r30, r24
    ee3a:	80 81       	ld	r24, Z
    ee3c:	91 81       	ldd	r25, Z+1	; 0x01
    ee3e:	fc 01       	movw	r30, r24
    ee40:	86 89       	ldd	r24, Z+22	; 0x16
    ee42:	97 89       	ldd	r25, Z+23	; 0x17
    ee44:	a0 8d       	ldd	r26, Z+24	; 0x18
    ee46:	b1 8d       	ldd	r27, Z+25	; 0x19
    ee48:	2e 81       	ldd	r18, Y+6	; 0x06
    ee4a:	3f 81       	ldd	r19, Y+7	; 0x07
    ee4c:	48 85       	ldd	r20, Y+8	; 0x08
    ee4e:	59 85       	ldd	r21, Y+9	; 0x09
    ee50:	28 17       	cp	r18, r24
    ee52:	39 07       	cpc	r19, r25
    ee54:	4a 07       	cpc	r20, r26
    ee56:	5b 07       	cpc	r21, r27
    ee58:	08 f4       	brcc	.+2      	; 0xee5c <f_getfree+0x188>
    ee5a:	9f cf       	rjmp	.-194    	; 0xed9a <f_getfree+0xc6>
    ee5c:	e3 c0       	rjmp	.+454    	; 0xf024 <f_getfree+0x350>
			} else {
				clst = (*fatfs)->n_fatent;
    ee5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ee60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ee62:	fc 01       	movw	r30, r24
    ee64:	80 81       	ld	r24, Z
    ee66:	91 81       	ldd	r25, Z+1	; 0x01
    ee68:	fc 01       	movw	r30, r24
    ee6a:	86 89       	ldd	r24, Z+22	; 0x16
    ee6c:	97 89       	ldd	r25, Z+23	; 0x17
    ee6e:	a0 8d       	ldd	r26, Z+24	; 0x18
    ee70:	b1 8d       	ldd	r27, Z+25	; 0x19
    ee72:	8e 83       	std	Y+6, r24	; 0x06
    ee74:	9f 83       	std	Y+7, r25	; 0x07
    ee76:	a8 87       	std	Y+8, r26	; 0x08
    ee78:	b9 87       	std	Y+9, r27	; 0x09
				sect = (*fatfs)->fatbase;
    ee7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ee7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ee7e:	fc 01       	movw	r30, r24
    ee80:	80 81       	ld	r24, Z
    ee82:	91 81       	ldd	r25, Z+1	; 0x01
    ee84:	fc 01       	movw	r30, r24
    ee86:	86 8d       	ldd	r24, Z+30	; 0x1e
    ee88:	97 8d       	ldd	r25, Z+31	; 0x1f
    ee8a:	a0 a1       	ldd	r26, Z+32	; 0x20
    ee8c:	b1 a1       	ldd	r27, Z+33	; 0x21
    ee8e:	8a 87       	std	Y+10, r24	; 0x0a
    ee90:	9b 87       	std	Y+11, r25	; 0x0b
    ee92:	ac 87       	std	Y+12, r26	; 0x0c
    ee94:	bd 87       	std	Y+13, r27	; 0x0d
				i = 0; p = 0;
    ee96:	1f 86       	std	Y+15, r1	; 0x0f
    ee98:	1e 86       	std	Y+14, r1	; 0x0e
    ee9a:	19 8a       	std	Y+17, r1	; 0x11
    ee9c:	18 8a       	std	Y+16, r1	; 0x10
				do {
					if (!i) {
    ee9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    eea0:	9f 85       	ldd	r25, Y+15	; 0x0f
    eea2:	00 97       	sbiw	r24, 0x00	; 0
    eea4:	51 f5       	brne	.+84     	; 0xeefa <f_getfree+0x226>
						res = move_window(*fatfs, sect++);
    eea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    eea8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    eeaa:	fc 01       	movw	r30, r24
    eeac:	60 81       	ld	r22, Z
    eeae:	71 81       	ldd	r23, Z+1	; 0x01
    eeb0:	2a 85       	ldd	r18, Y+10	; 0x0a
    eeb2:	3b 85       	ldd	r19, Y+11	; 0x0b
    eeb4:	4c 85       	ldd	r20, Y+12	; 0x0c
    eeb6:	5d 85       	ldd	r21, Y+13	; 0x0d
    eeb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    eeba:	9b 85       	ldd	r25, Y+11	; 0x0b
    eebc:	ac 85       	ldd	r26, Y+12	; 0x0c
    eebe:	bd 85       	ldd	r27, Y+13	; 0x0d
    eec0:	01 96       	adiw	r24, 0x01	; 1
    eec2:	a1 1d       	adc	r26, r1
    eec4:	b1 1d       	adc	r27, r1
    eec6:	8a 87       	std	Y+10, r24	; 0x0a
    eec8:	9b 87       	std	Y+11, r25	; 0x0b
    eeca:	ac 87       	std	Y+12, r26	; 0x0c
    eecc:	bd 87       	std	Y+13, r27	; 0x0d
    eece:	cb 01       	movw	r24, r22
    eed0:	ba 01       	movw	r22, r20
    eed2:	a9 01       	movw	r20, r18
    eed4:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    eed8:	89 83       	std	Y+1, r24	; 0x01
						if (res != FR_OK) break;
    eeda:	89 81       	ldd	r24, Y+1	; 0x01
    eedc:	88 23       	and	r24, r24
    eede:	09 f0       	breq	.+2      	; 0xeee2 <f_getfree+0x20e>
    eee0:	a0 c0       	rjmp	.+320    	; 0xf022 <f_getfree+0x34e>
						p = (*fatfs)->win;
    eee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    eee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    eee6:	fc 01       	movw	r30, r24
    eee8:	80 81       	ld	r24, Z
    eeea:	91 81       	ldd	r25, Z+1	; 0x01
    eeec:	8e 96       	adiw	r24, 0x2e	; 46
    eeee:	99 8b       	std	Y+17, r25	; 0x11
    eef0:	88 8b       	std	Y+16, r24	; 0x10
						i = SS(*fatfs);
    eef2:	80 e0       	ldi	r24, 0x00	; 0
    eef4:	92 e0       	ldi	r25, 0x02	; 2
    eef6:	9f 87       	std	Y+15, r25	; 0x0f
    eef8:	8e 87       	std	Y+14, r24	; 0x0e
					}
					if (fat == FS_FAT16) {
    eefa:	8a 89       	ldd	r24, Y+18	; 0x12
    eefc:	82 30       	cpi	r24, 0x02	; 2
    eefe:	49 f5       	brne	.+82     	; 0xef52 <f_getfree+0x27e>
						if (LD_WORD(p) == 0) n++;
    ef00:	88 89       	ldd	r24, Y+16	; 0x10
    ef02:	99 89       	ldd	r25, Y+17	; 0x11
    ef04:	01 96       	adiw	r24, 0x01	; 1
    ef06:	fc 01       	movw	r30, r24
    ef08:	80 81       	ld	r24, Z
    ef0a:	88 2f       	mov	r24, r24
    ef0c:	90 e0       	ldi	r25, 0x00	; 0
    ef0e:	38 2f       	mov	r19, r24
    ef10:	22 27       	eor	r18, r18
    ef12:	88 89       	ldd	r24, Y+16	; 0x10
    ef14:	99 89       	ldd	r25, Y+17	; 0x11
    ef16:	fc 01       	movw	r30, r24
    ef18:	80 81       	ld	r24, Z
    ef1a:	88 2f       	mov	r24, r24
    ef1c:	90 e0       	ldi	r25, 0x00	; 0
    ef1e:	82 2b       	or	r24, r18
    ef20:	93 2b       	or	r25, r19
    ef22:	00 97       	sbiw	r24, 0x00	; 0
    ef24:	59 f4       	brne	.+22     	; 0xef3c <f_getfree+0x268>
    ef26:	8a 81       	ldd	r24, Y+2	; 0x02
    ef28:	9b 81       	ldd	r25, Y+3	; 0x03
    ef2a:	ac 81       	ldd	r26, Y+4	; 0x04
    ef2c:	bd 81       	ldd	r27, Y+5	; 0x05
    ef2e:	01 96       	adiw	r24, 0x01	; 1
    ef30:	a1 1d       	adc	r26, r1
    ef32:	b1 1d       	adc	r27, r1
    ef34:	8a 83       	std	Y+2, r24	; 0x02
    ef36:	9b 83       	std	Y+3, r25	; 0x03
    ef38:	ac 83       	std	Y+4, r26	; 0x04
    ef3a:	bd 83       	std	Y+5, r27	; 0x05
						p += 2; i -= 2;
    ef3c:	88 89       	ldd	r24, Y+16	; 0x10
    ef3e:	99 89       	ldd	r25, Y+17	; 0x11
    ef40:	02 96       	adiw	r24, 0x02	; 2
    ef42:	99 8b       	std	Y+17, r25	; 0x11
    ef44:	88 8b       	std	Y+16, r24	; 0x10
    ef46:	8e 85       	ldd	r24, Y+14	; 0x0e
    ef48:	9f 85       	ldd	r25, Y+15	; 0x0f
    ef4a:	02 97       	sbiw	r24, 0x02	; 2
    ef4c:	9f 87       	std	Y+15, r25	; 0x0f
    ef4e:	8e 87       	std	Y+14, r24	; 0x0e
    ef50:	53 c0       	rjmp	.+166    	; 0xeff8 <f_getfree+0x324>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    ef52:	88 89       	ldd	r24, Y+16	; 0x10
    ef54:	99 89       	ldd	r25, Y+17	; 0x11
    ef56:	03 96       	adiw	r24, 0x03	; 3
    ef58:	fc 01       	movw	r30, r24
    ef5a:	80 81       	ld	r24, Z
    ef5c:	88 2f       	mov	r24, r24
    ef5e:	90 e0       	ldi	r25, 0x00	; 0
    ef60:	a0 e0       	ldi	r26, 0x00	; 0
    ef62:	b0 e0       	ldi	r27, 0x00	; 0
    ef64:	58 2f       	mov	r21, r24
    ef66:	44 27       	eor	r20, r20
    ef68:	33 27       	eor	r19, r19
    ef6a:	22 27       	eor	r18, r18
    ef6c:	88 89       	ldd	r24, Y+16	; 0x10
    ef6e:	99 89       	ldd	r25, Y+17	; 0x11
    ef70:	02 96       	adiw	r24, 0x02	; 2
    ef72:	fc 01       	movw	r30, r24
    ef74:	80 81       	ld	r24, Z
    ef76:	88 2f       	mov	r24, r24
    ef78:	90 e0       	ldi	r25, 0x00	; 0
    ef7a:	a0 e0       	ldi	r26, 0x00	; 0
    ef7c:	b0 e0       	ldi	r27, 0x00	; 0
    ef7e:	dc 01       	movw	r26, r24
    ef80:	99 27       	eor	r25, r25
    ef82:	88 27       	eor	r24, r24
    ef84:	28 2b       	or	r18, r24
    ef86:	39 2b       	or	r19, r25
    ef88:	4a 2b       	or	r20, r26
    ef8a:	5b 2b       	or	r21, r27
    ef8c:	88 89       	ldd	r24, Y+16	; 0x10
    ef8e:	99 89       	ldd	r25, Y+17	; 0x11
    ef90:	01 96       	adiw	r24, 0x01	; 1
    ef92:	fc 01       	movw	r30, r24
    ef94:	80 81       	ld	r24, Z
    ef96:	88 2f       	mov	r24, r24
    ef98:	90 e0       	ldi	r25, 0x00	; 0
    ef9a:	98 2f       	mov	r25, r24
    ef9c:	88 27       	eor	r24, r24
    ef9e:	cc 01       	movw	r24, r24
    efa0:	a0 e0       	ldi	r26, 0x00	; 0
    efa2:	b0 e0       	ldi	r27, 0x00	; 0
    efa4:	28 2b       	or	r18, r24
    efa6:	39 2b       	or	r19, r25
    efa8:	4a 2b       	or	r20, r26
    efaa:	5b 2b       	or	r21, r27
    efac:	88 89       	ldd	r24, Y+16	; 0x10
    efae:	99 89       	ldd	r25, Y+17	; 0x11
    efb0:	fc 01       	movw	r30, r24
    efb2:	80 81       	ld	r24, Z
    efb4:	88 2f       	mov	r24, r24
    efb6:	90 e0       	ldi	r25, 0x00	; 0
    efb8:	a0 e0       	ldi	r26, 0x00	; 0
    efba:	b0 e0       	ldi	r27, 0x00	; 0
    efbc:	82 2b       	or	r24, r18
    efbe:	93 2b       	or	r25, r19
    efc0:	a4 2b       	or	r26, r20
    efc2:	b5 2b       	or	r27, r21
    efc4:	bf 70       	andi	r27, 0x0F	; 15
    efc6:	00 97       	sbiw	r24, 0x00	; 0
    efc8:	a1 05       	cpc	r26, r1
    efca:	b1 05       	cpc	r27, r1
    efcc:	59 f4       	brne	.+22     	; 0xefe4 <f_getfree+0x310>
    efce:	8a 81       	ldd	r24, Y+2	; 0x02
    efd0:	9b 81       	ldd	r25, Y+3	; 0x03
    efd2:	ac 81       	ldd	r26, Y+4	; 0x04
    efd4:	bd 81       	ldd	r27, Y+5	; 0x05
    efd6:	01 96       	adiw	r24, 0x01	; 1
    efd8:	a1 1d       	adc	r26, r1
    efda:	b1 1d       	adc	r27, r1
    efdc:	8a 83       	std	Y+2, r24	; 0x02
    efde:	9b 83       	std	Y+3, r25	; 0x03
    efe0:	ac 83       	std	Y+4, r26	; 0x04
    efe2:	bd 83       	std	Y+5, r27	; 0x05
						p += 4; i -= 4;
    efe4:	88 89       	ldd	r24, Y+16	; 0x10
    efe6:	99 89       	ldd	r25, Y+17	; 0x11
    efe8:	04 96       	adiw	r24, 0x04	; 4
    efea:	99 8b       	std	Y+17, r25	; 0x11
    efec:	88 8b       	std	Y+16, r24	; 0x10
    efee:	8e 85       	ldd	r24, Y+14	; 0x0e
    eff0:	9f 85       	ldd	r25, Y+15	; 0x0f
    eff2:	04 97       	sbiw	r24, 0x04	; 4
    eff4:	9f 87       	std	Y+15, r25	; 0x0f
    eff6:	8e 87       	std	Y+14, r24	; 0x0e
					}
				} while (--clst);
    eff8:	8e 81       	ldd	r24, Y+6	; 0x06
    effa:	9f 81       	ldd	r25, Y+7	; 0x07
    effc:	a8 85       	ldd	r26, Y+8	; 0x08
    effe:	b9 85       	ldd	r27, Y+9	; 0x09
    f000:	01 97       	sbiw	r24, 0x01	; 1
    f002:	a1 09       	sbc	r26, r1
    f004:	b1 09       	sbc	r27, r1
    f006:	8e 83       	std	Y+6, r24	; 0x06
    f008:	9f 83       	std	Y+7, r25	; 0x07
    f00a:	a8 87       	std	Y+8, r26	; 0x08
    f00c:	b9 87       	std	Y+9, r27	; 0x09
    f00e:	8e 81       	ldd	r24, Y+6	; 0x06
    f010:	9f 81       	ldd	r25, Y+7	; 0x07
    f012:	a8 85       	ldd	r26, Y+8	; 0x08
    f014:	b9 85       	ldd	r27, Y+9	; 0x09
    f016:	00 97       	sbiw	r24, 0x00	; 0
    f018:	a1 05       	cpc	r26, r1
    f01a:	b1 05       	cpc	r27, r1
    f01c:	09 f0       	breq	.+2      	; 0xf020 <f_getfree+0x34c>
    f01e:	3f cf       	rjmp	.-386    	; 0xee9e <f_getfree+0x1ca>
    f020:	01 c0       	rjmp	.+2      	; 0xf024 <f_getfree+0x350>
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
						if (res != FR_OK) break;
    f022:	00 00       	nop
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    f024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    f028:	fc 01       	movw	r30, r24
    f02a:	20 81       	ld	r18, Z
    f02c:	31 81       	ldd	r19, Z+1	; 0x01
    f02e:	8a 81       	ldd	r24, Y+2	; 0x02
    f030:	9b 81       	ldd	r25, Y+3	; 0x03
    f032:	ac 81       	ldd	r26, Y+4	; 0x04
    f034:	bd 81       	ldd	r27, Y+5	; 0x05
    f036:	f9 01       	movw	r30, r18
    f038:	86 87       	std	Z+14, r24	; 0x0e
    f03a:	97 87       	std	Z+15, r25	; 0x0f
    f03c:	a0 8b       	std	Z+16, r26	; 0x10
    f03e:	b1 8b       	std	Z+17, r27	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    f040:	8a 89       	ldd	r24, Y+18	; 0x12
    f042:	83 30       	cpi	r24, 0x03	; 3
    f044:	41 f4       	brne	.+16     	; 0xf056 <f_getfree+0x382>
    f046:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f048:	9c 8d       	ldd	r25, Y+28	; 0x1c
    f04a:	fc 01       	movw	r30, r24
    f04c:	80 81       	ld	r24, Z
    f04e:	91 81       	ldd	r25, Z+1	; 0x01
    f050:	21 e0       	ldi	r18, 0x01	; 1
    f052:	fc 01       	movw	r30, r24
    f054:	25 83       	std	Z+5, r18	; 0x05
			*nclst = n;
    f056:	29 8d       	ldd	r18, Y+25	; 0x19
    f058:	3a 8d       	ldd	r19, Y+26	; 0x1a
    f05a:	8a 81       	ldd	r24, Y+2	; 0x02
    f05c:	9b 81       	ldd	r25, Y+3	; 0x03
    f05e:	ac 81       	ldd	r26, Y+4	; 0x04
    f060:	bd 81       	ldd	r27, Y+5	; 0x05
    f062:	f9 01       	movw	r30, r18
    f064:	80 83       	st	Z, r24
    f066:	91 83       	std	Z+1, r25	; 0x01
    f068:	a2 83       	std	Z+2, r26	; 0x02
    f06a:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	LEAVE_FF(*fatfs, res);
    f06c:	89 81       	ldd	r24, Y+1	; 0x01
}
    f06e:	6c 96       	adiw	r28, 0x1c	; 28
    f070:	0f b6       	in	r0, 0x3f	; 63
    f072:	f8 94       	cli
    f074:	de bf       	out	0x3e, r29	; 62
    f076:	0f be       	out	0x3f, r0	; 63
    f078:	cd bf       	out	0x3d, r28	; 61
    f07a:	cf 91       	pop	r28
    f07c:	df 91       	pop	r29
    f07e:	08 95       	ret

0000f080 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    f080:	0f 93       	push	r16
    f082:	1f 93       	push	r17
    f084:	df 93       	push	r29
    f086:	cf 93       	push	r28
    f088:	cd b7       	in	r28, 0x3d	; 61
    f08a:	de b7       	in	r29, 0x3e	; 62
    f08c:	27 97       	sbiw	r28, 0x07	; 7
    f08e:	0f b6       	in	r0, 0x3f	; 63
    f090:	f8 94       	cli
    f092:	de bf       	out	0x3e, r29	; 62
    f094:	0f be       	out	0x3f, r0	; 63
    f096:	cd bf       	out	0x3d, r28	; 61
    f098:	9f 83       	std	Y+7, r25	; 0x07
    f09a:	8e 83       	std	Y+6, r24	; 0x06
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    f09c:	8e 81       	ldd	r24, Y+6	; 0x06
    f09e:	9f 81       	ldd	r25, Y+7	; 0x07
    f0a0:	fc 01       	movw	r30, r24
    f0a2:	80 81       	ld	r24, Z
    f0a4:	91 81       	ldd	r25, Z+1	; 0x01
    f0a6:	2e 81       	ldd	r18, Y+6	; 0x06
    f0a8:	3f 81       	ldd	r19, Y+7	; 0x07
    f0aa:	f9 01       	movw	r30, r18
    f0ac:	22 81       	ldd	r18, Z+2	; 0x02
    f0ae:	33 81       	ldd	r19, Z+3	; 0x03
    f0b0:	b9 01       	movw	r22, r18
    f0b2:	0e 94 2e 68 	call	0xd05c	; 0xd05c <validate>
    f0b6:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    f0b8:	89 81       	ldd	r24, Y+1	; 0x01
    f0ba:	88 23       	and	r24, r24
    f0bc:	a9 f4       	brne	.+42     	; 0xf0e8 <f_truncate+0x68>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    f0be:	8e 81       	ldd	r24, Y+6	; 0x06
    f0c0:	9f 81       	ldd	r25, Y+7	; 0x07
    f0c2:	fc 01       	movw	r30, r24
    f0c4:	84 81       	ldd	r24, Z+4	; 0x04
    f0c6:	88 23       	and	r24, r24
    f0c8:	1c f4       	brge	.+6      	; 0xf0d0 <f_truncate+0x50>
			res = FR_INT_ERR;
    f0ca:	82 e0       	ldi	r24, 0x02	; 2
    f0cc:	89 83       	std	Y+1, r24	; 0x01
    f0ce:	0c c0       	rjmp	.+24     	; 0xf0e8 <f_truncate+0x68>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    f0d0:	8e 81       	ldd	r24, Y+6	; 0x06
    f0d2:	9f 81       	ldd	r25, Y+7	; 0x07
    f0d4:	fc 01       	movw	r30, r24
    f0d6:	84 81       	ldd	r24, Z+4	; 0x04
    f0d8:	88 2f       	mov	r24, r24
    f0da:	90 e0       	ldi	r25, 0x00	; 0
    f0dc:	82 70       	andi	r24, 0x02	; 2
    f0de:	90 70       	andi	r25, 0x00	; 0
    f0e0:	00 97       	sbiw	r24, 0x00	; 0
    f0e2:	11 f4       	brne	.+4      	; 0xf0e8 <f_truncate+0x68>
				res = FR_DENIED;
    f0e4:	87 e0       	ldi	r24, 0x07	; 7
    f0e6:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	if (res == FR_OK) {
    f0e8:	89 81       	ldd	r24, Y+1	; 0x01
    f0ea:	88 23       	and	r24, r24
    f0ec:	09 f0       	breq	.+2      	; 0xf0f0 <f_truncate+0x70>
    f0ee:	c9 c0       	rjmp	.+402    	; 0xf282 <f_truncate+0x202>
		if (fp->fsize > fp->fptr) {
    f0f0:	8e 81       	ldd	r24, Y+6	; 0x06
    f0f2:	9f 81       	ldd	r25, Y+7	; 0x07
    f0f4:	fc 01       	movw	r30, r24
    f0f6:	22 85       	ldd	r18, Z+10	; 0x0a
    f0f8:	33 85       	ldd	r19, Z+11	; 0x0b
    f0fa:	44 85       	ldd	r20, Z+12	; 0x0c
    f0fc:	55 85       	ldd	r21, Z+13	; 0x0d
    f0fe:	8e 81       	ldd	r24, Y+6	; 0x06
    f100:	9f 81       	ldd	r25, Y+7	; 0x07
    f102:	fc 01       	movw	r30, r24
    f104:	86 81       	ldd	r24, Z+6	; 0x06
    f106:	97 81       	ldd	r25, Z+7	; 0x07
    f108:	a0 85       	ldd	r26, Z+8	; 0x08
    f10a:	b1 85       	ldd	r27, Z+9	; 0x09
    f10c:	82 17       	cp	r24, r18
    f10e:	93 07       	cpc	r25, r19
    f110:	a4 07       	cpc	r26, r20
    f112:	b5 07       	cpc	r27, r21
    f114:	08 f0       	brcs	.+2      	; 0xf118 <f_truncate+0x98>
    f116:	a8 c0       	rjmp	.+336    	; 0xf268 <f_truncate+0x1e8>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    f118:	8e 81       	ldd	r24, Y+6	; 0x06
    f11a:	9f 81       	ldd	r25, Y+7	; 0x07
    f11c:	fc 01       	movw	r30, r24
    f11e:	86 81       	ldd	r24, Z+6	; 0x06
    f120:	97 81       	ldd	r25, Z+7	; 0x07
    f122:	a0 85       	ldd	r26, Z+8	; 0x08
    f124:	b1 85       	ldd	r27, Z+9	; 0x09
    f126:	2e 81       	ldd	r18, Y+6	; 0x06
    f128:	3f 81       	ldd	r19, Y+7	; 0x07
    f12a:	f9 01       	movw	r30, r18
    f12c:	82 87       	std	Z+10, r24	; 0x0a
    f12e:	93 87       	std	Z+11, r25	; 0x0b
    f130:	a4 87       	std	Z+12, r26	; 0x0c
    f132:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    f134:	8e 81       	ldd	r24, Y+6	; 0x06
    f136:	9f 81       	ldd	r25, Y+7	; 0x07
    f138:	fc 01       	movw	r30, r24
    f13a:	84 81       	ldd	r24, Z+4	; 0x04
    f13c:	28 2f       	mov	r18, r24
    f13e:	20 62       	ori	r18, 0x20	; 32
    f140:	8e 81       	ldd	r24, Y+6	; 0x06
    f142:	9f 81       	ldd	r25, Y+7	; 0x07
    f144:	fc 01       	movw	r30, r24
    f146:	24 83       	std	Z+4, r18	; 0x04
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    f148:	8e 81       	ldd	r24, Y+6	; 0x06
    f14a:	9f 81       	ldd	r25, Y+7	; 0x07
    f14c:	fc 01       	movw	r30, r24
    f14e:	86 81       	ldd	r24, Z+6	; 0x06
    f150:	97 81       	ldd	r25, Z+7	; 0x07
    f152:	a0 85       	ldd	r26, Z+8	; 0x08
    f154:	b1 85       	ldd	r27, Z+9	; 0x09
    f156:	00 97       	sbiw	r24, 0x00	; 0
    f158:	a1 05       	cpc	r26, r1
    f15a:	b1 05       	cpc	r27, r1
    f15c:	c9 f4       	brne	.+50     	; 0xf190 <f_truncate+0x110>
				res = remove_chain(fp->fs, fp->sclust);
    f15e:	8e 81       	ldd	r24, Y+6	; 0x06
    f160:	9f 81       	ldd	r25, Y+7	; 0x07
    f162:	fc 01       	movw	r30, r24
    f164:	80 81       	ld	r24, Z
    f166:	91 81       	ldd	r25, Z+1	; 0x01
    f168:	2e 81       	ldd	r18, Y+6	; 0x06
    f16a:	3f 81       	ldd	r19, Y+7	; 0x07
    f16c:	f9 01       	movw	r30, r18
    f16e:	26 85       	ldd	r18, Z+14	; 0x0e
    f170:	37 85       	ldd	r19, Z+15	; 0x0f
    f172:	40 89       	ldd	r20, Z+16	; 0x10
    f174:	51 89       	ldd	r21, Z+17	; 0x11
    f176:	ba 01       	movw	r22, r20
    f178:	a9 01       	movw	r20, r18
    f17a:	0e 94 16 57 	call	0xae2c	; 0xae2c <remove_chain>
    f17e:	89 83       	std	Y+1, r24	; 0x01
				fp->sclust = 0;
    f180:	8e 81       	ldd	r24, Y+6	; 0x06
    f182:	9f 81       	ldd	r25, Y+7	; 0x07
    f184:	fc 01       	movw	r30, r24
    f186:	16 86       	std	Z+14, r1	; 0x0e
    f188:	17 86       	std	Z+15, r1	; 0x0f
    f18a:	10 8a       	std	Z+16, r1	; 0x10
    f18c:	11 8a       	std	Z+17, r1	; 0x11
    f18e:	6c c0       	rjmp	.+216    	; 0xf268 <f_truncate+0x1e8>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    f190:	8e 81       	ldd	r24, Y+6	; 0x06
    f192:	9f 81       	ldd	r25, Y+7	; 0x07
    f194:	fc 01       	movw	r30, r24
    f196:	80 81       	ld	r24, Z
    f198:	91 81       	ldd	r25, Z+1	; 0x01
    f19a:	2e 81       	ldd	r18, Y+6	; 0x06
    f19c:	3f 81       	ldd	r19, Y+7	; 0x07
    f19e:	f9 01       	movw	r30, r18
    f1a0:	22 89       	ldd	r18, Z+18	; 0x12
    f1a2:	33 89       	ldd	r19, Z+19	; 0x13
    f1a4:	44 89       	ldd	r20, Z+20	; 0x14
    f1a6:	55 89       	ldd	r21, Z+21	; 0x15
    f1a8:	ba 01       	movw	r22, r20
    f1aa:	a9 01       	movw	r20, r18
    f1ac:	0e 94 9b 53 	call	0xa736	; 0xa736 <get_fat>
    f1b0:	dc 01       	movw	r26, r24
    f1b2:	cb 01       	movw	r24, r22
    f1b4:	8a 83       	std	Y+2, r24	; 0x02
    f1b6:	9b 83       	std	Y+3, r25	; 0x03
    f1b8:	ac 83       	std	Y+4, r26	; 0x04
    f1ba:	bd 83       	std	Y+5, r27	; 0x05
				res = FR_OK;
    f1bc:	19 82       	std	Y+1, r1	; 0x01
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    f1be:	8a 81       	ldd	r24, Y+2	; 0x02
    f1c0:	9b 81       	ldd	r25, Y+3	; 0x03
    f1c2:	ac 81       	ldd	r26, Y+4	; 0x04
    f1c4:	bd 81       	ldd	r27, Y+5	; 0x05
    f1c6:	8f 3f       	cpi	r24, 0xFF	; 255
    f1c8:	ff ef       	ldi	r31, 0xFF	; 255
    f1ca:	9f 07       	cpc	r25, r31
    f1cc:	ff ef       	ldi	r31, 0xFF	; 255
    f1ce:	af 07       	cpc	r26, r31
    f1d0:	ff ef       	ldi	r31, 0xFF	; 255
    f1d2:	bf 07       	cpc	r27, r31
    f1d4:	11 f4       	brne	.+4      	; 0xf1da <f_truncate+0x15a>
    f1d6:	81 e0       	ldi	r24, 0x01	; 1
    f1d8:	89 83       	std	Y+1, r24	; 0x01
				if (ncl == 1) res = FR_INT_ERR;
    f1da:	8a 81       	ldd	r24, Y+2	; 0x02
    f1dc:	9b 81       	ldd	r25, Y+3	; 0x03
    f1de:	ac 81       	ldd	r26, Y+4	; 0x04
    f1e0:	bd 81       	ldd	r27, Y+5	; 0x05
    f1e2:	81 30       	cpi	r24, 0x01	; 1
    f1e4:	91 05       	cpc	r25, r1
    f1e6:	a1 05       	cpc	r26, r1
    f1e8:	b1 05       	cpc	r27, r1
    f1ea:	11 f4       	brne	.+4      	; 0xf1f0 <f_truncate+0x170>
    f1ec:	82 e0       	ldi	r24, 0x02	; 2
    f1ee:	89 83       	std	Y+1, r24	; 0x01
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    f1f0:	89 81       	ldd	r24, Y+1	; 0x01
    f1f2:	88 23       	and	r24, r24
    f1f4:	c9 f5       	brne	.+114    	; 0xf268 <f_truncate+0x1e8>
    f1f6:	8e 81       	ldd	r24, Y+6	; 0x06
    f1f8:	9f 81       	ldd	r25, Y+7	; 0x07
    f1fa:	fc 01       	movw	r30, r24
    f1fc:	80 81       	ld	r24, Z
    f1fe:	91 81       	ldd	r25, Z+1	; 0x01
    f200:	fc 01       	movw	r30, r24
    f202:	26 89       	ldd	r18, Z+22	; 0x16
    f204:	37 89       	ldd	r19, Z+23	; 0x17
    f206:	40 8d       	ldd	r20, Z+24	; 0x18
    f208:	51 8d       	ldd	r21, Z+25	; 0x19
    f20a:	8a 81       	ldd	r24, Y+2	; 0x02
    f20c:	9b 81       	ldd	r25, Y+3	; 0x03
    f20e:	ac 81       	ldd	r26, Y+4	; 0x04
    f210:	bd 81       	ldd	r27, Y+5	; 0x05
    f212:	82 17       	cp	r24, r18
    f214:	93 07       	cpc	r25, r19
    f216:	a4 07       	cpc	r26, r20
    f218:	b5 07       	cpc	r27, r21
    f21a:	30 f5       	brcc	.+76     	; 0xf268 <f_truncate+0x1e8>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    f21c:	8e 81       	ldd	r24, Y+6	; 0x06
    f21e:	9f 81       	ldd	r25, Y+7	; 0x07
    f220:	fc 01       	movw	r30, r24
    f222:	80 81       	ld	r24, Z
    f224:	91 81       	ldd	r25, Z+1	; 0x01
    f226:	2e 81       	ldd	r18, Y+6	; 0x06
    f228:	3f 81       	ldd	r19, Y+7	; 0x07
    f22a:	f9 01       	movw	r30, r18
    f22c:	22 89       	ldd	r18, Z+18	; 0x12
    f22e:	33 89       	ldd	r19, Z+19	; 0x13
    f230:	44 89       	ldd	r20, Z+20	; 0x14
    f232:	55 89       	ldd	r21, Z+21	; 0x15
    f234:	ba 01       	movw	r22, r20
    f236:	a9 01       	movw	r20, r18
    f238:	0f ef       	ldi	r16, 0xFF	; 255
    f23a:	1f ef       	ldi	r17, 0xFF	; 255
    f23c:	2f ef       	ldi	r18, 0xFF	; 255
    f23e:	3f e0       	ldi	r19, 0x0F	; 15
    f240:	0e 94 22 55 	call	0xaa44	; 0xaa44 <put_fat>
    f244:	89 83       	std	Y+1, r24	; 0x01
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    f246:	89 81       	ldd	r24, Y+1	; 0x01
    f248:	88 23       	and	r24, r24
    f24a:	71 f4       	brne	.+28     	; 0xf268 <f_truncate+0x1e8>
    f24c:	8e 81       	ldd	r24, Y+6	; 0x06
    f24e:	9f 81       	ldd	r25, Y+7	; 0x07
    f250:	fc 01       	movw	r30, r24
    f252:	80 81       	ld	r24, Z
    f254:	91 81       	ldd	r25, Z+1	; 0x01
    f256:	2a 81       	ldd	r18, Y+2	; 0x02
    f258:	3b 81       	ldd	r19, Y+3	; 0x03
    f25a:	4c 81       	ldd	r20, Y+4	; 0x04
    f25c:	5d 81       	ldd	r21, Y+5	; 0x05
    f25e:	ba 01       	movw	r22, r20
    f260:	a9 01       	movw	r20, r18
    f262:	0e 94 16 57 	call	0xae2c	; 0xae2c <remove_chain>
    f266:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    f268:	89 81       	ldd	r24, Y+1	; 0x01
    f26a:	88 23       	and	r24, r24
    f26c:	51 f0       	breq	.+20     	; 0xf282 <f_truncate+0x202>
    f26e:	8e 81       	ldd	r24, Y+6	; 0x06
    f270:	9f 81       	ldd	r25, Y+7	; 0x07
    f272:	fc 01       	movw	r30, r24
    f274:	84 81       	ldd	r24, Z+4	; 0x04
    f276:	28 2f       	mov	r18, r24
    f278:	20 68       	ori	r18, 0x80	; 128
    f27a:	8e 81       	ldd	r24, Y+6	; 0x06
    f27c:	9f 81       	ldd	r25, Y+7	; 0x07
    f27e:	fc 01       	movw	r30, r24
    f280:	24 83       	std	Z+4, r18	; 0x04
	}

	LEAVE_FF(fp->fs, res);
    f282:	89 81       	ldd	r24, Y+1	; 0x01
}
    f284:	27 96       	adiw	r28, 0x07	; 7
    f286:	0f b6       	in	r0, 0x3f	; 63
    f288:	f8 94       	cli
    f28a:	de bf       	out	0x3e, r29	; 62
    f28c:	0f be       	out	0x3f, r0	; 63
    f28e:	cd bf       	out	0x3d, r28	; 61
    f290:	cf 91       	pop	r28
    f292:	df 91       	pop	r29
    f294:	1f 91       	pop	r17
    f296:	0f 91       	pop	r16
    f298:	08 95       	ret

0000f29a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    f29a:	df 93       	push	r29
    f29c:	cf 93       	push	r28
    f29e:	cd b7       	in	r28, 0x3d	; 61
    f2a0:	de b7       	in	r29, 0x3e	; 62
    f2a2:	c1 54       	subi	r28, 0x41	; 65
    f2a4:	d0 40       	sbci	r29, 0x00	; 0
    f2a6:	0f b6       	in	r0, 0x3f	; 63
    f2a8:	f8 94       	cli
    f2aa:	de bf       	out	0x3e, r29	; 62
    f2ac:	0f be       	out	0x3f, r0	; 63
    f2ae:	cd bf       	out	0x3d, r28	; 61
    f2b0:	9e 01       	movw	r18, r28
    f2b2:	20 5c       	subi	r18, 0xC0	; 192
    f2b4:	3f 4f       	sbci	r19, 0xFF	; 255
    f2b6:	f9 01       	movw	r30, r18
    f2b8:	91 83       	std	Z+1, r25	; 0x01
    f2ba:	80 83       	st	Z, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    f2bc:	ce 01       	movw	r24, r28
    f2be:	80 5c       	subi	r24, 0xC0	; 192
    f2c0:	9f 4f       	sbci	r25, 0xFF	; 255
    f2c2:	9e 01       	movw	r18, r28
    f2c4:	28 5f       	subi	r18, 0xF8	; 248
    f2c6:	3f 4f       	sbci	r19, 0xFF	; 255
    f2c8:	b9 01       	movw	r22, r18
    f2ca:	41 e0       	ldi	r20, 0x01	; 1
    f2cc:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    f2d0:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    f2d2:	89 81       	ldd	r24, Y+1	; 0x01
    f2d4:	88 23       	and	r24, r24
    f2d6:	09 f0       	breq	.+2      	; 0xf2da <f_unlink+0x40>
    f2d8:	cc c0       	rjmp	.+408    	; 0xf472 <f_unlink+0x1d8>
		INIT_BUF(dj);
    f2da:	ce 01       	movw	r24, r28
    f2dc:	c4 96       	adiw	r24, 0x34	; 52
    f2de:	9d 8f       	std	Y+29, r25	; 0x1d
    f2e0:	8c 8f       	std	Y+28, r24	; 0x1c
		res = follow_path(&dj, path);		/* Follow the file path */
    f2e2:	ce 01       	movw	r24, r28
    f2e4:	80 5c       	subi	r24, 0xC0	; 192
    f2e6:	9f 4f       	sbci	r25, 0xFF	; 255
    f2e8:	fc 01       	movw	r30, r24
    f2ea:	20 81       	ld	r18, Z
    f2ec:	31 81       	ldd	r19, Z+1	; 0x01
    f2ee:	ce 01       	movw	r24, r28
    f2f0:	08 96       	adiw	r24, 0x08	; 8
    f2f2:	b9 01       	movw	r22, r18
    f2f4:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    f2f8:	89 83       	std	Y+1, r24	; 0x01
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    f2fa:	89 81       	ldd	r24, Y+1	; 0x01
    f2fc:	88 23       	and	r24, r24
    f2fe:	09 f0       	breq	.+2      	; 0xf302 <f_unlink+0x68>
    f300:	b8 c0       	rjmp	.+368    	; 0xf472 <f_unlink+0x1d8>
			dir = dj.dir;
    f302:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f304:	9b 8d       	ldd	r25, Y+27	; 0x1b
    f306:	9b 83       	std	Y+3, r25	; 0x03
    f308:	8a 83       	std	Y+2, r24	; 0x02
			if (!dir) {
    f30a:	8a 81       	ldd	r24, Y+2	; 0x02
    f30c:	9b 81       	ldd	r25, Y+3	; 0x03
    f30e:	00 97       	sbiw	r24, 0x00	; 0
    f310:	19 f4       	brne	.+6      	; 0xf318 <f_unlink+0x7e>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    f312:	86 e0       	ldi	r24, 0x06	; 6
    f314:	89 83       	std	Y+1, r24	; 0x01
    f316:	0d c0       	rjmp	.+26     	; 0xf332 <f_unlink+0x98>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    f318:	8a 81       	ldd	r24, Y+2	; 0x02
    f31a:	9b 81       	ldd	r25, Y+3	; 0x03
    f31c:	0b 96       	adiw	r24, 0x0b	; 11
    f31e:	fc 01       	movw	r30, r24
    f320:	80 81       	ld	r24, Z
    f322:	88 2f       	mov	r24, r24
    f324:	90 e0       	ldi	r25, 0x00	; 0
    f326:	81 70       	andi	r24, 0x01	; 1
    f328:	90 70       	andi	r25, 0x00	; 0
    f32a:	88 23       	and	r24, r24
    f32c:	11 f0       	breq	.+4      	; 0xf332 <f_unlink+0x98>
					res = FR_DENIED;		/* Cannot remove R/O object */
    f32e:	87 e0       	ldi	r24, 0x07	; 7
    f330:	89 83       	std	Y+1, r24	; 0x01
			}
			dclst = LD_CLUST(dir);
    f332:	8a 81       	ldd	r24, Y+2	; 0x02
    f334:	9b 81       	ldd	r25, Y+3	; 0x03
    f336:	45 96       	adiw	r24, 0x15	; 21
    f338:	fc 01       	movw	r30, r24
    f33a:	80 81       	ld	r24, Z
    f33c:	88 2f       	mov	r24, r24
    f33e:	90 e0       	ldi	r25, 0x00	; 0
    f340:	38 2f       	mov	r19, r24
    f342:	22 27       	eor	r18, r18
    f344:	8a 81       	ldd	r24, Y+2	; 0x02
    f346:	9b 81       	ldd	r25, Y+3	; 0x03
    f348:	44 96       	adiw	r24, 0x14	; 20
    f34a:	fc 01       	movw	r30, r24
    f34c:	80 81       	ld	r24, Z
    f34e:	88 2f       	mov	r24, r24
    f350:	90 e0       	ldi	r25, 0x00	; 0
    f352:	82 2b       	or	r24, r18
    f354:	93 2b       	or	r25, r19
    f356:	cc 01       	movw	r24, r24
    f358:	a0 e0       	ldi	r26, 0x00	; 0
    f35a:	b0 e0       	ldi	r27, 0x00	; 0
    f35c:	ac 01       	movw	r20, r24
    f35e:	33 27       	eor	r19, r19
    f360:	22 27       	eor	r18, r18
    f362:	8a 81       	ldd	r24, Y+2	; 0x02
    f364:	9b 81       	ldd	r25, Y+3	; 0x03
    f366:	4b 96       	adiw	r24, 0x1b	; 27
    f368:	fc 01       	movw	r30, r24
    f36a:	80 81       	ld	r24, Z
    f36c:	88 2f       	mov	r24, r24
    f36e:	90 e0       	ldi	r25, 0x00	; 0
    f370:	78 2f       	mov	r23, r24
    f372:	66 27       	eor	r22, r22
    f374:	8a 81       	ldd	r24, Y+2	; 0x02
    f376:	9b 81       	ldd	r25, Y+3	; 0x03
    f378:	4a 96       	adiw	r24, 0x1a	; 26
    f37a:	fc 01       	movw	r30, r24
    f37c:	80 81       	ld	r24, Z
    f37e:	88 2f       	mov	r24, r24
    f380:	90 e0       	ldi	r25, 0x00	; 0
    f382:	86 2b       	or	r24, r22
    f384:	97 2b       	or	r25, r23
    f386:	cc 01       	movw	r24, r24
    f388:	a0 e0       	ldi	r26, 0x00	; 0
    f38a:	b0 e0       	ldi	r27, 0x00	; 0
    f38c:	82 2b       	or	r24, r18
    f38e:	93 2b       	or	r25, r19
    f390:	a4 2b       	or	r26, r20
    f392:	b5 2b       	or	r27, r21
    f394:	8c 83       	std	Y+4, r24	; 0x04
    f396:	9d 83       	std	Y+5, r25	; 0x05
    f398:	ae 83       	std	Y+6, r26	; 0x06
    f39a:	bf 83       	std	Y+7, r27	; 0x07
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    f39c:	89 81       	ldd	r24, Y+1	; 0x01
    f39e:	88 23       	and	r24, r24
    f3a0:	09 f0       	breq	.+2      	; 0xf3a4 <f_unlink+0x10a>
    f3a2:	41 c0       	rjmp	.+130    	; 0xf426 <f_unlink+0x18c>
    f3a4:	8a 81       	ldd	r24, Y+2	; 0x02
    f3a6:	9b 81       	ldd	r25, Y+3	; 0x03
    f3a8:	0b 96       	adiw	r24, 0x0b	; 11
    f3aa:	fc 01       	movw	r30, r24
    f3ac:	80 81       	ld	r24, Z
    f3ae:	88 2f       	mov	r24, r24
    f3b0:	90 e0       	ldi	r25, 0x00	; 0
    f3b2:	80 71       	andi	r24, 0x10	; 16
    f3b4:	90 70       	andi	r25, 0x00	; 0
    f3b6:	00 97       	sbiw	r24, 0x00	; 0
    f3b8:	b1 f1       	breq	.+108    	; 0xf426 <f_unlink+0x18c>
				if (dclst < 2) {
    f3ba:	8c 81       	ldd	r24, Y+4	; 0x04
    f3bc:	9d 81       	ldd	r25, Y+5	; 0x05
    f3be:	ae 81       	ldd	r26, Y+6	; 0x06
    f3c0:	bf 81       	ldd	r27, Y+7	; 0x07
    f3c2:	82 30       	cpi	r24, 0x02	; 2
    f3c4:	91 05       	cpc	r25, r1
    f3c6:	a1 05       	cpc	r26, r1
    f3c8:	b1 05       	cpc	r27, r1
    f3ca:	18 f4       	brcc	.+6      	; 0xf3d2 <f_unlink+0x138>
					res = FR_INT_ERR;
    f3cc:	82 e0       	ldi	r24, 0x02	; 2
    f3ce:	89 83       	std	Y+1, r24	; 0x01
    f3d0:	2a c0       	rjmp	.+84     	; 0xf426 <f_unlink+0x18c>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    f3d2:	ce 01       	movw	r24, r28
    f3d4:	4e 96       	adiw	r24, 0x1e	; 30
    f3d6:	9e 01       	movw	r18, r28
    f3d8:	28 5f       	subi	r18, 0xF8	; 248
    f3da:	3f 4f       	sbci	r19, 0xFF	; 255
    f3dc:	b9 01       	movw	r22, r18
    f3de:	46 e1       	ldi	r20, 0x16	; 22
    f3e0:	50 e0       	ldi	r21, 0x00	; 0
    f3e2:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
					sdj.sclust = dclst;
    f3e6:	8c 81       	ldd	r24, Y+4	; 0x04
    f3e8:	9d 81       	ldd	r25, Y+5	; 0x05
    f3ea:	ae 81       	ldd	r26, Y+6	; 0x06
    f3ec:	bf 81       	ldd	r27, Y+7	; 0x07
    f3ee:	8c a3       	std	Y+36, r24	; 0x24
    f3f0:	9d a3       	std	Y+37, r25	; 0x25
    f3f2:	ae a3       	std	Y+38, r26	; 0x26
    f3f4:	bf a3       	std	Y+39, r27	; 0x27
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    f3f6:	ce 01       	movw	r24, r28
    f3f8:	4e 96       	adiw	r24, 0x1e	; 30
    f3fa:	62 e0       	ldi	r22, 0x02	; 2
    f3fc:	70 e0       	ldi	r23, 0x00	; 0
    f3fe:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <dir_sdi>
    f402:	89 83       	std	Y+1, r24	; 0x01
					if (res == FR_OK) {
    f404:	89 81       	ldd	r24, Y+1	; 0x01
    f406:	88 23       	and	r24, r24
    f408:	71 f4       	brne	.+28     	; 0xf426 <f_unlink+0x18c>
						res = dir_read(&sdj);
    f40a:	ce 01       	movw	r24, r28
    f40c:	4e 96       	adiw	r24, 0x1e	; 30
    f40e:	0e 94 f3 5c 	call	0xb9e6	; 0xb9e6 <dir_read>
    f412:	89 83       	std	Y+1, r24	; 0x01
						if (res == FR_OK			/* Not empty dir */
    f414:	89 81       	ldd	r24, Y+1	; 0x01
    f416:	88 23       	and	r24, r24
    f418:	11 f4       	brne	.+4      	; 0xf41e <f_unlink+0x184>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    f41a:	87 e0       	ldi	r24, 0x07	; 7
    f41c:	89 83       	std	Y+1, r24	; 0x01
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    f41e:	89 81       	ldd	r24, Y+1	; 0x01
    f420:	84 30       	cpi	r24, 0x04	; 4
    f422:	09 f4       	brne	.+2      	; 0xf426 <f_unlink+0x18c>
    f424:	19 82       	std	Y+1, r1	; 0x01
					}
				}
			}
			if (res == FR_OK) {
    f426:	89 81       	ldd	r24, Y+1	; 0x01
    f428:	88 23       	and	r24, r24
    f42a:	19 f5       	brne	.+70     	; 0xf472 <f_unlink+0x1d8>
				res = dir_remove(&dj);		/* Remove the directory entry */
    f42c:	ce 01       	movw	r24, r28
    f42e:	08 96       	adiw	r24, 0x08	; 8
    f430:	0e 94 eb 5d 	call	0xbbd6	; 0xbbd6 <dir_remove>
    f434:	89 83       	std	Y+1, r24	; 0x01
				if (res == FR_OK) {
    f436:	89 81       	ldd	r24, Y+1	; 0x01
    f438:	88 23       	and	r24, r24
    f43a:	d9 f4       	brne	.+54     	; 0xf472 <f_unlink+0x1d8>
					if (dclst)				/* Remove the cluster chain if exist */
    f43c:	8c 81       	ldd	r24, Y+4	; 0x04
    f43e:	9d 81       	ldd	r25, Y+5	; 0x05
    f440:	ae 81       	ldd	r26, Y+6	; 0x06
    f442:	bf 81       	ldd	r27, Y+7	; 0x07
    f444:	00 97       	sbiw	r24, 0x00	; 0
    f446:	a1 05       	cpc	r26, r1
    f448:	b1 05       	cpc	r27, r1
    f44a:	59 f0       	breq	.+22     	; 0xf462 <f_unlink+0x1c8>
						res = remove_chain(dj.fs, dclst);
    f44c:	88 85       	ldd	r24, Y+8	; 0x08
    f44e:	99 85       	ldd	r25, Y+9	; 0x09
    f450:	2c 81       	ldd	r18, Y+4	; 0x04
    f452:	3d 81       	ldd	r19, Y+5	; 0x05
    f454:	4e 81       	ldd	r20, Y+6	; 0x06
    f456:	5f 81       	ldd	r21, Y+7	; 0x07
    f458:	ba 01       	movw	r22, r20
    f45a:	a9 01       	movw	r20, r18
    f45c:	0e 94 16 57 	call	0xae2c	; 0xae2c <remove_chain>
    f460:	89 83       	std	Y+1, r24	; 0x01
					if (res == FR_OK) res = sync(dj.fs);
    f462:	89 81       	ldd	r24, Y+1	; 0x01
    f464:	88 23       	and	r24, r24
    f466:	29 f4       	brne	.+10     	; 0xf472 <f_unlink+0x1d8>
    f468:	88 85       	ldd	r24, Y+8	; 0x08
    f46a:	99 85       	ldd	r25, Y+9	; 0x09
    f46c:	0e 94 18 52 	call	0xa430	; 0xa430 <sync>
    f470:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    f472:	89 81       	ldd	r24, Y+1	; 0x01
}
    f474:	cf 5b       	subi	r28, 0xBF	; 191
    f476:	df 4f       	sbci	r29, 0xFF	; 255
    f478:	0f b6       	in	r0, 0x3f	; 63
    f47a:	f8 94       	cli
    f47c:	de bf       	out	0x3e, r29	; 62
    f47e:	0f be       	out	0x3f, r0	; 63
    f480:	cd bf       	out	0x3d, r28	; 61
    f482:	cf 91       	pop	r28
    f484:	df 91       	pop	r29
    f486:	08 95       	ret

0000f488 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    f488:	df 93       	push	r29
    f48a:	cf 93       	push	r28
    f48c:	cd b7       	in	r28, 0x3d	; 61
    f48e:	de b7       	in	r29, 0x3e	; 62
    f490:	e8 97       	sbiw	r28, 0x38	; 56
    f492:	0f b6       	in	r0, 0x3f	; 63
    f494:	f8 94       	cli
    f496:	de bf       	out	0x3e, r29	; 62
    f498:	0f be       	out	0x3f, r0	; 63
    f49a:	cd bf       	out	0x3d, r28	; 61
    f49c:	98 af       	std	Y+56, r25	; 0x38
    f49e:	8f ab       	std	Y+55, r24	; 0x37
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    f4a0:	0e 94 f8 85 	call	0x10bf0	; 0x10bf0 <get_fattime>
    f4a4:	dc 01       	movw	r26, r24
    f4a6:	cb 01       	movw	r24, r22
    f4a8:	8b 87       	std	Y+11, r24	; 0x0b
    f4aa:	9c 87       	std	Y+12, r25	; 0x0c
    f4ac:	ad 87       	std	Y+13, r26	; 0x0d
    f4ae:	be 87       	std	Y+14, r27	; 0x0e
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    f4b0:	ce 01       	movw	r24, r28
    f4b2:	c7 96       	adiw	r24, 0x37	; 55
    f4b4:	9e 01       	movw	r18, r28
    f4b6:	2b 5e       	subi	r18, 0xEB	; 235
    f4b8:	3f 4f       	sbci	r19, 0xFF	; 255
    f4ba:	b9 01       	movw	r22, r18
    f4bc:	41 e0       	ldi	r20, 0x01	; 1
    f4be:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    f4c2:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    f4c4:	89 81       	ldd	r24, Y+1	; 0x01
    f4c6:	88 23       	and	r24, r24
    f4c8:	09 f0       	breq	.+2      	; 0xf4cc <f_mkdir+0x44>
    f4ca:	fc c1       	rjmp	.+1016   	; 0xf8c4 <f_mkdir+0x43c>
		INIT_BUF(dj);
    f4cc:	ce 01       	movw	r24, r28
    f4ce:	8b 96       	adiw	r24, 0x2b	; 43
    f4d0:	9a a7       	std	Y+42, r25	; 0x2a
    f4d2:	89 a7       	std	Y+41, r24	; 0x29
		res = follow_path(&dj, path);			/* Follow the file path */
    f4d4:	2f a9       	ldd	r18, Y+55	; 0x37
    f4d6:	38 ad       	ldd	r19, Y+56	; 0x38
    f4d8:	ce 01       	movw	r24, r28
    f4da:	45 96       	adiw	r24, 0x15	; 21
    f4dc:	b9 01       	movw	r22, r18
    f4de:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    f4e2:	89 83       	std	Y+1, r24	; 0x01
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    f4e4:	89 81       	ldd	r24, Y+1	; 0x01
    f4e6:	88 23       	and	r24, r24
    f4e8:	11 f4       	brne	.+4      	; 0xf4ee <f_mkdir+0x66>
    f4ea:	88 e0       	ldi	r24, 0x08	; 8
    f4ec:	89 83       	std	Y+1, r24	; 0x01
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
    f4ee:	89 81       	ldd	r24, Y+1	; 0x01
    f4f0:	84 30       	cpi	r24, 0x04	; 4
    f4f2:	09 f0       	breq	.+2      	; 0xf4f6 <f_mkdir+0x6e>
    f4f4:	e7 c1       	rjmp	.+974    	; 0xf8c4 <f_mkdir+0x43c>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    f4f6:	8d 89       	ldd	r24, Y+21	; 0x15
    f4f8:	9e 89       	ldd	r25, Y+22	; 0x16
    f4fa:	40 e0       	ldi	r20, 0x00	; 0
    f4fc:	50 e0       	ldi	r21, 0x00	; 0
    f4fe:	ba 01       	movw	r22, r20
    f500:	0e 94 da 57 	call	0xafb4	; 0xafb4 <create_chain>
    f504:	dc 01       	movw	r26, r24
    f506:	cb 01       	movw	r24, r22
    f508:	8f 87       	std	Y+15, r24	; 0x0f
    f50a:	98 8b       	std	Y+16, r25	; 0x10
    f50c:	a9 8b       	std	Y+17, r26	; 0x11
    f50e:	ba 8b       	std	Y+18, r27	; 0x12
			res = FR_OK;
    f510:	19 82       	std	Y+1, r1	; 0x01
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    f512:	8f 85       	ldd	r24, Y+15	; 0x0f
    f514:	98 89       	ldd	r25, Y+16	; 0x10
    f516:	a9 89       	ldd	r26, Y+17	; 0x11
    f518:	ba 89       	ldd	r27, Y+18	; 0x12
    f51a:	00 97       	sbiw	r24, 0x00	; 0
    f51c:	a1 05       	cpc	r26, r1
    f51e:	b1 05       	cpc	r27, r1
    f520:	11 f4       	brne	.+4      	; 0xf526 <f_mkdir+0x9e>
    f522:	87 e0       	ldi	r24, 0x07	; 7
    f524:	89 83       	std	Y+1, r24	; 0x01
			if (dcl == 1) res = FR_INT_ERR;
    f526:	8f 85       	ldd	r24, Y+15	; 0x0f
    f528:	98 89       	ldd	r25, Y+16	; 0x10
    f52a:	a9 89       	ldd	r26, Y+17	; 0x11
    f52c:	ba 89       	ldd	r27, Y+18	; 0x12
    f52e:	81 30       	cpi	r24, 0x01	; 1
    f530:	91 05       	cpc	r25, r1
    f532:	a1 05       	cpc	r26, r1
    f534:	b1 05       	cpc	r27, r1
    f536:	11 f4       	brne	.+4      	; 0xf53c <f_mkdir+0xb4>
    f538:	82 e0       	ldi	r24, 0x02	; 2
    f53a:	89 83       	std	Y+1, r24	; 0x01
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    f53c:	8f 85       	ldd	r24, Y+15	; 0x0f
    f53e:	98 89       	ldd	r25, Y+16	; 0x10
    f540:	a9 89       	ldd	r26, Y+17	; 0x11
    f542:	ba 89       	ldd	r27, Y+18	; 0x12
    f544:	8f 3f       	cpi	r24, 0xFF	; 255
    f546:	2f ef       	ldi	r18, 0xFF	; 255
    f548:	92 07       	cpc	r25, r18
    f54a:	2f ef       	ldi	r18, 0xFF	; 255
    f54c:	a2 07       	cpc	r26, r18
    f54e:	2f ef       	ldi	r18, 0xFF	; 255
    f550:	b2 07       	cpc	r27, r18
    f552:	11 f4       	brne	.+4      	; 0xf558 <f_mkdir+0xd0>
    f554:	81 e0       	ldi	r24, 0x01	; 1
    f556:	89 83       	std	Y+1, r24	; 0x01
			if (res == FR_OK)					/* Flush FAT */
    f558:	89 81       	ldd	r24, Y+1	; 0x01
    f55a:	88 23       	and	r24, r24
    f55c:	41 f4       	brne	.+16     	; 0xf56e <f_mkdir+0xe6>
				res = move_window(dj.fs, 0);
    f55e:	8d 89       	ldd	r24, Y+21	; 0x15
    f560:	9e 89       	ldd	r25, Y+22	; 0x16
    f562:	40 e0       	ldi	r20, 0x00	; 0
    f564:	50 e0       	ldi	r21, 0x00	; 0
    f566:	ba 01       	movw	r22, r20
    f568:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    f56c:	89 83       	std	Y+1, r24	; 0x01
			if (res == FR_OK) {					/* Initialize the new directory table */
    f56e:	89 81       	ldd	r24, Y+1	; 0x01
    f570:	88 23       	and	r24, r24
    f572:	09 f0       	breq	.+2      	; 0xf576 <f_mkdir+0xee>
    f574:	24 c1       	rjmp	.+584    	; 0xf7be <f_mkdir+0x336>
				dsc = clust2sect(dj.fs, dcl);
    f576:	8d 89       	ldd	r24, Y+21	; 0x15
    f578:	9e 89       	ldd	r25, Y+22	; 0x16
    f57a:	2f 85       	ldd	r18, Y+15	; 0x0f
    f57c:	38 89       	ldd	r19, Y+16	; 0x10
    f57e:	49 89       	ldd	r20, Y+17	; 0x11
    f580:	5a 89       	ldd	r21, Y+18	; 0x12
    f582:	ba 01       	movw	r22, r20
    f584:	a9 01       	movw	r20, r18
    f586:	0e 94 41 53 	call	0xa682	; 0xa682 <clust2sect>
    f58a:	dc 01       	movw	r26, r24
    f58c:	cb 01       	movw	r24, r22
    f58e:	8b 83       	std	Y+3, r24	; 0x03
    f590:	9c 83       	std	Y+4, r25	; 0x04
    f592:	ad 83       	std	Y+5, r26	; 0x05
    f594:	be 83       	std	Y+6, r27	; 0x06
				dir = dj.fs->win;
    f596:	8d 89       	ldd	r24, Y+21	; 0x15
    f598:	9e 89       	ldd	r25, Y+22	; 0x16
    f59a:	8e 96       	adiw	r24, 0x2e	; 46
    f59c:	9c 8b       	std	Y+20, r25	; 0x14
    f59e:	8b 8b       	std	Y+19, r24	; 0x13
				mem_set(dir, 0, SS(dj.fs));
    f5a0:	8b 89       	ldd	r24, Y+19	; 0x13
    f5a2:	9c 89       	ldd	r25, Y+20	; 0x14
    f5a4:	60 e0       	ldi	r22, 0x00	; 0
    f5a6:	70 e0       	ldi	r23, 0x00	; 0
    f5a8:	40 e0       	ldi	r20, 0x00	; 0
    f5aa:	52 e0       	ldi	r21, 0x02	; 2
    f5ac:	0e 94 8d 50 	call	0xa11a	; 0xa11a <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    f5b0:	8b 89       	ldd	r24, Y+19	; 0x13
    f5b2:	9c 89       	ldd	r25, Y+20	; 0x14
    f5b4:	60 e2       	ldi	r22, 0x20	; 32
    f5b6:	70 e0       	ldi	r23, 0x00	; 0
    f5b8:	4b e0       	ldi	r20, 0x0B	; 11
    f5ba:	50 e0       	ldi	r21, 0x00	; 0
    f5bc:	0e 94 8d 50 	call	0xa11a	; 0xa11a <mem_set>
				dir[DIR_Name] = '.';
    f5c0:	8b 89       	ldd	r24, Y+19	; 0x13
    f5c2:	9c 89       	ldd	r25, Y+20	; 0x14
    f5c4:	2e e2       	ldi	r18, 0x2E	; 46
    f5c6:	fc 01       	movw	r30, r24
    f5c8:	20 83       	st	Z, r18
				dir[DIR_Attr] = AM_DIR;
    f5ca:	8b 89       	ldd	r24, Y+19	; 0x13
    f5cc:	9c 89       	ldd	r25, Y+20	; 0x14
    f5ce:	0b 96       	adiw	r24, 0x0b	; 11
    f5d0:	20 e1       	ldi	r18, 0x10	; 16
    f5d2:	fc 01       	movw	r30, r24
    f5d4:	20 83       	st	Z, r18
				ST_DWORD(dir+DIR_WrtTime, tim);
    f5d6:	8b 89       	ldd	r24, Y+19	; 0x13
    f5d8:	9c 89       	ldd	r25, Y+20	; 0x14
    f5da:	46 96       	adiw	r24, 0x16	; 22
    f5dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    f5de:	fc 01       	movw	r30, r24
    f5e0:	20 83       	st	Z, r18
    f5e2:	8b 89       	ldd	r24, Y+19	; 0x13
    f5e4:	9c 89       	ldd	r25, Y+20	; 0x14
    f5e6:	47 96       	adiw	r24, 0x17	; 23
    f5e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    f5ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    f5ec:	23 2f       	mov	r18, r19
    f5ee:	33 27       	eor	r19, r19
    f5f0:	fc 01       	movw	r30, r24
    f5f2:	20 83       	st	Z, r18
    f5f4:	8b 89       	ldd	r24, Y+19	; 0x13
    f5f6:	9c 89       	ldd	r25, Y+20	; 0x14
    f5f8:	9c 01       	movw	r18, r24
    f5fa:	28 5e       	subi	r18, 0xE8	; 232
    f5fc:	3f 4f       	sbci	r19, 0xFF	; 255
    f5fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    f600:	9c 85       	ldd	r25, Y+12	; 0x0c
    f602:	ad 85       	ldd	r26, Y+13	; 0x0d
    f604:	be 85       	ldd	r27, Y+14	; 0x0e
    f606:	cd 01       	movw	r24, r26
    f608:	aa 27       	eor	r26, r26
    f60a:	bb 27       	eor	r27, r27
    f60c:	f9 01       	movw	r30, r18
    f60e:	80 83       	st	Z, r24
    f610:	8b 89       	ldd	r24, Y+19	; 0x13
    f612:	9c 89       	ldd	r25, Y+20	; 0x14
    f614:	9c 01       	movw	r18, r24
    f616:	27 5e       	subi	r18, 0xE7	; 231
    f618:	3f 4f       	sbci	r19, 0xFF	; 255
    f61a:	8b 85       	ldd	r24, Y+11	; 0x0b
    f61c:	9c 85       	ldd	r25, Y+12	; 0x0c
    f61e:	ad 85       	ldd	r26, Y+13	; 0x0d
    f620:	be 85       	ldd	r27, Y+14	; 0x0e
    f622:	8b 2f       	mov	r24, r27
    f624:	99 27       	eor	r25, r25
    f626:	aa 27       	eor	r26, r26
    f628:	bb 27       	eor	r27, r27
    f62a:	f9 01       	movw	r30, r18
    f62c:	80 83       	st	Z, r24
				ST_CLUST(dir, dcl);
    f62e:	8b 89       	ldd	r24, Y+19	; 0x13
    f630:	9c 89       	ldd	r25, Y+20	; 0x14
    f632:	4a 96       	adiw	r24, 0x1a	; 26
    f634:	2f 85       	ldd	r18, Y+15	; 0x0f
    f636:	fc 01       	movw	r30, r24
    f638:	20 83       	st	Z, r18
    f63a:	8b 89       	ldd	r24, Y+19	; 0x13
    f63c:	9c 89       	ldd	r25, Y+20	; 0x14
    f63e:	4b 96       	adiw	r24, 0x1b	; 27
    f640:	2f 85       	ldd	r18, Y+15	; 0x0f
    f642:	38 89       	ldd	r19, Y+16	; 0x10
    f644:	23 2f       	mov	r18, r19
    f646:	33 27       	eor	r19, r19
    f648:	fc 01       	movw	r30, r24
    f64a:	20 83       	st	Z, r18
    f64c:	8b 89       	ldd	r24, Y+19	; 0x13
    f64e:	9c 89       	ldd	r25, Y+20	; 0x14
    f650:	9c 01       	movw	r18, r24
    f652:	2c 5e       	subi	r18, 0xEC	; 236
    f654:	3f 4f       	sbci	r19, 0xFF	; 255
    f656:	8f 85       	ldd	r24, Y+15	; 0x0f
    f658:	98 89       	ldd	r25, Y+16	; 0x10
    f65a:	a9 89       	ldd	r26, Y+17	; 0x11
    f65c:	ba 89       	ldd	r27, Y+18	; 0x12
    f65e:	cd 01       	movw	r24, r26
    f660:	aa 27       	eor	r26, r26
    f662:	bb 27       	eor	r27, r27
    f664:	f9 01       	movw	r30, r18
    f666:	80 83       	st	Z, r24
    f668:	8b 89       	ldd	r24, Y+19	; 0x13
    f66a:	9c 89       	ldd	r25, Y+20	; 0x14
    f66c:	9c 01       	movw	r18, r24
    f66e:	2b 5e       	subi	r18, 0xEB	; 235
    f670:	3f 4f       	sbci	r19, 0xFF	; 255
    f672:	8f 85       	ldd	r24, Y+15	; 0x0f
    f674:	98 89       	ldd	r25, Y+16	; 0x10
    f676:	a9 89       	ldd	r26, Y+17	; 0x11
    f678:	ba 89       	ldd	r27, Y+18	; 0x12
    f67a:	cd 01       	movw	r24, r26
    f67c:	aa 27       	eor	r26, r26
    f67e:	bb 27       	eor	r27, r27
    f680:	89 2f       	mov	r24, r25
    f682:	99 27       	eor	r25, r25
    f684:	f9 01       	movw	r30, r18
    f686:	80 83       	st	Z, r24
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    f688:	8b 89       	ldd	r24, Y+19	; 0x13
    f68a:	9c 89       	ldd	r25, Y+20	; 0x14
    f68c:	80 96       	adiw	r24, 0x20	; 32
    f68e:	2b 89       	ldd	r18, Y+19	; 0x13
    f690:	3c 89       	ldd	r19, Y+20	; 0x14
    f692:	b9 01       	movw	r22, r18
    f694:	40 e2       	ldi	r20, 0x20	; 32
    f696:	50 e0       	ldi	r21, 0x00	; 0
    f698:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    f69c:	8b 89       	ldd	r24, Y+19	; 0x13
    f69e:	9c 89       	ldd	r25, Y+20	; 0x14
    f6a0:	81 96       	adiw	r24, 0x21	; 33
    f6a2:	2e e2       	ldi	r18, 0x2E	; 46
    f6a4:	fc 01       	movw	r30, r24
    f6a6:	20 83       	st	Z, r18
    f6a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f6aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    f6ac:	ad 8d       	ldd	r26, Y+29	; 0x1d
    f6ae:	be 8d       	ldd	r27, Y+30	; 0x1e
    f6b0:	8f 83       	std	Y+7, r24	; 0x07
    f6b2:	98 87       	std	Y+8, r25	; 0x08
    f6b4:	a9 87       	std	Y+9, r26	; 0x09
    f6b6:	ba 87       	std	Y+10, r27	; 0x0a
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    f6b8:	8d 89       	ldd	r24, Y+21	; 0x15
    f6ba:	9e 89       	ldd	r25, Y+22	; 0x16
    f6bc:	fc 01       	movw	r30, r24
    f6be:	80 81       	ld	r24, Z
    f6c0:	83 30       	cpi	r24, 0x03	; 3
    f6c2:	a1 f4       	brne	.+40     	; 0xf6ec <f_mkdir+0x264>
    f6c4:	8d 89       	ldd	r24, Y+21	; 0x15
    f6c6:	9e 89       	ldd	r25, Y+22	; 0x16
    f6c8:	fc 01       	movw	r30, r24
    f6ca:	22 a1       	ldd	r18, Z+34	; 0x22
    f6cc:	33 a1       	ldd	r19, Z+35	; 0x23
    f6ce:	44 a1       	ldd	r20, Z+36	; 0x24
    f6d0:	55 a1       	ldd	r21, Z+37	; 0x25
    f6d2:	8f 81       	ldd	r24, Y+7	; 0x07
    f6d4:	98 85       	ldd	r25, Y+8	; 0x08
    f6d6:	a9 85       	ldd	r26, Y+9	; 0x09
    f6d8:	ba 85       	ldd	r27, Y+10	; 0x0a
    f6da:	28 17       	cp	r18, r24
    f6dc:	39 07       	cpc	r19, r25
    f6de:	4a 07       	cpc	r20, r26
    f6e0:	5b 07       	cpc	r21, r27
    f6e2:	21 f4       	brne	.+8      	; 0xf6ec <f_mkdir+0x264>
					pcl = 0;
    f6e4:	1f 82       	std	Y+7, r1	; 0x07
    f6e6:	18 86       	std	Y+8, r1	; 0x08
    f6e8:	19 86       	std	Y+9, r1	; 0x09
    f6ea:	1a 86       	std	Y+10, r1	; 0x0a
				ST_CLUST(dir+SZ_DIR, pcl);
    f6ec:	8b 89       	ldd	r24, Y+19	; 0x13
    f6ee:	9c 89       	ldd	r25, Y+20	; 0x14
    f6f0:	ca 96       	adiw	r24, 0x3a	; 58
    f6f2:	2f 81       	ldd	r18, Y+7	; 0x07
    f6f4:	fc 01       	movw	r30, r24
    f6f6:	20 83       	st	Z, r18
    f6f8:	8b 89       	ldd	r24, Y+19	; 0x13
    f6fa:	9c 89       	ldd	r25, Y+20	; 0x14
    f6fc:	cb 96       	adiw	r24, 0x3b	; 59
    f6fe:	2f 81       	ldd	r18, Y+7	; 0x07
    f700:	38 85       	ldd	r19, Y+8	; 0x08
    f702:	23 2f       	mov	r18, r19
    f704:	33 27       	eor	r19, r19
    f706:	fc 01       	movw	r30, r24
    f708:	20 83       	st	Z, r18
    f70a:	8b 89       	ldd	r24, Y+19	; 0x13
    f70c:	9c 89       	ldd	r25, Y+20	; 0x14
    f70e:	9c 01       	movw	r18, r24
    f710:	2c 5c       	subi	r18, 0xCC	; 204
    f712:	3f 4f       	sbci	r19, 0xFF	; 255
    f714:	8f 81       	ldd	r24, Y+7	; 0x07
    f716:	98 85       	ldd	r25, Y+8	; 0x08
    f718:	a9 85       	ldd	r26, Y+9	; 0x09
    f71a:	ba 85       	ldd	r27, Y+10	; 0x0a
    f71c:	cd 01       	movw	r24, r26
    f71e:	aa 27       	eor	r26, r26
    f720:	bb 27       	eor	r27, r27
    f722:	f9 01       	movw	r30, r18
    f724:	80 83       	st	Z, r24
    f726:	8b 89       	ldd	r24, Y+19	; 0x13
    f728:	9c 89       	ldd	r25, Y+20	; 0x14
    f72a:	9c 01       	movw	r18, r24
    f72c:	2b 5c       	subi	r18, 0xCB	; 203
    f72e:	3f 4f       	sbci	r19, 0xFF	; 255
    f730:	8f 81       	ldd	r24, Y+7	; 0x07
    f732:	98 85       	ldd	r25, Y+8	; 0x08
    f734:	a9 85       	ldd	r26, Y+9	; 0x09
    f736:	ba 85       	ldd	r27, Y+10	; 0x0a
    f738:	cd 01       	movw	r24, r26
    f73a:	aa 27       	eor	r26, r26
    f73c:	bb 27       	eor	r27, r27
    f73e:	89 2f       	mov	r24, r25
    f740:	99 27       	eor	r25, r25
    f742:	f9 01       	movw	r30, r18
    f744:	80 83       	st	Z, r24
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    f746:	8d 89       	ldd	r24, Y+21	; 0x15
    f748:	9e 89       	ldd	r25, Y+22	; 0x16
    f74a:	fc 01       	movw	r30, r24
    f74c:	82 81       	ldd	r24, Z+2	; 0x02
    f74e:	8a 83       	std	Y+2, r24	; 0x02
    f750:	31 c0       	rjmp	.+98     	; 0xf7b4 <f_mkdir+0x32c>
					dj.fs->winsect = dsc++;
    f752:	2d 89       	ldd	r18, Y+21	; 0x15
    f754:	3e 89       	ldd	r19, Y+22	; 0x16
    f756:	8b 81       	ldd	r24, Y+3	; 0x03
    f758:	9c 81       	ldd	r25, Y+4	; 0x04
    f75a:	ad 81       	ldd	r26, Y+5	; 0x05
    f75c:	be 81       	ldd	r27, Y+6	; 0x06
    f75e:	f9 01       	movw	r30, r18
    f760:	82 a7       	std	Z+42, r24	; 0x2a
    f762:	93 a7       	std	Z+43, r25	; 0x2b
    f764:	a4 a7       	std	Z+44, r26	; 0x2c
    f766:	b5 a7       	std	Z+45, r27	; 0x2d
    f768:	8b 81       	ldd	r24, Y+3	; 0x03
    f76a:	9c 81       	ldd	r25, Y+4	; 0x04
    f76c:	ad 81       	ldd	r26, Y+5	; 0x05
    f76e:	be 81       	ldd	r27, Y+6	; 0x06
    f770:	01 96       	adiw	r24, 0x01	; 1
    f772:	a1 1d       	adc	r26, r1
    f774:	b1 1d       	adc	r27, r1
    f776:	8b 83       	std	Y+3, r24	; 0x03
    f778:	9c 83       	std	Y+4, r25	; 0x04
    f77a:	ad 83       	std	Y+5, r26	; 0x05
    f77c:	be 83       	std	Y+6, r27	; 0x06
					dj.fs->wflag = 1;
    f77e:	8d 89       	ldd	r24, Y+21	; 0x15
    f780:	9e 89       	ldd	r25, Y+22	; 0x16
    f782:	21 e0       	ldi	r18, 0x01	; 1
    f784:	fc 01       	movw	r30, r24
    f786:	24 83       	std	Z+4, r18	; 0x04
					res = move_window(dj.fs, 0);
    f788:	8d 89       	ldd	r24, Y+21	; 0x15
    f78a:	9e 89       	ldd	r25, Y+22	; 0x16
    f78c:	40 e0       	ldi	r20, 0x00	; 0
    f78e:	50 e0       	ldi	r21, 0x00	; 0
    f790:	ba 01       	movw	r22, r20
    f792:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    f796:	89 83       	std	Y+1, r24	; 0x01
					if (res != FR_OK) break;
    f798:	89 81       	ldd	r24, Y+1	; 0x01
    f79a:	88 23       	and	r24, r24
    f79c:	79 f4       	brne	.+30     	; 0xf7bc <f_mkdir+0x334>
					mem_set(dir, 0, SS(dj.fs));
    f79e:	8b 89       	ldd	r24, Y+19	; 0x13
    f7a0:	9c 89       	ldd	r25, Y+20	; 0x14
    f7a2:	60 e0       	ldi	r22, 0x00	; 0
    f7a4:	70 e0       	ldi	r23, 0x00	; 0
    f7a6:	40 e0       	ldi	r20, 0x00	; 0
    f7a8:	52 e0       	ldi	r21, 0x02	; 2
    f7aa:	0e 94 8d 50 	call	0xa11a	; 0xa11a <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    f7ae:	8a 81       	ldd	r24, Y+2	; 0x02
    f7b0:	81 50       	subi	r24, 0x01	; 1
    f7b2:	8a 83       	std	Y+2, r24	; 0x02
    f7b4:	8a 81       	ldd	r24, Y+2	; 0x02
    f7b6:	88 23       	and	r24, r24
    f7b8:	61 f6       	brne	.-104    	; 0xf752 <f_mkdir+0x2ca>
    f7ba:	01 c0       	rjmp	.+2      	; 0xf7be <f_mkdir+0x336>
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
    f7bc:	00 00       	nop
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    f7be:	89 81       	ldd	r24, Y+1	; 0x01
    f7c0:	88 23       	and	r24, r24
    f7c2:	29 f4       	brne	.+10     	; 0xf7ce <f_mkdir+0x346>
    f7c4:	ce 01       	movw	r24, r28
    f7c6:	45 96       	adiw	r24, 0x15	; 21
    f7c8:	0e 94 66 5d 	call	0xbacc	; 0xbacc <dir_register>
    f7cc:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) {
    f7ce:	89 81       	ldd	r24, Y+1	; 0x01
    f7d0:	88 23       	and	r24, r24
    f7d2:	59 f0       	breq	.+22     	; 0xf7ea <f_mkdir+0x362>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    f7d4:	8d 89       	ldd	r24, Y+21	; 0x15
    f7d6:	9e 89       	ldd	r25, Y+22	; 0x16
    f7d8:	2f 85       	ldd	r18, Y+15	; 0x0f
    f7da:	38 89       	ldd	r19, Y+16	; 0x10
    f7dc:	49 89       	ldd	r20, Y+17	; 0x11
    f7de:	5a 89       	ldd	r21, Y+18	; 0x12
    f7e0:	ba 01       	movw	r22, r20
    f7e2:	a9 01       	movw	r20, r18
    f7e4:	0e 94 16 57 	call	0xae2c	; 0xae2c <remove_chain>
    f7e8:	6d c0       	rjmp	.+218    	; 0xf8c4 <f_mkdir+0x43c>
			} else {
				dir = dj.dir;
    f7ea:	8f a1       	ldd	r24, Y+39	; 0x27
    f7ec:	98 a5       	ldd	r25, Y+40	; 0x28
    f7ee:	9c 8b       	std	Y+20, r25	; 0x14
    f7f0:	8b 8b       	std	Y+19, r24	; 0x13
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    f7f2:	8b 89       	ldd	r24, Y+19	; 0x13
    f7f4:	9c 89       	ldd	r25, Y+20	; 0x14
    f7f6:	0b 96       	adiw	r24, 0x0b	; 11
    f7f8:	20 e1       	ldi	r18, 0x10	; 16
    f7fa:	fc 01       	movw	r30, r24
    f7fc:	20 83       	st	Z, r18
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    f7fe:	8b 89       	ldd	r24, Y+19	; 0x13
    f800:	9c 89       	ldd	r25, Y+20	; 0x14
    f802:	46 96       	adiw	r24, 0x16	; 22
    f804:	2b 85       	ldd	r18, Y+11	; 0x0b
    f806:	fc 01       	movw	r30, r24
    f808:	20 83       	st	Z, r18
    f80a:	8b 89       	ldd	r24, Y+19	; 0x13
    f80c:	9c 89       	ldd	r25, Y+20	; 0x14
    f80e:	47 96       	adiw	r24, 0x17	; 23
    f810:	2b 85       	ldd	r18, Y+11	; 0x0b
    f812:	3c 85       	ldd	r19, Y+12	; 0x0c
    f814:	23 2f       	mov	r18, r19
    f816:	33 27       	eor	r19, r19
    f818:	fc 01       	movw	r30, r24
    f81a:	20 83       	st	Z, r18
    f81c:	8b 89       	ldd	r24, Y+19	; 0x13
    f81e:	9c 89       	ldd	r25, Y+20	; 0x14
    f820:	9c 01       	movw	r18, r24
    f822:	28 5e       	subi	r18, 0xE8	; 232
    f824:	3f 4f       	sbci	r19, 0xFF	; 255
    f826:	8b 85       	ldd	r24, Y+11	; 0x0b
    f828:	9c 85       	ldd	r25, Y+12	; 0x0c
    f82a:	ad 85       	ldd	r26, Y+13	; 0x0d
    f82c:	be 85       	ldd	r27, Y+14	; 0x0e
    f82e:	cd 01       	movw	r24, r26
    f830:	aa 27       	eor	r26, r26
    f832:	bb 27       	eor	r27, r27
    f834:	f9 01       	movw	r30, r18
    f836:	80 83       	st	Z, r24
    f838:	8b 89       	ldd	r24, Y+19	; 0x13
    f83a:	9c 89       	ldd	r25, Y+20	; 0x14
    f83c:	9c 01       	movw	r18, r24
    f83e:	27 5e       	subi	r18, 0xE7	; 231
    f840:	3f 4f       	sbci	r19, 0xFF	; 255
    f842:	8b 85       	ldd	r24, Y+11	; 0x0b
    f844:	9c 85       	ldd	r25, Y+12	; 0x0c
    f846:	ad 85       	ldd	r26, Y+13	; 0x0d
    f848:	be 85       	ldd	r27, Y+14	; 0x0e
    f84a:	8b 2f       	mov	r24, r27
    f84c:	99 27       	eor	r25, r25
    f84e:	aa 27       	eor	r26, r26
    f850:	bb 27       	eor	r27, r27
    f852:	f9 01       	movw	r30, r18
    f854:	80 83       	st	Z, r24
				ST_CLUST(dir, dcl);					/* Table start cluster */
    f856:	8b 89       	ldd	r24, Y+19	; 0x13
    f858:	9c 89       	ldd	r25, Y+20	; 0x14
    f85a:	4a 96       	adiw	r24, 0x1a	; 26
    f85c:	2f 85       	ldd	r18, Y+15	; 0x0f
    f85e:	fc 01       	movw	r30, r24
    f860:	20 83       	st	Z, r18
    f862:	8b 89       	ldd	r24, Y+19	; 0x13
    f864:	9c 89       	ldd	r25, Y+20	; 0x14
    f866:	4b 96       	adiw	r24, 0x1b	; 27
    f868:	2f 85       	ldd	r18, Y+15	; 0x0f
    f86a:	38 89       	ldd	r19, Y+16	; 0x10
    f86c:	23 2f       	mov	r18, r19
    f86e:	33 27       	eor	r19, r19
    f870:	fc 01       	movw	r30, r24
    f872:	20 83       	st	Z, r18
    f874:	8b 89       	ldd	r24, Y+19	; 0x13
    f876:	9c 89       	ldd	r25, Y+20	; 0x14
    f878:	9c 01       	movw	r18, r24
    f87a:	2c 5e       	subi	r18, 0xEC	; 236
    f87c:	3f 4f       	sbci	r19, 0xFF	; 255
    f87e:	8f 85       	ldd	r24, Y+15	; 0x0f
    f880:	98 89       	ldd	r25, Y+16	; 0x10
    f882:	a9 89       	ldd	r26, Y+17	; 0x11
    f884:	ba 89       	ldd	r27, Y+18	; 0x12
    f886:	cd 01       	movw	r24, r26
    f888:	aa 27       	eor	r26, r26
    f88a:	bb 27       	eor	r27, r27
    f88c:	f9 01       	movw	r30, r18
    f88e:	80 83       	st	Z, r24
    f890:	8b 89       	ldd	r24, Y+19	; 0x13
    f892:	9c 89       	ldd	r25, Y+20	; 0x14
    f894:	9c 01       	movw	r18, r24
    f896:	2b 5e       	subi	r18, 0xEB	; 235
    f898:	3f 4f       	sbci	r19, 0xFF	; 255
    f89a:	8f 85       	ldd	r24, Y+15	; 0x0f
    f89c:	98 89       	ldd	r25, Y+16	; 0x10
    f89e:	a9 89       	ldd	r26, Y+17	; 0x11
    f8a0:	ba 89       	ldd	r27, Y+18	; 0x12
    f8a2:	cd 01       	movw	r24, r26
    f8a4:	aa 27       	eor	r26, r26
    f8a6:	bb 27       	eor	r27, r27
    f8a8:	89 2f       	mov	r24, r25
    f8aa:	99 27       	eor	r25, r25
    f8ac:	f9 01       	movw	r30, r18
    f8ae:	80 83       	st	Z, r24
				dj.fs->wflag = 1;
    f8b0:	8d 89       	ldd	r24, Y+21	; 0x15
    f8b2:	9e 89       	ldd	r25, Y+22	; 0x16
    f8b4:	21 e0       	ldi	r18, 0x01	; 1
    f8b6:	fc 01       	movw	r30, r24
    f8b8:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    f8ba:	8d 89       	ldd	r24, Y+21	; 0x15
    f8bc:	9e 89       	ldd	r25, Y+22	; 0x16
    f8be:	0e 94 18 52 	call	0xa430	; 0xa430 <sync>
    f8c2:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    f8c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    f8c6:	e8 96       	adiw	r28, 0x38	; 56
    f8c8:	0f b6       	in	r0, 0x3f	; 63
    f8ca:	f8 94       	cli
    f8cc:	de bf       	out	0x3e, r29	; 62
    f8ce:	0f be       	out	0x3f, r0	; 63
    f8d0:	cd bf       	out	0x3d, r28	; 61
    f8d2:	cf 91       	pop	r28
    f8d4:	df 91       	pop	r29
    f8d6:	08 95       	ret

0000f8d8 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    f8d8:	df 93       	push	r29
    f8da:	cf 93       	push	r28
    f8dc:	cd b7       	in	r28, 0x3d	; 61
    f8de:	de b7       	in	r29, 0x3e	; 62
    f8e0:	a9 97       	sbiw	r28, 0x29	; 41
    f8e2:	0f b6       	in	r0, 0x3f	; 63
    f8e4:	f8 94       	cli
    f8e6:	de bf       	out	0x3e, r29	; 62
    f8e8:	0f be       	out	0x3f, r0	; 63
    f8ea:	cd bf       	out	0x3d, r28	; 61
    f8ec:	9f a3       	std	Y+39, r25	; 0x27
    f8ee:	8e a3       	std	Y+38, r24	; 0x26
    f8f0:	68 a7       	std	Y+40, r22	; 0x28
    f8f2:	49 a7       	std	Y+41, r20	; 0x29
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    f8f4:	ce 01       	movw	r24, r28
    f8f6:	86 96       	adiw	r24, 0x26	; 38
    f8f8:	9e 01       	movw	r18, r28
    f8fa:	2c 5f       	subi	r18, 0xFC	; 252
    f8fc:	3f 4f       	sbci	r19, 0xFF	; 255
    f8fe:	b9 01       	movw	r22, r18
    f900:	41 e0       	ldi	r20, 0x01	; 1
    f902:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    f906:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    f908:	89 81       	ldd	r24, Y+1	; 0x01
    f90a:	88 23       	and	r24, r24
    f90c:	d1 f5       	brne	.+116    	; 0xf982 <f_chmod+0xaa>
		INIT_BUF(dj);
    f90e:	ce 01       	movw	r24, r28
    f910:	4a 96       	adiw	r24, 0x1a	; 26
    f912:	99 8f       	std	Y+25, r25	; 0x19
    f914:	88 8f       	std	Y+24, r24	; 0x18
		res = follow_path(&dj, path);		/* Follow the file path */
    f916:	2e a1       	ldd	r18, Y+38	; 0x26
    f918:	3f a1       	ldd	r19, Y+39	; 0x27
    f91a:	ce 01       	movw	r24, r28
    f91c:	04 96       	adiw	r24, 0x04	; 4
    f91e:	b9 01       	movw	r22, r18
    f920:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    f924:	89 83       	std	Y+1, r24	; 0x01
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    f926:	89 81       	ldd	r24, Y+1	; 0x01
    f928:	88 23       	and	r24, r24
    f92a:	59 f5       	brne	.+86     	; 0xf982 <f_chmod+0xaa>
			dir = dj.dir;
    f92c:	8e 89       	ldd	r24, Y+22	; 0x16
    f92e:	9f 89       	ldd	r25, Y+23	; 0x17
    f930:	9b 83       	std	Y+3, r25	; 0x03
    f932:	8a 83       	std	Y+2, r24	; 0x02
			if (!dir) {						/* Is it a root directory? */
    f934:	8a 81       	ldd	r24, Y+2	; 0x02
    f936:	9b 81       	ldd	r25, Y+3	; 0x03
    f938:	00 97       	sbiw	r24, 0x00	; 0
    f93a:	19 f4       	brne	.+6      	; 0xf942 <f_chmod+0x6a>
				res = FR_INVALID_NAME;
    f93c:	86 e0       	ldi	r24, 0x06	; 6
    f93e:	89 83       	std	Y+1, r24	; 0x01
    f940:	20 c0       	rjmp	.+64     	; 0xf982 <f_chmod+0xaa>
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    f942:	89 a5       	ldd	r24, Y+41	; 0x29
    f944:	87 72       	andi	r24, 0x27	; 39
    f946:	89 a7       	std	Y+41, r24	; 0x29
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    f948:	8a 81       	ldd	r24, Y+2	; 0x02
    f94a:	9b 81       	ldd	r25, Y+3	; 0x03
    f94c:	0b 96       	adiw	r24, 0x0b	; 11
    f94e:	38 a5       	ldd	r19, Y+40	; 0x28
    f950:	29 a5       	ldd	r18, Y+41	; 0x29
    f952:	43 2f       	mov	r20, r19
    f954:	42 23       	and	r20, r18
    f956:	2a 81       	ldd	r18, Y+2	; 0x02
    f958:	3b 81       	ldd	r19, Y+3	; 0x03
    f95a:	25 5f       	subi	r18, 0xF5	; 245
    f95c:	3f 4f       	sbci	r19, 0xFF	; 255
    f95e:	f9 01       	movw	r30, r18
    f960:	30 81       	ld	r19, Z
    f962:	29 a5       	ldd	r18, Y+41	; 0x29
    f964:	20 95       	com	r18
    f966:	23 23       	and	r18, r19
    f968:	24 2b       	or	r18, r20
    f96a:	fc 01       	movw	r30, r24
    f96c:	20 83       	st	Z, r18
				dj.fs->wflag = 1;
    f96e:	8c 81       	ldd	r24, Y+4	; 0x04
    f970:	9d 81       	ldd	r25, Y+5	; 0x05
    f972:	21 e0       	ldi	r18, 0x01	; 1
    f974:	fc 01       	movw	r30, r24
    f976:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    f978:	8c 81       	ldd	r24, Y+4	; 0x04
    f97a:	9d 81       	ldd	r25, Y+5	; 0x05
    f97c:	0e 94 18 52 	call	0xa430	; 0xa430 <sync>
    f980:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}

	LEAVE_FF(dj.fs, res);
    f982:	89 81       	ldd	r24, Y+1	; 0x01
}
    f984:	a9 96       	adiw	r28, 0x29	; 41
    f986:	0f b6       	in	r0, 0x3f	; 63
    f988:	f8 94       	cli
    f98a:	de bf       	out	0x3e, r29	; 62
    f98c:	0f be       	out	0x3f, r0	; 63
    f98e:	cd bf       	out	0x3d, r28	; 61
    f990:	cf 91       	pop	r28
    f992:	df 91       	pop	r29
    f994:	08 95       	ret

0000f996 <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    f996:	df 93       	push	r29
    f998:	cf 93       	push	r28
    f99a:	cd b7       	in	r28, 0x3d	; 61
    f99c:	de b7       	in	r29, 0x3e	; 62
    f99e:	a9 97       	sbiw	r28, 0x29	; 41
    f9a0:	0f b6       	in	r0, 0x3f	; 63
    f9a2:	f8 94       	cli
    f9a4:	de bf       	out	0x3e, r29	; 62
    f9a6:	0f be       	out	0x3f, r0	; 63
    f9a8:	cd bf       	out	0x3d, r28	; 61
    f9aa:	9f a3       	std	Y+39, r25	; 0x27
    f9ac:	8e a3       	std	Y+38, r24	; 0x26
    f9ae:	79 a7       	std	Y+41, r23	; 0x29
    f9b0:	68 a7       	std	Y+40, r22	; 0x28
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    f9b2:	ce 01       	movw	r24, r28
    f9b4:	86 96       	adiw	r24, 0x26	; 38
    f9b6:	9e 01       	movw	r18, r28
    f9b8:	2c 5f       	subi	r18, 0xFC	; 252
    f9ba:	3f 4f       	sbci	r19, 0xFF	; 255
    f9bc:	b9 01       	movw	r22, r18
    f9be:	41 e0       	ldi	r20, 0x01	; 1
    f9c0:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    f9c4:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    f9c6:	89 81       	ldd	r24, Y+1	; 0x01
    f9c8:	88 23       	and	r24, r24
    f9ca:	09 f0       	breq	.+2      	; 0xf9ce <f_utime+0x38>
    f9cc:	51 c0       	rjmp	.+162    	; 0xfa70 <f_utime+0xda>
		INIT_BUF(dj);
    f9ce:	ce 01       	movw	r24, r28
    f9d0:	4a 96       	adiw	r24, 0x1a	; 26
    f9d2:	99 8f       	std	Y+25, r25	; 0x19
    f9d4:	88 8f       	std	Y+24, r24	; 0x18
		res = follow_path(&dj, path);	/* Follow the file path */
    f9d6:	2e a1       	ldd	r18, Y+38	; 0x26
    f9d8:	3f a1       	ldd	r19, Y+39	; 0x27
    f9da:	ce 01       	movw	r24, r28
    f9dc:	04 96       	adiw	r24, 0x04	; 4
    f9de:	b9 01       	movw	r22, r18
    f9e0:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    f9e4:	89 83       	std	Y+1, r24	; 0x01
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    f9e6:	89 81       	ldd	r24, Y+1	; 0x01
    f9e8:	88 23       	and	r24, r24
    f9ea:	09 f0       	breq	.+2      	; 0xf9ee <f_utime+0x58>
    f9ec:	41 c0       	rjmp	.+130    	; 0xfa70 <f_utime+0xda>
			dir = dj.dir;
    f9ee:	8e 89       	ldd	r24, Y+22	; 0x16
    f9f0:	9f 89       	ldd	r25, Y+23	; 0x17
    f9f2:	9b 83       	std	Y+3, r25	; 0x03
    f9f4:	8a 83       	std	Y+2, r24	; 0x02
			if (!dir) {					/* Root directory */
    f9f6:	8a 81       	ldd	r24, Y+2	; 0x02
    f9f8:	9b 81       	ldd	r25, Y+3	; 0x03
    f9fa:	00 97       	sbiw	r24, 0x00	; 0
    f9fc:	19 f4       	brne	.+6      	; 0xfa04 <f_utime+0x6e>
				res = FR_INVALID_NAME;
    f9fe:	86 e0       	ldi	r24, 0x06	; 6
    fa00:	89 83       	std	Y+1, r24	; 0x01
    fa02:	36 c0       	rjmp	.+108    	; 0xfa70 <f_utime+0xda>
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    fa04:	8a 81       	ldd	r24, Y+2	; 0x02
    fa06:	9b 81       	ldd	r25, Y+3	; 0x03
    fa08:	46 96       	adiw	r24, 0x16	; 22
    fa0a:	28 a5       	ldd	r18, Y+40	; 0x28
    fa0c:	39 a5       	ldd	r19, Y+41	; 0x29
    fa0e:	f9 01       	movw	r30, r18
    fa10:	26 81       	ldd	r18, Z+6	; 0x06
    fa12:	37 81       	ldd	r19, Z+7	; 0x07
    fa14:	fc 01       	movw	r30, r24
    fa16:	20 83       	st	Z, r18
    fa18:	8a 81       	ldd	r24, Y+2	; 0x02
    fa1a:	9b 81       	ldd	r25, Y+3	; 0x03
    fa1c:	47 96       	adiw	r24, 0x17	; 23
    fa1e:	28 a5       	ldd	r18, Y+40	; 0x28
    fa20:	39 a5       	ldd	r19, Y+41	; 0x29
    fa22:	f9 01       	movw	r30, r18
    fa24:	26 81       	ldd	r18, Z+6	; 0x06
    fa26:	37 81       	ldd	r19, Z+7	; 0x07
    fa28:	23 2f       	mov	r18, r19
    fa2a:	33 27       	eor	r19, r19
    fa2c:	fc 01       	movw	r30, r24
    fa2e:	20 83       	st	Z, r18
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    fa30:	8a 81       	ldd	r24, Y+2	; 0x02
    fa32:	9b 81       	ldd	r25, Y+3	; 0x03
    fa34:	48 96       	adiw	r24, 0x18	; 24
    fa36:	28 a5       	ldd	r18, Y+40	; 0x28
    fa38:	39 a5       	ldd	r19, Y+41	; 0x29
    fa3a:	f9 01       	movw	r30, r18
    fa3c:	24 81       	ldd	r18, Z+4	; 0x04
    fa3e:	35 81       	ldd	r19, Z+5	; 0x05
    fa40:	fc 01       	movw	r30, r24
    fa42:	20 83       	st	Z, r18
    fa44:	8a 81       	ldd	r24, Y+2	; 0x02
    fa46:	9b 81       	ldd	r25, Y+3	; 0x03
    fa48:	49 96       	adiw	r24, 0x19	; 25
    fa4a:	28 a5       	ldd	r18, Y+40	; 0x28
    fa4c:	39 a5       	ldd	r19, Y+41	; 0x29
    fa4e:	f9 01       	movw	r30, r18
    fa50:	24 81       	ldd	r18, Z+4	; 0x04
    fa52:	35 81       	ldd	r19, Z+5	; 0x05
    fa54:	23 2f       	mov	r18, r19
    fa56:	33 27       	eor	r19, r19
    fa58:	fc 01       	movw	r30, r24
    fa5a:	20 83       	st	Z, r18
				dj.fs->wflag = 1;
    fa5c:	8c 81       	ldd	r24, Y+4	; 0x04
    fa5e:	9d 81       	ldd	r25, Y+5	; 0x05
    fa60:	21 e0       	ldi	r18, 0x01	; 1
    fa62:	fc 01       	movw	r30, r24
    fa64:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    fa66:	8c 81       	ldd	r24, Y+4	; 0x04
    fa68:	9d 81       	ldd	r25, Y+5	; 0x05
    fa6a:	0e 94 18 52 	call	0xa430	; 0xa430 <sync>
    fa6e:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}

	LEAVE_FF(dj.fs, res);
    fa70:	89 81       	ldd	r24, Y+1	; 0x01
}
    fa72:	a9 96       	adiw	r28, 0x29	; 41
    fa74:	0f b6       	in	r0, 0x3f	; 63
    fa76:	f8 94       	cli
    fa78:	de bf       	out	0x3e, r29	; 62
    fa7a:	0f be       	out	0x3f, r0	; 63
    fa7c:	cd bf       	out	0x3d, r28	; 61
    fa7e:	cf 91       	pop	r28
    fa80:	df 91       	pop	r29
    fa82:	08 95       	ret

0000fa84 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    fa84:	df 93       	push	r29
    fa86:	cf 93       	push	r28
    fa88:	cd b7       	in	r28, 0x3d	; 61
    fa8a:	de b7       	in	r29, 0x3e	; 62
    fa8c:	c8 55       	subi	r28, 0x58	; 88
    fa8e:	d0 40       	sbci	r29, 0x00	; 0
    fa90:	0f b6       	in	r0, 0x3f	; 63
    fa92:	f8 94       	cli
    fa94:	de bf       	out	0x3e, r29	; 62
    fa96:	0f be       	out	0x3f, r0	; 63
    fa98:	cd bf       	out	0x3d, r28	; 61
    fa9a:	9e 01       	movw	r18, r28
    fa9c:	2b 5a       	subi	r18, 0xAB	; 171
    fa9e:	3f 4f       	sbci	r19, 0xFF	; 255
    faa0:	d9 01       	movw	r26, r18
    faa2:	8d 93       	st	X+, r24
    faa4:	9c 93       	st	X, r25
    faa6:	ce 01       	movw	r24, r28
    faa8:	89 5a       	subi	r24, 0xA9	; 169
    faaa:	9f 4f       	sbci	r25, 0xFF	; 255
    faac:	fc 01       	movw	r30, r24
    faae:	71 83       	std	Z+1, r23	; 0x01
    fab0:	60 83       	st	Z, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    fab2:	ce 01       	movw	r24, r28
    fab4:	8b 5a       	subi	r24, 0xAB	; 171
    fab6:	9f 4f       	sbci	r25, 0xFF	; 255
    fab8:	9e 01       	movw	r18, r28
    faba:	28 5f       	subi	r18, 0xF8	; 248
    fabc:	3f 4f       	sbci	r19, 0xFF	; 255
    fabe:	b9 01       	movw	r22, r18
    fac0:	41 e0       	ldi	r20, 0x01	; 1
    fac2:	0e 94 3e 62 	call	0xc47c	; 0xc47c <chk_mounted>
    fac6:	89 83       	std	Y+1, r24	; 0x01
	if (res == FR_OK) {
    fac8:	89 81       	ldd	r24, Y+1	; 0x01
    faca:	88 23       	and	r24, r24
    facc:	09 f0       	breq	.+2      	; 0xfad0 <f_rename+0x4c>
    face:	57 c1       	rjmp	.+686    	; 0xfd7e <f_rename+0x2fa>
		djn.fs = djo.fs;
    fad0:	88 85       	ldd	r24, Y+8	; 0x08
    fad2:	99 85       	ldd	r25, Y+9	; 0x09
    fad4:	9f 8f       	std	Y+31, r25	; 0x1f
    fad6:	8e 8f       	std	Y+30, r24	; 0x1e
		INIT_BUF(djo);
    fad8:	ce 01       	movw	r24, r28
    fada:	87 5b       	subi	r24, 0xB7	; 183
    fadc:	9f 4f       	sbci	r25, 0xFF	; 255
    fade:	9d 8f       	std	Y+29, r25	; 0x1d
    fae0:	8c 8f       	std	Y+28, r24	; 0x1c
		res = follow_path(&djo, path_old);		/* Check old object */
    fae2:	ce 01       	movw	r24, r28
    fae4:	8b 5a       	subi	r24, 0xAB	; 171
    fae6:	9f 4f       	sbci	r25, 0xFF	; 255
    fae8:	dc 01       	movw	r26, r24
    faea:	2d 91       	ld	r18, X+
    faec:	3c 91       	ld	r19, X
    faee:	ce 01       	movw	r24, r28
    faf0:	08 96       	adiw	r24, 0x08	; 8
    faf2:	b9 01       	movw	r22, r18
    faf4:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    faf8:	89 83       	std	Y+1, r24	; 0x01
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
    fafa:	89 81       	ldd	r24, Y+1	; 0x01
    fafc:	88 23       	and	r24, r24
    fafe:	09 f0       	breq	.+2      	; 0xfb02 <f_rename+0x7e>
    fb00:	3e c1       	rjmp	.+636    	; 0xfd7e <f_rename+0x2fa>
			if (!djo.dir) {						/* Is root dir? */
    fb02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    fb04:	9b 8d       	ldd	r25, Y+27	; 0x1b
    fb06:	00 97       	sbiw	r24, 0x00	; 0
    fb08:	19 f4       	brne	.+6      	; 0xfb10 <f_rename+0x8c>
				res = FR_NO_FILE;
    fb0a:	84 e0       	ldi	r24, 0x04	; 4
    fb0c:	89 83       	std	Y+1, r24	; 0x01
    fb0e:	37 c1       	rjmp	.+622    	; 0xfd7e <f_rename+0x2fa>
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    fb10:	8a 8d       	ldd	r24, Y+26	; 0x1a
    fb12:	9b 8d       	ldd	r25, Y+27	; 0x1b
    fb14:	9c 01       	movw	r18, r24
    fb16:	25 5f       	subi	r18, 0xF5	; 245
    fb18:	3f 4f       	sbci	r19, 0xFF	; 255
    fb1a:	ce 01       	movw	r24, r28
    fb1c:	c4 96       	adiw	r24, 0x34	; 52
    fb1e:	b9 01       	movw	r22, r18
    fb20:	45 e1       	ldi	r20, 0x15	; 21
    fb22:	50 e0       	ldi	r21, 0x00	; 0
    fb24:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
    fb28:	ce 01       	movw	r24, r28
    fb2a:	4e 96       	adiw	r24, 0x1e	; 30
    fb2c:	9e 01       	movw	r18, r28
    fb2e:	28 5f       	subi	r18, 0xF8	; 248
    fb30:	3f 4f       	sbci	r19, 0xFF	; 255
    fb32:	b9 01       	movw	r22, r18
    fb34:	46 e1       	ldi	r20, 0x16	; 22
    fb36:	50 e0       	ldi	r21, 0x00	; 0
    fb38:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
				res = follow_path(&djn, path_new);
    fb3c:	ce 01       	movw	r24, r28
    fb3e:	4e 96       	adiw	r24, 0x1e	; 30
    fb40:	9e 01       	movw	r18, r28
    fb42:	29 5a       	subi	r18, 0xA9	; 169
    fb44:	3f 4f       	sbci	r19, 0xFF	; 255
    fb46:	f9 01       	movw	r30, r18
    fb48:	20 81       	ld	r18, Z
    fb4a:	31 81       	ldd	r19, Z+1	; 0x01
    fb4c:	b9 01       	movw	r22, r18
    fb4e:	0e 94 96 60 	call	0xc12c	; 0xc12c <follow_path>
    fb52:	89 83       	std	Y+1, r24	; 0x01
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    fb54:	89 81       	ldd	r24, Y+1	; 0x01
    fb56:	88 23       	and	r24, r24
    fb58:	11 f4       	brne	.+4      	; 0xfb5e <f_rename+0xda>
    fb5a:	88 e0       	ldi	r24, 0x08	; 8
    fb5c:	89 83       	std	Y+1, r24	; 0x01
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    fb5e:	89 81       	ldd	r24, Y+1	; 0x01
    fb60:	84 30       	cpi	r24, 0x04	; 4
    fb62:	09 f0       	breq	.+2      	; 0xfb66 <f_rename+0xe2>
    fb64:	0c c1       	rjmp	.+536    	; 0xfd7e <f_rename+0x2fa>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    fb66:	ce 01       	movw	r24, r28
    fb68:	4e 96       	adiw	r24, 0x1e	; 30
    fb6a:	0e 94 66 5d 	call	0xbacc	; 0xbacc <dir_register>
    fb6e:	89 83       	std	Y+1, r24	; 0x01
					if (res == FR_OK) {
    fb70:	89 81       	ldd	r24, Y+1	; 0x01
    fb72:	88 23       	and	r24, r24
    fb74:	09 f0       	breq	.+2      	; 0xfb78 <f_rename+0xf4>
    fb76:	03 c1       	rjmp	.+518    	; 0xfd7e <f_rename+0x2fa>
						dir = djn.dir;					/* Copy object information except for name */
    fb78:	88 a9       	ldd	r24, Y+48	; 0x30
    fb7a:	99 a9       	ldd	r25, Y+49	; 0x31
    fb7c:	9b 83       	std	Y+3, r25	; 0x03
    fb7e:	8a 83       	std	Y+2, r24	; 0x02
						mem_cpy(dir+13, buf+2, 19);
    fb80:	8a 81       	ldd	r24, Y+2	; 0x02
    fb82:	9b 81       	ldd	r25, Y+3	; 0x03
    fb84:	0d 96       	adiw	r24, 0x0d	; 13
    fb86:	9e 01       	movw	r18, r28
    fb88:	2c 5c       	subi	r18, 0xCC	; 204
    fb8a:	3f 4f       	sbci	r19, 0xFF	; 255
    fb8c:	2e 5f       	subi	r18, 0xFE	; 254
    fb8e:	3f 4f       	sbci	r19, 0xFF	; 255
    fb90:	b9 01       	movw	r22, r18
    fb92:	43 e1       	ldi	r20, 0x13	; 19
    fb94:	50 e0       	ldi	r21, 0x00	; 0
    fb96:	0e 94 4c 50 	call	0xa098	; 0xa098 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    fb9a:	8a 81       	ldd	r24, Y+2	; 0x02
    fb9c:	9b 81       	ldd	r25, Y+3	; 0x03
    fb9e:	0b 96       	adiw	r24, 0x0b	; 11
    fba0:	2c a9       	ldd	r18, Y+52	; 0x34
    fba2:	20 62       	ori	r18, 0x20	; 32
    fba4:	dc 01       	movw	r26, r24
    fba6:	2c 93       	st	X, r18
						djo.fs->wflag = 1;
    fba8:	88 85       	ldd	r24, Y+8	; 0x08
    fbaa:	99 85       	ldd	r25, Y+9	; 0x09
    fbac:	21 e0       	ldi	r18, 0x01	; 1
    fbae:	fc 01       	movw	r30, r24
    fbb0:	24 83       	std	Z+4, r18	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    fbb2:	2e 85       	ldd	r18, Y+14	; 0x0e
    fbb4:	3f 85       	ldd	r19, Y+15	; 0x0f
    fbb6:	48 89       	ldd	r20, Y+16	; 0x10
    fbb8:	59 89       	ldd	r21, Y+17	; 0x11
    fbba:	8c a1       	ldd	r24, Y+36	; 0x24
    fbbc:	9d a1       	ldd	r25, Y+37	; 0x25
    fbbe:	ae a1       	ldd	r26, Y+38	; 0x26
    fbc0:	bf a1       	ldd	r27, Y+39	; 0x27
    fbc2:	28 17       	cp	r18, r24
    fbc4:	39 07       	cpc	r19, r25
    fbc6:	4a 07       	cpc	r20, r26
    fbc8:	5b 07       	cpc	r21, r27
    fbca:	09 f4       	brne	.+2      	; 0xfbce <f_rename+0x14a>
    fbcc:	c8 c0       	rjmp	.+400    	; 0xfd5e <f_rename+0x2da>
    fbce:	8a 81       	ldd	r24, Y+2	; 0x02
    fbd0:	9b 81       	ldd	r25, Y+3	; 0x03
    fbd2:	0b 96       	adiw	r24, 0x0b	; 11
    fbd4:	dc 01       	movw	r26, r24
    fbd6:	8c 91       	ld	r24, X
    fbd8:	88 2f       	mov	r24, r24
    fbda:	90 e0       	ldi	r25, 0x00	; 0
    fbdc:	80 71       	andi	r24, 0x10	; 16
    fbde:	90 70       	andi	r25, 0x00	; 0
    fbe0:	00 97       	sbiw	r24, 0x00	; 0
    fbe2:	09 f4       	brne	.+2      	; 0xfbe6 <f_rename+0x162>
    fbe4:	bc c0       	rjmp	.+376    	; 0xfd5e <f_rename+0x2da>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
    fbe6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    fbe8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    fbea:	8a 81       	ldd	r24, Y+2	; 0x02
    fbec:	9b 81       	ldd	r25, Y+3	; 0x03
    fbee:	45 96       	adiw	r24, 0x15	; 21
    fbf0:	fc 01       	movw	r30, r24
    fbf2:	80 81       	ld	r24, Z
    fbf4:	88 2f       	mov	r24, r24
    fbf6:	90 e0       	ldi	r25, 0x00	; 0
    fbf8:	38 2f       	mov	r19, r24
    fbfa:	22 27       	eor	r18, r18
    fbfc:	8a 81       	ldd	r24, Y+2	; 0x02
    fbfe:	9b 81       	ldd	r25, Y+3	; 0x03
    fc00:	44 96       	adiw	r24, 0x14	; 20
    fc02:	dc 01       	movw	r26, r24
    fc04:	8c 91       	ld	r24, X
    fc06:	88 2f       	mov	r24, r24
    fc08:	90 e0       	ldi	r25, 0x00	; 0
    fc0a:	82 2b       	or	r24, r18
    fc0c:	93 2b       	or	r25, r19
    fc0e:	cc 01       	movw	r24, r24
    fc10:	a0 e0       	ldi	r26, 0x00	; 0
    fc12:	b0 e0       	ldi	r27, 0x00	; 0
    fc14:	ac 01       	movw	r20, r24
    fc16:	33 27       	eor	r19, r19
    fc18:	22 27       	eor	r18, r18
    fc1a:	8a 81       	ldd	r24, Y+2	; 0x02
    fc1c:	9b 81       	ldd	r25, Y+3	; 0x03
    fc1e:	4b 96       	adiw	r24, 0x1b	; 27
    fc20:	fc 01       	movw	r30, r24
    fc22:	80 81       	ld	r24, Z
    fc24:	88 2f       	mov	r24, r24
    fc26:	90 e0       	ldi	r25, 0x00	; 0
    fc28:	f8 2f       	mov	r31, r24
    fc2a:	ee 27       	eor	r30, r30
    fc2c:	8a 81       	ldd	r24, Y+2	; 0x02
    fc2e:	9b 81       	ldd	r25, Y+3	; 0x03
    fc30:	4a 96       	adiw	r24, 0x1a	; 26
    fc32:	dc 01       	movw	r26, r24
    fc34:	8c 91       	ld	r24, X
    fc36:	88 2f       	mov	r24, r24
    fc38:	90 e0       	ldi	r25, 0x00	; 0
    fc3a:	8e 2b       	or	r24, r30
    fc3c:	9f 2b       	or	r25, r31
    fc3e:	cc 01       	movw	r24, r24
    fc40:	a0 e0       	ldi	r26, 0x00	; 0
    fc42:	b0 e0       	ldi	r27, 0x00	; 0
    fc44:	28 2b       	or	r18, r24
    fc46:	39 2b       	or	r19, r25
    fc48:	4a 2b       	or	r20, r26
    fc4a:	5b 2b       	or	r21, r27
    fc4c:	cb 01       	movw	r24, r22
    fc4e:	ba 01       	movw	r22, r20
    fc50:	a9 01       	movw	r20, r18
    fc52:	0e 94 41 53 	call	0xa682	; 0xa682 <clust2sect>
    fc56:	dc 01       	movw	r26, r24
    fc58:	cb 01       	movw	r24, r22
    fc5a:	8c 83       	std	Y+4, r24	; 0x04
    fc5c:	9d 83       	std	Y+5, r25	; 0x05
    fc5e:	ae 83       	std	Y+6, r26	; 0x06
    fc60:	bf 83       	std	Y+7, r27	; 0x07
							if (!dw) {
    fc62:	8c 81       	ldd	r24, Y+4	; 0x04
    fc64:	9d 81       	ldd	r25, Y+5	; 0x05
    fc66:	ae 81       	ldd	r26, Y+6	; 0x06
    fc68:	bf 81       	ldd	r27, Y+7	; 0x07
    fc6a:	00 97       	sbiw	r24, 0x00	; 0
    fc6c:	a1 05       	cpc	r26, r1
    fc6e:	b1 05       	cpc	r27, r1
    fc70:	19 f4       	brne	.+6      	; 0xfc78 <f_rename+0x1f4>
								res = FR_INT_ERR;
    fc72:	82 e0       	ldi	r24, 0x02	; 2
    fc74:	89 83       	std	Y+1, r24	; 0x01
    fc76:	73 c0       	rjmp	.+230    	; 0xfd5e <f_rename+0x2da>
							} else {
								res = move_window(djn.fs, dw);
    fc78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fc7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    fc7c:	2c 81       	ldd	r18, Y+4	; 0x04
    fc7e:	3d 81       	ldd	r19, Y+5	; 0x05
    fc80:	4e 81       	ldd	r20, Y+6	; 0x06
    fc82:	5f 81       	ldd	r21, Y+7	; 0x07
    fc84:	ba 01       	movw	r22, r20
    fc86:	a9 01       	movw	r20, r18
    fc88:	0e 94 47 51 	call	0xa28e	; 0xa28e <move_window>
    fc8c:	89 83       	std	Y+1, r24	; 0x01
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
    fc8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fc90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    fc92:	82 5b       	subi	r24, 0xB2	; 178
    fc94:	9f 4f       	sbci	r25, 0xFF	; 255
    fc96:	9b 83       	std	Y+3, r25	; 0x03
    fc98:	8a 83       	std	Y+2, r24	; 0x02
								if (res == FR_OK && dir[1] == '.') {
    fc9a:	89 81       	ldd	r24, Y+1	; 0x01
    fc9c:	88 23       	and	r24, r24
    fc9e:	09 f0       	breq	.+2      	; 0xfca2 <f_rename+0x21e>
    fca0:	5e c0       	rjmp	.+188    	; 0xfd5e <f_rename+0x2da>
    fca2:	8a 81       	ldd	r24, Y+2	; 0x02
    fca4:	9b 81       	ldd	r25, Y+3	; 0x03
    fca6:	01 96       	adiw	r24, 0x01	; 1
    fca8:	fc 01       	movw	r30, r24
    fcaa:	80 81       	ld	r24, Z
    fcac:	8e 32       	cpi	r24, 0x2E	; 46
    fcae:	09 f0       	breq	.+2      	; 0xfcb2 <f_rename+0x22e>
    fcb0:	56 c0       	rjmp	.+172    	; 0xfd5e <f_rename+0x2da>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
    fcb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fcb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    fcb6:	dc 01       	movw	r26, r24
    fcb8:	8c 91       	ld	r24, X
    fcba:	83 30       	cpi	r24, 0x03	; 3
    fcbc:	81 f4       	brne	.+32     	; 0xfcde <f_rename+0x25a>
    fcbe:	2c a1       	ldd	r18, Y+36	; 0x24
    fcc0:	3d a1       	ldd	r19, Y+37	; 0x25
    fcc2:	4e a1       	ldd	r20, Y+38	; 0x26
    fcc4:	5f a1       	ldd	r21, Y+39	; 0x27
    fcc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fcc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    fcca:	fc 01       	movw	r30, r24
    fccc:	82 a1       	ldd	r24, Z+34	; 0x22
    fcce:	93 a1       	ldd	r25, Z+35	; 0x23
    fcd0:	a4 a1       	ldd	r26, Z+36	; 0x24
    fcd2:	b5 a1       	ldd	r27, Z+37	; 0x25
    fcd4:	28 17       	cp	r18, r24
    fcd6:	39 07       	cpc	r19, r25
    fcd8:	4a 07       	cpc	r20, r26
    fcda:	5b 07       	cpc	r21, r27
    fcdc:	29 f0       	breq	.+10     	; 0xfce8 <f_rename+0x264>
    fcde:	8c a1       	ldd	r24, Y+36	; 0x24
    fce0:	9d a1       	ldd	r25, Y+37	; 0x25
    fce2:	ae a1       	ldd	r26, Y+38	; 0x26
    fce4:	bf a1       	ldd	r27, Y+39	; 0x27
    fce6:	03 c0       	rjmp	.+6      	; 0xfcee <f_rename+0x26a>
    fce8:	80 e0       	ldi	r24, 0x00	; 0
    fcea:	90 e0       	ldi	r25, 0x00	; 0
    fcec:	dc 01       	movw	r26, r24
    fcee:	8c 83       	std	Y+4, r24	; 0x04
    fcf0:	9d 83       	std	Y+5, r25	; 0x05
    fcf2:	ae 83       	std	Y+6, r26	; 0x06
    fcf4:	bf 83       	std	Y+7, r27	; 0x07
									ST_CLUST(dir, dw);
    fcf6:	8a 81       	ldd	r24, Y+2	; 0x02
    fcf8:	9b 81       	ldd	r25, Y+3	; 0x03
    fcfa:	4a 96       	adiw	r24, 0x1a	; 26
    fcfc:	2c 81       	ldd	r18, Y+4	; 0x04
    fcfe:	dc 01       	movw	r26, r24
    fd00:	2c 93       	st	X, r18
    fd02:	8a 81       	ldd	r24, Y+2	; 0x02
    fd04:	9b 81       	ldd	r25, Y+3	; 0x03
    fd06:	4b 96       	adiw	r24, 0x1b	; 27
    fd08:	2c 81       	ldd	r18, Y+4	; 0x04
    fd0a:	3d 81       	ldd	r19, Y+5	; 0x05
    fd0c:	23 2f       	mov	r18, r19
    fd0e:	33 27       	eor	r19, r19
    fd10:	fc 01       	movw	r30, r24
    fd12:	20 83       	st	Z, r18
    fd14:	8a 81       	ldd	r24, Y+2	; 0x02
    fd16:	9b 81       	ldd	r25, Y+3	; 0x03
    fd18:	9c 01       	movw	r18, r24
    fd1a:	2c 5e       	subi	r18, 0xEC	; 236
    fd1c:	3f 4f       	sbci	r19, 0xFF	; 255
    fd1e:	8c 81       	ldd	r24, Y+4	; 0x04
    fd20:	9d 81       	ldd	r25, Y+5	; 0x05
    fd22:	ae 81       	ldd	r26, Y+6	; 0x06
    fd24:	bf 81       	ldd	r27, Y+7	; 0x07
    fd26:	cd 01       	movw	r24, r26
    fd28:	aa 27       	eor	r26, r26
    fd2a:	bb 27       	eor	r27, r27
    fd2c:	d9 01       	movw	r26, r18
    fd2e:	8c 93       	st	X, r24
    fd30:	8a 81       	ldd	r24, Y+2	; 0x02
    fd32:	9b 81       	ldd	r25, Y+3	; 0x03
    fd34:	9c 01       	movw	r18, r24
    fd36:	2b 5e       	subi	r18, 0xEB	; 235
    fd38:	3f 4f       	sbci	r19, 0xFF	; 255
    fd3a:	8c 81       	ldd	r24, Y+4	; 0x04
    fd3c:	9d 81       	ldd	r25, Y+5	; 0x05
    fd3e:	ae 81       	ldd	r26, Y+6	; 0x06
    fd40:	bf 81       	ldd	r27, Y+7	; 0x07
    fd42:	cd 01       	movw	r24, r26
    fd44:	aa 27       	eor	r26, r26
    fd46:	bb 27       	eor	r27, r27
    fd48:	89 2f       	mov	r24, r25
    fd4a:	99 27       	eor	r25, r25
    fd4c:	f9 01       	movw	r30, r18
    fd4e:	80 83       	st	Z, r24
									djn.fs->wflag = 1;
    fd50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fd52:	9f 8d       	ldd	r25, Y+31	; 0x1f
    fd54:	21 e0       	ldi	r18, 0x01	; 1
    fd56:	dc 01       	movw	r26, r24
    fd58:	14 96       	adiw	r26, 0x04	; 4
    fd5a:	2c 93       	st	X, r18
    fd5c:	14 97       	sbiw	r26, 0x04	; 4
								}
							}
						}
						if (res == FR_OK) {
    fd5e:	89 81       	ldd	r24, Y+1	; 0x01
    fd60:	88 23       	and	r24, r24
    fd62:	69 f4       	brne	.+26     	; 0xfd7e <f_rename+0x2fa>
							res = dir_remove(&djo);		/* Remove old entry */
    fd64:	ce 01       	movw	r24, r28
    fd66:	08 96       	adiw	r24, 0x08	; 8
    fd68:	0e 94 eb 5d 	call	0xbbd6	; 0xbbd6 <dir_remove>
    fd6c:	89 83       	std	Y+1, r24	; 0x01
							if (res == FR_OK)
    fd6e:	89 81       	ldd	r24, Y+1	; 0x01
    fd70:	88 23       	and	r24, r24
    fd72:	29 f4       	brne	.+10     	; 0xfd7e <f_rename+0x2fa>
								res = sync(djo.fs);
    fd74:	88 85       	ldd	r24, Y+8	; 0x08
    fd76:	99 85       	ldd	r25, Y+9	; 0x09
    fd78:	0e 94 18 52 	call	0xa430	; 0xa430 <sync>
    fd7c:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
    fd7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    fd80:	c8 5a       	subi	r28, 0xA8	; 168
    fd82:	df 4f       	sbci	r29, 0xFF	; 255
    fd84:	0f b6       	in	r0, 0x3f	; 63
    fd86:	f8 94       	cli
    fd88:	de bf       	out	0x3e, r29	; 62
    fd8a:	0f be       	out	0x3f, r0	; 63
    fd8c:	cd bf       	out	0x3d, r28	; 61
    fd8e:	cf 91       	pop	r28
    fd90:	df 91       	pop	r29
    fd92:	08 95       	ret

0000fd94 <rcvr_spi>:
/* Receive a byte from MMC via SPI  (Platform dependent)                 */
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
    fd94:	df 93       	push	r29
    fd96:	cf 93       	push	r28
    fd98:	cd b7       	in	r28, 0x3d	; 61
    fd9a:	de b7       	in	r29, 0x3e	; 62
	SPDR = 0xFF;
    fd9c:	8e e4       	ldi	r24, 0x4E	; 78
    fd9e:	90 e0       	ldi	r25, 0x00	; 0
    fda0:	2f ef       	ldi	r18, 0xFF	; 255
    fda2:	fc 01       	movw	r30, r24
    fda4:	20 83       	st	Z, r18
	loop_until_bit_is_set(SPSR, SPIF);
    fda6:	8d e4       	ldi	r24, 0x4D	; 77
    fda8:	90 e0       	ldi	r25, 0x00	; 0
    fdaa:	fc 01       	movw	r30, r24
    fdac:	80 81       	ld	r24, Z
    fdae:	88 23       	and	r24, r24
    fdb0:	d4 f7       	brge	.-12     	; 0xfda6 <rcvr_spi+0x12>
	return SPDR;
    fdb2:	8e e4       	ldi	r24, 0x4E	; 78
    fdb4:	90 e0       	ldi	r25, 0x00	; 0
    fdb6:	fc 01       	movw	r30, r24
    fdb8:	80 81       	ld	r24, Z
}
    fdba:	cf 91       	pop	r28
    fdbc:	df 91       	pop	r29
    fdbe:	08 95       	ret

0000fdc0 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    fdc0:	df 93       	push	r29
    fdc2:	cf 93       	push	r28
    fdc4:	0f 92       	push	r0
    fdc6:	cd b7       	in	r28, 0x3d	; 61
    fdc8:	de b7       	in	r29, 0x3e	; 62
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    fdca:	82 e3       	ldi	r24, 0x32	; 50
    fdcc:	80 93 b9 01 	sts	0x01B9, r24
	do
		d = rcvr_spi();
    fdd0:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
    fdd4:	89 83       	std	Y+1, r24	; 0x01
	while (d != 0xFF && Timer2);
    fdd6:	89 81       	ldd	r24, Y+1	; 0x01
    fdd8:	8f 3f       	cpi	r24, 0xFF	; 255
    fdda:	21 f0       	breq	.+8      	; 0xfde4 <wait_ready+0x24>
    fddc:	80 91 b9 01 	lds	r24, 0x01B9
    fde0:	88 23       	and	r24, r24
    fde2:	b1 f7       	brne	.-20     	; 0xfdd0 <wait_ready+0x10>

	return (d == 0xFF) ? 1 : 0;
    fde4:	81 e0       	ldi	r24, 0x01	; 1
    fde6:	90 e0       	ldi	r25, 0x00	; 0
    fde8:	29 81       	ldd	r18, Y+1	; 0x01
    fdea:	2f 3f       	cpi	r18, 0xFF	; 255
    fdec:	11 f0       	breq	.+4      	; 0xfdf2 <wait_ready+0x32>
    fdee:	80 e0       	ldi	r24, 0x00	; 0
    fdf0:	90 e0       	ldi	r25, 0x00	; 0
}
    fdf2:	0f 90       	pop	r0
    fdf4:	cf 91       	pop	r28
    fdf6:	df 91       	pop	r29
    fdf8:	08 95       	ret

0000fdfa <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    fdfa:	df 93       	push	r29
    fdfc:	cf 93       	push	r28
    fdfe:	cd b7       	in	r28, 0x3d	; 61
    fe00:	de b7       	in	r29, 0x3e	; 62
	CS_HIGH();
    fe02:	85 e2       	ldi	r24, 0x25	; 37
    fe04:	90 e0       	ldi	r25, 0x00	; 0
    fe06:	25 e2       	ldi	r18, 0x25	; 37
    fe08:	30 e0       	ldi	r19, 0x00	; 0
    fe0a:	f9 01       	movw	r30, r18
    fe0c:	20 81       	ld	r18, Z
    fe0e:	21 60       	ori	r18, 0x01	; 1
    fe10:	fc 01       	movw	r30, r24
    fe12:	20 83       	st	Z, r18
	rcvr_spi();	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    fe14:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
}
    fe18:	cf 91       	pop	r28
    fe1a:	df 91       	pop	r29
    fe1c:	08 95       	ret

0000fe1e <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    fe1e:	df 93       	push	r29
    fe20:	cf 93       	push	r28
    fe22:	cd b7       	in	r28, 0x3d	; 61
    fe24:	de b7       	in	r29, 0x3e	; 62
	CS_LOW();
    fe26:	85 e2       	ldi	r24, 0x25	; 37
    fe28:	90 e0       	ldi	r25, 0x00	; 0
    fe2a:	25 e2       	ldi	r18, 0x25	; 37
    fe2c:	30 e0       	ldi	r19, 0x00	; 0
    fe2e:	f9 01       	movw	r30, r18
    fe30:	20 81       	ld	r18, Z
    fe32:	2e 7f       	andi	r18, 0xFE	; 254
    fe34:	fc 01       	movw	r30, r24
    fe36:	20 83       	st	Z, r18
	rcvr_spi();	/* Dummy clock (force DO enabled) */
    fe38:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>

	if (wait_ready()) return 1;	/* OK */
    fe3c:	0e 94 e0 7e 	call	0xfdc0	; 0xfdc0 <wait_ready>
    fe40:	00 97       	sbiw	r24, 0x00	; 0
    fe42:	19 f0       	breq	.+6      	; 0xfe4a <select+0x2c>
    fe44:	81 e0       	ldi	r24, 0x01	; 1
    fe46:	90 e0       	ldi	r25, 0x00	; 0
    fe48:	04 c0       	rjmp	.+8      	; 0xfe52 <select+0x34>
	deselect();
    fe4a:	0e 94 fd 7e 	call	0xfdfa	; 0xfdfa <deselect>
	return 0;	/* Timeout */
    fe4e:	80 e0       	ldi	r24, 0x00	; 0
    fe50:	90 e0       	ldi	r25, 0x00	; 0
}
    fe52:	cf 91       	pop	r28
    fe54:	df 91       	pop	r29
    fe56:	08 95       	ret

0000fe58 <power_status>:
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
int power_status(void)		/* Socket power state: 0=off, 1=on */
{
    fe58:	df 93       	push	r29
    fe5a:	cf 93       	push	r28
    fe5c:	cd b7       	in	r28, 0x3d	; 61
    fe5e:	de b7       	in	r29, 0x3e	; 62
	return (PORTE & 0x80) ? 0 : 1;
    fe60:	8e e2       	ldi	r24, 0x2E	; 46
    fe62:	90 e0       	ldi	r25, 0x00	; 0
    fe64:	fc 01       	movw	r30, r24
    fe66:	80 81       	ld	r24, Z
    fe68:	99 27       	eor	r25, r25
    fe6a:	87 fd       	sbrc	r24, 7
    fe6c:	90 95       	com	r25
    fe6e:	80 95       	com	r24
    fe70:	90 95       	com	r25
    fe72:	88 27       	eor	r24, r24
    fe74:	99 0f       	add	r25, r25
    fe76:	88 1f       	adc	r24, r24
    fe78:	99 27       	eor	r25, r25
}
    fe7a:	cf 91       	pop	r28
    fe7c:	df 91       	pop	r29
    fe7e:	08 95       	ret

0000fe80 <power_on>:


static
void power_on (void)
{
    fe80:	df 93       	push	r29
    fe82:	cf 93       	push	r28
    fe84:	cd b7       	in	r28, 0x3d	; 61
    fe86:	de b7       	in	r29, 0x3e	; 62
	//PORTE &= ~0x80;				/* Socket power on */
	for (Timer1 = 2; Timer1; );	/* Wait for 20ms */
    fe88:	82 e0       	ldi	r24, 0x02	; 2
    fe8a:	80 93 b8 01 	sts	0x01B8, r24
    fe8e:	00 00       	nop
    fe90:	80 91 b8 01 	lds	r24, 0x01B8
    fe94:	88 23       	and	r24, r24
    fe96:	e1 f7       	brne	.-8      	; 0xfe90 <power_on+0x10>
	PORTB = 0b10110101;			/* Enable drivers */
    fe98:	85 e2       	ldi	r24, 0x25	; 37
    fe9a:	90 e0       	ldi	r25, 0x00	; 0
    fe9c:	25 eb       	ldi	r18, 0xB5	; 181
    fe9e:	fc 01       	movw	r30, r24
    fea0:	20 83       	st	Z, r18
	DDRB  = 0b11000111;
    fea2:	84 e2       	ldi	r24, 0x24	; 36
    fea4:	90 e0       	ldi	r25, 0x00	; 0
    fea6:	27 ec       	ldi	r18, 0xC7	; 199
    fea8:	fc 01       	movw	r30, r24
    feaa:	20 83       	st	Z, r18

	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    feac:	8c e4       	ldi	r24, 0x4C	; 76
    feae:	90 e0       	ldi	r25, 0x00	; 0
    feb0:	22 e5       	ldi	r18, 0x52	; 82
    feb2:	fc 01       	movw	r30, r24
    feb4:	20 83       	st	Z, r18
	SPSR = 0x01;			/* SPI 2x mode */
    feb6:	8d e4       	ldi	r24, 0x4D	; 77
    feb8:	90 e0       	ldi	r25, 0x00	; 0
    feba:	21 e0       	ldi	r18, 0x01	; 1
    febc:	fc 01       	movw	r30, r24
    febe:	20 83       	st	Z, r18
}
    fec0:	cf 91       	pop	r28
    fec2:	df 91       	pop	r29
    fec4:	08 95       	ret

0000fec6 <power_off>:


static
void power_off (void)
{
    fec6:	df 93       	push	r29
    fec8:	cf 93       	push	r28
    feca:	cd b7       	in	r28, 0x3d	; 61
    fecc:	de b7       	in	r29, 0x3e	; 62
	SPCR = 0;				/* Disable SPI function */
    fece:	8c e4       	ldi	r24, 0x4C	; 76
    fed0:	90 e0       	ldi	r25, 0x00	; 0
    fed2:	fc 01       	movw	r30, r24
    fed4:	10 82       	st	Z, r1
	DDRB  = 0b11000000;		/* Disable drivers */
    fed6:	84 e2       	ldi	r24, 0x24	; 36
    fed8:	90 e0       	ldi	r25, 0x00	; 0
    feda:	20 ec       	ldi	r18, 0xC0	; 192
    fedc:	fc 01       	movw	r30, r24
    fede:	20 83       	st	Z, r18
	PORTB = 0b10110000;
    fee0:	85 e2       	ldi	r24, 0x25	; 37
    fee2:	90 e0       	ldi	r25, 0x00	; 0
    fee4:	20 eb       	ldi	r18, 0xB0	; 176
    fee6:	fc 01       	movw	r30, r24
    fee8:	20 83       	st	Z, r18

	PORTE |=  0x80;			/* Socket power off */
    feea:	8e e2       	ldi	r24, 0x2E	; 46
    feec:	90 e0       	ldi	r25, 0x00	; 0
    feee:	2e e2       	ldi	r18, 0x2E	; 46
    fef0:	30 e0       	ldi	r19, 0x00	; 0
    fef2:	f9 01       	movw	r30, r18
    fef4:	20 81       	ld	r18, Z
    fef6:	20 68       	ori	r18, 0x80	; 128
    fef8:	fc 01       	movw	r30, r24
    fefa:	20 83       	st	Z, r18
	Stat |= STA_NOINIT;
    fefc:	80 91 0f 01 	lds	r24, 0x010F
    ff00:	81 60       	ori	r24, 0x01	; 1
    ff02:	80 93 0f 01 	sts	0x010F, r24
}
    ff06:	cf 91       	pop	r28
    ff08:	df 91       	pop	r29
    ff0a:	08 95       	ret

0000ff0c <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    ff0c:	df 93       	push	r29
    ff0e:	cf 93       	push	r28
    ff10:	00 d0       	rcall	.+0      	; 0xff12 <rcvr_datablock+0x6>
    ff12:	00 d0       	rcall	.+0      	; 0xff14 <rcvr_datablock+0x8>
    ff14:	0f 92       	push	r0
    ff16:	cd b7       	in	r28, 0x3d	; 61
    ff18:	de b7       	in	r29, 0x3e	; 62
    ff1a:	9b 83       	std	Y+3, r25	; 0x03
    ff1c:	8a 83       	std	Y+2, r24	; 0x02
    ff1e:	7d 83       	std	Y+5, r23	; 0x05
    ff20:	6c 83       	std	Y+4, r22	; 0x04
	BYTE token;


	Timer1 = 20;
    ff22:	84 e1       	ldi	r24, 0x14	; 20
    ff24:	80 93 b8 01 	sts	0x01B8, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    ff28:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
    ff2c:	89 83       	std	Y+1, r24	; 0x01
	} while ((token == 0xFF) && Timer1);
    ff2e:	89 81       	ldd	r24, Y+1	; 0x01
    ff30:	8f 3f       	cpi	r24, 0xFF	; 255
    ff32:	21 f4       	brne	.+8      	; 0xff3c <rcvr_datablock+0x30>
    ff34:	80 91 b8 01 	lds	r24, 0x01B8
    ff38:	88 23       	and	r24, r24
    ff3a:	b1 f7       	brne	.-20     	; 0xff28 <rcvr_datablock+0x1c>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    ff3c:	89 81       	ldd	r24, Y+1	; 0x01
    ff3e:	8e 3f       	cpi	r24, 0xFE	; 254
    ff40:	19 f0       	breq	.+6      	; 0xff48 <rcvr_datablock+0x3c>
    ff42:	80 e0       	ldi	r24, 0x00	; 0
    ff44:	90 e0       	ldi	r25, 0x00	; 0
    ff46:	70 c0       	rjmp	.+224    	; 0x10028 <rcvr_datablock+0x11c>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    ff48:	8e e4       	ldi	r24, 0x4E	; 78
    ff4a:	90 e0       	ldi	r25, 0x00	; 0
    ff4c:	2f ef       	ldi	r18, 0xFF	; 255
    ff4e:	fc 01       	movw	r30, r24
    ff50:	20 83       	st	Z, r18
    ff52:	8d e4       	ldi	r24, 0x4D	; 77
    ff54:	90 e0       	ldi	r25, 0x00	; 0
    ff56:	fc 01       	movw	r30, r24
    ff58:	80 81       	ld	r24, Z
    ff5a:	88 23       	and	r24, r24
    ff5c:	d4 f7       	brge	.-12     	; 0xff52 <rcvr_datablock+0x46>
    ff5e:	8e e4       	ldi	r24, 0x4E	; 78
    ff60:	90 e0       	ldi	r25, 0x00	; 0
    ff62:	fc 01       	movw	r30, r24
    ff64:	20 81       	ld	r18, Z
    ff66:	8a 81       	ldd	r24, Y+2	; 0x02
    ff68:	9b 81       	ldd	r25, Y+3	; 0x03
    ff6a:	fc 01       	movw	r30, r24
    ff6c:	20 83       	st	Z, r18
    ff6e:	8a 81       	ldd	r24, Y+2	; 0x02
    ff70:	9b 81       	ldd	r25, Y+3	; 0x03
    ff72:	01 96       	adiw	r24, 0x01	; 1
    ff74:	9b 83       	std	Y+3, r25	; 0x03
    ff76:	8a 83       	std	Y+2, r24	; 0x02
		rcvr_spi_m(buff++);
    ff78:	8e e4       	ldi	r24, 0x4E	; 78
    ff7a:	90 e0       	ldi	r25, 0x00	; 0
    ff7c:	2f ef       	ldi	r18, 0xFF	; 255
    ff7e:	fc 01       	movw	r30, r24
    ff80:	20 83       	st	Z, r18
    ff82:	8d e4       	ldi	r24, 0x4D	; 77
    ff84:	90 e0       	ldi	r25, 0x00	; 0
    ff86:	fc 01       	movw	r30, r24
    ff88:	80 81       	ld	r24, Z
    ff8a:	88 23       	and	r24, r24
    ff8c:	d4 f7       	brge	.-12     	; 0xff82 <rcvr_datablock+0x76>
    ff8e:	8e e4       	ldi	r24, 0x4E	; 78
    ff90:	90 e0       	ldi	r25, 0x00	; 0
    ff92:	fc 01       	movw	r30, r24
    ff94:	20 81       	ld	r18, Z
    ff96:	8a 81       	ldd	r24, Y+2	; 0x02
    ff98:	9b 81       	ldd	r25, Y+3	; 0x03
    ff9a:	fc 01       	movw	r30, r24
    ff9c:	20 83       	st	Z, r18
    ff9e:	8a 81       	ldd	r24, Y+2	; 0x02
    ffa0:	9b 81       	ldd	r25, Y+3	; 0x03
    ffa2:	01 96       	adiw	r24, 0x01	; 1
    ffa4:	9b 83       	std	Y+3, r25	; 0x03
    ffa6:	8a 83       	std	Y+2, r24	; 0x02
		rcvr_spi_m(buff++);
    ffa8:	8e e4       	ldi	r24, 0x4E	; 78
    ffaa:	90 e0       	ldi	r25, 0x00	; 0
    ffac:	2f ef       	ldi	r18, 0xFF	; 255
    ffae:	fc 01       	movw	r30, r24
    ffb0:	20 83       	st	Z, r18
    ffb2:	8d e4       	ldi	r24, 0x4D	; 77
    ffb4:	90 e0       	ldi	r25, 0x00	; 0
    ffb6:	fc 01       	movw	r30, r24
    ffb8:	80 81       	ld	r24, Z
    ffba:	88 23       	and	r24, r24
    ffbc:	d4 f7       	brge	.-12     	; 0xffb2 <rcvr_datablock+0xa6>
    ffbe:	8e e4       	ldi	r24, 0x4E	; 78
    ffc0:	90 e0       	ldi	r25, 0x00	; 0
    ffc2:	fc 01       	movw	r30, r24
    ffc4:	20 81       	ld	r18, Z
    ffc6:	8a 81       	ldd	r24, Y+2	; 0x02
    ffc8:	9b 81       	ldd	r25, Y+3	; 0x03
    ffca:	fc 01       	movw	r30, r24
    ffcc:	20 83       	st	Z, r18
    ffce:	8a 81       	ldd	r24, Y+2	; 0x02
    ffd0:	9b 81       	ldd	r25, Y+3	; 0x03
    ffd2:	01 96       	adiw	r24, 0x01	; 1
    ffd4:	9b 83       	std	Y+3, r25	; 0x03
    ffd6:	8a 83       	std	Y+2, r24	; 0x02
		rcvr_spi_m(buff++);
    ffd8:	8e e4       	ldi	r24, 0x4E	; 78
    ffda:	90 e0       	ldi	r25, 0x00	; 0
    ffdc:	2f ef       	ldi	r18, 0xFF	; 255
    ffde:	fc 01       	movw	r30, r24
    ffe0:	20 83       	st	Z, r18
    ffe2:	8d e4       	ldi	r24, 0x4D	; 77
    ffe4:	90 e0       	ldi	r25, 0x00	; 0
    ffe6:	fc 01       	movw	r30, r24
    ffe8:	80 81       	ld	r24, Z
    ffea:	88 23       	and	r24, r24
    ffec:	d4 f7       	brge	.-12     	; 0xffe2 <rcvr_datablock+0xd6>
    ffee:	8e e4       	ldi	r24, 0x4E	; 78
    fff0:	90 e0       	ldi	r25, 0x00	; 0
    fff2:	fc 01       	movw	r30, r24
    fff4:	20 81       	ld	r18, Z
    fff6:	8a 81       	ldd	r24, Y+2	; 0x02
    fff8:	9b 81       	ldd	r25, Y+3	; 0x03
    fffa:	fc 01       	movw	r30, r24
    fffc:	20 83       	st	Z, r18
    fffe:	8a 81       	ldd	r24, Y+2	; 0x02
   10000:	9b 81       	ldd	r25, Y+3	; 0x03
   10002:	01 96       	adiw	r24, 0x01	; 1
   10004:	9b 83       	std	Y+3, r25	; 0x03
   10006:	8a 83       	std	Y+2, r24	; 0x02
	} while (btr -= 4);
   10008:	8c 81       	ldd	r24, Y+4	; 0x04
   1000a:	9d 81       	ldd	r25, Y+5	; 0x05
   1000c:	04 97       	sbiw	r24, 0x04	; 4
   1000e:	9d 83       	std	Y+5, r25	; 0x05
   10010:	8c 83       	std	Y+4, r24	; 0x04
   10012:	8c 81       	ldd	r24, Y+4	; 0x04
   10014:	9d 81       	ldd	r25, Y+5	; 0x05
   10016:	00 97       	sbiw	r24, 0x00	; 0
   10018:	09 f0       	breq	.+2      	; 0x1001c <rcvr_datablock+0x110>
   1001a:	96 cf       	rjmp	.-212    	; 0xff48 <rcvr_datablock+0x3c>
	rcvr_spi();						/* Discard CRC */
   1001c:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
	rcvr_spi();
   10020:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>

	return 1;						/* Return with success */
   10024:	81 e0       	ldi	r24, 0x01	; 1
   10026:	90 e0       	ldi	r25, 0x00	; 0
}
   10028:	0f 90       	pop	r0
   1002a:	0f 90       	pop	r0
   1002c:	0f 90       	pop	r0
   1002e:	0f 90       	pop	r0
   10030:	0f 90       	pop	r0
   10032:	cf 91       	pop	r28
   10034:	df 91       	pop	r29
   10036:	08 95       	ret

00010038 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
   10038:	df 93       	push	r29
   1003a:	cf 93       	push	r28
   1003c:	00 d0       	rcall	.+0      	; 0x1003e <xmit_datablock+0x6>
   1003e:	00 d0       	rcall	.+0      	; 0x10040 <xmit_datablock+0x8>
   10040:	0f 92       	push	r0
   10042:	cd b7       	in	r28, 0x3d	; 61
   10044:	de b7       	in	r29, 0x3e	; 62
   10046:	9c 83       	std	Y+4, r25	; 0x04
   10048:	8b 83       	std	Y+3, r24	; 0x03
   1004a:	6d 83       	std	Y+5, r22	; 0x05
	BYTE resp, wc;


	if (!wait_ready()) return 0;
   1004c:	0e 94 e0 7e 	call	0xfdc0	; 0xfdc0 <wait_ready>
   10050:	00 97       	sbiw	r24, 0x00	; 0
   10052:	19 f4       	brne	.+6      	; 0x1005a <xmit_datablock+0x22>
   10054:	80 e0       	ldi	r24, 0x00	; 0
   10056:	90 e0       	ldi	r25, 0x00	; 0
   10058:	62 c0       	rjmp	.+196    	; 0x1011e <xmit_datablock+0xe6>

	xmit_spi(token);					/* Xmit data token */
   1005a:	8e e4       	ldi	r24, 0x4E	; 78
   1005c:	90 e0       	ldi	r25, 0x00	; 0
   1005e:	2d 81       	ldd	r18, Y+5	; 0x05
   10060:	fc 01       	movw	r30, r24
   10062:	20 83       	st	Z, r18
   10064:	8d e4       	ldi	r24, 0x4D	; 77
   10066:	90 e0       	ldi	r25, 0x00	; 0
   10068:	fc 01       	movw	r30, r24
   1006a:	80 81       	ld	r24, Z
   1006c:	88 23       	and	r24, r24
   1006e:	d4 f7       	brge	.-12     	; 0x10064 <xmit_datablock+0x2c>
	if (token != 0xFD) {	/* Is data token */
   10070:	8d 81       	ldd	r24, Y+5	; 0x05
   10072:	8d 3f       	cpi	r24, 0xFD	; 253
   10074:	09 f4       	brne	.+2      	; 0x10078 <xmit_datablock+0x40>
   10076:	51 c0       	rjmp	.+162    	; 0x1011a <xmit_datablock+0xe2>
		wc = 0;
   10078:	19 82       	std	Y+1, r1	; 0x01
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
   1007a:	8e e4       	ldi	r24, 0x4E	; 78
   1007c:	90 e0       	ldi	r25, 0x00	; 0
   1007e:	2b 81       	ldd	r18, Y+3	; 0x03
   10080:	3c 81       	ldd	r19, Y+4	; 0x04
   10082:	f9 01       	movw	r30, r18
   10084:	20 81       	ld	r18, Z
   10086:	fc 01       	movw	r30, r24
   10088:	20 83       	st	Z, r18
   1008a:	8b 81       	ldd	r24, Y+3	; 0x03
   1008c:	9c 81       	ldd	r25, Y+4	; 0x04
   1008e:	01 96       	adiw	r24, 0x01	; 1
   10090:	9c 83       	std	Y+4, r25	; 0x04
   10092:	8b 83       	std	Y+3, r24	; 0x03
   10094:	8d e4       	ldi	r24, 0x4D	; 77
   10096:	90 e0       	ldi	r25, 0x00	; 0
   10098:	fc 01       	movw	r30, r24
   1009a:	80 81       	ld	r24, Z
   1009c:	88 23       	and	r24, r24
   1009e:	d4 f7       	brge	.-12     	; 0x10094 <xmit_datablock+0x5c>
			xmit_spi(*buff++);
   100a0:	8e e4       	ldi	r24, 0x4E	; 78
   100a2:	90 e0       	ldi	r25, 0x00	; 0
   100a4:	2b 81       	ldd	r18, Y+3	; 0x03
   100a6:	3c 81       	ldd	r19, Y+4	; 0x04
   100a8:	f9 01       	movw	r30, r18
   100aa:	20 81       	ld	r18, Z
   100ac:	fc 01       	movw	r30, r24
   100ae:	20 83       	st	Z, r18
   100b0:	8b 81       	ldd	r24, Y+3	; 0x03
   100b2:	9c 81       	ldd	r25, Y+4	; 0x04
   100b4:	01 96       	adiw	r24, 0x01	; 1
   100b6:	9c 83       	std	Y+4, r25	; 0x04
   100b8:	8b 83       	std	Y+3, r24	; 0x03
   100ba:	8d e4       	ldi	r24, 0x4D	; 77
   100bc:	90 e0       	ldi	r25, 0x00	; 0
   100be:	fc 01       	movw	r30, r24
   100c0:	80 81       	ld	r24, Z
   100c2:	88 23       	and	r24, r24
   100c4:	d4 f7       	brge	.-12     	; 0x100ba <xmit_datablock+0x82>
		} while (--wc);
   100c6:	89 81       	ldd	r24, Y+1	; 0x01
   100c8:	81 50       	subi	r24, 0x01	; 1
   100ca:	89 83       	std	Y+1, r24	; 0x01
   100cc:	89 81       	ldd	r24, Y+1	; 0x01
   100ce:	88 23       	and	r24, r24
   100d0:	a1 f6       	brne	.-88     	; 0x1007a <xmit_datablock+0x42>
		xmit_spi(0xFF);					/* CRC (Dummy) */
   100d2:	8e e4       	ldi	r24, 0x4E	; 78
   100d4:	90 e0       	ldi	r25, 0x00	; 0
   100d6:	2f ef       	ldi	r18, 0xFF	; 255
   100d8:	fc 01       	movw	r30, r24
   100da:	20 83       	st	Z, r18
   100dc:	8d e4       	ldi	r24, 0x4D	; 77
   100de:	90 e0       	ldi	r25, 0x00	; 0
   100e0:	fc 01       	movw	r30, r24
   100e2:	80 81       	ld	r24, Z
   100e4:	88 23       	and	r24, r24
   100e6:	d4 f7       	brge	.-12     	; 0x100dc <xmit_datablock+0xa4>
		xmit_spi(0xFF);
   100e8:	8e e4       	ldi	r24, 0x4E	; 78
   100ea:	90 e0       	ldi	r25, 0x00	; 0
   100ec:	2f ef       	ldi	r18, 0xFF	; 255
   100ee:	fc 01       	movw	r30, r24
   100f0:	20 83       	st	Z, r18
   100f2:	8d e4       	ldi	r24, 0x4D	; 77
   100f4:	90 e0       	ldi	r25, 0x00	; 0
   100f6:	fc 01       	movw	r30, r24
   100f8:	80 81       	ld	r24, Z
   100fa:	88 23       	and	r24, r24
   100fc:	d4 f7       	brge	.-12     	; 0x100f2 <xmit_datablock+0xba>
		resp = rcvr_spi();				/* Reveive data response */
   100fe:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
   10102:	8a 83       	std	Y+2, r24	; 0x02
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
   10104:	8a 81       	ldd	r24, Y+2	; 0x02
   10106:	88 2f       	mov	r24, r24
   10108:	90 e0       	ldi	r25, 0x00	; 0
   1010a:	8f 71       	andi	r24, 0x1F	; 31
   1010c:	90 70       	andi	r25, 0x00	; 0
   1010e:	85 30       	cpi	r24, 0x05	; 5
   10110:	91 05       	cpc	r25, r1
   10112:	19 f0       	breq	.+6      	; 0x1011a <xmit_datablock+0xe2>
			return 0;
   10114:	80 e0       	ldi	r24, 0x00	; 0
   10116:	90 e0       	ldi	r25, 0x00	; 0
   10118:	02 c0       	rjmp	.+4      	; 0x1011e <xmit_datablock+0xe6>
	}

	return 1;
   1011a:	81 e0       	ldi	r24, 0x01	; 1
   1011c:	90 e0       	ldi	r25, 0x00	; 0
}
   1011e:	0f 90       	pop	r0
   10120:	0f 90       	pop	r0
   10122:	0f 90       	pop	r0
   10124:	0f 90       	pop	r0
   10126:	0f 90       	pop	r0
   10128:	cf 91       	pop	r28
   1012a:	df 91       	pop	r29
   1012c:	08 95       	ret

0001012e <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
   1012e:	df 93       	push	r29
   10130:	cf 93       	push	r28
   10132:	cd b7       	in	r28, 0x3d	; 61
   10134:	de b7       	in	r29, 0x3e	; 62
   10136:	27 97       	sbiw	r28, 0x07	; 7
   10138:	0f b6       	in	r0, 0x3f	; 63
   1013a:	f8 94       	cli
   1013c:	de bf       	out	0x3e, r29	; 62
   1013e:	0f be       	out	0x3f, r0	; 63
   10140:	cd bf       	out	0x3d, r28	; 61
   10142:	8b 83       	std	Y+3, r24	; 0x03
   10144:	4c 83       	std	Y+4, r20	; 0x04
   10146:	5d 83       	std	Y+5, r21	; 0x05
   10148:	6e 83       	std	Y+6, r22	; 0x06
   1014a:	7f 83       	std	Y+7, r23	; 0x07
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
   1014c:	8b 81       	ldd	r24, Y+3	; 0x03
   1014e:	88 23       	and	r24, r24
   10150:	7c f4       	brge	.+30     	; 0x10170 <send_cmd+0x42>
		cmd &= 0x7F;
   10152:	8b 81       	ldd	r24, Y+3	; 0x03
   10154:	8f 77       	andi	r24, 0x7F	; 127
   10156:	8b 83       	std	Y+3, r24	; 0x03
		res = send_cmd(CMD55, 0);
   10158:	87 e3       	ldi	r24, 0x37	; 55
   1015a:	40 e0       	ldi	r20, 0x00	; 0
   1015c:	50 e0       	ldi	r21, 0x00	; 0
   1015e:	ba 01       	movw	r22, r20
   10160:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   10164:	8a 83       	std	Y+2, r24	; 0x02
		if (res > 1) return res;
   10166:	8a 81       	ldd	r24, Y+2	; 0x02
   10168:	82 30       	cpi	r24, 0x02	; 2
   1016a:	10 f0       	brcs	.+4      	; 0x10170 <send_cmd+0x42>
   1016c:	8a 81       	ldd	r24, Y+2	; 0x02
   1016e:	7f c0       	rjmp	.+254    	; 0x1026e <send_cmd+0x140>
	}

	/* Select the card and wait for ready */
	deselect();
   10170:	0e 94 fd 7e 	call	0xfdfa	; 0xfdfa <deselect>
	if (!select()) return 0xFF;
   10174:	0e 94 0f 7f 	call	0xfe1e	; 0xfe1e <select>
   10178:	00 97       	sbiw	r24, 0x00	; 0
   1017a:	11 f4       	brne	.+4      	; 0x10180 <send_cmd+0x52>
   1017c:	8f ef       	ldi	r24, 0xFF	; 255
   1017e:	77 c0       	rjmp	.+238    	; 0x1026e <send_cmd+0x140>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
   10180:	8e e4       	ldi	r24, 0x4E	; 78
   10182:	90 e0       	ldi	r25, 0x00	; 0
   10184:	2b 81       	ldd	r18, Y+3	; 0x03
   10186:	20 64       	ori	r18, 0x40	; 64
   10188:	fc 01       	movw	r30, r24
   1018a:	20 83       	st	Z, r18
   1018c:	8d e4       	ldi	r24, 0x4D	; 77
   1018e:	90 e0       	ldi	r25, 0x00	; 0
   10190:	fc 01       	movw	r30, r24
   10192:	80 81       	ld	r24, Z
   10194:	88 23       	and	r24, r24
   10196:	d4 f7       	brge	.-12     	; 0x1018c <send_cmd+0x5e>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
   10198:	2e e4       	ldi	r18, 0x4E	; 78
   1019a:	30 e0       	ldi	r19, 0x00	; 0
   1019c:	8c 81       	ldd	r24, Y+4	; 0x04
   1019e:	9d 81       	ldd	r25, Y+5	; 0x05
   101a0:	ae 81       	ldd	r26, Y+6	; 0x06
   101a2:	bf 81       	ldd	r27, Y+7	; 0x07
   101a4:	8b 2f       	mov	r24, r27
   101a6:	99 27       	eor	r25, r25
   101a8:	aa 27       	eor	r26, r26
   101aa:	bb 27       	eor	r27, r27
   101ac:	f9 01       	movw	r30, r18
   101ae:	80 83       	st	Z, r24
   101b0:	8d e4       	ldi	r24, 0x4D	; 77
   101b2:	90 e0       	ldi	r25, 0x00	; 0
   101b4:	fc 01       	movw	r30, r24
   101b6:	80 81       	ld	r24, Z
   101b8:	88 23       	and	r24, r24
   101ba:	d4 f7       	brge	.-12     	; 0x101b0 <send_cmd+0x82>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
   101bc:	2e e4       	ldi	r18, 0x4E	; 78
   101be:	30 e0       	ldi	r19, 0x00	; 0
   101c0:	8c 81       	ldd	r24, Y+4	; 0x04
   101c2:	9d 81       	ldd	r25, Y+5	; 0x05
   101c4:	ae 81       	ldd	r26, Y+6	; 0x06
   101c6:	bf 81       	ldd	r27, Y+7	; 0x07
   101c8:	cd 01       	movw	r24, r26
   101ca:	aa 27       	eor	r26, r26
   101cc:	bb 27       	eor	r27, r27
   101ce:	f9 01       	movw	r30, r18
   101d0:	80 83       	st	Z, r24
   101d2:	8d e4       	ldi	r24, 0x4D	; 77
   101d4:	90 e0       	ldi	r25, 0x00	; 0
   101d6:	fc 01       	movw	r30, r24
   101d8:	80 81       	ld	r24, Z
   101da:	88 23       	and	r24, r24
   101dc:	d4 f7       	brge	.-12     	; 0x101d2 <send_cmd+0xa4>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
   101de:	2e e4       	ldi	r18, 0x4E	; 78
   101e0:	30 e0       	ldi	r19, 0x00	; 0
   101e2:	8c 81       	ldd	r24, Y+4	; 0x04
   101e4:	9d 81       	ldd	r25, Y+5	; 0x05
   101e6:	ae 81       	ldd	r26, Y+6	; 0x06
   101e8:	bf 81       	ldd	r27, Y+7	; 0x07
   101ea:	89 2f       	mov	r24, r25
   101ec:	9a 2f       	mov	r25, r26
   101ee:	ab 2f       	mov	r26, r27
   101f0:	bb 27       	eor	r27, r27
   101f2:	f9 01       	movw	r30, r18
   101f4:	80 83       	st	Z, r24
   101f6:	8d e4       	ldi	r24, 0x4D	; 77
   101f8:	90 e0       	ldi	r25, 0x00	; 0
   101fa:	fc 01       	movw	r30, r24
   101fc:	80 81       	ld	r24, Z
   101fe:	88 23       	and	r24, r24
   10200:	d4 f7       	brge	.-12     	; 0x101f6 <send_cmd+0xc8>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
   10202:	8e e4       	ldi	r24, 0x4E	; 78
   10204:	90 e0       	ldi	r25, 0x00	; 0
   10206:	2c 81       	ldd	r18, Y+4	; 0x04
   10208:	fc 01       	movw	r30, r24
   1020a:	20 83       	st	Z, r18
   1020c:	8d e4       	ldi	r24, 0x4D	; 77
   1020e:	90 e0       	ldi	r25, 0x00	; 0
   10210:	fc 01       	movw	r30, r24
   10212:	80 81       	ld	r24, Z
   10214:	88 23       	and	r24, r24
   10216:	d4 f7       	brge	.-12     	; 0x1020c <send_cmd+0xde>
	n = 0x01;							/* Dummy CRC + Stop */
   10218:	81 e0       	ldi	r24, 0x01	; 1
   1021a:	89 83       	std	Y+1, r24	; 0x01
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
   1021c:	8b 81       	ldd	r24, Y+3	; 0x03
   1021e:	88 23       	and	r24, r24
   10220:	11 f4       	brne	.+4      	; 0x10226 <send_cmd+0xf8>
   10222:	85 e9       	ldi	r24, 0x95	; 149
   10224:	89 83       	std	Y+1, r24	; 0x01
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
   10226:	8b 81       	ldd	r24, Y+3	; 0x03
   10228:	88 30       	cpi	r24, 0x08	; 8
   1022a:	11 f4       	brne	.+4      	; 0x10230 <send_cmd+0x102>
   1022c:	87 e8       	ldi	r24, 0x87	; 135
   1022e:	89 83       	std	Y+1, r24	; 0x01
	xmit_spi(n);
   10230:	8e e4       	ldi	r24, 0x4E	; 78
   10232:	90 e0       	ldi	r25, 0x00	; 0
   10234:	29 81       	ldd	r18, Y+1	; 0x01
   10236:	fc 01       	movw	r30, r24
   10238:	20 83       	st	Z, r18
   1023a:	8d e4       	ldi	r24, 0x4D	; 77
   1023c:	90 e0       	ldi	r25, 0x00	; 0
   1023e:	fc 01       	movw	r30, r24
   10240:	80 81       	ld	r24, Z
   10242:	88 23       	and	r24, r24
   10244:	d4 f7       	brge	.-12     	; 0x1023a <send_cmd+0x10c>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
   10246:	8b 81       	ldd	r24, Y+3	; 0x03
   10248:	8c 30       	cpi	r24, 0x0C	; 12
   1024a:	11 f4       	brne	.+4      	; 0x10250 <send_cmd+0x122>
   1024c:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
   10250:	8a e0       	ldi	r24, 0x0A	; 10
   10252:	89 83       	std	Y+1, r24	; 0x01
	do
		res = rcvr_spi();
   10254:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
   10258:	8a 83       	std	Y+2, r24	; 0x02
	while ((res & 0x80) && --n);
   1025a:	8a 81       	ldd	r24, Y+2	; 0x02
   1025c:	88 23       	and	r24, r24
   1025e:	34 f4       	brge	.+12     	; 0x1026c <send_cmd+0x13e>
   10260:	89 81       	ldd	r24, Y+1	; 0x01
   10262:	81 50       	subi	r24, 0x01	; 1
   10264:	89 83       	std	Y+1, r24	; 0x01
   10266:	89 81       	ldd	r24, Y+1	; 0x01
   10268:	88 23       	and	r24, r24
   1026a:	a1 f7       	brne	.-24     	; 0x10254 <send_cmd+0x126>

	return res;			/* Return with the response value */
   1026c:	8a 81       	ldd	r24, Y+2	; 0x02
}
   1026e:	27 96       	adiw	r28, 0x07	; 7
   10270:	0f b6       	in	r0, 0x3f	; 63
   10272:	f8 94       	cli
   10274:	de bf       	out	0x3e, r29	; 62
   10276:	0f be       	out	0x3f, r0	; 63
   10278:	cd bf       	out	0x3d, r28	; 61
   1027a:	cf 91       	pop	r28
   1027c:	df 91       	pop	r29
   1027e:	08 95       	ret

00010280 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
   10280:	0f 93       	push	r16
   10282:	1f 93       	push	r17
   10284:	df 93       	push	r29
   10286:	cf 93       	push	r28
   10288:	cd b7       	in	r28, 0x3d	; 61
   1028a:	de b7       	in	r29, 0x3e	; 62
   1028c:	28 97       	sbiw	r28, 0x08	; 8
   1028e:	0f b6       	in	r0, 0x3f	; 63
   10290:	f8 94       	cli
   10292:	de bf       	out	0x3e, r29	; 62
   10294:	0f be       	out	0x3f, r0	; 63
   10296:	cd bf       	out	0x3d, r28	; 61
   10298:	88 87       	std	Y+8, r24	; 0x08
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
   1029a:	88 85       	ldd	r24, Y+8	; 0x08
   1029c:	88 23       	and	r24, r24
   1029e:	11 f0       	breq	.+4      	; 0x102a4 <disk_initialize+0x24>
   102a0:	81 e0       	ldi	r24, 0x01	; 1
   102a2:	cf c0       	rjmp	.+414    	; 0x10442 <disk_initialize+0x1c2>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
   102a4:	80 91 0f 01 	lds	r24, 0x010F
   102a8:	88 2f       	mov	r24, r24
   102aa:	90 e0       	ldi	r25, 0x00	; 0
   102ac:	82 70       	andi	r24, 0x02	; 2
   102ae:	90 70       	andi	r25, 0x00	; 0
   102b0:	00 97       	sbiw	r24, 0x00	; 0
   102b2:	19 f0       	breq	.+6      	; 0x102ba <disk_initialize+0x3a>
   102b4:	80 91 0f 01 	lds	r24, 0x010F
   102b8:	c4 c0       	rjmp	.+392    	; 0x10442 <disk_initialize+0x1c2>

	power_on();							/* Force socket power on */
   102ba:	0e 94 40 7f 	call	0xfe80	; 0xfe80 <power_on>
	FCLK_SLOW();
   102be:	8c e4       	ldi	r24, 0x4C	; 76
   102c0:	90 e0       	ldi	r25, 0x00	; 0
   102c2:	22 e5       	ldi	r18, 0x52	; 82
   102c4:	fc 01       	movw	r30, r24
   102c6:	20 83       	st	Z, r18
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
   102c8:	8a e0       	ldi	r24, 0x0A	; 10
   102ca:	89 83       	std	Y+1, r24	; 0x01
   102cc:	05 c0       	rjmp	.+10     	; 0x102d8 <disk_initialize+0x58>
   102ce:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
   102d2:	89 81       	ldd	r24, Y+1	; 0x01
   102d4:	81 50       	subi	r24, 0x01	; 1
   102d6:	89 83       	std	Y+1, r24	; 0x01
   102d8:	89 81       	ldd	r24, Y+1	; 0x01
   102da:	88 23       	and	r24, r24
   102dc:	c1 f7       	brne	.-16     	; 0x102ce <disk_initialize+0x4e>

	ty = 0;
   102de:	1b 82       	std	Y+3, r1	; 0x03
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
   102e0:	80 e0       	ldi	r24, 0x00	; 0
   102e2:	40 e0       	ldi	r20, 0x00	; 0
   102e4:	50 e0       	ldi	r21, 0x00	; 0
   102e6:	ba 01       	movw	r22, r20
   102e8:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   102ec:	81 30       	cpi	r24, 0x01	; 1
   102ee:	09 f0       	breq	.+2      	; 0x102f2 <disk_initialize+0x72>
   102f0:	91 c0       	rjmp	.+290    	; 0x10414 <disk_initialize+0x194>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
   102f2:	84 e6       	ldi	r24, 0x64	; 100
   102f4:	80 93 b8 01 	sts	0x01B8, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
   102f8:	88 e0       	ldi	r24, 0x08	; 8
   102fa:	4a ea       	ldi	r20, 0xAA	; 170
   102fc:	51 e0       	ldi	r21, 0x01	; 1
   102fe:	60 e0       	ldi	r22, 0x00	; 0
   10300:	70 e0       	ldi	r23, 0x00	; 0
   10302:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   10306:	81 30       	cpi	r24, 0x01	; 1
   10308:	09 f0       	breq	.+2      	; 0x1030c <disk_initialize+0x8c>
   1030a:	58 c0       	rjmp	.+176    	; 0x103bc <disk_initialize+0x13c>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
   1030c:	19 82       	std	Y+1, r1	; 0x01
   1030e:	0f c0       	rjmp	.+30     	; 0x1032e <disk_initialize+0xae>
   10310:	89 81       	ldd	r24, Y+1	; 0x01
   10312:	08 2f       	mov	r16, r24
   10314:	10 e0       	ldi	r17, 0x00	; 0
   10316:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
   1031a:	28 2f       	mov	r18, r24
   1031c:	ce 01       	movw	r24, r28
   1031e:	04 96       	adiw	r24, 0x04	; 4
   10320:	80 0f       	add	r24, r16
   10322:	91 1f       	adc	r25, r17
   10324:	fc 01       	movw	r30, r24
   10326:	20 83       	st	Z, r18
   10328:	89 81       	ldd	r24, Y+1	; 0x01
   1032a:	8f 5f       	subi	r24, 0xFF	; 255
   1032c:	89 83       	std	Y+1, r24	; 0x01
   1032e:	89 81       	ldd	r24, Y+1	; 0x01
   10330:	84 30       	cpi	r24, 0x04	; 4
   10332:	70 f3       	brcs	.-36     	; 0x10310 <disk_initialize+0x90>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
   10334:	8e 81       	ldd	r24, Y+6	; 0x06
   10336:	81 30       	cpi	r24, 0x01	; 1
   10338:	09 f0       	breq	.+2      	; 0x1033c <disk_initialize+0xbc>
   1033a:	6c c0       	rjmp	.+216    	; 0x10414 <disk_initialize+0x194>
   1033c:	8f 81       	ldd	r24, Y+7	; 0x07
   1033e:	8a 3a       	cpi	r24, 0xAA	; 170
   10340:	09 f0       	breq	.+2      	; 0x10344 <disk_initialize+0xc4>
   10342:	68 c0       	rjmp	.+208    	; 0x10414 <disk_initialize+0x194>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   10344:	00 00       	nop
   10346:	80 91 b8 01 	lds	r24, 0x01B8
   1034a:	88 23       	and	r24, r24
   1034c:	49 f0       	breq	.+18     	; 0x10360 <disk_initialize+0xe0>
   1034e:	89 ea       	ldi	r24, 0xA9	; 169
   10350:	40 e0       	ldi	r20, 0x00	; 0
   10352:	50 e0       	ldi	r21, 0x00	; 0
   10354:	60 e0       	ldi	r22, 0x00	; 0
   10356:	70 e4       	ldi	r23, 0x40	; 64
   10358:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   1035c:	88 23       	and	r24, r24
   1035e:	99 f7       	brne	.-26     	; 0x10346 <disk_initialize+0xc6>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
   10360:	80 91 b8 01 	lds	r24, 0x01B8
   10364:	88 23       	and	r24, r24
   10366:	09 f4       	brne	.+2      	; 0x1036a <disk_initialize+0xea>
   10368:	55 c0       	rjmp	.+170    	; 0x10414 <disk_initialize+0x194>
   1036a:	8a e3       	ldi	r24, 0x3A	; 58
   1036c:	40 e0       	ldi	r20, 0x00	; 0
   1036e:	50 e0       	ldi	r21, 0x00	; 0
   10370:	ba 01       	movw	r22, r20
   10372:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   10376:	88 23       	and	r24, r24
   10378:	09 f0       	breq	.+2      	; 0x1037c <disk_initialize+0xfc>
   1037a:	4c c0       	rjmp	.+152    	; 0x10414 <disk_initialize+0x194>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
   1037c:	19 82       	std	Y+1, r1	; 0x01
   1037e:	0f c0       	rjmp	.+30     	; 0x1039e <disk_initialize+0x11e>
   10380:	89 81       	ldd	r24, Y+1	; 0x01
   10382:	08 2f       	mov	r16, r24
   10384:	10 e0       	ldi	r17, 0x00	; 0
   10386:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
   1038a:	28 2f       	mov	r18, r24
   1038c:	ce 01       	movw	r24, r28
   1038e:	04 96       	adiw	r24, 0x04	; 4
   10390:	80 0f       	add	r24, r16
   10392:	91 1f       	adc	r25, r17
   10394:	fc 01       	movw	r30, r24
   10396:	20 83       	st	Z, r18
   10398:	89 81       	ldd	r24, Y+1	; 0x01
   1039a:	8f 5f       	subi	r24, 0xFF	; 255
   1039c:	89 83       	std	Y+1, r24	; 0x01
   1039e:	89 81       	ldd	r24, Y+1	; 0x01
   103a0:	84 30       	cpi	r24, 0x04	; 4
   103a2:	70 f3       	brcs	.-36     	; 0x10380 <disk_initialize+0x100>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
   103a4:	8c 81       	ldd	r24, Y+4	; 0x04
   103a6:	88 2f       	mov	r24, r24
   103a8:	90 e0       	ldi	r25, 0x00	; 0
   103aa:	80 74       	andi	r24, 0x40	; 64
   103ac:	90 70       	andi	r25, 0x00	; 0
   103ae:	00 97       	sbiw	r24, 0x00	; 0
   103b0:	11 f0       	breq	.+4      	; 0x103b6 <disk_initialize+0x136>
   103b2:	8c e0       	ldi	r24, 0x0C	; 12
   103b4:	01 c0       	rjmp	.+2      	; 0x103b8 <disk_initialize+0x138>
   103b6:	84 e0       	ldi	r24, 0x04	; 4
   103b8:	8b 83       	std	Y+3, r24	; 0x03
   103ba:	2c c0       	rjmp	.+88     	; 0x10414 <disk_initialize+0x194>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
   103bc:	89 ea       	ldi	r24, 0xA9	; 169
   103be:	40 e0       	ldi	r20, 0x00	; 0
   103c0:	50 e0       	ldi	r21, 0x00	; 0
   103c2:	ba 01       	movw	r22, r20
   103c4:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   103c8:	82 30       	cpi	r24, 0x02	; 2
   103ca:	28 f4       	brcc	.+10     	; 0x103d6 <disk_initialize+0x156>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
   103cc:	82 e0       	ldi	r24, 0x02	; 2
   103ce:	8b 83       	std	Y+3, r24	; 0x03
   103d0:	89 ea       	ldi	r24, 0xA9	; 169
   103d2:	8a 83       	std	Y+2, r24	; 0x02
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
   103d4:	05 c0       	rjmp	.+10     	; 0x103e0 <disk_initialize+0x160>
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
   103d6:	81 e0       	ldi	r24, 0x01	; 1
   103d8:	8b 83       	std	Y+3, r24	; 0x03
   103da:	81 e0       	ldi	r24, 0x01	; 1
   103dc:	8a 83       	std	Y+2, r24	; 0x02
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
   103de:	00 00       	nop
   103e0:	80 91 b8 01 	lds	r24, 0x01B8
   103e4:	88 23       	and	r24, r24
   103e6:	41 f0       	breq	.+16     	; 0x103f8 <disk_initialize+0x178>
   103e8:	8a 81       	ldd	r24, Y+2	; 0x02
   103ea:	40 e0       	ldi	r20, 0x00	; 0
   103ec:	50 e0       	ldi	r21, 0x00	; 0
   103ee:	ba 01       	movw	r22, r20
   103f0:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   103f4:	88 23       	and	r24, r24
   103f6:	a1 f7       	brne	.-24     	; 0x103e0 <disk_initialize+0x160>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
   103f8:	80 91 b8 01 	lds	r24, 0x01B8
   103fc:	88 23       	and	r24, r24
   103fe:	49 f0       	breq	.+18     	; 0x10412 <disk_initialize+0x192>
   10400:	80 e1       	ldi	r24, 0x10	; 16
   10402:	40 e0       	ldi	r20, 0x00	; 0
   10404:	52 e0       	ldi	r21, 0x02	; 2
   10406:	60 e0       	ldi	r22, 0x00	; 0
   10408:	70 e0       	ldi	r23, 0x00	; 0
   1040a:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   1040e:	88 23       	and	r24, r24
   10410:	09 f0       	breq	.+2      	; 0x10414 <disk_initialize+0x194>
				ty = 0;
   10412:	1b 82       	std	Y+3, r1	; 0x03
		}
	}
	CardType = ty;
   10414:	8b 81       	ldd	r24, Y+3	; 0x03
   10416:	80 93 ba 01 	sts	0x01BA, r24
	deselect();
   1041a:	0e 94 fd 7e 	call	0xfdfa	; 0xfdfa <deselect>

	if (ty) {			/* Initialization succeded */
   1041e:	8b 81       	ldd	r24, Y+3	; 0x03
   10420:	88 23       	and	r24, r24
   10422:	59 f0       	breq	.+22     	; 0x1043a <disk_initialize+0x1ba>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
   10424:	80 91 0f 01 	lds	r24, 0x010F
   10428:	8e 7f       	andi	r24, 0xFE	; 254
   1042a:	80 93 0f 01 	sts	0x010F, r24
		FCLK_FAST();
   1042e:	8c e4       	ldi	r24, 0x4C	; 76
   10430:	90 e0       	ldi	r25, 0x00	; 0
   10432:	20 e5       	ldi	r18, 0x50	; 80
   10434:	fc 01       	movw	r30, r24
   10436:	20 83       	st	Z, r18
   10438:	02 c0       	rjmp	.+4      	; 0x1043e <disk_initialize+0x1be>
	} else {			/* Initialization failed */
		power_off();
   1043a:	0e 94 63 7f 	call	0xfec6	; 0xfec6 <power_off>
	}

	return Stat;
   1043e:	80 91 0f 01 	lds	r24, 0x010F
}
   10442:	28 96       	adiw	r28, 0x08	; 8
   10444:	0f b6       	in	r0, 0x3f	; 63
   10446:	f8 94       	cli
   10448:	de bf       	out	0x3e, r29	; 62
   1044a:	0f be       	out	0x3f, r0	; 63
   1044c:	cd bf       	out	0x3d, r28	; 61
   1044e:	cf 91       	pop	r28
   10450:	df 91       	pop	r29
   10452:	1f 91       	pop	r17
   10454:	0f 91       	pop	r16
   10456:	08 95       	ret

00010458 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
   10458:	df 93       	push	r29
   1045a:	cf 93       	push	r28
   1045c:	0f 92       	push	r0
   1045e:	cd b7       	in	r28, 0x3d	; 61
   10460:	de b7       	in	r29, 0x3e	; 62
   10462:	89 83       	std	Y+1, r24	; 0x01
	if (drv) return STA_NOINIT;		/* Supports only single drive */
   10464:	89 81       	ldd	r24, Y+1	; 0x01
   10466:	88 23       	and	r24, r24
   10468:	11 f0       	breq	.+4      	; 0x1046e <disk_status+0x16>
   1046a:	81 e0       	ldi	r24, 0x01	; 1
   1046c:	02 c0       	rjmp	.+4      	; 0x10472 <disk_status+0x1a>
	return Stat;
   1046e:	80 91 0f 01 	lds	r24, 0x010F
}
   10472:	0f 90       	pop	r0
   10474:	cf 91       	pop	r28
   10476:	df 91       	pop	r29
   10478:	08 95       	ret

0001047a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
   1047a:	0f 93       	push	r16
   1047c:	df 93       	push	r29
   1047e:	cf 93       	push	r28
   10480:	cd b7       	in	r28, 0x3d	; 61
   10482:	de b7       	in	r29, 0x3e	; 62
   10484:	28 97       	sbiw	r28, 0x08	; 8
   10486:	0f b6       	in	r0, 0x3f	; 63
   10488:	f8 94       	cli
   1048a:	de bf       	out	0x3e, r29	; 62
   1048c:	0f be       	out	0x3f, r0	; 63
   1048e:	cd bf       	out	0x3d, r28	; 61
   10490:	89 83       	std	Y+1, r24	; 0x01
   10492:	7b 83       	std	Y+3, r23	; 0x03
   10494:	6a 83       	std	Y+2, r22	; 0x02
   10496:	2c 83       	std	Y+4, r18	; 0x04
   10498:	3d 83       	std	Y+5, r19	; 0x05
   1049a:	4e 83       	std	Y+6, r20	; 0x06
   1049c:	5f 83       	std	Y+7, r21	; 0x07
   1049e:	08 87       	std	Y+8, r16	; 0x08
	if (drv || !count) return RES_PARERR;
   104a0:	89 81       	ldd	r24, Y+1	; 0x01
   104a2:	88 23       	and	r24, r24
   104a4:	19 f4       	brne	.+6      	; 0x104ac <disk_read+0x32>
   104a6:	88 85       	ldd	r24, Y+8	; 0x08
   104a8:	88 23       	and	r24, r24
   104aa:	11 f4       	brne	.+4      	; 0x104b0 <disk_read+0x36>
   104ac:	84 e0       	ldi	r24, 0x04	; 4
   104ae:	69 c0       	rjmp	.+210    	; 0x10582 <disk_read+0x108>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
   104b0:	80 91 0f 01 	lds	r24, 0x010F
   104b4:	88 2f       	mov	r24, r24
   104b6:	90 e0       	ldi	r25, 0x00	; 0
   104b8:	81 70       	andi	r24, 0x01	; 1
   104ba:	90 70       	andi	r25, 0x00	; 0
   104bc:	88 23       	and	r24, r24
   104be:	11 f0       	breq	.+4      	; 0x104c4 <disk_read+0x4a>
   104c0:	83 e0       	ldi	r24, 0x03	; 3
   104c2:	5f c0       	rjmp	.+190    	; 0x10582 <disk_read+0x108>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
   104c4:	80 91 ba 01 	lds	r24, 0x01BA
   104c8:	88 2f       	mov	r24, r24
   104ca:	90 e0       	ldi	r25, 0x00	; 0
   104cc:	88 70       	andi	r24, 0x08	; 8
   104ce:	90 70       	andi	r25, 0x00	; 0
   104d0:	00 97       	sbiw	r24, 0x00	; 0
   104d2:	89 f4       	brne	.+34     	; 0x104f6 <disk_read+0x7c>
   104d4:	8c 81       	ldd	r24, Y+4	; 0x04
   104d6:	9d 81       	ldd	r25, Y+5	; 0x05
   104d8:	ae 81       	ldd	r26, Y+6	; 0x06
   104da:	bf 81       	ldd	r27, Y+7	; 0x07
   104dc:	07 2e       	mov	r0, r23
   104de:	79 e0       	ldi	r23, 0x09	; 9
   104e0:	88 0f       	add	r24, r24
   104e2:	99 1f       	adc	r25, r25
   104e4:	aa 1f       	adc	r26, r26
   104e6:	bb 1f       	adc	r27, r27
   104e8:	7a 95       	dec	r23
   104ea:	d1 f7       	brne	.-12     	; 0x104e0 <disk_read+0x66>
   104ec:	70 2d       	mov	r23, r0
   104ee:	8c 83       	std	Y+4, r24	; 0x04
   104f0:	9d 83       	std	Y+5, r25	; 0x05
   104f2:	ae 83       	std	Y+6, r26	; 0x06
   104f4:	bf 83       	std	Y+7, r27	; 0x07

	if (count == 1) {	/* Single block read */
   104f6:	88 85       	ldd	r24, Y+8	; 0x08
   104f8:	81 30       	cpi	r24, 0x01	; 1
   104fa:	a9 f4       	brne	.+42     	; 0x10526 <disk_read+0xac>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
   104fc:	2c 81       	ldd	r18, Y+4	; 0x04
   104fe:	3d 81       	ldd	r19, Y+5	; 0x05
   10500:	4e 81       	ldd	r20, Y+6	; 0x06
   10502:	5f 81       	ldd	r21, Y+7	; 0x07
   10504:	81 e1       	ldi	r24, 0x11	; 17
   10506:	ba 01       	movw	r22, r20
   10508:	a9 01       	movw	r20, r18
   1050a:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   1050e:	88 23       	and	r24, r24
   10510:	89 f5       	brne	.+98     	; 0x10574 <disk_read+0xfa>
			&& rcvr_datablock(buff, 512))
   10512:	8a 81       	ldd	r24, Y+2	; 0x02
   10514:	9b 81       	ldd	r25, Y+3	; 0x03
   10516:	60 e0       	ldi	r22, 0x00	; 0
   10518:	72 e0       	ldi	r23, 0x02	; 2
   1051a:	0e 94 86 7f 	call	0xff0c	; 0xff0c <rcvr_datablock>
   1051e:	00 97       	sbiw	r24, 0x00	; 0
   10520:	49 f1       	breq	.+82     	; 0x10574 <disk_read+0xfa>
			count = 0;
   10522:	18 86       	std	Y+8, r1	; 0x08
   10524:	27 c0       	rjmp	.+78     	; 0x10574 <disk_read+0xfa>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
   10526:	2c 81       	ldd	r18, Y+4	; 0x04
   10528:	3d 81       	ldd	r19, Y+5	; 0x05
   1052a:	4e 81       	ldd	r20, Y+6	; 0x06
   1052c:	5f 81       	ldd	r21, Y+7	; 0x07
   1052e:	82 e1       	ldi	r24, 0x12	; 18
   10530:	ba 01       	movw	r22, r20
   10532:	a9 01       	movw	r20, r18
   10534:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   10538:	88 23       	and	r24, r24
   1053a:	e1 f4       	brne	.+56     	; 0x10574 <disk_read+0xfa>
			do {
				if (!rcvr_datablock(buff, 512)) break;
   1053c:	8a 81       	ldd	r24, Y+2	; 0x02
   1053e:	9b 81       	ldd	r25, Y+3	; 0x03
   10540:	60 e0       	ldi	r22, 0x00	; 0
   10542:	72 e0       	ldi	r23, 0x02	; 2
   10544:	0e 94 86 7f 	call	0xff0c	; 0xff0c <rcvr_datablock>
   10548:	00 97       	sbiw	r24, 0x00	; 0
   1054a:	69 f0       	breq	.+26     	; 0x10566 <disk_read+0xec>
				buff += 512;
   1054c:	8a 81       	ldd	r24, Y+2	; 0x02
   1054e:	9b 81       	ldd	r25, Y+3	; 0x03
   10550:	80 50       	subi	r24, 0x00	; 0
   10552:	9e 4f       	sbci	r25, 0xFE	; 254
   10554:	9b 83       	std	Y+3, r25	; 0x03
   10556:	8a 83       	std	Y+2, r24	; 0x02
			} while (--count);
   10558:	88 85       	ldd	r24, Y+8	; 0x08
   1055a:	81 50       	subi	r24, 0x01	; 1
   1055c:	88 87       	std	Y+8, r24	; 0x08
   1055e:	88 85       	ldd	r24, Y+8	; 0x08
   10560:	88 23       	and	r24, r24
   10562:	61 f7       	brne	.-40     	; 0x1053c <disk_read+0xc2>
   10564:	01 c0       	rjmp	.+2      	; 0x10568 <disk_read+0xee>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
   10566:	00 00       	nop
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
   10568:	8c e0       	ldi	r24, 0x0C	; 12
   1056a:	40 e0       	ldi	r20, 0x00	; 0
   1056c:	50 e0       	ldi	r21, 0x00	; 0
   1056e:	ba 01       	movw	r22, r20
   10570:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
		}
	}
	deselect();
   10574:	0e 94 fd 7e 	call	0xfdfa	; 0xfdfa <deselect>

	return count ? RES_ERROR : RES_OK;
   10578:	81 e0       	ldi	r24, 0x01	; 1
   1057a:	98 85       	ldd	r25, Y+8	; 0x08
   1057c:	99 23       	and	r25, r25
   1057e:	09 f4       	brne	.+2      	; 0x10582 <disk_read+0x108>
   10580:	80 e0       	ldi	r24, 0x00	; 0
}
   10582:	28 96       	adiw	r28, 0x08	; 8
   10584:	0f b6       	in	r0, 0x3f	; 63
   10586:	f8 94       	cli
   10588:	de bf       	out	0x3e, r29	; 62
   1058a:	0f be       	out	0x3f, r0	; 63
   1058c:	cd bf       	out	0x3d, r28	; 61
   1058e:	cf 91       	pop	r28
   10590:	df 91       	pop	r29
   10592:	0f 91       	pop	r16
   10594:	08 95       	ret

00010596 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
   10596:	0f 93       	push	r16
   10598:	df 93       	push	r29
   1059a:	cf 93       	push	r28
   1059c:	cd b7       	in	r28, 0x3d	; 61
   1059e:	de b7       	in	r29, 0x3e	; 62
   105a0:	28 97       	sbiw	r28, 0x08	; 8
   105a2:	0f b6       	in	r0, 0x3f	; 63
   105a4:	f8 94       	cli
   105a6:	de bf       	out	0x3e, r29	; 62
   105a8:	0f be       	out	0x3f, r0	; 63
   105aa:	cd bf       	out	0x3d, r28	; 61
   105ac:	89 83       	std	Y+1, r24	; 0x01
   105ae:	7b 83       	std	Y+3, r23	; 0x03
   105b0:	6a 83       	std	Y+2, r22	; 0x02
   105b2:	2c 83       	std	Y+4, r18	; 0x04
   105b4:	3d 83       	std	Y+5, r19	; 0x05
   105b6:	4e 83       	std	Y+6, r20	; 0x06
   105b8:	5f 83       	std	Y+7, r21	; 0x07
   105ba:	08 87       	std	Y+8, r16	; 0x08
	if (drv || !count) return RES_PARERR;
   105bc:	89 81       	ldd	r24, Y+1	; 0x01
   105be:	88 23       	and	r24, r24
   105c0:	19 f4       	brne	.+6      	; 0x105c8 <disk_write+0x32>
   105c2:	88 85       	ldd	r24, Y+8	; 0x08
   105c4:	88 23       	and	r24, r24
   105c6:	11 f4       	brne	.+4      	; 0x105cc <disk_write+0x36>
   105c8:	84 e0       	ldi	r24, 0x04	; 4
   105ca:	87 c0       	rjmp	.+270    	; 0x106da <disk_write+0x144>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
   105cc:	80 91 0f 01 	lds	r24, 0x010F
   105d0:	88 2f       	mov	r24, r24
   105d2:	90 e0       	ldi	r25, 0x00	; 0
   105d4:	81 70       	andi	r24, 0x01	; 1
   105d6:	90 70       	andi	r25, 0x00	; 0
   105d8:	88 23       	and	r24, r24
   105da:	11 f0       	breq	.+4      	; 0x105e0 <disk_write+0x4a>
   105dc:	83 e0       	ldi	r24, 0x03	; 3
   105de:	7d c0       	rjmp	.+250    	; 0x106da <disk_write+0x144>
	if (Stat & STA_PROTECT) return RES_WRPRT;
   105e0:	80 91 0f 01 	lds	r24, 0x010F
   105e4:	88 2f       	mov	r24, r24
   105e6:	90 e0       	ldi	r25, 0x00	; 0
   105e8:	84 70       	andi	r24, 0x04	; 4
   105ea:	90 70       	andi	r25, 0x00	; 0
   105ec:	00 97       	sbiw	r24, 0x00	; 0
   105ee:	11 f0       	breq	.+4      	; 0x105f4 <disk_write+0x5e>
   105f0:	82 e0       	ldi	r24, 0x02	; 2
   105f2:	73 c0       	rjmp	.+230    	; 0x106da <disk_write+0x144>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
   105f4:	80 91 ba 01 	lds	r24, 0x01BA
   105f8:	88 2f       	mov	r24, r24
   105fa:	90 e0       	ldi	r25, 0x00	; 0
   105fc:	88 70       	andi	r24, 0x08	; 8
   105fe:	90 70       	andi	r25, 0x00	; 0
   10600:	00 97       	sbiw	r24, 0x00	; 0
   10602:	89 f4       	brne	.+34     	; 0x10626 <disk_write+0x90>
   10604:	8c 81       	ldd	r24, Y+4	; 0x04
   10606:	9d 81       	ldd	r25, Y+5	; 0x05
   10608:	ae 81       	ldd	r26, Y+6	; 0x06
   1060a:	bf 81       	ldd	r27, Y+7	; 0x07
   1060c:	07 2e       	mov	r0, r23
   1060e:	79 e0       	ldi	r23, 0x09	; 9
   10610:	88 0f       	add	r24, r24
   10612:	99 1f       	adc	r25, r25
   10614:	aa 1f       	adc	r26, r26
   10616:	bb 1f       	adc	r27, r27
   10618:	7a 95       	dec	r23
   1061a:	d1 f7       	brne	.-12     	; 0x10610 <disk_write+0x7a>
   1061c:	70 2d       	mov	r23, r0
   1061e:	8c 83       	std	Y+4, r24	; 0x04
   10620:	9d 83       	std	Y+5, r25	; 0x05
   10622:	ae 83       	std	Y+6, r26	; 0x06
   10624:	bf 83       	std	Y+7, r27	; 0x07

	if (count == 1) {	/* Single block write */
   10626:	88 85       	ldd	r24, Y+8	; 0x08
   10628:	81 30       	cpi	r24, 0x01	; 1
   1062a:	a9 f4       	brne	.+42     	; 0x10656 <disk_write+0xc0>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
   1062c:	2c 81       	ldd	r18, Y+4	; 0x04
   1062e:	3d 81       	ldd	r19, Y+5	; 0x05
   10630:	4e 81       	ldd	r20, Y+6	; 0x06
   10632:	5f 81       	ldd	r21, Y+7	; 0x07
   10634:	88 e1       	ldi	r24, 0x18	; 24
   10636:	ba 01       	movw	r22, r20
   10638:	a9 01       	movw	r20, r18
   1063a:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   1063e:	88 23       	and	r24, r24
   10640:	09 f0       	breq	.+2      	; 0x10644 <disk_write+0xae>
   10642:	44 c0       	rjmp	.+136    	; 0x106cc <disk_write+0x136>
			&& xmit_datablock(buff, 0xFE))
   10644:	8a 81       	ldd	r24, Y+2	; 0x02
   10646:	9b 81       	ldd	r25, Y+3	; 0x03
   10648:	6e ef       	ldi	r22, 0xFE	; 254
   1064a:	0e 94 1c 80 	call	0x10038	; 0x10038 <xmit_datablock>
   1064e:	00 97       	sbiw	r24, 0x00	; 0
   10650:	e9 f1       	breq	.+122    	; 0x106cc <disk_write+0x136>
			count = 0;
   10652:	18 86       	std	Y+8, r1	; 0x08
   10654:	3b c0       	rjmp	.+118    	; 0x106cc <disk_write+0x136>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
   10656:	80 91 ba 01 	lds	r24, 0x01BA
   1065a:	88 2f       	mov	r24, r24
   1065c:	90 e0       	ldi	r25, 0x00	; 0
   1065e:	86 70       	andi	r24, 0x06	; 6
   10660:	90 70       	andi	r25, 0x00	; 0
   10662:	00 97       	sbiw	r24, 0x00	; 0
   10664:	51 f0       	breq	.+20     	; 0x1067a <disk_write+0xe4>
   10666:	88 85       	ldd	r24, Y+8	; 0x08
   10668:	28 2f       	mov	r18, r24
   1066a:	30 e0       	ldi	r19, 0x00	; 0
   1066c:	40 e0       	ldi	r20, 0x00	; 0
   1066e:	50 e0       	ldi	r21, 0x00	; 0
   10670:	87 e9       	ldi	r24, 0x97	; 151
   10672:	ba 01       	movw	r22, r20
   10674:	a9 01       	movw	r20, r18
   10676:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
   1067a:	2c 81       	ldd	r18, Y+4	; 0x04
   1067c:	3d 81       	ldd	r19, Y+5	; 0x05
   1067e:	4e 81       	ldd	r20, Y+6	; 0x06
   10680:	5f 81       	ldd	r21, Y+7	; 0x07
   10682:	89 e1       	ldi	r24, 0x19	; 25
   10684:	ba 01       	movw	r22, r20
   10686:	a9 01       	movw	r20, r18
   10688:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   1068c:	88 23       	and	r24, r24
   1068e:	f1 f4       	brne	.+60     	; 0x106cc <disk_write+0x136>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
   10690:	8a 81       	ldd	r24, Y+2	; 0x02
   10692:	9b 81       	ldd	r25, Y+3	; 0x03
   10694:	6c ef       	ldi	r22, 0xFC	; 252
   10696:	0e 94 1c 80 	call	0x10038	; 0x10038 <xmit_datablock>
   1069a:	00 97       	sbiw	r24, 0x00	; 0
   1069c:	69 f0       	breq	.+26     	; 0x106b8 <disk_write+0x122>
				buff += 512;
   1069e:	8a 81       	ldd	r24, Y+2	; 0x02
   106a0:	9b 81       	ldd	r25, Y+3	; 0x03
   106a2:	80 50       	subi	r24, 0x00	; 0
   106a4:	9e 4f       	sbci	r25, 0xFE	; 254
   106a6:	9b 83       	std	Y+3, r25	; 0x03
   106a8:	8a 83       	std	Y+2, r24	; 0x02
			} while (--count);
   106aa:	88 85       	ldd	r24, Y+8	; 0x08
   106ac:	81 50       	subi	r24, 0x01	; 1
   106ae:	88 87       	std	Y+8, r24	; 0x08
   106b0:	88 85       	ldd	r24, Y+8	; 0x08
   106b2:	88 23       	and	r24, r24
   106b4:	69 f7       	brne	.-38     	; 0x10690 <disk_write+0xfa>
   106b6:	01 c0       	rjmp	.+2      	; 0x106ba <disk_write+0x124>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
   106b8:	00 00       	nop
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
   106ba:	80 e0       	ldi	r24, 0x00	; 0
   106bc:	90 e0       	ldi	r25, 0x00	; 0
   106be:	6d ef       	ldi	r22, 0xFD	; 253
   106c0:	0e 94 1c 80 	call	0x10038	; 0x10038 <xmit_datablock>
   106c4:	00 97       	sbiw	r24, 0x00	; 0
   106c6:	11 f4       	brne	.+4      	; 0x106cc <disk_write+0x136>
				count = 1;
   106c8:	81 e0       	ldi	r24, 0x01	; 1
   106ca:	88 87       	std	Y+8, r24	; 0x08
		}
	}
	deselect();
   106cc:	0e 94 fd 7e 	call	0xfdfa	; 0xfdfa <deselect>

	return count ? RES_ERROR : RES_OK;
   106d0:	81 e0       	ldi	r24, 0x01	; 1
   106d2:	98 85       	ldd	r25, Y+8	; 0x08
   106d4:	99 23       	and	r25, r25
   106d6:	09 f4       	brne	.+2      	; 0x106da <disk_write+0x144>
   106d8:	80 e0       	ldi	r24, 0x00	; 0
}
   106da:	28 96       	adiw	r28, 0x08	; 8
   106dc:	0f b6       	in	r0, 0x3f	; 63
   106de:	f8 94       	cli
   106e0:	de bf       	out	0x3e, r29	; 62
   106e2:	0f be       	out	0x3f, r0	; 63
   106e4:	cd bf       	out	0x3d, r28	; 61
   106e6:	cf 91       	pop	r28
   106e8:	df 91       	pop	r29
   106ea:	0f 91       	pop	r16
   106ec:	08 95       	ret

000106ee <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
   106ee:	0f 93       	push	r16
   106f0:	1f 93       	push	r17
   106f2:	df 93       	push	r29
   106f4:	cf 93       	push	r28
   106f6:	cd b7       	in	r28, 0x3d	; 61
   106f8:	de b7       	in	r29, 0x3e	; 62
   106fa:	6a 97       	sbiw	r28, 0x1a	; 26
   106fc:	0f b6       	in	r0, 0x3f	; 63
   106fe:	f8 94       	cli
   10700:	de bf       	out	0x3e, r29	; 62
   10702:	0f be       	out	0x3f, r0	; 63
   10704:	cd bf       	out	0x3d, r28	; 61
   10706:	8f 8b       	std	Y+23, r24	; 0x17
   10708:	68 8f       	std	Y+24, r22	; 0x18
   1070a:	5a 8f       	std	Y+26, r21	; 0x1a
   1070c:	49 8f       	std	Y+25, r20	; 0x19
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
   1070e:	89 8d       	ldd	r24, Y+25	; 0x19
   10710:	9a 8d       	ldd	r25, Y+26	; 0x1a
   10712:	9c 83       	std	Y+4, r25	; 0x04
   10714:	8b 83       	std	Y+3, r24	; 0x03
	WORD csize;


	if (drv) return RES_PARERR;
   10716:	8f 89       	ldd	r24, Y+23	; 0x17
   10718:	88 23       	and	r24, r24
   1071a:	11 f0       	breq	.+4      	; 0x10720 <disk_ioctl+0x32>
   1071c:	84 e0       	ldi	r24, 0x04	; 4
   1071e:	32 c2       	rjmp	.+1124   	; 0x10b84 <disk_ioctl+0x496>

	res = RES_ERROR;
   10720:	81 e0       	ldi	r24, 0x01	; 1
   10722:	89 83       	std	Y+1, r24	; 0x01

	if (ctrl == CTRL_POWER) {
   10724:	88 8d       	ldd	r24, Y+24	; 0x18
   10726:	85 30       	cpi	r24, 0x05	; 5
   10728:	f9 f4       	brne	.+62     	; 0x10768 <disk_ioctl+0x7a>
		switch (ptr[0]) {
   1072a:	8b 81       	ldd	r24, Y+3	; 0x03
   1072c:	9c 81       	ldd	r25, Y+4	; 0x04
   1072e:	fc 01       	movw	r30, r24
   10730:	80 81       	ld	r24, Z
   10732:	88 2f       	mov	r24, r24
   10734:	90 e0       	ldi	r25, 0x00	; 0
   10736:	00 97       	sbiw	r24, 0x00	; 0
   10738:	21 f0       	breq	.+8      	; 0x10742 <disk_ioctl+0x54>
   1073a:	81 30       	cpi	r24, 0x01	; 1
   1073c:	91 05       	cpc	r25, r1
   1073e:	29 f0       	breq	.+10     	; 0x1074a <disk_ioctl+0x5c>
   10740:	10 c0       	rjmp	.+32     	; 0x10762 <disk_ioctl+0x74>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
   10742:	0e 94 63 7f 	call	0xfec6	; 0xfec6 <power_off>
			res = RES_OK;
   10746:	19 82       	std	Y+1, r1	; 0x01
			break;
   10748:	1c c2       	rjmp	.+1080   	; 0x10b82 <disk_ioctl+0x494>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
   1074a:	8b 81       	ldd	r24, Y+3	; 0x03
   1074c:	9c 81       	ldd	r25, Y+4	; 0x04
   1074e:	8c 01       	movw	r16, r24
   10750:	0f 5f       	subi	r16, 0xFF	; 255
   10752:	1f 4f       	sbci	r17, 0xFF	; 255
   10754:	0e 94 2c 7f 	call	0xfe58	; 0xfe58 <power_status>
   10758:	f8 01       	movw	r30, r16
   1075a:	80 83       	st	Z, r24
			res = RES_OK;
   1075c:	19 82       	std	Y+1, r1	; 0x01
			break;
   1075e:	00 00       	nop
   10760:	10 c2       	rjmp	.+1056   	; 0x10b82 <disk_ioctl+0x494>
		default :
			res = RES_PARERR;
   10762:	84 e0       	ldi	r24, 0x04	; 4
   10764:	89 83       	std	Y+1, r24	; 0x01
   10766:	0d c2       	rjmp	.+1050   	; 0x10b82 <disk_ioctl+0x494>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
   10768:	80 91 0f 01 	lds	r24, 0x010F
   1076c:	88 2f       	mov	r24, r24
   1076e:	90 e0       	ldi	r25, 0x00	; 0
   10770:	81 70       	andi	r24, 0x01	; 1
   10772:	90 70       	andi	r25, 0x00	; 0
   10774:	88 23       	and	r24, r24
   10776:	11 f0       	breq	.+4      	; 0x1077c <disk_ioctl+0x8e>
   10778:	83 e0       	ldi	r24, 0x03	; 3
   1077a:	04 c2       	rjmp	.+1032   	; 0x10b84 <disk_ioctl+0x496>

		switch (ctrl) {
   1077c:	88 8d       	ldd	r24, Y+24	; 0x18
   1077e:	88 2f       	mov	r24, r24
   10780:	90 e0       	ldi	r25, 0x00	; 0
   10782:	8a 30       	cpi	r24, 0x0A	; 10
   10784:	91 05       	cpc	r25, r1
   10786:	09 f4       	brne	.+2      	; 0x1078a <disk_ioctl+0x9c>
   10788:	78 c1       	rjmp	.+752    	; 0x10a7a <disk_ioctl+0x38c>
   1078a:	8b 30       	cpi	r24, 0x0B	; 11
   1078c:	91 05       	cpc	r25, r1
   1078e:	94 f4       	brge	.+36     	; 0x107b4 <disk_ioctl+0xc6>
   10790:	81 30       	cpi	r24, 0x01	; 1
   10792:	91 05       	cpc	r25, r1
   10794:	49 f1       	breq	.+82     	; 0x107e8 <disk_ioctl+0xfa>
   10796:	82 30       	cpi	r24, 0x02	; 2
   10798:	91 05       	cpc	r25, r1
   1079a:	1c f4       	brge	.+6      	; 0x107a2 <disk_ioctl+0xb4>
   1079c:	00 97       	sbiw	r24, 0x00	; 0
   1079e:	d9 f0       	breq	.+54     	; 0x107d6 <disk_ioctl+0xe8>
   107a0:	d0 c1       	rjmp	.+928    	; 0x10b42 <disk_ioctl+0x454>
   107a2:	82 30       	cpi	r24, 0x02	; 2
   107a4:	91 05       	cpc	r25, r1
   107a6:	09 f4       	brne	.+2      	; 0x107aa <disk_ioctl+0xbc>
   107a8:	a2 c0       	rjmp	.+324    	; 0x108ee <disk_ioctl+0x200>
   107aa:	83 30       	cpi	r24, 0x03	; 3
   107ac:	91 05       	cpc	r25, r1
   107ae:	09 f4       	brne	.+2      	; 0x107b2 <disk_ioctl+0xc4>
   107b0:	a7 c0       	rjmp	.+334    	; 0x10900 <disk_ioctl+0x212>
   107b2:	c7 c1       	rjmp	.+910    	; 0x10b42 <disk_ioctl+0x454>
   107b4:	8c 30       	cpi	r24, 0x0C	; 12
   107b6:	91 05       	cpc	r25, r1
   107b8:	09 f4       	brne	.+2      	; 0x107bc <disk_ioctl+0xce>
   107ba:	7b c1       	rjmp	.+758    	; 0x10ab2 <disk_ioctl+0x3c4>
   107bc:	8c 30       	cpi	r24, 0x0C	; 12
   107be:	91 05       	cpc	r25, r1
   107c0:	0c f4       	brge	.+2      	; 0x107c4 <disk_ioctl+0xd6>
   107c2:	63 c1       	rjmp	.+710    	; 0x10a8a <disk_ioctl+0x39c>
   107c4:	8d 30       	cpi	r24, 0x0D	; 13
   107c6:	91 05       	cpc	r25, r1
   107c8:	09 f4       	brne	.+2      	; 0x107cc <disk_ioctl+0xde>
   107ca:	87 c1       	rjmp	.+782    	; 0x10ada <disk_ioctl+0x3ec>
   107cc:	8e 30       	cpi	r24, 0x0E	; 14
   107ce:	91 05       	cpc	r25, r1
   107d0:	09 f4       	brne	.+2      	; 0x107d4 <disk_ioctl+0xe6>
   107d2:	a3 c1       	rjmp	.+838    	; 0x10b1a <disk_ioctl+0x42c>
   107d4:	b6 c1       	rjmp	.+876    	; 0x10b42 <disk_ioctl+0x454>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
   107d6:	0e 94 0f 7f 	call	0xfe1e	; 0xfe1e <select>
   107da:	00 97       	sbiw	r24, 0x00	; 0
   107dc:	09 f4       	brne	.+2      	; 0x107e0 <disk_ioctl+0xf2>
   107de:	b4 c1       	rjmp	.+872    	; 0x10b48 <disk_ioctl+0x45a>
				deselect();
   107e0:	0e 94 fd 7e 	call	0xfdfa	; 0xfdfa <deselect>
				res = RES_OK;
   107e4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
   107e6:	cb c1       	rjmp	.+918    	; 0x10b7e <disk_ioctl+0x490>

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
   107e8:	89 e0       	ldi	r24, 0x09	; 9
   107ea:	40 e0       	ldi	r20, 0x00	; 0
   107ec:	50 e0       	ldi	r21, 0x00	; 0
   107ee:	ba 01       	movw	r22, r20
   107f0:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   107f4:	88 23       	and	r24, r24
   107f6:	09 f0       	breq	.+2      	; 0x107fa <disk_ioctl+0x10c>
   107f8:	a9 c1       	rjmp	.+850    	; 0x10b4c <disk_ioctl+0x45e>
   107fa:	ce 01       	movw	r24, r28
   107fc:	07 96       	adiw	r24, 0x07	; 7
   107fe:	60 e1       	ldi	r22, 0x10	; 16
   10800:	70 e0       	ldi	r23, 0x00	; 0
   10802:	0e 94 86 7f 	call	0xff0c	; 0xff0c <rcvr_datablock>
   10806:	00 97       	sbiw	r24, 0x00	; 0
   10808:	09 f4       	brne	.+2      	; 0x1080c <disk_ioctl+0x11e>
   1080a:	a2 c1       	rjmp	.+836    	; 0x10b50 <disk_ioctl+0x462>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
   1080c:	8f 81       	ldd	r24, Y+7	; 0x07
   1080e:	82 95       	swap	r24
   10810:	86 95       	lsr	r24
   10812:	86 95       	lsr	r24
   10814:	83 70       	andi	r24, 0x03	; 3
   10816:	81 30       	cpi	r24, 0x01	; 1
   10818:	19 f5       	brne	.+70     	; 0x10860 <disk_ioctl+0x172>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
   1081a:	88 89       	ldd	r24, Y+16	; 0x10
   1081c:	28 2f       	mov	r18, r24
   1081e:	30 e0       	ldi	r19, 0x00	; 0
   10820:	8f 85       	ldd	r24, Y+15	; 0x0f
   10822:	88 2f       	mov	r24, r24
   10824:	90 e0       	ldi	r25, 0x00	; 0
   10826:	98 2f       	mov	r25, r24
   10828:	88 27       	eor	r24, r24
   1082a:	82 0f       	add	r24, r18
   1082c:	93 1f       	adc	r25, r19
   1082e:	01 96       	adiw	r24, 0x01	; 1
   10830:	9e 83       	std	Y+6, r25	; 0x06
   10832:	8d 83       	std	Y+5, r24	; 0x05
					*(DWORD*)buff = (DWORD)csize << 10;
   10834:	29 8d       	ldd	r18, Y+25	; 0x19
   10836:	3a 8d       	ldd	r19, Y+26	; 0x1a
   10838:	8d 81       	ldd	r24, Y+5	; 0x05
   1083a:	9e 81       	ldd	r25, Y+6	; 0x06
   1083c:	cc 01       	movw	r24, r24
   1083e:	a0 e0       	ldi	r26, 0x00	; 0
   10840:	b0 e0       	ldi	r27, 0x00	; 0
   10842:	07 2e       	mov	r0, r23
   10844:	7a e0       	ldi	r23, 0x0A	; 10
   10846:	88 0f       	add	r24, r24
   10848:	99 1f       	adc	r25, r25
   1084a:	aa 1f       	adc	r26, r26
   1084c:	bb 1f       	adc	r27, r27
   1084e:	7a 95       	dec	r23
   10850:	d1 f7       	brne	.-12     	; 0x10846 <disk_ioctl+0x158>
   10852:	70 2d       	mov	r23, r0
   10854:	f9 01       	movw	r30, r18
   10856:	80 83       	st	Z, r24
   10858:	91 83       	std	Z+1, r25	; 0x01
   1085a:	a2 83       	std	Z+2, r26	; 0x02
   1085c:	b3 83       	std	Z+3, r27	; 0x03
   1085e:	45 c0       	rjmp	.+138    	; 0x108ea <disk_ioctl+0x1fc>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
   10860:	8c 85       	ldd	r24, Y+12	; 0x0c
   10862:	98 2f       	mov	r25, r24
   10864:	9f 70       	andi	r25, 0x0F	; 15
   10866:	89 89       	ldd	r24, Y+17	; 0x11
   10868:	88 1f       	adc	r24, r24
   1086a:	88 27       	eor	r24, r24
   1086c:	88 1f       	adc	r24, r24
   1086e:	98 0f       	add	r25, r24
   10870:	88 89       	ldd	r24, Y+16	; 0x10
   10872:	83 70       	andi	r24, 0x03	; 3
   10874:	88 0f       	add	r24, r24
   10876:	89 0f       	add	r24, r25
   10878:	8e 5f       	subi	r24, 0xFE	; 254
   1087a:	8a 83       	std	Y+2, r24	; 0x02
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
   1087c:	8f 85       	ldd	r24, Y+15	; 0x0f
   1087e:	82 95       	swap	r24
   10880:	86 95       	lsr	r24
   10882:	86 95       	lsr	r24
   10884:	83 70       	andi	r24, 0x03	; 3
   10886:	28 2f       	mov	r18, r24
   10888:	30 e0       	ldi	r19, 0x00	; 0
   1088a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1088c:	88 2f       	mov	r24, r24
   1088e:	90 e0       	ldi	r25, 0x00	; 0
   10890:	88 0f       	add	r24, r24
   10892:	99 1f       	adc	r25, r25
   10894:	88 0f       	add	r24, r24
   10896:	99 1f       	adc	r25, r25
   10898:	28 0f       	add	r18, r24
   1089a:	39 1f       	adc	r19, r25
   1089c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1089e:	88 2f       	mov	r24, r24
   108a0:	90 e0       	ldi	r25, 0x00	; 0
   108a2:	83 70       	andi	r24, 0x03	; 3
   108a4:	90 70       	andi	r25, 0x00	; 0
   108a6:	98 2f       	mov	r25, r24
   108a8:	88 27       	eor	r24, r24
   108aa:	99 0f       	add	r25, r25
   108ac:	99 0f       	add	r25, r25
   108ae:	82 0f       	add	r24, r18
   108b0:	93 1f       	adc	r25, r19
   108b2:	01 96       	adiw	r24, 0x01	; 1
   108b4:	9e 83       	std	Y+6, r25	; 0x06
   108b6:	8d 83       	std	Y+5, r24	; 0x05
					*(DWORD*)buff = (DWORD)csize << (n - 9);
   108b8:	29 8d       	ldd	r18, Y+25	; 0x19
   108ba:	3a 8d       	ldd	r19, Y+26	; 0x1a
   108bc:	8d 81       	ldd	r24, Y+5	; 0x05
   108be:	9e 81       	ldd	r25, Y+6	; 0x06
   108c0:	cc 01       	movw	r24, r24
   108c2:	a0 e0       	ldi	r26, 0x00	; 0
   108c4:	b0 e0       	ldi	r27, 0x00	; 0
   108c6:	4a 81       	ldd	r20, Y+2	; 0x02
   108c8:	44 2f       	mov	r20, r20
   108ca:	50 e0       	ldi	r21, 0x00	; 0
   108cc:	49 50       	subi	r20, 0x09	; 9
   108ce:	50 40       	sbci	r21, 0x00	; 0
   108d0:	04 2e       	mov	r0, r20
   108d2:	04 c0       	rjmp	.+8      	; 0x108dc <disk_ioctl+0x1ee>
   108d4:	88 0f       	add	r24, r24
   108d6:	99 1f       	adc	r25, r25
   108d8:	aa 1f       	adc	r26, r26
   108da:	bb 1f       	adc	r27, r27
   108dc:	0a 94       	dec	r0
   108de:	d2 f7       	brpl	.-12     	; 0x108d4 <disk_ioctl+0x1e6>
   108e0:	f9 01       	movw	r30, r18
   108e2:	80 83       	st	Z, r24
   108e4:	91 83       	std	Z+1, r25	; 0x01
   108e6:	a2 83       	std	Z+2, r26	; 0x02
   108e8:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
   108ea:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
   108ec:	48 c1       	rjmp	.+656    	; 0x10b7e <disk_ioctl+0x490>

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
   108ee:	89 8d       	ldd	r24, Y+25	; 0x19
   108f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
   108f2:	20 e0       	ldi	r18, 0x00	; 0
   108f4:	32 e0       	ldi	r19, 0x02	; 2
   108f6:	fc 01       	movw	r30, r24
   108f8:	31 83       	std	Z+1, r19	; 0x01
   108fa:	20 83       	st	Z, r18
			res = RES_OK;
   108fc:	19 82       	std	Y+1, r1	; 0x01
			break;
   108fe:	3f c1       	rjmp	.+638    	; 0x10b7e <disk_ioctl+0x490>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
   10900:	80 91 ba 01 	lds	r24, 0x01BA
   10904:	88 2f       	mov	r24, r24
   10906:	90 e0       	ldi	r25, 0x00	; 0
   10908:	84 70       	andi	r24, 0x04	; 4
   1090a:	90 70       	andi	r25, 0x00	; 0
   1090c:	00 97       	sbiw	r24, 0x00	; 0
   1090e:	c9 f1       	breq	.+114    	; 0x10982 <disk_ioctl+0x294>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
   10910:	8d e8       	ldi	r24, 0x8D	; 141
   10912:	40 e0       	ldi	r20, 0x00	; 0
   10914:	50 e0       	ldi	r21, 0x00	; 0
   10916:	ba 01       	movw	r22, r20
   10918:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   1091c:	88 23       	and	r24, r24
   1091e:	09 f0       	breq	.+2      	; 0x10922 <disk_ioctl+0x234>
   10920:	19 c1       	rjmp	.+562    	; 0x10b54 <disk_ioctl+0x466>
					rcvr_spi();
   10922:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
   10926:	ce 01       	movw	r24, r28
   10928:	07 96       	adiw	r24, 0x07	; 7
   1092a:	60 e1       	ldi	r22, 0x10	; 16
   1092c:	70 e0       	ldi	r23, 0x00	; 0
   1092e:	0e 94 86 7f 	call	0xff0c	; 0xff0c <rcvr_datablock>
   10932:	00 97       	sbiw	r24, 0x00	; 0
   10934:	09 f4       	brne	.+2      	; 0x10938 <disk_ioctl+0x24a>
   10936:	10 c1       	rjmp	.+544    	; 0x10b58 <disk_ioctl+0x46a>
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
   10938:	80 e3       	ldi	r24, 0x30	; 48
   1093a:	8a 83       	std	Y+2, r24	; 0x02
   1093c:	05 c0       	rjmp	.+10     	; 0x10948 <disk_ioctl+0x25a>
   1093e:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
   10942:	8a 81       	ldd	r24, Y+2	; 0x02
   10944:	81 50       	subi	r24, 0x01	; 1
   10946:	8a 83       	std	Y+2, r24	; 0x02
   10948:	8a 81       	ldd	r24, Y+2	; 0x02
   1094a:	88 23       	and	r24, r24
   1094c:	c1 f7       	brne	.-16     	; 0x1093e <disk_ioctl+0x250>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
   1094e:	29 8d       	ldd	r18, Y+25	; 0x19
   10950:	3a 8d       	ldd	r19, Y+26	; 0x1a
   10952:	89 89       	ldd	r24, Y+17	; 0x11
   10954:	82 95       	swap	r24
   10956:	8f 70       	andi	r24, 0x0F	; 15
   10958:	48 2f       	mov	r20, r24
   1095a:	50 e0       	ldi	r21, 0x00	; 0
   1095c:	80 e1       	ldi	r24, 0x10	; 16
   1095e:	90 e0       	ldi	r25, 0x00	; 0
   10960:	a0 e0       	ldi	r26, 0x00	; 0
   10962:	b0 e0       	ldi	r27, 0x00	; 0
   10964:	04 2e       	mov	r0, r20
   10966:	04 c0       	rjmp	.+8      	; 0x10970 <disk_ioctl+0x282>
   10968:	88 0f       	add	r24, r24
   1096a:	99 1f       	adc	r25, r25
   1096c:	aa 1f       	adc	r26, r26
   1096e:	bb 1f       	adc	r27, r27
   10970:	0a 94       	dec	r0
   10972:	d2 f7       	brpl	.-12     	; 0x10968 <disk_ioctl+0x27a>
   10974:	f9 01       	movw	r30, r18
   10976:	80 83       	st	Z, r24
   10978:	91 83       	std	Z+1, r25	; 0x01
   1097a:	a2 83       	std	Z+2, r26	; 0x02
   1097c:	b3 83       	std	Z+3, r27	; 0x03
						res = RES_OK;
   1097e:	19 82       	std	Y+1, r1	; 0x01
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
				}
			}
			break;
   10980:	fe c0       	rjmp	.+508    	; 0x10b7e <disk_ioctl+0x490>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
   10982:	89 e0       	ldi	r24, 0x09	; 9
   10984:	40 e0       	ldi	r20, 0x00	; 0
   10986:	50 e0       	ldi	r21, 0x00	; 0
   10988:	ba 01       	movw	r22, r20
   1098a:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   1098e:	88 23       	and	r24, r24
   10990:	09 f0       	breq	.+2      	; 0x10994 <disk_ioctl+0x2a6>
   10992:	e4 c0       	rjmp	.+456    	; 0x10b5c <disk_ioctl+0x46e>
   10994:	ce 01       	movw	r24, r28
   10996:	07 96       	adiw	r24, 0x07	; 7
   10998:	60 e1       	ldi	r22, 0x10	; 16
   1099a:	70 e0       	ldi	r23, 0x00	; 0
   1099c:	0e 94 86 7f 	call	0xff0c	; 0xff0c <rcvr_datablock>
   109a0:	00 97       	sbiw	r24, 0x00	; 0
   109a2:	09 f4       	brne	.+2      	; 0x109a6 <disk_ioctl+0x2b8>
   109a4:	dd c0       	rjmp	.+442    	; 0x10b60 <disk_ioctl+0x472>
					if (CardType & CT_SD1) {	/* SDv1 */
   109a6:	80 91 ba 01 	lds	r24, 0x01BA
   109aa:	88 2f       	mov	r24, r24
   109ac:	90 e0       	ldi	r25, 0x00	; 0
   109ae:	82 70       	andi	r24, 0x02	; 2
   109b0:	90 70       	andi	r25, 0x00	; 0
   109b2:	00 97       	sbiw	r24, 0x00	; 0
   109b4:	61 f1       	breq	.+88     	; 0x10a0e <disk_ioctl+0x320>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
   109b6:	29 8d       	ldd	r18, Y+25	; 0x19
   109b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
   109ba:	89 89       	ldd	r24, Y+17	; 0x11
   109bc:	88 2f       	mov	r24, r24
   109be:	90 e0       	ldi	r25, 0x00	; 0
   109c0:	8f 73       	andi	r24, 0x3F	; 63
   109c2:	90 70       	andi	r25, 0x00	; 0
   109c4:	88 0f       	add	r24, r24
   109c6:	99 1f       	adc	r25, r25
   109c8:	ac 01       	movw	r20, r24
   109ca:	8a 89       	ldd	r24, Y+18	; 0x12
   109cc:	88 1f       	adc	r24, r24
   109ce:	88 27       	eor	r24, r24
   109d0:	88 1f       	adc	r24, r24
   109d2:	88 2f       	mov	r24, r24
   109d4:	90 e0       	ldi	r25, 0x00	; 0
   109d6:	90 70       	andi	r25, 0x00	; 0
   109d8:	84 0f       	add	r24, r20
   109da:	95 1f       	adc	r25, r21
   109dc:	01 96       	adiw	r24, 0x01	; 1
   109de:	4c 89       	ldd	r20, Y+20	; 0x14
   109e0:	42 95       	swap	r20
   109e2:	46 95       	lsr	r20
   109e4:	46 95       	lsr	r20
   109e6:	43 70       	andi	r20, 0x03	; 3
   109e8:	44 2f       	mov	r20, r20
   109ea:	50 e0       	ldi	r21, 0x00	; 0
   109ec:	41 50       	subi	r20, 0x01	; 1
   109ee:	50 40       	sbci	r21, 0x00	; 0
   109f0:	04 2e       	mov	r0, r20
   109f2:	02 c0       	rjmp	.+4      	; 0x109f8 <disk_ioctl+0x30a>
   109f4:	88 0f       	add	r24, r24
   109f6:	99 1f       	adc	r25, r25
   109f8:	0a 94       	dec	r0
   109fa:	e2 f7       	brpl	.-8      	; 0x109f4 <disk_ioctl+0x306>
   109fc:	cc 01       	movw	r24, r24
   109fe:	a0 e0       	ldi	r26, 0x00	; 0
   10a00:	b0 e0       	ldi	r27, 0x00	; 0
   10a02:	f9 01       	movw	r30, r18
   10a04:	80 83       	st	Z, r24
   10a06:	91 83       	std	Z+1, r25	; 0x01
   10a08:	a2 83       	std	Z+2, r26	; 0x02
   10a0a:	b3 83       	std	Z+3, r27	; 0x03
   10a0c:	34 c0       	rjmp	.+104    	; 0x10a76 <disk_ioctl+0x388>
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
   10a0e:	29 8d       	ldd	r18, Y+25	; 0x19
   10a10:	3a 8d       	ldd	r19, Y+26	; 0x1a
   10a12:	89 89       	ldd	r24, Y+17	; 0x11
   10a14:	88 2f       	mov	r24, r24
   10a16:	90 e0       	ldi	r25, 0x00	; 0
   10a18:	8c 77       	andi	r24, 0x7C	; 124
   10a1a:	90 70       	andi	r25, 0x00	; 0
   10a1c:	95 95       	asr	r25
   10a1e:	87 95       	ror	r24
   10a20:	95 95       	asr	r25
   10a22:	87 95       	ror	r24
   10a24:	bc 01       	movw	r22, r24
   10a26:	6f 5f       	subi	r22, 0xFF	; 255
   10a28:	7f 4f       	sbci	r23, 0xFF	; 255
   10a2a:	8a 89       	ldd	r24, Y+18	; 0x12
   10a2c:	88 2f       	mov	r24, r24
   10a2e:	90 e0       	ldi	r25, 0x00	; 0
   10a30:	83 70       	andi	r24, 0x03	; 3
   10a32:	90 70       	andi	r25, 0x00	; 0
   10a34:	ac 01       	movw	r20, r24
   10a36:	44 0f       	add	r20, r20
   10a38:	55 1f       	adc	r21, r21
   10a3a:	44 0f       	add	r20, r20
   10a3c:	55 1f       	adc	r21, r21
   10a3e:	44 0f       	add	r20, r20
   10a40:	55 1f       	adc	r21, r21
   10a42:	8a 89       	ldd	r24, Y+18	; 0x12
   10a44:	82 95       	swap	r24
   10a46:	86 95       	lsr	r24
   10a48:	87 70       	andi	r24, 0x07	; 7
   10a4a:	88 2f       	mov	r24, r24
   10a4c:	90 e0       	ldi	r25, 0x00	; 0
   10a4e:	90 70       	andi	r25, 0x00	; 0
   10a50:	84 0f       	add	r24, r20
   10a52:	95 1f       	adc	r25, r21
   10a54:	01 96       	adiw	r24, 0x01	; 1
   10a56:	ac 01       	movw	r20, r24
   10a58:	64 9f       	mul	r22, r20
   10a5a:	c0 01       	movw	r24, r0
   10a5c:	65 9f       	mul	r22, r21
   10a5e:	90 0d       	add	r25, r0
   10a60:	74 9f       	mul	r23, r20
   10a62:	90 0d       	add	r25, r0
   10a64:	11 24       	eor	r1, r1
   10a66:	cc 01       	movw	r24, r24
   10a68:	a0 e0       	ldi	r26, 0x00	; 0
   10a6a:	b0 e0       	ldi	r27, 0x00	; 0
   10a6c:	f9 01       	movw	r30, r18
   10a6e:	80 83       	st	Z, r24
   10a70:	91 83       	std	Z+1, r25	; 0x01
   10a72:	a2 83       	std	Z+2, r26	; 0x02
   10a74:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
   10a76:	19 82       	std	Y+1, r1	; 0x01
				}
			}
			break;
   10a78:	82 c0       	rjmp	.+260    	; 0x10b7e <disk_ioctl+0x490>

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
   10a7a:	20 91 ba 01 	lds	r18, 0x01BA
   10a7e:	8b 81       	ldd	r24, Y+3	; 0x03
   10a80:	9c 81       	ldd	r25, Y+4	; 0x04
   10a82:	fc 01       	movw	r30, r24
   10a84:	20 83       	st	Z, r18
			res = RES_OK;
   10a86:	19 82       	std	Y+1, r1	; 0x01
			break;
   10a88:	7a c0       	rjmp	.+244    	; 0x10b7e <disk_ioctl+0x490>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
   10a8a:	89 e0       	ldi	r24, 0x09	; 9
   10a8c:	40 e0       	ldi	r20, 0x00	; 0
   10a8e:	50 e0       	ldi	r21, 0x00	; 0
   10a90:	ba 01       	movw	r22, r20
   10a92:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   10a96:	88 23       	and	r24, r24
   10a98:	09 f0       	breq	.+2      	; 0x10a9c <disk_ioctl+0x3ae>
   10a9a:	64 c0       	rjmp	.+200    	; 0x10b64 <disk_ioctl+0x476>
				&& rcvr_datablock(ptr, 16))
   10a9c:	8b 81       	ldd	r24, Y+3	; 0x03
   10a9e:	9c 81       	ldd	r25, Y+4	; 0x04
   10aa0:	60 e1       	ldi	r22, 0x10	; 16
   10aa2:	70 e0       	ldi	r23, 0x00	; 0
   10aa4:	0e 94 86 7f 	call	0xff0c	; 0xff0c <rcvr_datablock>
   10aa8:	00 97       	sbiw	r24, 0x00	; 0
   10aaa:	09 f4       	brne	.+2      	; 0x10aae <disk_ioctl+0x3c0>
   10aac:	5d c0       	rjmp	.+186    	; 0x10b68 <disk_ioctl+0x47a>
				res = RES_OK;
   10aae:	19 82       	std	Y+1, r1	; 0x01
			break;
   10ab0:	66 c0       	rjmp	.+204    	; 0x10b7e <disk_ioctl+0x490>

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
   10ab2:	8a e0       	ldi	r24, 0x0A	; 10
   10ab4:	40 e0       	ldi	r20, 0x00	; 0
   10ab6:	50 e0       	ldi	r21, 0x00	; 0
   10ab8:	ba 01       	movw	r22, r20
   10aba:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   10abe:	88 23       	and	r24, r24
   10ac0:	09 f0       	breq	.+2      	; 0x10ac4 <disk_ioctl+0x3d6>
   10ac2:	54 c0       	rjmp	.+168    	; 0x10b6c <disk_ioctl+0x47e>
				&& rcvr_datablock(ptr, 16))
   10ac4:	8b 81       	ldd	r24, Y+3	; 0x03
   10ac6:	9c 81       	ldd	r25, Y+4	; 0x04
   10ac8:	60 e1       	ldi	r22, 0x10	; 16
   10aca:	70 e0       	ldi	r23, 0x00	; 0
   10acc:	0e 94 86 7f 	call	0xff0c	; 0xff0c <rcvr_datablock>
   10ad0:	00 97       	sbiw	r24, 0x00	; 0
   10ad2:	09 f4       	brne	.+2      	; 0x10ad6 <disk_ioctl+0x3e8>
   10ad4:	4d c0       	rjmp	.+154    	; 0x10b70 <disk_ioctl+0x482>
				res = RES_OK;
   10ad6:	19 82       	std	Y+1, r1	; 0x01
			break;
   10ad8:	52 c0       	rjmp	.+164    	; 0x10b7e <disk_ioctl+0x490>

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
   10ada:	8a e3       	ldi	r24, 0x3A	; 58
   10adc:	40 e0       	ldi	r20, 0x00	; 0
   10ade:	50 e0       	ldi	r21, 0x00	; 0
   10ae0:	ba 01       	movw	r22, r20
   10ae2:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   10ae6:	88 23       	and	r24, r24
   10ae8:	09 f0       	breq	.+2      	; 0x10aec <disk_ioctl+0x3fe>
   10aea:	44 c0       	rjmp	.+136    	; 0x10b74 <disk_ioctl+0x486>
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
   10aec:	84 e0       	ldi	r24, 0x04	; 4
   10aee:	8a 83       	std	Y+2, r24	; 0x02
   10af0:	0f c0       	rjmp	.+30     	; 0x10b10 <disk_ioctl+0x422>
   10af2:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
   10af6:	28 2f       	mov	r18, r24
   10af8:	8b 81       	ldd	r24, Y+3	; 0x03
   10afa:	9c 81       	ldd	r25, Y+4	; 0x04
   10afc:	fc 01       	movw	r30, r24
   10afe:	20 83       	st	Z, r18
   10b00:	8b 81       	ldd	r24, Y+3	; 0x03
   10b02:	9c 81       	ldd	r25, Y+4	; 0x04
   10b04:	01 96       	adiw	r24, 0x01	; 1
   10b06:	9c 83       	std	Y+4, r25	; 0x04
   10b08:	8b 83       	std	Y+3, r24	; 0x03
   10b0a:	8a 81       	ldd	r24, Y+2	; 0x02
   10b0c:	81 50       	subi	r24, 0x01	; 1
   10b0e:	8a 83       	std	Y+2, r24	; 0x02
   10b10:	8a 81       	ldd	r24, Y+2	; 0x02
   10b12:	88 23       	and	r24, r24
   10b14:	71 f7       	brne	.-36     	; 0x10af2 <disk_ioctl+0x404>
				res = RES_OK;
   10b16:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
   10b18:	32 c0       	rjmp	.+100    	; 0x10b7e <disk_ioctl+0x490>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
   10b1a:	8d e8       	ldi	r24, 0x8D	; 141
   10b1c:	40 e0       	ldi	r20, 0x00	; 0
   10b1e:	50 e0       	ldi	r21, 0x00	; 0
   10b20:	ba 01       	movw	r22, r20
   10b22:	0e 94 97 80 	call	0x1012e	; 0x1012e <send_cmd>
   10b26:	88 23       	and	r24, r24
   10b28:	39 f5       	brne	.+78     	; 0x10b78 <disk_ioctl+0x48a>
				rcvr_spi();
   10b2a:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
   10b2e:	8b 81       	ldd	r24, Y+3	; 0x03
   10b30:	9c 81       	ldd	r25, Y+4	; 0x04
   10b32:	60 e4       	ldi	r22, 0x40	; 64
   10b34:	70 e0       	ldi	r23, 0x00	; 0
   10b36:	0e 94 86 7f 	call	0xff0c	; 0xff0c <rcvr_datablock>
   10b3a:	00 97       	sbiw	r24, 0x00	; 0
   10b3c:	f9 f0       	breq	.+62     	; 0x10b7c <disk_ioctl+0x48e>
					res = RES_OK;
   10b3e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
   10b40:	1e c0       	rjmp	.+60     	; 0x10b7e <disk_ioctl+0x490>

		default:
			res = RES_PARERR;
   10b42:	84 e0       	ldi	r24, 0x04	; 4
   10b44:	89 83       	std	Y+1, r24	; 0x01
   10b46:	1b c0       	rjmp	.+54     	; 0x10b7e <disk_ioctl+0x490>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
			}
			break;
   10b48:	00 00       	nop
   10b4a:	19 c0       	rjmp	.+50     	; 0x10b7e <disk_ioctl+0x490>
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
			}
			break;
   10b4c:	00 00       	nop
   10b4e:	17 c0       	rjmp	.+46     	; 0x10b7e <disk_ioctl+0x490>
   10b50:	00 00       	nop
   10b52:	15 c0       	rjmp	.+42     	; 0x10b7e <disk_ioctl+0x490>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
				}
			}
			break;
   10b54:	00 00       	nop
   10b56:	13 c0       	rjmp	.+38     	; 0x10b7e <disk_ioctl+0x490>
   10b58:	00 00       	nop
   10b5a:	11 c0       	rjmp	.+34     	; 0x10b7e <disk_ioctl+0x490>
   10b5c:	00 00       	nop
   10b5e:	0f c0       	rjmp	.+30     	; 0x10b7e <disk_ioctl+0x490>
   10b60:	00 00       	nop
   10b62:	0d c0       	rjmp	.+26     	; 0x10b7e <disk_ioctl+0x490>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;
   10b64:	00 00       	nop
   10b66:	0b c0       	rjmp	.+22     	; 0x10b7e <disk_ioctl+0x490>
   10b68:	00 00       	nop
   10b6a:	09 c0       	rjmp	.+18     	; 0x10b7e <disk_ioctl+0x490>

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;
   10b6c:	00 00       	nop
   10b6e:	07 c0       	rjmp	.+14     	; 0x10b7e <disk_ioctl+0x490>
   10b70:	00 00       	nop
   10b72:	05 c0       	rjmp	.+10     	; 0x10b7e <disk_ioctl+0x490>
		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
				res = RES_OK;
			}
			break;
   10b74:	00 00       	nop
   10b76:	03 c0       	rjmp	.+6      	; 0x10b7e <disk_ioctl+0x490>
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
			}
			break;
   10b78:	00 00       	nop
   10b7a:	01 c0       	rjmp	.+2      	; 0x10b7e <disk_ioctl+0x490>
   10b7c:	00 00       	nop

		default:
			res = RES_PARERR;
		}

		deselect();
   10b7e:	0e 94 fd 7e 	call	0xfdfa	; 0xfdfa <deselect>
	}

	return res;
   10b82:	89 81       	ldd	r24, Y+1	; 0x01
}
   10b84:	6a 96       	adiw	r28, 0x1a	; 26
   10b86:	0f b6       	in	r0, 0x3f	; 63
   10b88:	f8 94       	cli
   10b8a:	de bf       	out	0x3e, r29	; 62
   10b8c:	0f be       	out	0x3f, r0	; 63
   10b8e:	cd bf       	out	0x3d, r28	; 61
   10b90:	cf 91       	pop	r28
   10b92:	df 91       	pop	r29
   10b94:	1f 91       	pop	r17
   10b96:	0f 91       	pop	r16
   10b98:	08 95       	ret

00010b9a <disk_timerproc>:
/* Device Timer Interrupt Procedure                                      */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc (void)
{
   10b9a:	df 93       	push	r29
   10b9c:	cf 93       	push	r28
   10b9e:	00 d0       	rcall	.+0      	; 0x10ba0 <disk_timerproc+0x6>
   10ba0:	cd b7       	in	r28, 0x3d	; 61
   10ba2:	de b7       	in	r29, 0x3e	; 62
    static BYTE pv;
    BYTE n, s;
 
 
    n = Timer1; /* 100Hz decrement timer */
   10ba4:	80 91 b8 01 	lds	r24, 0x01B8
   10ba8:	89 83       	std	Y+1, r24	; 0x01
    if (n) Timer1 = --n;
   10baa:	89 81       	ldd	r24, Y+1	; 0x01
   10bac:	88 23       	and	r24, r24
   10bae:	31 f0       	breq	.+12     	; 0x10bbc <disk_timerproc+0x22>
   10bb0:	89 81       	ldd	r24, Y+1	; 0x01
   10bb2:	81 50       	subi	r24, 0x01	; 1
   10bb4:	89 83       	std	Y+1, r24	; 0x01
   10bb6:	89 81       	ldd	r24, Y+1	; 0x01
   10bb8:	80 93 b8 01 	sts	0x01B8, r24
    n = Timer2;
   10bbc:	80 91 b9 01 	lds	r24, 0x01B9
   10bc0:	89 83       	std	Y+1, r24	; 0x01
    if (n) Timer2 = --n;
   10bc2:	89 81       	ldd	r24, Y+1	; 0x01
   10bc4:	88 23       	and	r24, r24
   10bc6:	31 f0       	breq	.+12     	; 0x10bd4 <disk_timerproc+0x3a>
   10bc8:	89 81       	ldd	r24, Y+1	; 0x01
   10bca:	81 50       	subi	r24, 0x01	; 1
   10bcc:	89 83       	std	Y+1, r24	; 0x01
   10bce:	89 81       	ldd	r24, Y+1	; 0x01
   10bd0:	80 93 b9 01 	sts	0x01B9, r24
 
    s &= ~STA_NODISK;
   10bd4:	8a 81       	ldd	r24, Y+2	; 0x02
   10bd6:	8d 7f       	andi	r24, 0xFD	; 253
   10bd8:	8a 83       	std	Y+2, r24	; 0x02
    s &= ~STA_PROTECT;
   10bda:	8a 81       	ldd	r24, Y+2	; 0x02
   10bdc:	8b 7f       	andi	r24, 0xFB	; 251
   10bde:	8a 83       	std	Y+2, r24	; 0x02
 
    Stat = s;
   10be0:	8a 81       	ldd	r24, Y+2	; 0x02
   10be2:	80 93 0f 01 	sts	0x010F, r24
}
   10be6:	0f 90       	pop	r0
   10be8:	0f 90       	pop	r0
   10bea:	cf 91       	pop	r28
   10bec:	df 91       	pop	r29
   10bee:	08 95       	ret

00010bf0 <get_fattime>:

DWORD get_fattime ()
{
   10bf0:	df 93       	push	r29
   10bf2:	cf 93       	push	r28
   10bf4:	cd b7       	in	r28, 0x3d	; 61
   10bf6:	de b7       	in	r29, 0x3e	; 62
  return 0;
   10bf8:	80 e0       	ldi	r24, 0x00	; 0
   10bfa:	90 e0       	ldi	r25, 0x00	; 0
   10bfc:	dc 01       	movw	r26, r24
}
   10bfe:	bc 01       	movw	r22, r24
   10c00:	cd 01       	movw	r24, r26
   10c02:	cf 91       	pop	r28
   10c04:	df 91       	pop	r29
   10c06:	08 95       	ret

00010c08 <LCDInit>:
/***********************************************************
	Initialize display
***********************************************************/

void LCDInit(void)
{
   10c08:	df 93       	push	r29
   10c0a:	cf 93       	push	r28
   10c0c:	00 d0       	rcall	.+0      	; 0x10c0e <LCDInit+0x6>
   10c0e:	cd b7       	in	r28, 0x3d	; 61
   10c10:	de b7       	in	r29, 0x3e	; 62
	const WORD * ptr;

	SET(CS + RD + WR + CD);
   10c12:	88 e2       	ldi	r24, 0x28	; 40
   10c14:	90 e0       	ldi	r25, 0x00	; 0
   10c16:	28 e2       	ldi	r18, 0x28	; 40
   10c18:	30 e0       	ldi	r19, 0x00	; 0
   10c1a:	f9 01       	movw	r30, r18
   10c1c:	20 81       	ld	r18, Z
   10c1e:	20 6f       	ori	r18, 0xF0	; 240
   10c20:	fc 01       	movw	r30, r24
   10c22:	20 83       	st	Z, r18
	CLR(RES);			// assert hardware reset
   10c24:	88 e2       	ldi	r24, 0x28	; 40
   10c26:	90 e0       	ldi	r25, 0x00	; 0
   10c28:	28 e2       	ldi	r18, 0x28	; 40
   10c2a:	30 e0       	ldi	r19, 0x00	; 0
   10c2c:	f9 01       	movw	r30, r18
   10c2e:	20 81       	ld	r18, Z
   10c30:	27 7f       	andi	r18, 0xF7	; 247
   10c32:	fc 01       	movw	r30, r24
   10c34:	20 83       	st	Z, r18
	delay(100);
   10c36:	84 e6       	ldi	r24, 0x64	; 100
   10c38:	90 e0       	ldi	r25, 0x00	; 0
   10c3a:	0e 94 6a 8f 	call	0x11ed4	; 0x11ed4 <delay>
	SET(RES);			// de-assert reset
   10c3e:	88 e2       	ldi	r24, 0x28	; 40
   10c40:	90 e0       	ldi	r25, 0x00	; 0
   10c42:	28 e2       	ldi	r18, 0x28	; 40
   10c44:	30 e0       	ldi	r19, 0x00	; 0
   10c46:	f9 01       	movw	r30, r18
   10c48:	20 81       	ld	r18, Z
   10c4a:	28 60       	ori	r18, 0x08	; 8
   10c4c:	fc 01       	movw	r30, r24
   10c4e:	20 83       	st	Z, r18

	ptr = &LCDIni[0];
   10c50:	80 e3       	ldi	r24, 0x30	; 48
   10c52:	91 e0       	ldi	r25, 0x01	; 1
   10c54:	9a 83       	std	Y+2, r25	; 0x02
   10c56:	89 83       	std	Y+1, r24	; 0x01
	while (*ptr < 0xFFFF)
   10c58:	1a c0       	rjmp	.+52     	; 0x10c8e <LCDInit+0x86>
	{
		LCDCmd(*(ptr++));
   10c5a:	89 81       	ldd	r24, Y+1	; 0x01
   10c5c:	9a 81       	ldd	r25, Y+2	; 0x02
   10c5e:	fc 01       	movw	r30, r24
   10c60:	80 81       	ld	r24, Z
   10c62:	91 81       	ldd	r25, Z+1	; 0x01
   10c64:	29 81       	ldd	r18, Y+1	; 0x01
   10c66:	3a 81       	ldd	r19, Y+2	; 0x02
   10c68:	2e 5f       	subi	r18, 0xFE	; 254
   10c6a:	3f 4f       	sbci	r19, 0xFF	; 255
   10c6c:	3a 83       	std	Y+2, r19	; 0x02
   10c6e:	29 83       	std	Y+1, r18	; 0x01
   10c70:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
		LCDData(*(ptr++));
   10c74:	89 81       	ldd	r24, Y+1	; 0x01
   10c76:	9a 81       	ldd	r25, Y+2	; 0x02
   10c78:	fc 01       	movw	r30, r24
   10c7a:	80 81       	ld	r24, Z
   10c7c:	91 81       	ldd	r25, Z+1	; 0x01
   10c7e:	29 81       	ldd	r18, Y+1	; 0x01
   10c80:	3a 81       	ldd	r19, Y+2	; 0x02
   10c82:	2e 5f       	subi	r18, 0xFE	; 254
   10c84:	3f 4f       	sbci	r19, 0xFF	; 255
   10c86:	3a 83       	std	Y+2, r19	; 0x02
   10c88:	29 83       	std	Y+1, r18	; 0x01
   10c8a:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
	CLR(RES);			// assert hardware reset
	delay(100);
	SET(RES);			// de-assert reset

	ptr = &LCDIni[0];
	while (*ptr < 0xFFFF)
   10c8e:	89 81       	ldd	r24, Y+1	; 0x01
   10c90:	9a 81       	ldd	r25, Y+2	; 0x02
   10c92:	fc 01       	movw	r30, r24
   10c94:	80 81       	ld	r24, Z
   10c96:	91 81       	ldd	r25, Z+1	; 0x01
   10c98:	ff ef       	ldi	r31, 0xFF	; 255
   10c9a:	8f 3f       	cpi	r24, 0xFF	; 255
   10c9c:	9f 07       	cpc	r25, r31
   10c9e:	e9 f6       	brne	.-70     	; 0x10c5a <LCDInit+0x52>
	{
		LCDCmd(*(ptr++));
		LCDData(*(ptr++));
	}
	LCDClear(0, NR_ROWS);			// clear data mamory
   10ca0:	80 e0       	ldi	r24, 0x00	; 0
   10ca2:	90 e0       	ldi	r25, 0x00	; 0
   10ca4:	60 ef       	ldi	r22, 0xF0	; 240
   10ca6:	70 e0       	ldi	r23, 0x00	; 0
   10ca8:	0e 94 7d 87 	call	0x10efa	; 0x10efa <LCDClear>
}
   10cac:	0f 90       	pop	r0
   10cae:	0f 90       	pop	r0
   10cb0:	cf 91       	pop	r28
   10cb2:	df 91       	pop	r29
   10cb4:	08 95       	ret

00010cb6 <LCDCmd>:
/***********************************************************
	Write command to LCD controller
***********************************************************/

void LCDCmd(WORD arg)
{
   10cb6:	df 93       	push	r29
   10cb8:	cf 93       	push	r28
   10cba:	00 d0       	rcall	.+0      	; 0x10cbc <LCDCmd+0x6>
   10cbc:	cd b7       	in	r28, 0x3d	; 61
   10cbe:	de b7       	in	r29, 0x3e	; 62
   10cc0:	9a 83       	std	Y+2, r25	; 0x02
   10cc2:	89 83       	std	Y+1, r24	; 0x01
	CLR(CS);
   10cc4:	88 e2       	ldi	r24, 0x28	; 40
   10cc6:	90 e0       	ldi	r25, 0x00	; 0
   10cc8:	28 e2       	ldi	r18, 0x28	; 40
   10cca:	30 e0       	ldi	r19, 0x00	; 0
   10ccc:	f9 01       	movw	r30, r18
   10cce:	20 81       	ld	r18, Z
   10cd0:	2f 7e       	andi	r18, 0xEF	; 239
   10cd2:	fc 01       	movw	r30, r24
   10cd4:	20 83       	st	Z, r18
	CLR(CD);
   10cd6:	88 e2       	ldi	r24, 0x28	; 40
   10cd8:	90 e0       	ldi	r25, 0x00	; 0
   10cda:	28 e2       	ldi	r18, 0x28	; 40
   10cdc:	30 e0       	ldi	r19, 0x00	; 0
   10cde:	f9 01       	movw	r30, r18
   10ce0:	20 81       	ld	r18, Z
   10ce2:	2f 7d       	andi	r18, 0xDF	; 223
   10ce4:	fc 01       	movw	r30, r24
   10ce6:	20 83       	st	Z, r18
	OUT_HI = arg >> 8;
	OUT_LO = arg & 0xFF;
	CLR(WR);
	SET(WR);
#else
	OUT_HI = arg >> 8;
   10ce8:	82 e2       	ldi	r24, 0x22	; 34
   10cea:	90 e0       	ldi	r25, 0x00	; 0
   10cec:	29 81       	ldd	r18, Y+1	; 0x01
   10cee:	3a 81       	ldd	r19, Y+2	; 0x02
   10cf0:	23 2f       	mov	r18, r19
   10cf2:	33 27       	eor	r19, r19
   10cf4:	fc 01       	movw	r30, r24
   10cf6:	20 83       	st	Z, r18
	CLR(WR);
   10cf8:	88 e2       	ldi	r24, 0x28	; 40
   10cfa:	90 e0       	ldi	r25, 0x00	; 0
   10cfc:	28 e2       	ldi	r18, 0x28	; 40
   10cfe:	30 e0       	ldi	r19, 0x00	; 0
   10d00:	f9 01       	movw	r30, r18
   10d02:	20 81       	ld	r18, Z
   10d04:	2f 7b       	andi	r18, 0xBF	; 191
   10d06:	fc 01       	movw	r30, r24
   10d08:	20 83       	st	Z, r18
	SET(WR);
   10d0a:	88 e2       	ldi	r24, 0x28	; 40
   10d0c:	90 e0       	ldi	r25, 0x00	; 0
   10d0e:	28 e2       	ldi	r18, 0x28	; 40
   10d10:	30 e0       	ldi	r19, 0x00	; 0
   10d12:	f9 01       	movw	r30, r18
   10d14:	20 81       	ld	r18, Z
   10d16:	20 64       	ori	r18, 0x40	; 64
   10d18:	fc 01       	movw	r30, r24
   10d1a:	20 83       	st	Z, r18

	OUT_HI = arg & 0xFF;
   10d1c:	82 e2       	ldi	r24, 0x22	; 34
   10d1e:	90 e0       	ldi	r25, 0x00	; 0
   10d20:	29 81       	ldd	r18, Y+1	; 0x01
   10d22:	fc 01       	movw	r30, r24
   10d24:	20 83       	st	Z, r18
	CLR(WR);
   10d26:	88 e2       	ldi	r24, 0x28	; 40
   10d28:	90 e0       	ldi	r25, 0x00	; 0
   10d2a:	28 e2       	ldi	r18, 0x28	; 40
   10d2c:	30 e0       	ldi	r19, 0x00	; 0
   10d2e:	f9 01       	movw	r30, r18
   10d30:	20 81       	ld	r18, Z
   10d32:	2f 7b       	andi	r18, 0xBF	; 191
   10d34:	fc 01       	movw	r30, r24
   10d36:	20 83       	st	Z, r18
	SET(WR);
   10d38:	88 e2       	ldi	r24, 0x28	; 40
   10d3a:	90 e0       	ldi	r25, 0x00	; 0
   10d3c:	28 e2       	ldi	r18, 0x28	; 40
   10d3e:	30 e0       	ldi	r19, 0x00	; 0
   10d40:	f9 01       	movw	r30, r18
   10d42:	20 81       	ld	r18, Z
   10d44:	20 64       	ori	r18, 0x40	; 64
   10d46:	fc 01       	movw	r30, r24
   10d48:	20 83       	st	Z, r18
#endif
	SET(CS);
   10d4a:	88 e2       	ldi	r24, 0x28	; 40
   10d4c:	90 e0       	ldi	r25, 0x00	; 0
   10d4e:	28 e2       	ldi	r18, 0x28	; 40
   10d50:	30 e0       	ldi	r19, 0x00	; 0
   10d52:	f9 01       	movw	r30, r18
   10d54:	20 81       	ld	r18, Z
   10d56:	20 61       	ori	r18, 0x10	; 16
   10d58:	fc 01       	movw	r30, r24
   10d5a:	20 83       	st	Z, r18
}
   10d5c:	0f 90       	pop	r0
   10d5e:	0f 90       	pop	r0
   10d60:	cf 91       	pop	r28
   10d62:	df 91       	pop	r29
   10d64:	08 95       	ret

00010d66 <LCDData>:
/***********************************************************
	Write data to LCD controller
***********************************************************/

void LCDData(WORD arg)
{
   10d66:	df 93       	push	r29
   10d68:	cf 93       	push	r28
   10d6a:	00 d0       	rcall	.+0      	; 0x10d6c <LCDData+0x6>
   10d6c:	cd b7       	in	r28, 0x3d	; 61
   10d6e:	de b7       	in	r29, 0x3e	; 62
   10d70:	9a 83       	std	Y+2, r25	; 0x02
   10d72:	89 83       	std	Y+1, r24	; 0x01
	CLR(CS);
   10d74:	88 e2       	ldi	r24, 0x28	; 40
   10d76:	90 e0       	ldi	r25, 0x00	; 0
   10d78:	28 e2       	ldi	r18, 0x28	; 40
   10d7a:	30 e0       	ldi	r19, 0x00	; 0
   10d7c:	f9 01       	movw	r30, r18
   10d7e:	20 81       	ld	r18, Z
   10d80:	2f 7e       	andi	r18, 0xEF	; 239
   10d82:	fc 01       	movw	r30, r24
   10d84:	20 83       	st	Z, r18
	SET(CD);
   10d86:	88 e2       	ldi	r24, 0x28	; 40
   10d88:	90 e0       	ldi	r25, 0x00	; 0
   10d8a:	28 e2       	ldi	r18, 0x28	; 40
   10d8c:	30 e0       	ldi	r19, 0x00	; 0
   10d8e:	f9 01       	movw	r30, r18
   10d90:	20 81       	ld	r18, Z
   10d92:	20 62       	ori	r18, 0x20	; 32
   10d94:	fc 01       	movw	r30, r24
   10d96:	20 83       	st	Z, r18
	OUT_HI = arg >> 8;
	OUT_LO = arg & 0xFF;
	CLR(WR);
	SET(WR);
#else
	OUT_HI = arg >> 8;
   10d98:	82 e2       	ldi	r24, 0x22	; 34
   10d9a:	90 e0       	ldi	r25, 0x00	; 0
   10d9c:	29 81       	ldd	r18, Y+1	; 0x01
   10d9e:	3a 81       	ldd	r19, Y+2	; 0x02
   10da0:	23 2f       	mov	r18, r19
   10da2:	33 27       	eor	r19, r19
   10da4:	fc 01       	movw	r30, r24
   10da6:	20 83       	st	Z, r18
	CLR(WR);
   10da8:	88 e2       	ldi	r24, 0x28	; 40
   10daa:	90 e0       	ldi	r25, 0x00	; 0
   10dac:	28 e2       	ldi	r18, 0x28	; 40
   10dae:	30 e0       	ldi	r19, 0x00	; 0
   10db0:	f9 01       	movw	r30, r18
   10db2:	20 81       	ld	r18, Z
   10db4:	2f 7b       	andi	r18, 0xBF	; 191
   10db6:	fc 01       	movw	r30, r24
   10db8:	20 83       	st	Z, r18
	SET(WR);
   10dba:	88 e2       	ldi	r24, 0x28	; 40
   10dbc:	90 e0       	ldi	r25, 0x00	; 0
   10dbe:	28 e2       	ldi	r18, 0x28	; 40
   10dc0:	30 e0       	ldi	r19, 0x00	; 0
   10dc2:	f9 01       	movw	r30, r18
   10dc4:	20 81       	ld	r18, Z
   10dc6:	20 64       	ori	r18, 0x40	; 64
   10dc8:	fc 01       	movw	r30, r24
   10dca:	20 83       	st	Z, r18

	OUT_HI = arg & 0xFF;
   10dcc:	82 e2       	ldi	r24, 0x22	; 34
   10dce:	90 e0       	ldi	r25, 0x00	; 0
   10dd0:	29 81       	ldd	r18, Y+1	; 0x01
   10dd2:	fc 01       	movw	r30, r24
   10dd4:	20 83       	st	Z, r18
	CLR(WR);
   10dd6:	88 e2       	ldi	r24, 0x28	; 40
   10dd8:	90 e0       	ldi	r25, 0x00	; 0
   10dda:	28 e2       	ldi	r18, 0x28	; 40
   10ddc:	30 e0       	ldi	r19, 0x00	; 0
   10dde:	f9 01       	movw	r30, r18
   10de0:	20 81       	ld	r18, Z
   10de2:	2f 7b       	andi	r18, 0xBF	; 191
   10de4:	fc 01       	movw	r30, r24
   10de6:	20 83       	st	Z, r18
	SET(WR);
   10de8:	88 e2       	ldi	r24, 0x28	; 40
   10dea:	90 e0       	ldi	r25, 0x00	; 0
   10dec:	28 e2       	ldi	r18, 0x28	; 40
   10dee:	30 e0       	ldi	r19, 0x00	; 0
   10df0:	f9 01       	movw	r30, r18
   10df2:	20 81       	ld	r18, Z
   10df4:	20 64       	ori	r18, 0x40	; 64
   10df6:	fc 01       	movw	r30, r24
   10df8:	20 83       	st	Z, r18
#endif
	SET(CS);
   10dfa:	88 e2       	ldi	r24, 0x28	; 40
   10dfc:	90 e0       	ldi	r25, 0x00	; 0
   10dfe:	28 e2       	ldi	r18, 0x28	; 40
   10e00:	30 e0       	ldi	r19, 0x00	; 0
   10e02:	f9 01       	movw	r30, r18
   10e04:	20 81       	ld	r18, Z
   10e06:	20 61       	ori	r18, 0x10	; 16
   10e08:	fc 01       	movw	r30, r24
   10e0a:	20 83       	st	Z, r18
}
   10e0c:	0f 90       	pop	r0
   10e0e:	0f 90       	pop	r0
   10e10:	cf 91       	pop	r28
   10e12:	df 91       	pop	r29
   10e14:	08 95       	ret

00010e16 <LCDRead>:
/***********************************************************
	Read pixel from LCD controller
***********************************************************/

WORD LCDRead(void)
{
   10e16:	df 93       	push	r29
   10e18:	cf 93       	push	r28
   10e1a:	00 d0       	rcall	.+0      	; 0x10e1c <LCDRead+0x6>
   10e1c:	cd b7       	in	r28, 0x3d	; 61
   10e1e:	de b7       	in	r29, 0x3e	; 62
	BYTE argh, argl;

	CLR(CS);
   10e20:	88 e2       	ldi	r24, 0x28	; 40
   10e22:	90 e0       	ldi	r25, 0x00	; 0
   10e24:	28 e2       	ldi	r18, 0x28	; 40
   10e26:	30 e0       	ldi	r19, 0x00	; 0
   10e28:	f9 01       	movw	r30, r18
   10e2a:	20 81       	ld	r18, Z
   10e2c:	2f 7e       	andi	r18, 0xEF	; 239
   10e2e:	fc 01       	movw	r30, r24
   10e30:	20 83       	st	Z, r18
	SET(CD);
   10e32:	88 e2       	ldi	r24, 0x28	; 40
   10e34:	90 e0       	ldi	r25, 0x00	; 0
   10e36:	28 e2       	ldi	r18, 0x28	; 40
   10e38:	30 e0       	ldi	r19, 0x00	; 0
   10e3a:	f9 01       	movw	r30, r18
   10e3c:	20 81       	ld	r18, Z
   10e3e:	20 62       	ori	r18, 0x20	; 32
   10e40:	fc 01       	movw	r30, r24
   10e42:	20 83       	st	Z, r18
	DIR_HI = INS;	// set hi port to inputs
   10e44:	81 e2       	ldi	r24, 0x21	; 33
   10e46:	90 e0       	ldi	r25, 0x00	; 0
   10e48:	fc 01       	movw	r30, r24
   10e4a:	10 82       	st	Z, r1
	argl = IN_LO;
	argh = IN_HI;	// get word from the bus
	SET(RD);		// de-assert read
	DIR_LO = OUTS;	// set lo port to outputs
#else
	CLR(RD);		// assert read
   10e4c:	88 e2       	ldi	r24, 0x28	; 40
   10e4e:	90 e0       	ldi	r25, 0x00	; 0
   10e50:	28 e2       	ldi	r18, 0x28	; 40
   10e52:	30 e0       	ldi	r19, 0x00	; 0
   10e54:	f9 01       	movw	r30, r18
   10e56:	20 81       	ld	r18, Z
   10e58:	2f 77       	andi	r18, 0x7F	; 127
   10e5a:	fc 01       	movw	r30, r24
   10e5c:	20 83       	st	Z, r18
	...
	DLY;
	DLY;
	argl = IN_HI;	// get byte from the bus
   10e66:	80 e2       	ldi	r24, 0x20	; 32
   10e68:	90 e0       	ldi	r25, 0x00	; 0
   10e6a:	fc 01       	movw	r30, r24
   10e6c:	80 81       	ld	r24, Z
   10e6e:	89 83       	std	Y+1, r24	; 0x01
	SET(RD);		// de-assert read
   10e70:	88 e2       	ldi	r24, 0x28	; 40
   10e72:	90 e0       	ldi	r25, 0x00	; 0
   10e74:	28 e2       	ldi	r18, 0x28	; 40
   10e76:	30 e0       	ldi	r19, 0x00	; 0
   10e78:	f9 01       	movw	r30, r18
   10e7a:	20 81       	ld	r18, Z
   10e7c:	20 68       	ori	r18, 0x80	; 128
   10e7e:	fc 01       	movw	r30, r24
   10e80:	20 83       	st	Z, r18
	...
	DLY;
	DLY;
	CLR(RD);		// assert read
   10e8a:	88 e2       	ldi	r24, 0x28	; 40
   10e8c:	90 e0       	ldi	r25, 0x00	; 0
   10e8e:	28 e2       	ldi	r18, 0x28	; 40
   10e90:	30 e0       	ldi	r19, 0x00	; 0
   10e92:	f9 01       	movw	r30, r18
   10e94:	20 81       	ld	r18, Z
   10e96:	2f 77       	andi	r18, 0x7F	; 127
   10e98:	fc 01       	movw	r30, r24
   10e9a:	20 83       	st	Z, r18
	...
	DLY;
	DLY;
	argh = IN_HI;	// get byte from the bus
   10ea4:	80 e2       	ldi	r24, 0x20	; 32
   10ea6:	90 e0       	ldi	r25, 0x00	; 0
   10ea8:	fc 01       	movw	r30, r24
   10eaa:	80 81       	ld	r24, Z
   10eac:	8a 83       	std	Y+2, r24	; 0x02
	SET(RD);		// de-assert read
   10eae:	88 e2       	ldi	r24, 0x28	; 40
   10eb0:	90 e0       	ldi	r25, 0x00	; 0
   10eb2:	28 e2       	ldi	r18, 0x28	; 40
   10eb4:	30 e0       	ldi	r19, 0x00	; 0
   10eb6:	f9 01       	movw	r30, r18
   10eb8:	20 81       	ld	r18, Z
   10eba:	20 68       	ori	r18, 0x80	; 128
   10ebc:	fc 01       	movw	r30, r24
   10ebe:	20 83       	st	Z, r18
#endif
	DIR_HI = OUTS;	// set hi port to outputs
   10ec0:	81 e2       	ldi	r24, 0x21	; 33
   10ec2:	90 e0       	ldi	r25, 0x00	; 0
   10ec4:	2f ef       	ldi	r18, 0xFF	; 255
   10ec6:	fc 01       	movw	r30, r24
   10ec8:	20 83       	st	Z, r18
	SET(CS);
   10eca:	88 e2       	ldi	r24, 0x28	; 40
   10ecc:	90 e0       	ldi	r25, 0x00	; 0
   10ece:	28 e2       	ldi	r18, 0x28	; 40
   10ed0:	30 e0       	ldi	r19, 0x00	; 0
   10ed2:	f9 01       	movw	r30, r18
   10ed4:	20 81       	ld	r18, Z
   10ed6:	20 61       	ori	r18, 0x10	; 16
   10ed8:	fc 01       	movw	r30, r24
   10eda:	20 83       	st	Z, r18
	return (WORD)((argh << 8) | argl);
   10edc:	8a 81       	ldd	r24, Y+2	; 0x02
   10ede:	88 2f       	mov	r24, r24
   10ee0:	90 e0       	ldi	r25, 0x00	; 0
   10ee2:	38 2f       	mov	r19, r24
   10ee4:	22 27       	eor	r18, r18
   10ee6:	89 81       	ldd	r24, Y+1	; 0x01
   10ee8:	88 2f       	mov	r24, r24
   10eea:	90 e0       	ldi	r25, 0x00	; 0
   10eec:	82 2b       	or	r24, r18
   10eee:	93 2b       	or	r25, r19
}
   10ef0:	0f 90       	pop	r0
   10ef2:	0f 90       	pop	r0
   10ef4:	cf 91       	pop	r28
   10ef6:	df 91       	pop	r29
   10ef8:	08 95       	ret

00010efa <LCDClear>:
	row = starting row
	hgt = number of rows
***********************************************************/

void LCDClear(WORD row, WORD hgt)
{
   10efa:	df 93       	push	r29
   10efc:	cf 93       	push	r28
   10efe:	cd b7       	in	r28, 0x3d	; 61
   10f00:	de b7       	in	r29, 0x3e	; 62
   10f02:	28 97       	sbiw	r28, 0x08	; 8
   10f04:	0f b6       	in	r0, 0x3f	; 63
   10f06:	f8 94       	cli
   10f08:	de bf       	out	0x3e, r29	; 62
   10f0a:	0f be       	out	0x3f, r0	; 63
   10f0c:	cd bf       	out	0x3d, r28	; 61
   10f0e:	9e 83       	std	Y+6, r25	; 0x06
   10f10:	8d 83       	std	Y+5, r24	; 0x05
   10f12:	78 87       	std	Y+8, r23	; 0x08
   10f14:	6f 83       	std	Y+7, r22	; 0x07
	WORD a, b;

	LCDSetGCur(row, 0);
   10f16:	8d 81       	ldd	r24, Y+5	; 0x05
   10f18:	9e 81       	ldd	r25, Y+6	; 0x06
   10f1a:	60 e0       	ldi	r22, 0x00	; 0
   10f1c:	70 e0       	ldi	r23, 0x00	; 0
   10f1e:	0e 94 90 8c 	call	0x11920	; 0x11920 <LCDSetGCur>
	OUT_HI = 0;				// put black on the bus
   10f22:	82 e2       	ldi	r24, 0x22	; 34
   10f24:	90 e0       	ldi	r25, 0x00	; 0
   10f26:	fc 01       	movw	r30, r24
   10f28:	10 82       	st	Z, r1
	OUT_LO = 0;
   10f2a:	8e e2       	ldi	r24, 0x2E	; 46
   10f2c:	90 e0       	ldi	r25, 0x00	; 0
   10f2e:	fc 01       	movw	r30, r24
   10f30:	10 82       	st	Z, r1
	CLR(CS);
   10f32:	88 e2       	ldi	r24, 0x28	; 40
   10f34:	90 e0       	ldi	r25, 0x00	; 0
   10f36:	28 e2       	ldi	r18, 0x28	; 40
   10f38:	30 e0       	ldi	r19, 0x00	; 0
   10f3a:	f9 01       	movw	r30, r18
   10f3c:	20 81       	ld	r18, Z
   10f3e:	2f 7e       	andi	r18, 0xEF	; 239
   10f40:	fc 01       	movw	r30, r24
   10f42:	20 83       	st	Z, r18
	SET(CD);
   10f44:	88 e2       	ldi	r24, 0x28	; 40
   10f46:	90 e0       	ldi	r25, 0x00	; 0
   10f48:	28 e2       	ldi	r18, 0x28	; 40
   10f4a:	30 e0       	ldi	r19, 0x00	; 0
   10f4c:	f9 01       	movw	r30, r18
   10f4e:	20 81       	ld	r18, Z
   10f50:	20 62       	ori	r18, 0x20	; 32
   10f52:	fc 01       	movw	r30, r24
   10f54:	20 83       	st	Z, r18
	for (a = 0; a < hgt; a++)	// each row
   10f56:	1a 82       	std	Y+2, r1	; 0x02
   10f58:	19 82       	std	Y+1, r1	; 0x01
   10f5a:	39 c0       	rjmp	.+114    	; 0x10fce <LCDClear+0xd4>
	{
		for (b = 0; b < NR_COLS; b++)	// all columns
   10f5c:	1c 82       	std	Y+4, r1	; 0x04
   10f5e:	1b 82       	std	Y+3, r1	; 0x03
   10f60:	2b c0       	rjmp	.+86     	; 0x10fb8 <LCDClear+0xbe>
		{
			CLR(WR);
   10f62:	88 e2       	ldi	r24, 0x28	; 40
   10f64:	90 e0       	ldi	r25, 0x00	; 0
   10f66:	28 e2       	ldi	r18, 0x28	; 40
   10f68:	30 e0       	ldi	r19, 0x00	; 0
   10f6a:	f9 01       	movw	r30, r18
   10f6c:	20 81       	ld	r18, Z
   10f6e:	2f 7b       	andi	r18, 0xBF	; 191
   10f70:	fc 01       	movw	r30, r24
   10f72:	20 83       	st	Z, r18
			SET(WR);
   10f74:	88 e2       	ldi	r24, 0x28	; 40
   10f76:	90 e0       	ldi	r25, 0x00	; 0
   10f78:	28 e2       	ldi	r18, 0x28	; 40
   10f7a:	30 e0       	ldi	r19, 0x00	; 0
   10f7c:	f9 01       	movw	r30, r18
   10f7e:	20 81       	ld	r18, Z
   10f80:	20 64       	ori	r18, 0x40	; 64
   10f82:	fc 01       	movw	r30, r24
   10f84:	20 83       	st	Z, r18
#ifndef BIT16
			DLY;
   10f86:	00 00       	nop
   10f88:	00 00       	nop
			CLR(WR);
   10f8a:	88 e2       	ldi	r24, 0x28	; 40
   10f8c:	90 e0       	ldi	r25, 0x00	; 0
   10f8e:	28 e2       	ldi	r18, 0x28	; 40
   10f90:	30 e0       	ldi	r19, 0x00	; 0
   10f92:	f9 01       	movw	r30, r18
   10f94:	20 81       	ld	r18, Z
   10f96:	2f 7b       	andi	r18, 0xBF	; 191
   10f98:	fc 01       	movw	r30, r24
   10f9a:	20 83       	st	Z, r18
			SET(WR);
   10f9c:	88 e2       	ldi	r24, 0x28	; 40
   10f9e:	90 e0       	ldi	r25, 0x00	; 0
   10fa0:	28 e2       	ldi	r18, 0x28	; 40
   10fa2:	30 e0       	ldi	r19, 0x00	; 0
   10fa4:	f9 01       	movw	r30, r18
   10fa6:	20 81       	ld	r18, Z
   10fa8:	20 64       	ori	r18, 0x40	; 64
   10faa:	fc 01       	movw	r30, r24
   10fac:	20 83       	st	Z, r18
	OUT_LO = 0;
	CLR(CS);
	SET(CD);
	for (a = 0; a < hgt; a++)	// each row
	{
		for (b = 0; b < NR_COLS; b++)	// all columns
   10fae:	8b 81       	ldd	r24, Y+3	; 0x03
   10fb0:	9c 81       	ldd	r25, Y+4	; 0x04
   10fb2:	01 96       	adiw	r24, 0x01	; 1
   10fb4:	9c 83       	std	Y+4, r25	; 0x04
   10fb6:	8b 83       	std	Y+3, r24	; 0x03
   10fb8:	8b 81       	ldd	r24, Y+3	; 0x03
   10fba:	9c 81       	ldd	r25, Y+4	; 0x04
   10fbc:	f1 e0       	ldi	r31, 0x01	; 1
   10fbe:	80 34       	cpi	r24, 0x40	; 64
   10fc0:	9f 07       	cpc	r25, r31
   10fc2:	78 f2       	brcs	.-98     	; 0x10f62 <LCDClear+0x68>
	LCDSetGCur(row, 0);
	OUT_HI = 0;				// put black on the bus
	OUT_LO = 0;
	CLR(CS);
	SET(CD);
	for (a = 0; a < hgt; a++)	// each row
   10fc4:	89 81       	ldd	r24, Y+1	; 0x01
   10fc6:	9a 81       	ldd	r25, Y+2	; 0x02
   10fc8:	01 96       	adiw	r24, 0x01	; 1
   10fca:	9a 83       	std	Y+2, r25	; 0x02
   10fcc:	89 83       	std	Y+1, r24	; 0x01
   10fce:	29 81       	ldd	r18, Y+1	; 0x01
   10fd0:	3a 81       	ldd	r19, Y+2	; 0x02
   10fd2:	8f 81       	ldd	r24, Y+7	; 0x07
   10fd4:	98 85       	ldd	r25, Y+8	; 0x08
   10fd6:	28 17       	cp	r18, r24
   10fd8:	39 07       	cpc	r19, r25
   10fda:	08 f4       	brcc	.+2      	; 0x10fde <LCDClear+0xe4>
   10fdc:	bf cf       	rjmp	.-130    	; 0x10f5c <LCDClear+0x62>
			CLR(WR);
			SET(WR);
#endif
		}
	}
	SET(CS);
   10fde:	88 e2       	ldi	r24, 0x28	; 40
   10fe0:	90 e0       	ldi	r25, 0x00	; 0
   10fe2:	28 e2       	ldi	r18, 0x28	; 40
   10fe4:	30 e0       	ldi	r19, 0x00	; 0
   10fe6:	f9 01       	movw	r30, r18
   10fe8:	20 81       	ld	r18, Z
   10fea:	20 61       	ori	r18, 0x10	; 16
   10fec:	fc 01       	movw	r30, r24
   10fee:	20 83       	st	Z, r18
}
   10ff0:	28 96       	adiw	r28, 0x08	; 8
   10ff2:	0f b6       	in	r0, 0x3f	; 63
   10ff4:	f8 94       	cli
   10ff6:	de bf       	out	0x3e, r29	; 62
   10ff8:	0f be       	out	0x3f, r0	; 63
   10ffa:	cd bf       	out	0x3d, r28	; 61
   10ffc:	cf 91       	pop	r28
   10ffe:	df 91       	pop	r29
   11000:	08 95       	ret

00011002 <LCDText>:

	strg = pointer to String_T structure
***********************************************************/

void LCDText(String_T *strg)
{
   11002:	df 93       	push	r29
   11004:	cf 93       	push	r28
   11006:	cd b7       	in	r28, 0x3d	; 61
   11008:	de b7       	in	r29, 0x3e	; 62
   1100a:	28 97       	sbiw	r28, 0x08	; 8
   1100c:	0f b6       	in	r0, 0x3f	; 63
   1100e:	f8 94       	cli
   11010:	de bf       	out	0x3e, r29	; 62
   11012:	0f be       	out	0x3f, r0	; 63
   11014:	cd bf       	out	0x3d, r28	; 61
   11016:	98 87       	std	Y+8, r25	; 0x08
   11018:	8f 83       	std	Y+7, r24	; 0x07
	WORD a, b;
	char *cp;

	font = strg->font;
   1101a:	8f 81       	ldd	r24, Y+7	; 0x07
   1101c:	98 85       	ldd	r25, Y+8	; 0x08
   1101e:	fc 01       	movw	r30, r24
   11020:	80 81       	ld	r24, Z
   11022:	80 93 ef 03 	sts	0x03EF, r24
	CJ_code = strg->cj_code;		// save CJ code
   11026:	8f 81       	ldd	r24, Y+7	; 0x07
   11028:	98 85       	ldd	r25, Y+8	; 0x08
   1102a:	fc 01       	movw	r30, r24
   1102c:	81 81       	ldd	r24, Z+1	; 0x01
   1102e:	80 93 bc 01 	sts	0x01BC, r24
	dsrow = strg->row;				// save starting row number
   11032:	8f 81       	ldd	r24, Y+7	; 0x07
   11034:	98 85       	ldd	r25, Y+8	; 0x08
   11036:	fc 01       	movw	r30, r24
   11038:	82 81       	ldd	r24, Z+2	; 0x02
   1103a:	80 93 f0 03 	sts	0x03F0, r24
	fgcolor = strg->fg;
   1103e:	8f 81       	ldd	r24, Y+7	; 0x07
   11040:	98 85       	ldd	r25, Y+8	; 0x08
   11042:	fc 01       	movw	r30, r24
   11044:	84 81       	ldd	r24, Z+4	; 0x04
   11046:	95 81       	ldd	r25, Z+5	; 0x05
   11048:	90 93 f6 03 	sts	0x03F6, r25
   1104c:	80 93 f5 03 	sts	0x03F5, r24
	bgcolor = strg->bg;
   11050:	8f 81       	ldd	r24, Y+7	; 0x07
   11052:	98 85       	ldd	r25, Y+8	; 0x08
   11054:	fc 01       	movw	r30, r24
   11056:	86 81       	ldd	r24, Z+6	; 0x06
   11058:	97 81       	ldd	r25, Z+7	; 0x07
   1105a:	90 93 f2 03 	sts	0x03F2, r25
   1105e:	80 93 f1 03 	sts	0x03F1, r24
	b = CJ_code & JUSTIFY;			// isolate justify mode
   11062:	80 91 bc 01 	lds	r24, 0x01BC
   11066:	88 2f       	mov	r24, r24
   11068:	90 e0       	ldi	r25, 0x00	; 0
   1106a:	87 70       	andi	r24, 0x07	; 7
   1106c:	90 70       	andi	r25, 0x00	; 0
   1106e:	9e 83       	std	Y+6, r25	; 0x06
   11070:	8d 83       	std	Y+5, r24	; 0x05

	if (b == L00J) dscol = 0;
   11072:	8d 81       	ldd	r24, Y+5	; 0x05
   11074:	9e 81       	ldd	r25, Y+6	; 0x06
   11076:	00 97       	sbiw	r24, 0x00	; 0
   11078:	29 f4       	brne	.+10     	; 0x11084 <LCDText+0x82>
   1107a:	10 92 f4 03 	sts	0x03F4, r1
   1107e:	10 92 f3 03 	sts	0x03F3, r1
   11082:	47 c0       	rjmp	.+142    	; 0x11112 <LCDText+0x110>
	else if (b == ABSJ) dscol = strg->col;
   11084:	8d 81       	ldd	r24, Y+5	; 0x05
   11086:	9e 81       	ldd	r25, Y+6	; 0x06
   11088:	87 30       	cpi	r24, 0x07	; 7
   1108a:	91 05       	cpc	r25, r1
   1108c:	59 f4       	brne	.+22     	; 0x110a4 <LCDText+0xa2>
   1108e:	8f 81       	ldd	r24, Y+7	; 0x07
   11090:	98 85       	ldd	r25, Y+8	; 0x08
   11092:	fc 01       	movw	r30, r24
   11094:	83 81       	ldd	r24, Z+3	; 0x03
   11096:	88 2f       	mov	r24, r24
   11098:	90 e0       	ldi	r25, 0x00	; 0
   1109a:	90 93 f4 03 	sts	0x03F4, r25
   1109e:	80 93 f3 03 	sts	0x03F3, r24
   110a2:	37 c0       	rjmp	.+110    	; 0x11112 <LCDText+0x110>
	else
	{
		a = LCDPixLen(strg->text);	// get display length in pixels
   110a4:	8f 81       	ldd	r24, Y+7	; 0x07
   110a6:	98 85       	ldd	r25, Y+8	; 0x08
   110a8:	fc 01       	movw	r30, r24
   110aa:	80 85       	ldd	r24, Z+8	; 0x08
   110ac:	91 85       	ldd	r25, Z+9	; 0x09
   110ae:	0e 94 46 8d 	call	0x11a8c	; 0x11a8c <LCDPixLen>
   110b2:	9a 83       	std	Y+2, r25	; 0x02
   110b4:	89 83       	std	Y+1, r24	; 0x01
		if (b != R100J)				// if not right justify
   110b6:	8d 81       	ldd	r24, Y+5	; 0x05
   110b8:	9e 81       	ldd	r25, Y+6	; 0x06
   110ba:	86 30       	cpi	r24, 0x06	; 6
   110bc:	91 05       	cpc	r25, r1
   110be:	31 f0       	breq	.+12     	; 0x110cc <LCDText+0xca>
		{
			a /= 2;					// use half length for centering
   110c0:	89 81       	ldd	r24, Y+1	; 0x01
   110c2:	9a 81       	ldd	r25, Y+2	; 0x02
   110c4:	96 95       	lsr	r25
   110c6:	87 95       	ror	r24
   110c8:	9a 83       	std	Y+2, r25	; 0x02
   110ca:	89 83       	std	Y+1, r24	; 0x01
		}
		dscol = ((CJ_code & ROT90) ? JustVrt[b] : JustHrz[b]) - a;	// set starting column
   110cc:	80 91 bc 01 	lds	r24, 0x01BC
   110d0:	88 2f       	mov	r24, r24
   110d2:	90 e0       	ldi	r25, 0x00	; 0
   110d4:	80 74       	andi	r24, 0x40	; 64
   110d6:	90 70       	andi	r25, 0x00	; 0
   110d8:	00 97       	sbiw	r24, 0x00	; 0
   110da:	51 f0       	breq	.+20     	; 0x110f0 <LCDText+0xee>
   110dc:	8d 81       	ldd	r24, Y+5	; 0x05
   110de:	9e 81       	ldd	r25, Y+6	; 0x06
   110e0:	88 0f       	add	r24, r24
   110e2:	99 1f       	adc	r25, r25
   110e4:	80 5e       	subi	r24, 0xE0	; 224
   110e6:	9e 4f       	sbci	r25, 0xFE	; 254
   110e8:	fc 01       	movw	r30, r24
   110ea:	80 81       	ld	r24, Z
   110ec:	91 81       	ldd	r25, Z+1	; 0x01
   110ee:	09 c0       	rjmp	.+18     	; 0x11102 <LCDText+0x100>
   110f0:	8d 81       	ldd	r24, Y+5	; 0x05
   110f2:	9e 81       	ldd	r25, Y+6	; 0x06
   110f4:	88 0f       	add	r24, r24
   110f6:	99 1f       	adc	r25, r25
   110f8:	80 5f       	subi	r24, 0xF0	; 240
   110fa:	9e 4f       	sbci	r25, 0xFE	; 254
   110fc:	fc 01       	movw	r30, r24
   110fe:	80 81       	ld	r24, Z
   11100:	91 81       	ldd	r25, Z+1	; 0x01
   11102:	29 81       	ldd	r18, Y+1	; 0x01
   11104:	3a 81       	ldd	r19, Y+2	; 0x02
   11106:	82 1b       	sub	r24, r18
   11108:	93 0b       	sbc	r25, r19
   1110a:	90 93 f4 03 	sts	0x03F4, r25
   1110e:	80 93 f3 03 	sts	0x03F3, r24
	}

	if (dscol >= ((CJ_code & ROT90) ? NR_ROWS : NR_COLS))	// if over/underflow
   11112:	80 91 bc 01 	lds	r24, 0x01BC
   11116:	88 2f       	mov	r24, r24
   11118:	90 e0       	ldi	r25, 0x00	; 0
   1111a:	80 74       	andi	r24, 0x40	; 64
   1111c:	90 70       	andi	r25, 0x00	; 0
   1111e:	00 97       	sbiw	r24, 0x00	; 0
   11120:	19 f0       	breq	.+6      	; 0x11128 <LCDText+0x126>
   11122:	80 ef       	ldi	r24, 0xF0	; 240
   11124:	90 e0       	ldi	r25, 0x00	; 0
   11126:	02 c0       	rjmp	.+4      	; 0x1112c <LCDText+0x12a>
   11128:	80 e4       	ldi	r24, 0x40	; 64
   1112a:	91 e0       	ldi	r25, 0x01	; 1
   1112c:	20 91 f3 03 	lds	r18, 0x03F3
   11130:	30 91 f4 03 	lds	r19, 0x03F4
   11134:	28 17       	cp	r18, r24
   11136:	39 07       	cpc	r19, r25
   11138:	20 f0       	brcs	.+8      	; 0x11142 <LCDText+0x140>
	{
		dscol = 0;					// use left justify
   1113a:	10 92 f4 03 	sts	0x03F4, r1
   1113e:	10 92 f3 03 	sts	0x03F3, r1
	}
	cp = strg->text;				// get pointer to the text
   11142:	8f 81       	ldd	r24, Y+7	; 0x07
   11144:	98 85       	ldd	r25, Y+8	; 0x08
   11146:	fc 01       	movw	r30, r24
   11148:	80 85       	ldd	r24, Z+8	; 0x08
   1114a:	91 85       	ldd	r25, Z+9	; 0x09
   1114c:	9c 83       	std	Y+4, r25	; 0x04
   1114e:	8b 83       	std	Y+3, r24	; 0x03

	b = (CJ_code & ROTN);			// get rotation angle
   11150:	80 91 bc 01 	lds	r24, 0x01BC
   11154:	88 2f       	mov	r24, r24
   11156:	90 e0       	ldi	r25, 0x00	; 0
   11158:	80 7c       	andi	r24, 0xC0	; 192
   1115a:	90 70       	andi	r25, 0x00	; 0
   1115c:	9e 83       	std	Y+6, r25	; 0x06
   1115e:	8d 83       	std	Y+5, r24	; 0x05
	if (b == 0) a = WRTDWN;			// get entry mode command
   11160:	8d 81       	ldd	r24, Y+5	; 0x05
   11162:	9e 81       	ldd	r25, Y+6	; 0x06
   11164:	00 97       	sbiw	r24, 0x00	; 0
   11166:	29 f4       	brne	.+10     	; 0x11172 <LCDText+0x170>
   11168:	88 e7       	ldi	r24, 0x78	; 120
   1116a:	98 e6       	ldi	r25, 0x68	; 104
   1116c:	9a 83       	std	Y+2, r25	; 0x02
   1116e:	89 83       	std	Y+1, r24	; 0x01
   11170:	18 c0       	rjmp	.+48     	; 0x111a2 <LCDText+0x1a0>
	else if (b == ROT90) a = WRTRGT;// for SSD2119 register 11h
   11172:	8d 81       	ldd	r24, Y+5	; 0x05
   11174:	9e 81       	ldd	r25, Y+6	; 0x06
   11176:	80 34       	cpi	r24, 0x40	; 64
   11178:	91 05       	cpc	r25, r1
   1117a:	29 f4       	brne	.+10     	; 0x11186 <LCDText+0x184>
   1117c:	80 e7       	ldi	r24, 0x70	; 112
   1117e:	98 e6       	ldi	r25, 0x68	; 104
   11180:	9a 83       	std	Y+2, r25	; 0x02
   11182:	89 83       	std	Y+1, r24	; 0x01
   11184:	0e c0       	rjmp	.+28     	; 0x111a2 <LCDText+0x1a0>
	else if (b == ROT180) a = WRTUP;// to set writing direction
   11186:	8d 81       	ldd	r24, Y+5	; 0x05
   11188:	9e 81       	ldd	r25, Y+6	; 0x06
   1118a:	80 38       	cpi	r24, 0x80	; 128
   1118c:	91 05       	cpc	r25, r1
   1118e:	29 f4       	brne	.+10     	; 0x1119a <LCDText+0x198>
   11190:	88 e4       	ldi	r24, 0x48	; 72
   11192:	98 e6       	ldi	r25, 0x68	; 104
   11194:	9a 83       	std	Y+2, r25	; 0x02
   11196:	89 83       	std	Y+1, r24	; 0x01
   11198:	04 c0       	rjmp	.+8      	; 0x111a2 <LCDText+0x1a0>
	else a = WRTLFT;	// 270
   1119a:	80 e6       	ldi	r24, 0x60	; 96
   1119c:	98 e6       	ldi	r25, 0x68	; 104
   1119e:	9a 83       	std	Y+2, r25	; 0x02
   111a0:	89 83       	std	Y+1, r24	; 0x01

	LCDCmd(0x11);					// set entry mode, to write
   111a2:	81 e1       	ldi	r24, 0x11	; 17
   111a4:	90 e0       	ldi	r25, 0x00	; 0
   111a6:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
	LCDData(a);						// pixels, column by column
   111aa:	89 81       	ldd	r24, Y+1	; 0x01
   111ac:	9a 81       	ldd	r25, Y+2	; 0x02
   111ae:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
			
	while (*cp)
   111b2:	0c c0       	rjmp	.+24     	; 0x111cc <LCDText+0x1ca>
	{
		LCDChar(*cp++);				// output chars to screen
   111b4:	8b 81       	ldd	r24, Y+3	; 0x03
   111b6:	9c 81       	ldd	r25, Y+4	; 0x04
   111b8:	fc 01       	movw	r30, r24
   111ba:	20 81       	ld	r18, Z
   111bc:	8b 81       	ldd	r24, Y+3	; 0x03
   111be:	9c 81       	ldd	r25, Y+4	; 0x04
   111c0:	01 96       	adiw	r24, 0x01	; 1
   111c2:	9c 83       	std	Y+4, r25	; 0x04
   111c4:	8b 83       	std	Y+3, r24	; 0x03
   111c6:	82 2f       	mov	r24, r18
   111c8:	0e 94 fd 88 	call	0x111fa	; 0x111fa <LCDChar>
	else a = WRTLFT;	// 270

	LCDCmd(0x11);					// set entry mode, to write
	LCDData(a);						// pixels, column by column
			
	while (*cp)
   111cc:	8b 81       	ldd	r24, Y+3	; 0x03
   111ce:	9c 81       	ldd	r25, Y+4	; 0x04
   111d0:	fc 01       	movw	r30, r24
   111d2:	80 81       	ld	r24, Z
   111d4:	88 23       	and	r24, r24
   111d6:	71 f7       	brne	.-36     	; 0x111b4 <LCDText+0x1b2>
	{
		LCDChar(*cp++);				// output chars to screen
	}

	LCDCmd(0x11);
   111d8:	81 e1       	ldi	r24, 0x11	; 17
   111da:	90 e0       	ldi	r25, 0x00	; 0
   111dc:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
	LCDData(WRTRGT);				// set default entry mode
   111e0:	80 e7       	ldi	r24, 0x70	; 112
   111e2:	98 e6       	ldi	r25, 0x68	; 104
   111e4:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
}
   111e8:	28 96       	adiw	r28, 0x08	; 8
   111ea:	0f b6       	in	r0, 0x3f	; 63
   111ec:	f8 94       	cli
   111ee:	de bf       	out	0x3e, r29	; 62
   111f0:	0f be       	out	0x3f, r0	; 63
   111f2:	cd bf       	out	0x3d, r28	; 61
   111f4:	cf 91       	pop	r28
   111f6:	df 91       	pop	r29
   111f8:	08 95       	ret

000111fa <LCDChar>:
	"pgm_read_byte()" and "pgm_read_word()" are macros in
	<pgmspace.h> to fetch a byte from flash instead of SRAM.
***********************************************************/

void LCDChar(char chr)
{
   111fa:	ef 92       	push	r14
   111fc:	ff 92       	push	r15
   111fe:	0f 93       	push	r16
   11200:	1f 93       	push	r17
   11202:	df 93       	push	r29
   11204:	cf 93       	push	r28
   11206:	cd b7       	in	r28, 0x3d	; 61
   11208:	de b7       	in	r29, 0x3e	; 62
   1120a:	e3 97       	sbiw	r28, 0x33	; 51
   1120c:	0f b6       	in	r0, 0x3f	; 63
   1120e:	f8 94       	cli
   11210:	de bf       	out	0x3e, r29	; 62
   11212:	0f be       	out	0x3f, r0	; 63
   11214:	cd bf       	out	0x3d, r28	; 61
   11216:	8b ab       	std	Y+51, r24	; 0x33
	BYTE wid, a, b, c, d, rw;
	BYTE flag, size;
	const PBYTE * bitp;	// pointer to flash memory space
	BYTE bits, mask;

	switch (font)		// get the font information
   11218:	80 91 ef 03 	lds	r24, 0x03EF
   1121c:	88 2f       	mov	r24, r24
   1121e:	90 e0       	ldi	r25, 0x00	; 0
   11220:	82 30       	cpi	r24, 0x02	; 2
   11222:	91 05       	cpc	r25, r1
   11224:	09 f4       	brne	.+2      	; 0x11228 <LCDChar+0x2e>
   11226:	44 c0       	rjmp	.+136    	; 0x112b0 <LCDChar+0xb6>
   11228:	83 30       	cpi	r24, 0x03	; 3
   1122a:	91 05       	cpc	r25, r1
   1122c:	24 f4       	brge	.+8      	; 0x11236 <LCDChar+0x3c>
   1122e:	81 30       	cpi	r24, 0x01	; 1
   11230:	91 05       	cpc	r25, r1
   11232:	51 f0       	breq	.+20     	; 0x11248 <LCDChar+0x4e>
   11234:	d9 c0       	rjmp	.+434    	; 0x113e8 <LCDChar+0x1ee>
   11236:	83 30       	cpi	r24, 0x03	; 3
   11238:	91 05       	cpc	r25, r1
   1123a:	09 f4       	brne	.+2      	; 0x1123e <LCDChar+0x44>
   1123c:	6d c0       	rjmp	.+218    	; 0x11318 <LCDChar+0x11e>
   1123e:	84 30       	cpi	r24, 0x04	; 4
   11240:	91 05       	cpc	r25, r1
   11242:	09 f4       	brne	.+2      	; 0x11246 <LCDChar+0x4c>
   11244:	9d c0       	rjmp	.+314    	; 0x11380 <LCDChar+0x186>
   11246:	d0 c0       	rjmp	.+416    	; 0x113e8 <LCDChar+0x1ee>
	{
	case FONT_M:						// med font
		if (chr < firstchr_M) return;	// char code out of range
   11248:	8b a9       	ldd	r24, Y+51	; 0x33
   1124a:	80 32       	cpi	r24, 0x20	; 32
   1124c:	08 f4       	brcc	.+2      	; 0x11250 <LCDChar+0x56>
   1124e:	f5 c1       	rjmp	.+1002   	; 0x1163a <LCDChar+0x440>
		a = chr - firstchr_M;
   11250:	8b a9       	ldd	r24, Y+51	; 0x33
   11252:	80 52       	subi	r24, 0x20	; 32
   11254:	8a 83       	std	Y+2, r24	; 0x02
		if (a >= nr_chrs_M) return;		// char code out of range
   11256:	8a 81       	ldd	r24, Y+2	; 0x02
   11258:	80 37       	cpi	r24, 0x70	; 112
   1125a:	08 f0       	brcs	.+2      	; 0x1125e <LCDChar+0x64>
   1125c:	f0 c1       	rjmp	.+992    	; 0x1163e <LCDChar+0x444>

		wid = pgm_read_byte(&widtbl_M[a]);				// number of columns
   1125e:	8a 81       	ldd	r24, Y+2	; 0x02
   11260:	88 2f       	mov	r24, r24
   11262:	90 e0       	ldi	r25, 0x00	; 0
   11264:	88 56       	subi	r24, 0x68	; 104
   11266:	9f 4f       	sbci	r25, 0xFF	; 255
   11268:	9b 87       	std	Y+11, r25	; 0x0b
   1126a:	8a 87       	std	Y+10, r24	; 0x0a
   1126c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1126e:	9b 85       	ldd	r25, Y+11	; 0x0b
   11270:	fc 01       	movw	r30, r24
   11272:	14 91       	lpm	r17, Z+
   11274:	1c 87       	std	Y+12, r17	; 0x0c
   11276:	8c 85       	ldd	r24, Y+12	; 0x0c
   11278:	89 83       	std	Y+1, r24	; 0x01
		bitp = (PBYTE *)pgm_read_word(&chrtbl_M[a]);	// bitmap data pointer
   1127a:	8a 81       	ldd	r24, Y+2	; 0x02
   1127c:	88 2f       	mov	r24, r24
   1127e:	90 e0       	ldi	r25, 0x00	; 0
   11280:	88 0f       	add	r24, r24
   11282:	99 1f       	adc	r25, r25
   11284:	8c 5a       	subi	r24, 0xAC	; 172
   11286:	98 4f       	sbci	r25, 0xF8	; 248
   11288:	9e 87       	std	Y+14, r25	; 0x0e
   1128a:	8d 87       	std	Y+13, r24	; 0x0d
   1128c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1128e:	9e 85       	ldd	r25, Y+14	; 0x0e
   11290:	8c 01       	movw	r16, r24
   11292:	f8 01       	movw	r30, r16
   11294:	e5 90       	lpm	r14, Z+
   11296:	f4 90       	lpm	r15, Z+
   11298:	8f 01       	movw	r16, r30
   1129a:	f8 8a       	std	Y+16, r15	; 0x10
   1129c:	ef 86       	std	Y+15, r14	; 0x0f
   1129e:	1e 87       	std	Y+14, r17	; 0x0e
   112a0:	0d 87       	std	Y+13, r16	; 0x0d
   112a2:	8f 85       	ldd	r24, Y+15	; 0x0f
   112a4:	98 89       	ldd	r25, Y+16	; 0x10
   112a6:	98 87       	std	Y+8, r25	; 0x08
   112a8:	8f 83       	std	Y+7, r24	; 0x07
		size = chr_hgt_M;				// cell height
   112aa:	80 e1       	ldi	r24, 0x10	; 16
   112ac:	8e 83       	std	Y+6, r24	; 0x06
		break;
   112ae:	d0 c0       	rjmp	.+416    	; 0x11450 <LCDChar+0x256>

	case FONT_L:						// large font
		if (chr < firstchr_L) return;	// char code out of range
   112b0:	8b a9       	ldd	r24, Y+51	; 0x33
   112b2:	80 32       	cpi	r24, 0x20	; 32
   112b4:	08 f4       	brcc	.+2      	; 0x112b8 <LCDChar+0xbe>
   112b6:	c5 c1       	rjmp	.+906    	; 0x11642 <LCDChar+0x448>
		a = chr - firstchr_L;
   112b8:	8b a9       	ldd	r24, Y+51	; 0x33
   112ba:	80 52       	subi	r24, 0x20	; 32
   112bc:	8a 83       	std	Y+2, r24	; 0x02
		if (a >= nr_chrs_L) return;		// char code out of range
   112be:	8a 81       	ldd	r24, Y+2	; 0x02
   112c0:	8f 35       	cpi	r24, 0x5F	; 95
   112c2:	08 f0       	brcs	.+2      	; 0x112c6 <LCDChar+0xcc>
   112c4:	c0 c1       	rjmp	.+896    	; 0x11646 <LCDChar+0x44c>

		wid = pgm_read_byte(&widtbl_L[a]);				// number of columns
   112c6:	8a 81       	ldd	r24, Y+2	; 0x02
   112c8:	88 2f       	mov	r24, r24
   112ca:	90 e0       	ldi	r25, 0x00	; 0
   112cc:	8c 57       	subi	r24, 0x7C	; 124
   112ce:	92 4c       	sbci	r25, 0xC2	; 194
   112d0:	9a 8b       	std	Y+18, r25	; 0x12
   112d2:	89 8b       	std	Y+17, r24	; 0x11
   112d4:	89 89       	ldd	r24, Y+17	; 0x11
   112d6:	9a 89       	ldd	r25, Y+18	; 0x12
   112d8:	fc 01       	movw	r30, r24
   112da:	14 91       	lpm	r17, Z+
   112dc:	1b 8b       	std	Y+19, r17	; 0x13
   112de:	8b 89       	ldd	r24, Y+19	; 0x13
   112e0:	89 83       	std	Y+1, r24	; 0x01
		bitp = (PBYTE *)pgm_read_word(&chrtbl_L[a]);	// bitmap data pointer
   112e2:	8a 81       	ldd	r24, Y+2	; 0x02
   112e4:	88 2f       	mov	r24, r24
   112e6:	90 e0       	ldi	r25, 0x00	; 0
   112e8:	88 0f       	add	r24, r24
   112ea:	99 1f       	adc	r25, r25
   112ec:	8d 54       	subi	r24, 0x4D	; 77
   112ee:	9f 4a       	sbci	r25, 0xAF	; 175
   112f0:	9d 8b       	std	Y+21, r25	; 0x15
   112f2:	8c 8b       	std	Y+20, r24	; 0x14
   112f4:	8c 89       	ldd	r24, Y+20	; 0x14
   112f6:	9d 89       	ldd	r25, Y+21	; 0x15
   112f8:	8c 01       	movw	r16, r24
   112fa:	f8 01       	movw	r30, r16
   112fc:	e5 90       	lpm	r14, Z+
   112fe:	f4 90       	lpm	r15, Z+
   11300:	8f 01       	movw	r16, r30
   11302:	ff 8a       	std	Y+23, r15	; 0x17
   11304:	ee 8a       	std	Y+22, r14	; 0x16
   11306:	1d 8b       	std	Y+21, r17	; 0x15
   11308:	0c 8b       	std	Y+20, r16	; 0x14
   1130a:	8e 89       	ldd	r24, Y+22	; 0x16
   1130c:	9f 89       	ldd	r25, Y+23	; 0x17
   1130e:	98 87       	std	Y+8, r25	; 0x08
   11310:	8f 83       	std	Y+7, r24	; 0x07
		size = chr_hgt_L;				// cell height
   11312:	80 e2       	ldi	r24, 0x20	; 32
   11314:	8e 83       	std	Y+6, r24	; 0x06
		break;
   11316:	9c c0       	rjmp	.+312    	; 0x11450 <LCDChar+0x256>

	case FONT_G:						// great font
		if (chr < firstchr_G) return;	// char code out of range
   11318:	8b a9       	ldd	r24, Y+51	; 0x33
   1131a:	80 32       	cpi	r24, 0x20	; 32
   1131c:	08 f4       	brcc	.+2      	; 0x11320 <LCDChar+0x126>
   1131e:	95 c1       	rjmp	.+810    	; 0x1164a <LCDChar+0x450>
		a = chr - firstchr_G;
   11320:	8b a9       	ldd	r24, Y+51	; 0x33
   11322:	80 52       	subi	r24, 0x20	; 32
   11324:	8a 83       	std	Y+2, r24	; 0x02
		if (a >= nr_chrs_G) return;		// char code out of range
   11326:	8a 81       	ldd	r24, Y+2	; 0x02
   11328:	8f 35       	cpi	r24, 0x5F	; 95
   1132a:	08 f0       	brcs	.+2      	; 0x1132e <LCDChar+0x134>
   1132c:	90 c1       	rjmp	.+800    	; 0x1164e <LCDChar+0x454>

		wid = pgm_read_byte(&widtbl_G[a]);				// number of columns
   1132e:	8a 81       	ldd	r24, Y+2	; 0x02
   11330:	88 2f       	mov	r24, r24
   11332:	90 e0       	ldi	r25, 0x00	; 0
   11334:	8f 5b       	subi	r24, 0xBF	; 191
   11336:	94 4f       	sbci	r25, 0xF4	; 244
   11338:	99 8f       	std	Y+25, r25	; 0x19
   1133a:	88 8f       	std	Y+24, r24	; 0x18
   1133c:	88 8d       	ldd	r24, Y+24	; 0x18
   1133e:	99 8d       	ldd	r25, Y+25	; 0x19
   11340:	fc 01       	movw	r30, r24
   11342:	14 91       	lpm	r17, Z+
   11344:	1a 8f       	std	Y+26, r17	; 0x1a
   11346:	8a 8d       	ldd	r24, Y+26	; 0x1a
   11348:	89 83       	std	Y+1, r24	; 0x01
		bitp = (PBYTE *)pgm_read_word(&chrtbl_G[a]);	// bitmap data pointer
   1134a:	8a 81       	ldd	r24, Y+2	; 0x02
   1134c:	88 2f       	mov	r24, r24
   1134e:	90 e0       	ldi	r25, 0x00	; 0
   11350:	88 0f       	add	r24, r24
   11352:	99 1f       	adc	r25, r25
   11354:	8a 53       	subi	r24, 0x3A	; 58
   11356:	93 4c       	sbci	r25, 0xC3	; 195
   11358:	9c 8f       	std	Y+28, r25	; 0x1c
   1135a:	8b 8f       	std	Y+27, r24	; 0x1b
   1135c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1135e:	9c 8d       	ldd	r25, Y+28	; 0x1c
   11360:	8c 01       	movw	r16, r24
   11362:	f8 01       	movw	r30, r16
   11364:	e5 90       	lpm	r14, Z+
   11366:	f4 90       	lpm	r15, Z+
   11368:	8f 01       	movw	r16, r30
   1136a:	fe 8e       	std	Y+30, r15	; 0x1e
   1136c:	ed 8e       	std	Y+29, r14	; 0x1d
   1136e:	1c 8f       	std	Y+28, r17	; 0x1c
   11370:	0b 8f       	std	Y+27, r16	; 0x1b
   11372:	8d 8d       	ldd	r24, Y+29	; 0x1d
   11374:	9e 8d       	ldd	r25, Y+30	; 0x1e
   11376:	98 87       	std	Y+8, r25	; 0x08
   11378:	8f 83       	std	Y+7, r24	; 0x07
		size = chr_hgt_G;				// cell height
   1137a:	80 e3       	ldi	r24, 0x30	; 48
   1137c:	8e 83       	std	Y+6, r24	; 0x06
		break;
   1137e:	68 c0       	rjmp	.+208    	; 0x11450 <LCDChar+0x256>

	case FONT_H:						// huge font
		if (chr < firstchr_H) return;	// char code out of range
   11380:	8b a9       	ldd	r24, Y+51	; 0x33
   11382:	80 32       	cpi	r24, 0x20	; 32
   11384:	08 f4       	brcc	.+2      	; 0x11388 <LCDChar+0x18e>
   11386:	65 c1       	rjmp	.+714    	; 0x11652 <LCDChar+0x458>
		a = chr - firstchr_H;
   11388:	8b a9       	ldd	r24, Y+51	; 0x33
   1138a:	80 52       	subi	r24, 0x20	; 32
   1138c:	8a 83       	std	Y+2, r24	; 0x02
		if (a >= nr_chrs_H) return;		// char code out of range
   1138e:	8a 81       	ldd	r24, Y+2	; 0x02
   11390:	8f 35       	cpi	r24, 0x5F	; 95
   11392:	08 f0       	brcs	.+2      	; 0x11396 <LCDChar+0x19c>
   11394:	60 c1       	rjmp	.+704    	; 0x11656 <LCDChar+0x45c>

		wid = pgm_read_byte(&widtbl_H[a]);				// number of columns
   11396:	8a 81       	ldd	r24, Y+2	; 0x02
   11398:	88 2f       	mov	r24, r24
   1139a:	90 e0       	ldi	r25, 0x00	; 0
   1139c:	8f 58       	subi	r24, 0x8F	; 143
   1139e:	9e 4a       	sbci	r25, 0xAE	; 174
   113a0:	98 a3       	std	Y+32, r25	; 0x20
   113a2:	8f 8f       	std	Y+31, r24	; 0x1f
   113a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
   113a6:	98 a1       	ldd	r25, Y+32	; 0x20
   113a8:	fc 01       	movw	r30, r24
   113aa:	14 91       	lpm	r17, Z+
   113ac:	19 a3       	std	Y+33, r17	; 0x21
   113ae:	89 a1       	ldd	r24, Y+33	; 0x21
   113b0:	89 83       	std	Y+1, r24	; 0x01
		bitp = (PBYTE *)pgm_read_word(&chrtbl_H[a]);	// bitmap data pointer
   113b2:	8a 81       	ldd	r24, Y+2	; 0x02
   113b4:	88 2f       	mov	r24, r24
   113b6:	90 e0       	ldi	r25, 0x00	; 0
   113b8:	88 0f       	add	r24, r24
   113ba:	99 1f       	adc	r25, r25
   113bc:	88 56       	subi	r24, 0x68	; 104
   113be:	90 46       	sbci	r25, 0x60	; 96
   113c0:	9b a3       	std	Y+35, r25	; 0x23
   113c2:	8a a3       	std	Y+34, r24	; 0x22
   113c4:	8a a1       	ldd	r24, Y+34	; 0x22
   113c6:	9b a1       	ldd	r25, Y+35	; 0x23
   113c8:	8c 01       	movw	r16, r24
   113ca:	f8 01       	movw	r30, r16
   113cc:	e5 90       	lpm	r14, Z+
   113ce:	f4 90       	lpm	r15, Z+
   113d0:	8f 01       	movw	r16, r30
   113d2:	fd a2       	std	Y+37, r15	; 0x25
   113d4:	ec a2       	std	Y+36, r14	; 0x24
   113d6:	1b a3       	std	Y+35, r17	; 0x23
   113d8:	0a a3       	std	Y+34, r16	; 0x22
   113da:	8c a1       	ldd	r24, Y+36	; 0x24
   113dc:	9d a1       	ldd	r25, Y+37	; 0x25
   113de:	98 87       	std	Y+8, r25	; 0x08
   113e0:	8f 83       	std	Y+7, r24	; 0x07
		size = chr_hgt_H;				// cell height
   113e2:	80 e4       	ldi	r24, 0x40	; 64
   113e4:	8e 83       	std	Y+6, r24	; 0x06
		break;
   113e6:	34 c0       	rjmp	.+104    	; 0x11450 <LCDChar+0x256>

	default:							// small font
		if (chr < firstchr_S) return;	// char code out of range
   113e8:	8b a9       	ldd	r24, Y+51	; 0x33
   113ea:	80 32       	cpi	r24, 0x20	; 32
   113ec:	08 f4       	brcc	.+2      	; 0x113f0 <LCDChar+0x1f6>
   113ee:	35 c1       	rjmp	.+618    	; 0x1165a <LCDChar+0x460>
		a = chr - firstchr_S;
   113f0:	8b a9       	ldd	r24, Y+51	; 0x33
   113f2:	80 52       	subi	r24, 0x20	; 32
   113f4:	8a 83       	std	Y+2, r24	; 0x02
		if (a >= nr_chrs_S) return;		// char code out of range
   113f6:	8a 81       	ldd	r24, Y+2	; 0x02
   113f8:	88 36       	cpi	r24, 0x68	; 104
   113fa:	08 f0       	brcs	.+2      	; 0x113fe <LCDChar+0x204>
   113fc:	30 c1       	rjmp	.+608    	; 0x1165e <LCDChar+0x464>

		wid = pgm_read_byte(&widtbl_S[a]);				// number of columns
   113fe:	8a 81       	ldd	r24, Y+2	; 0x02
   11400:	88 2f       	mov	r24, r24
   11402:	90 e0       	ldi	r25, 0x00	; 0
   11404:	8c 5c       	subi	r24, 0xCC	; 204
   11406:	97 4f       	sbci	r25, 0xF7	; 247
   11408:	9f a3       	std	Y+39, r25	; 0x27
   1140a:	8e a3       	std	Y+38, r24	; 0x26
   1140c:	8e a1       	ldd	r24, Y+38	; 0x26
   1140e:	9f a1       	ldd	r25, Y+39	; 0x27
   11410:	fc 01       	movw	r30, r24
   11412:	14 91       	lpm	r17, Z+
   11414:	18 a7       	std	Y+40, r17	; 0x28
   11416:	88 a5       	ldd	r24, Y+40	; 0x28
   11418:	89 83       	std	Y+1, r24	; 0x01
		bitp = (PBYTE *)pgm_read_word(&chrtbl_S[a]);	// bitmap data pointer
   1141a:	8a 81       	ldd	r24, Y+2	; 0x02
   1141c:	88 2f       	mov	r24, r24
   1141e:	90 e0       	ldi	r25, 0x00	; 0
   11420:	88 0f       	add	r24, r24
   11422:	99 1f       	adc	r25, r25
   11424:	8f 58       	subi	r24, 0x8F	; 143
   11426:	95 4f       	sbci	r25, 0xF5	; 245
   11428:	9a a7       	std	Y+42, r25	; 0x2a
   1142a:	89 a7       	std	Y+41, r24	; 0x29
   1142c:	89 a5       	ldd	r24, Y+41	; 0x29
   1142e:	9a a5       	ldd	r25, Y+42	; 0x2a
   11430:	8c 01       	movw	r16, r24
   11432:	f8 01       	movw	r30, r16
   11434:	e5 90       	lpm	r14, Z+
   11436:	f4 90       	lpm	r15, Z+
   11438:	8f 01       	movw	r16, r30
   1143a:	fc a6       	std	Y+44, r15	; 0x2c
   1143c:	eb a6       	std	Y+43, r14	; 0x2b
   1143e:	1a a7       	std	Y+42, r17	; 0x2a
   11440:	09 a7       	std	Y+41, r16	; 0x29
   11442:	8b a5       	ldd	r24, Y+43	; 0x2b
   11444:	9c a5       	ldd	r25, Y+44	; 0x2c
   11446:	98 87       	std	Y+8, r25	; 0x08
   11448:	8f 83       	std	Y+7, r24	; 0x07
		size = chr_hgt_S;				// cell height
   1144a:	88 e0       	ldi	r24, 0x08	; 8
   1144c:	8e 83       	std	Y+6, r24	; 0x06
		break;
   1144e:	00 00       	nop
	}

	if (wid == 0) return;
   11450:	89 81       	ldd	r24, Y+1	; 0x01
   11452:	88 23       	and	r24, r24
   11454:	09 f4       	brne	.+2      	; 0x11458 <LCDChar+0x25e>
   11456:	05 c1       	rjmp	.+522    	; 0x11662 <LCDChar+0x468>

	if (chr != ' ')						// don't process space char
   11458:	8b a9       	ldd	r24, Y+51	; 0x33
   1145a:	80 32       	cpi	r24, 0x20	; 32
   1145c:	09 f4       	brne	.+2      	; 0x11460 <LCDChar+0x266>
   1145e:	ad c0       	rjmp	.+346    	; 0x115ba <LCDChar+0x3c0>
	{
		d = size / 8;					// number of bytes per column
   11460:	8e 81       	ldd	r24, Y+6	; 0x06
   11462:	86 95       	lsr	r24
   11464:	86 95       	lsr	r24
   11466:	86 95       	lsr	r24
   11468:	8d a7       	std	Y+45, r24	; 0x2d
		for (a = 0; a < wid; a++)		// do columns
   1146a:	1a 82       	std	Y+2, r1	; 0x02
   1146c:	a1 c0       	rjmp	.+322    	; 0x115b0 <LCDChar+0x3b6>
		{
			LCDSetTCur(dsrow, dscol + a);// set starting row, column
   1146e:	80 91 f0 03 	lds	r24, 0x03F0
   11472:	88 2f       	mov	r24, r24
   11474:	90 e0       	ldi	r25, 0x00	; 0
   11476:	2a 81       	ldd	r18, Y+2	; 0x02
   11478:	42 2f       	mov	r20, r18
   1147a:	50 e0       	ldi	r21, 0x00	; 0
   1147c:	20 91 f3 03 	lds	r18, 0x03F3
   11480:	30 91 f4 03 	lds	r19, 0x03F4
   11484:	24 0f       	add	r18, r20
   11486:	35 1f       	adc	r19, r21
   11488:	b9 01       	movw	r22, r18
   1148a:	0e 94 c4 8c 	call	0x11988	; 0x11988 <LCDSetTCur>
			flag = 0;
   1148e:	1d 82       	std	Y+5, r1	; 0x05
			for (b = 0; b < d; b++)		// do column bytes
   11490:	1b 82       	std	Y+3, r1	; 0x03
   11492:	86 c0       	rjmp	.+268    	; 0x115a0 <LCDChar+0x3a6>
			{
				bits = pgm_read_byte(bitp + b + (d * a));	// get column byte
   11494:	8b 81       	ldd	r24, Y+3	; 0x03
   11496:	28 2f       	mov	r18, r24
   11498:	30 e0       	ldi	r19, 0x00	; 0
   1149a:	8d a5       	ldd	r24, Y+45	; 0x2d
   1149c:	68 2f       	mov	r22, r24
   1149e:	70 e0       	ldi	r23, 0x00	; 0
   114a0:	8a 81       	ldd	r24, Y+2	; 0x02
   114a2:	48 2f       	mov	r20, r24
   114a4:	50 e0       	ldi	r21, 0x00	; 0
   114a6:	64 9f       	mul	r22, r20
   114a8:	c0 01       	movw	r24, r0
   114aa:	65 9f       	mul	r22, r21
   114ac:	90 0d       	add	r25, r0
   114ae:	74 9f       	mul	r23, r20
   114b0:	90 0d       	add	r25, r0
   114b2:	11 24       	eor	r1, r1
   114b4:	82 0f       	add	r24, r18
   114b6:	93 1f       	adc	r25, r19
   114b8:	2f 81       	ldd	r18, Y+7	; 0x07
   114ba:	38 85       	ldd	r19, Y+8	; 0x08
   114bc:	82 0f       	add	r24, r18
   114be:	93 1f       	adc	r25, r19
   114c0:	9f a7       	std	Y+47, r25	; 0x2f
   114c2:	8e a7       	std	Y+46, r24	; 0x2e
   114c4:	8e a5       	ldd	r24, Y+46	; 0x2e
   114c6:	9f a5       	ldd	r25, Y+47	; 0x2f
   114c8:	fc 01       	movw	r30, r24
   114ca:	14 91       	lpm	r17, Z+
   114cc:	18 ab       	std	Y+48, r17	; 0x30
   114ce:	88 a9       	ldd	r24, Y+48	; 0x30
   114d0:	89 ab       	std	Y+49, r24	; 0x31
				mask = 1;				// start with D0 (top pixel of col)
   114d2:	81 e0       	ldi	r24, 0x01	; 1
   114d4:	89 87       	std	Y+9, r24	; 0x09
				rw = dsrow + b * 8;
   114d6:	8b 81       	ldd	r24, Y+3	; 0x03
   114d8:	98 2f       	mov	r25, r24
   114da:	99 0f       	add	r25, r25
   114dc:	99 0f       	add	r25, r25
   114de:	99 0f       	add	r25, r25
   114e0:	80 91 f0 03 	lds	r24, 0x03F0
   114e4:	89 0f       	add	r24, r25
   114e6:	8a ab       	std	Y+50, r24	; 0x32
				for (c = 0; c < 8; c++)	// do bits
   114e8:	1c 82       	std	Y+4, r1	; 0x04
   114ea:	53 c0       	rjmp	.+166    	; 0x11592 <LCDChar+0x398>
				{
					if (mask & bits)	// put fg pixel
   114ec:	99 85       	ldd	r25, Y+9	; 0x09
   114ee:	89 a9       	ldd	r24, Y+49	; 0x31
   114f0:	89 23       	and	r24, r25
   114f2:	88 23       	and	r24, r24
   114f4:	f9 f0       	breq	.+62     	; 0x11534 <LCDChar+0x33a>
					{
						if (flag)		// cursor addr need to be set
   114f6:	8d 81       	ldd	r24, Y+5	; 0x05
   114f8:	88 23       	and	r24, r24
   114fa:	a9 f0       	breq	.+42     	; 0x11526 <LCDChar+0x32c>
						{
							LCDSetTCur(rw + c, dscol + a);	// set starting row, column
   114fc:	8a a9       	ldd	r24, Y+50	; 0x32
   114fe:	28 2f       	mov	r18, r24
   11500:	30 e0       	ldi	r19, 0x00	; 0
   11502:	8c 81       	ldd	r24, Y+4	; 0x04
   11504:	88 2f       	mov	r24, r24
   11506:	90 e0       	ldi	r25, 0x00	; 0
   11508:	82 0f       	add	r24, r18
   1150a:	93 1f       	adc	r25, r19
   1150c:	2a 81       	ldd	r18, Y+2	; 0x02
   1150e:	42 2f       	mov	r20, r18
   11510:	50 e0       	ldi	r21, 0x00	; 0
   11512:	20 91 f3 03 	lds	r18, 0x03F3
   11516:	30 91 f4 03 	lds	r19, 0x03F4
   1151a:	24 0f       	add	r18, r20
   1151c:	35 1f       	adc	r19, r21
   1151e:	b9 01       	movw	r22, r18
   11520:	0e 94 c4 8c 	call	0x11988	; 0x11988 <LCDSetTCur>
							flag = 0;
   11524:	1d 82       	std	Y+5, r1	; 0x05
						}
						LCDData(fgcolor);
   11526:	80 91 f5 03 	lds	r24, 0x03F5
   1152a:	90 91 f6 03 	lds	r25, 0x03F6
   1152e:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
   11532:	29 c0       	rjmp	.+82     	; 0x11586 <LCDChar+0x38c>
					}
					else
					{
						if (! (CJ_code & NOBG))	// put bg pixel
   11534:	80 91 bc 01 	lds	r24, 0x01BC
   11538:	88 2f       	mov	r24, r24
   1153a:	90 e0       	ldi	r25, 0x00	; 0
   1153c:	80 72       	andi	r24, 0x20	; 32
   1153e:	90 70       	andi	r25, 0x00	; 0
   11540:	00 97       	sbiw	r24, 0x00	; 0
   11542:	f9 f4       	brne	.+62     	; 0x11582 <LCDChar+0x388>
						{
							if (flag)		// cursor addr need to be set
   11544:	8d 81       	ldd	r24, Y+5	; 0x05
   11546:	88 23       	and	r24, r24
   11548:	a9 f0       	breq	.+42     	; 0x11574 <LCDChar+0x37a>
							{
								LCDSetTCur(rw + c, dscol + a);	// set starting row, column
   1154a:	8a a9       	ldd	r24, Y+50	; 0x32
   1154c:	28 2f       	mov	r18, r24
   1154e:	30 e0       	ldi	r19, 0x00	; 0
   11550:	8c 81       	ldd	r24, Y+4	; 0x04
   11552:	88 2f       	mov	r24, r24
   11554:	90 e0       	ldi	r25, 0x00	; 0
   11556:	82 0f       	add	r24, r18
   11558:	93 1f       	adc	r25, r19
   1155a:	2a 81       	ldd	r18, Y+2	; 0x02
   1155c:	42 2f       	mov	r20, r18
   1155e:	50 e0       	ldi	r21, 0x00	; 0
   11560:	20 91 f3 03 	lds	r18, 0x03F3
   11564:	30 91 f4 03 	lds	r19, 0x03F4
   11568:	24 0f       	add	r18, r20
   1156a:	35 1f       	adc	r19, r21
   1156c:	b9 01       	movw	r22, r18
   1156e:	0e 94 c4 8c 	call	0x11988	; 0x11988 <LCDSetTCur>
								flag = 0;
   11572:	1d 82       	std	Y+5, r1	; 0x05
							}
							LCDData(bgcolor);
   11574:	80 91 f1 03 	lds	r24, 0x03F1
   11578:	90 91 f2 03 	lds	r25, 0x03F2
   1157c:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
   11580:	02 c0       	rjmp	.+4      	; 0x11586 <LCDChar+0x38c>
						}
						else flag = 1;	// skip write, flag for addr update
   11582:	81 e0       	ldi	r24, 0x01	; 1
   11584:	8d 83       	std	Y+5, r24	; 0x05
					}
					mask <<= 1;			// next bit
   11586:	89 85       	ldd	r24, Y+9	; 0x09
   11588:	88 0f       	add	r24, r24
   1158a:	89 87       	std	Y+9, r24	; 0x09
			for (b = 0; b < d; b++)		// do column bytes
			{
				bits = pgm_read_byte(bitp + b + (d * a));	// get column byte
				mask = 1;				// start with D0 (top pixel of col)
				rw = dsrow + b * 8;
				for (c = 0; c < 8; c++)	// do bits
   1158c:	8c 81       	ldd	r24, Y+4	; 0x04
   1158e:	8f 5f       	subi	r24, 0xFF	; 255
   11590:	8c 83       	std	Y+4, r24	; 0x04
   11592:	8c 81       	ldd	r24, Y+4	; 0x04
   11594:	88 30       	cpi	r24, 0x08	; 8
   11596:	08 f4       	brcc	.+2      	; 0x1159a <LCDChar+0x3a0>
   11598:	a9 cf       	rjmp	.-174    	; 0x114ec <LCDChar+0x2f2>
		d = size / 8;					// number of bytes per column
		for (a = 0; a < wid; a++)		// do columns
		{
			LCDSetTCur(dsrow, dscol + a);// set starting row, column
			flag = 0;
			for (b = 0; b < d; b++)		// do column bytes
   1159a:	8b 81       	ldd	r24, Y+3	; 0x03
   1159c:	8f 5f       	subi	r24, 0xFF	; 255
   1159e:	8b 83       	std	Y+3, r24	; 0x03
   115a0:	9b 81       	ldd	r25, Y+3	; 0x03
   115a2:	8d a5       	ldd	r24, Y+45	; 0x2d
   115a4:	98 17       	cp	r25, r24
   115a6:	08 f4       	brcc	.+2      	; 0x115aa <LCDChar+0x3b0>
   115a8:	75 cf       	rjmp	.-278    	; 0x11494 <LCDChar+0x29a>
	if (wid == 0) return;

	if (chr != ' ')						// don't process space char
	{
		d = size / 8;					// number of bytes per column
		for (a = 0; a < wid; a++)		// do columns
   115aa:	8a 81       	ldd	r24, Y+2	; 0x02
   115ac:	8f 5f       	subi	r24, 0xFF	; 255
   115ae:	8a 83       	std	Y+2, r24	; 0x02
   115b0:	9a 81       	ldd	r25, Y+2	; 0x02
   115b2:	89 81       	ldd	r24, Y+1	; 0x01
   115b4:	98 17       	cp	r25, r24
   115b6:	08 f4       	brcc	.+2      	; 0x115ba <LCDChar+0x3c0>
   115b8:	5a cf       	rjmp	.-332    	; 0x1146e <LCDChar+0x274>
				}	// end do bits
			}	// end do column bytes
		}	// end do columns
	}	// end if not space

	if (! (CJ_code & NOSPC))	// space at end of char
   115ba:	80 91 bc 01 	lds	r24, 0x01BC
   115be:	88 2f       	mov	r24, r24
   115c0:	90 e0       	ldi	r25, 0x00	; 0
   115c2:	80 71       	andi	r24, 0x10	; 16
   115c4:	90 70       	andi	r25, 0x00	; 0
   115c6:	00 97       	sbiw	r24, 0x00	; 0
   115c8:	51 f5       	brne	.+84     	; 0x1161e <LCDChar+0x424>
	{
		if (! (CJ_code & NOBG))	// put bg pixels
   115ca:	80 91 bc 01 	lds	r24, 0x01BC
   115ce:	88 2f       	mov	r24, r24
   115d0:	90 e0       	ldi	r25, 0x00	; 0
   115d2:	80 72       	andi	r24, 0x20	; 32
   115d4:	90 70       	andi	r25, 0x00	; 0
   115d6:	00 97       	sbiw	r24, 0x00	; 0
   115d8:	f9 f4       	brne	.+62     	; 0x11618 <LCDChar+0x41e>
		{
			LCDSetTCur(dsrow, dscol + wid);   // set starting row, column
   115da:	80 91 f0 03 	lds	r24, 0x03F0
   115de:	88 2f       	mov	r24, r24
   115e0:	90 e0       	ldi	r25, 0x00	; 0
   115e2:	29 81       	ldd	r18, Y+1	; 0x01
   115e4:	42 2f       	mov	r20, r18
   115e6:	50 e0       	ldi	r21, 0x00	; 0
   115e8:	20 91 f3 03 	lds	r18, 0x03F3
   115ec:	30 91 f4 03 	lds	r19, 0x03F4
   115f0:	24 0f       	add	r18, r20
   115f2:	35 1f       	adc	r19, r21
   115f4:	b9 01       	movw	r22, r18
   115f6:	0e 94 c4 8c 	call	0x11988	; 0x11988 <LCDSetTCur>
			for (a = 0; a < size; a++)
   115fa:	1a 82       	std	Y+2, r1	; 0x02
   115fc:	09 c0       	rjmp	.+18     	; 0x11610 <LCDChar+0x416>
			{
				LCDData(bgcolor);
   115fe:	80 91 f1 03 	lds	r24, 0x03F1
   11602:	90 91 f2 03 	lds	r25, 0x03F2
   11606:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
	if (! (CJ_code & NOSPC))	// space at end of char
	{
		if (! (CJ_code & NOBG))	// put bg pixels
		{
			LCDSetTCur(dsrow, dscol + wid);   // set starting row, column
			for (a = 0; a < size; a++)
   1160a:	8a 81       	ldd	r24, Y+2	; 0x02
   1160c:	8f 5f       	subi	r24, 0xFF	; 255
   1160e:	8a 83       	std	Y+2, r24	; 0x02
   11610:	9a 81       	ldd	r25, Y+2	; 0x02
   11612:	8e 81       	ldd	r24, Y+6	; 0x06
   11614:	98 17       	cp	r25, r24
   11616:	98 f3       	brcs	.-26     	; 0x115fe <LCDChar+0x404>
			{
				LCDData(bgcolor);
			}
		}
		wid++;					// add space to char wid
   11618:	89 81       	ldd	r24, Y+1	; 0x01
   1161a:	8f 5f       	subi	r24, 0xFF	; 255
   1161c:	89 83       	std	Y+1, r24	; 0x01
	}
	dscol += wid;				// update current column
   1161e:	89 81       	ldd	r24, Y+1	; 0x01
   11620:	28 2f       	mov	r18, r24
   11622:	30 e0       	ldi	r19, 0x00	; 0
   11624:	80 91 f3 03 	lds	r24, 0x03F3
   11628:	90 91 f4 03 	lds	r25, 0x03F4
   1162c:	82 0f       	add	r24, r18
   1162e:	93 1f       	adc	r25, r19
   11630:	90 93 f4 03 	sts	0x03F4, r25
   11634:	80 93 f3 03 	sts	0x03F3, r24
   11638:	15 c0       	rjmp	.+42     	; 0x11664 <LCDChar+0x46a>
	BYTE bits, mask;

	switch (font)		// get the font information
	{
	case FONT_M:						// med font
		if (chr < firstchr_M) return;	// char code out of range
   1163a:	00 00       	nop
   1163c:	13 c0       	rjmp	.+38     	; 0x11664 <LCDChar+0x46a>
		a = chr - firstchr_M;
		if (a >= nr_chrs_M) return;		// char code out of range
   1163e:	00 00       	nop
   11640:	11 c0       	rjmp	.+34     	; 0x11664 <LCDChar+0x46a>
		bitp = (PBYTE *)pgm_read_word(&chrtbl_M[a]);	// bitmap data pointer
		size = chr_hgt_M;				// cell height
		break;

	case FONT_L:						// large font
		if (chr < firstchr_L) return;	// char code out of range
   11642:	00 00       	nop
   11644:	0f c0       	rjmp	.+30     	; 0x11664 <LCDChar+0x46a>
		a = chr - firstchr_L;
		if (a >= nr_chrs_L) return;		// char code out of range
   11646:	00 00       	nop
   11648:	0d c0       	rjmp	.+26     	; 0x11664 <LCDChar+0x46a>
		bitp = (PBYTE *)pgm_read_word(&chrtbl_L[a]);	// bitmap data pointer
		size = chr_hgt_L;				// cell height
		break;

	case FONT_G:						// great font
		if (chr < firstchr_G) return;	// char code out of range
   1164a:	00 00       	nop
   1164c:	0b c0       	rjmp	.+22     	; 0x11664 <LCDChar+0x46a>
		a = chr - firstchr_G;
		if (a >= nr_chrs_G) return;		// char code out of range
   1164e:	00 00       	nop
   11650:	09 c0       	rjmp	.+18     	; 0x11664 <LCDChar+0x46a>
		bitp = (PBYTE *)pgm_read_word(&chrtbl_G[a]);	// bitmap data pointer
		size = chr_hgt_G;				// cell height
		break;

	case FONT_H:						// huge font
		if (chr < firstchr_H) return;	// char code out of range
   11652:	00 00       	nop
   11654:	07 c0       	rjmp	.+14     	; 0x11664 <LCDChar+0x46a>
		a = chr - firstchr_H;
		if (a >= nr_chrs_H) return;		// char code out of range
   11656:	00 00       	nop
   11658:	05 c0       	rjmp	.+10     	; 0x11664 <LCDChar+0x46a>
		bitp = (PBYTE *)pgm_read_word(&chrtbl_H[a]);	// bitmap data pointer
		size = chr_hgt_H;				// cell height
		break;

	default:							// small font
		if (chr < firstchr_S) return;	// char code out of range
   1165a:	00 00       	nop
   1165c:	03 c0       	rjmp	.+6      	; 0x11664 <LCDChar+0x46a>
		a = chr - firstchr_S;
		if (a >= nr_chrs_S) return;		// char code out of range
   1165e:	00 00       	nop
   11660:	01 c0       	rjmp	.+2      	; 0x11664 <LCDChar+0x46a>
		bitp = (PBYTE *)pgm_read_word(&chrtbl_S[a]);	// bitmap data pointer
		size = chr_hgt_S;				// cell height
		break;
	}

	if (wid == 0) return;
   11662:	00 00       	nop
			}
		}
		wid++;					// add space to char wid
	}
	dscol += wid;				// update current column
}
   11664:	e3 96       	adiw	r28, 0x33	; 51
   11666:	0f b6       	in	r0, 0x3f	; 63
   11668:	f8 94       	cli
   1166a:	de bf       	out	0x3e, r29	; 62
   1166c:	0f be       	out	0x3f, r0	; 63
   1166e:	cd bf       	out	0x3d, r28	; 61
   11670:	cf 91       	pop	r28
   11672:	df 91       	pop	r29
   11674:	1f 91       	pop	r17
   11676:	0f 91       	pop	r16
   11678:	ff 90       	pop	r15
   1167a:	ef 90       	pop	r14
   1167c:	08 95       	ret

0001167e <LCDErase>:
/***********************************************************
	Erase a block of pixels, using bgcolor
***********************************************************/

void LCDErase(WORD row, WORD col, WORD hgt, WORD wid)
{
   1167e:	df 93       	push	r29
   11680:	cf 93       	push	r28
   11682:	cd b7       	in	r28, 0x3d	; 61
   11684:	de b7       	in	r29, 0x3e	; 62
   11686:	2e 97       	sbiw	r28, 0x0e	; 14
   11688:	0f b6       	in	r0, 0x3f	; 63
   1168a:	f8 94       	cli
   1168c:	de bf       	out	0x3e, r29	; 62
   1168e:	0f be       	out	0x3f, r0	; 63
   11690:	cd bf       	out	0x3d, r28	; 61
   11692:	98 87       	std	Y+8, r25	; 0x08
   11694:	8f 83       	std	Y+7, r24	; 0x07
   11696:	7a 87       	std	Y+10, r23	; 0x0a
   11698:	69 87       	std	Y+9, r22	; 0x09
   1169a:	5c 87       	std	Y+12, r21	; 0x0c
   1169c:	4b 87       	std	Y+11, r20	; 0x0b
   1169e:	3e 87       	std	Y+14, r19	; 0x0e
   116a0:	2d 87       	std	Y+13, r18	; 0x0d
	WORD a, b, c;

	b = row + hgt;
   116a2:	2f 81       	ldd	r18, Y+7	; 0x07
   116a4:	38 85       	ldd	r19, Y+8	; 0x08
   116a6:	8b 85       	ldd	r24, Y+11	; 0x0b
   116a8:	9c 85       	ldd	r25, Y+12	; 0x0c
   116aa:	82 0f       	add	r24, r18
   116ac:	93 1f       	adc	r25, r19
   116ae:	9e 83       	std	Y+6, r25	; 0x06
   116b0:	8d 83       	std	Y+5, r24	; 0x05
	for (c = row; c <= b; c++)	// do rows
   116b2:	8f 81       	ldd	r24, Y+7	; 0x07
   116b4:	98 85       	ldd	r25, Y+8	; 0x08
   116b6:	9c 83       	std	Y+4, r25	; 0x04
   116b8:	8b 83       	std	Y+3, r24	; 0x03
   116ba:	6d c0       	rjmp	.+218    	; 0x11796 <LCDErase+0x118>
	{
		LCDSetGCur(c, col);
   116bc:	8b 81       	ldd	r24, Y+3	; 0x03
   116be:	9c 81       	ldd	r25, Y+4	; 0x04
   116c0:	29 85       	ldd	r18, Y+9	; 0x09
   116c2:	3a 85       	ldd	r19, Y+10	; 0x0a
   116c4:	b9 01       	movw	r22, r18
   116c6:	0e 94 90 8c 	call	0x11920	; 0x11920 <LCDSetGCur>
		CLR(CS);
   116ca:	88 e2       	ldi	r24, 0x28	; 40
   116cc:	90 e0       	ldi	r25, 0x00	; 0
   116ce:	28 e2       	ldi	r18, 0x28	; 40
   116d0:	30 e0       	ldi	r19, 0x00	; 0
   116d2:	f9 01       	movw	r30, r18
   116d4:	20 81       	ld	r18, Z
   116d6:	2f 7e       	andi	r18, 0xEF	; 239
   116d8:	fc 01       	movw	r30, r24
   116da:	20 83       	st	Z, r18
		SET(CD);
   116dc:	88 e2       	ldi	r24, 0x28	; 40
   116de:	90 e0       	ldi	r25, 0x00	; 0
   116e0:	28 e2       	ldi	r18, 0x28	; 40
   116e2:	30 e0       	ldi	r19, 0x00	; 0
   116e4:	f9 01       	movw	r30, r18
   116e6:	20 81       	ld	r18, Z
   116e8:	20 62       	ori	r18, 0x20	; 32
   116ea:	fc 01       	movw	r30, r24
   116ec:	20 83       	st	Z, r18
#ifdef BIT16
		OUT_HI = bgcolor >> 8;
		OUT_LO = bgcolor & 0xFF;
#endif
		for (a = 0; a < wid; a++)	// do columns
   116ee:	1a 82       	std	Y+2, r1	; 0x02
   116f0:	19 82       	std	Y+1, r1	; 0x01
   116f2:	3b c0       	rjmp	.+118    	; 0x1176a <LCDErase+0xec>
		{
#ifdef BIT16
			CLR(WR);
			SET(WR);
#else
			OUT_HI = bgcolor >> 8;
   116f4:	82 e2       	ldi	r24, 0x22	; 34
   116f6:	90 e0       	ldi	r25, 0x00	; 0
   116f8:	20 91 f1 03 	lds	r18, 0x03F1
   116fc:	30 91 f2 03 	lds	r19, 0x03F2
   11700:	23 2f       	mov	r18, r19
   11702:	33 27       	eor	r19, r19
   11704:	fc 01       	movw	r30, r24
   11706:	20 83       	st	Z, r18
			CLR(WR);
   11708:	88 e2       	ldi	r24, 0x28	; 40
   1170a:	90 e0       	ldi	r25, 0x00	; 0
   1170c:	28 e2       	ldi	r18, 0x28	; 40
   1170e:	30 e0       	ldi	r19, 0x00	; 0
   11710:	f9 01       	movw	r30, r18
   11712:	20 81       	ld	r18, Z
   11714:	2f 7b       	andi	r18, 0xBF	; 191
   11716:	fc 01       	movw	r30, r24
   11718:	20 83       	st	Z, r18
			SET(WR);
   1171a:	88 e2       	ldi	r24, 0x28	; 40
   1171c:	90 e0       	ldi	r25, 0x00	; 0
   1171e:	28 e2       	ldi	r18, 0x28	; 40
   11720:	30 e0       	ldi	r19, 0x00	; 0
   11722:	f9 01       	movw	r30, r18
   11724:	20 81       	ld	r18, Z
   11726:	20 64       	ori	r18, 0x40	; 64
   11728:	fc 01       	movw	r30, r24
   1172a:	20 83       	st	Z, r18
		
			OUT_HI = bgcolor & 0xFF;
   1172c:	82 e2       	ldi	r24, 0x22	; 34
   1172e:	90 e0       	ldi	r25, 0x00	; 0
   11730:	20 91 f1 03 	lds	r18, 0x03F1
   11734:	30 91 f2 03 	lds	r19, 0x03F2
   11738:	fc 01       	movw	r30, r24
   1173a:	20 83       	st	Z, r18
			CLR(WR);
   1173c:	88 e2       	ldi	r24, 0x28	; 40
   1173e:	90 e0       	ldi	r25, 0x00	; 0
   11740:	28 e2       	ldi	r18, 0x28	; 40
   11742:	30 e0       	ldi	r19, 0x00	; 0
   11744:	f9 01       	movw	r30, r18
   11746:	20 81       	ld	r18, Z
   11748:	2f 7b       	andi	r18, 0xBF	; 191
   1174a:	fc 01       	movw	r30, r24
   1174c:	20 83       	st	Z, r18
			SET(WR);
   1174e:	88 e2       	ldi	r24, 0x28	; 40
   11750:	90 e0       	ldi	r25, 0x00	; 0
   11752:	28 e2       	ldi	r18, 0x28	; 40
   11754:	30 e0       	ldi	r19, 0x00	; 0
   11756:	f9 01       	movw	r30, r18
   11758:	20 81       	ld	r18, Z
   1175a:	20 64       	ori	r18, 0x40	; 64
   1175c:	fc 01       	movw	r30, r24
   1175e:	20 83       	st	Z, r18
		SET(CD);
#ifdef BIT16
		OUT_HI = bgcolor >> 8;
		OUT_LO = bgcolor & 0xFF;
#endif
		for (a = 0; a < wid; a++)	// do columns
   11760:	89 81       	ldd	r24, Y+1	; 0x01
   11762:	9a 81       	ldd	r25, Y+2	; 0x02
   11764:	01 96       	adiw	r24, 0x01	; 1
   11766:	9a 83       	std	Y+2, r25	; 0x02
   11768:	89 83       	std	Y+1, r24	; 0x01
   1176a:	29 81       	ldd	r18, Y+1	; 0x01
   1176c:	3a 81       	ldd	r19, Y+2	; 0x02
   1176e:	8d 85       	ldd	r24, Y+13	; 0x0d
   11770:	9e 85       	ldd	r25, Y+14	; 0x0e
   11772:	28 17       	cp	r18, r24
   11774:	39 07       	cpc	r19, r25
   11776:	08 f4       	brcc	.+2      	; 0x1177a <LCDErase+0xfc>
   11778:	bd cf       	rjmp	.-134    	; 0x116f4 <LCDErase+0x76>
			OUT_HI = bgcolor & 0xFF;
			CLR(WR);
			SET(WR);
#endif
		}
		SET(CS);
   1177a:	88 e2       	ldi	r24, 0x28	; 40
   1177c:	90 e0       	ldi	r25, 0x00	; 0
   1177e:	28 e2       	ldi	r18, 0x28	; 40
   11780:	30 e0       	ldi	r19, 0x00	; 0
   11782:	f9 01       	movw	r30, r18
   11784:	20 81       	ld	r18, Z
   11786:	20 61       	ori	r18, 0x10	; 16
   11788:	fc 01       	movw	r30, r24
   1178a:	20 83       	st	Z, r18
void LCDErase(WORD row, WORD col, WORD hgt, WORD wid)
{
	WORD a, b, c;

	b = row + hgt;
	for (c = row; c <= b; c++)	// do rows
   1178c:	8b 81       	ldd	r24, Y+3	; 0x03
   1178e:	9c 81       	ldd	r25, Y+4	; 0x04
   11790:	01 96       	adiw	r24, 0x01	; 1
   11792:	9c 83       	std	Y+4, r25	; 0x04
   11794:	8b 83       	std	Y+3, r24	; 0x03
   11796:	2b 81       	ldd	r18, Y+3	; 0x03
   11798:	3c 81       	ldd	r19, Y+4	; 0x04
   1179a:	8d 81       	ldd	r24, Y+5	; 0x05
   1179c:	9e 81       	ldd	r25, Y+6	; 0x06
   1179e:	82 17       	cp	r24, r18
   117a0:	93 07       	cpc	r25, r19
   117a2:	08 f0       	brcs	.+2      	; 0x117a6 <LCDErase+0x128>
   117a4:	8b cf       	rjmp	.-234    	; 0x116bc <LCDErase+0x3e>
			SET(WR);
#endif
		}
		SET(CS);
	}
}
   117a6:	2e 96       	adiw	r28, 0x0e	; 14
   117a8:	0f b6       	in	r0, 0x3f	; 63
   117aa:	f8 94       	cli
   117ac:	de bf       	out	0x3e, r29	; 62
   117ae:	0f be       	out	0x3f, r0	; 63
   117b0:	cd bf       	out	0x3d, r28	; 61
   117b2:	cf 91       	pop	r28
   117b4:	df 91       	pop	r29
   117b6:	08 95       	ret

000117b8 <LCDRdBlock>:
/***********************************************************
	Read a block of pixels from screen into memory array
***********************************************************/

void LCDRdBlock(WORD *mem, WORD row, WORD col, WORD hgt, WORD wid)
{
   117b8:	0f 93       	push	r16
   117ba:	1f 93       	push	r17
   117bc:	df 93       	push	r29
   117be:	cf 93       	push	r28
   117c0:	cd b7       	in	r28, 0x3d	; 61
   117c2:	de b7       	in	r29, 0x3e	; 62
   117c4:	2e 97       	sbiw	r28, 0x0e	; 14
   117c6:	0f b6       	in	r0, 0x3f	; 63
   117c8:	f8 94       	cli
   117ca:	de bf       	out	0x3e, r29	; 62
   117cc:	0f be       	out	0x3f, r0	; 63
   117ce:	cd bf       	out	0x3d, r28	; 61
   117d0:	9e 83       	std	Y+6, r25	; 0x06
   117d2:	8d 83       	std	Y+5, r24	; 0x05
   117d4:	78 87       	std	Y+8, r23	; 0x08
   117d6:	6f 83       	std	Y+7, r22	; 0x07
   117d8:	5a 87       	std	Y+10, r21	; 0x0a
   117da:	49 87       	std	Y+9, r20	; 0x09
   117dc:	3c 87       	std	Y+12, r19	; 0x0c
   117de:	2b 87       	std	Y+11, r18	; 0x0b
   117e0:	1e 87       	std	Y+14, r17	; 0x0e
   117e2:	0d 87       	std	Y+13, r16	; 0x0d
	WORD a, c;

	for (c = row; c <= row + hgt; c++)
   117e4:	8f 81       	ldd	r24, Y+7	; 0x07
   117e6:	98 85       	ldd	r25, Y+8	; 0x08
   117e8:	9c 83       	std	Y+4, r25	; 0x04
   117ea:	8b 83       	std	Y+3, r24	; 0x03
   117ec:	2a c0       	rjmp	.+84     	; 0x11842 <LCDRdBlock+0x8a>
	{
		LCDSetGCur(c, col);
   117ee:	8b 81       	ldd	r24, Y+3	; 0x03
   117f0:	9c 81       	ldd	r25, Y+4	; 0x04
   117f2:	29 85       	ldd	r18, Y+9	; 0x09
   117f4:	3a 85       	ldd	r19, Y+10	; 0x0a
   117f6:	b9 01       	movw	r22, r18
   117f8:	0e 94 90 8c 	call	0x11920	; 0x11920 <LCDSetGCur>
		LCDRead();			// do dummy read
   117fc:	0e 94 0b 87 	call	0x10e16	; 0x10e16 <LCDRead>
		for (a = 0; a < wid; a++)
   11800:	1a 82       	std	Y+2, r1	; 0x02
   11802:	19 82       	std	Y+1, r1	; 0x01
   11804:	12 c0       	rjmp	.+36     	; 0x1182a <LCDRdBlock+0x72>
		{
			*mem++ = LCDRead();
   11806:	0e 94 0b 87 	call	0x10e16	; 0x10e16 <LCDRead>
   1180a:	9c 01       	movw	r18, r24
   1180c:	8d 81       	ldd	r24, Y+5	; 0x05
   1180e:	9e 81       	ldd	r25, Y+6	; 0x06
   11810:	fc 01       	movw	r30, r24
   11812:	31 83       	std	Z+1, r19	; 0x01
   11814:	20 83       	st	Z, r18
   11816:	8d 81       	ldd	r24, Y+5	; 0x05
   11818:	9e 81       	ldd	r25, Y+6	; 0x06
   1181a:	02 96       	adiw	r24, 0x02	; 2
   1181c:	9e 83       	std	Y+6, r25	; 0x06
   1181e:	8d 83       	std	Y+5, r24	; 0x05

	for (c = row; c <= row + hgt; c++)
	{
		LCDSetGCur(c, col);
		LCDRead();			// do dummy read
		for (a = 0; a < wid; a++)
   11820:	89 81       	ldd	r24, Y+1	; 0x01
   11822:	9a 81       	ldd	r25, Y+2	; 0x02
   11824:	01 96       	adiw	r24, 0x01	; 1
   11826:	9a 83       	std	Y+2, r25	; 0x02
   11828:	89 83       	std	Y+1, r24	; 0x01
   1182a:	29 81       	ldd	r18, Y+1	; 0x01
   1182c:	3a 81       	ldd	r19, Y+2	; 0x02
   1182e:	8d 85       	ldd	r24, Y+13	; 0x0d
   11830:	9e 85       	ldd	r25, Y+14	; 0x0e
   11832:	28 17       	cp	r18, r24
   11834:	39 07       	cpc	r19, r25
   11836:	38 f3       	brcs	.-50     	; 0x11806 <LCDRdBlock+0x4e>

void LCDRdBlock(WORD *mem, WORD row, WORD col, WORD hgt, WORD wid)
{
	WORD a, c;

	for (c = row; c <= row + hgt; c++)
   11838:	8b 81       	ldd	r24, Y+3	; 0x03
   1183a:	9c 81       	ldd	r25, Y+4	; 0x04
   1183c:	01 96       	adiw	r24, 0x01	; 1
   1183e:	9c 83       	std	Y+4, r25	; 0x04
   11840:	8b 83       	std	Y+3, r24	; 0x03
   11842:	2f 81       	ldd	r18, Y+7	; 0x07
   11844:	38 85       	ldd	r19, Y+8	; 0x08
   11846:	8b 85       	ldd	r24, Y+11	; 0x0b
   11848:	9c 85       	ldd	r25, Y+12	; 0x0c
   1184a:	28 0f       	add	r18, r24
   1184c:	39 1f       	adc	r19, r25
   1184e:	8b 81       	ldd	r24, Y+3	; 0x03
   11850:	9c 81       	ldd	r25, Y+4	; 0x04
   11852:	28 17       	cp	r18, r24
   11854:	39 07       	cpc	r19, r25
   11856:	58 f6       	brcc	.-106    	; 0x117ee <LCDRdBlock+0x36>
		for (a = 0; a < wid; a++)
		{
			*mem++ = LCDRead();
		}
	}
}
   11858:	2e 96       	adiw	r28, 0x0e	; 14
   1185a:	0f b6       	in	r0, 0x3f	; 63
   1185c:	f8 94       	cli
   1185e:	de bf       	out	0x3e, r29	; 62
   11860:	0f be       	out	0x3f, r0	; 63
   11862:	cd bf       	out	0x3d, r28	; 61
   11864:	cf 91       	pop	r28
   11866:	df 91       	pop	r29
   11868:	1f 91       	pop	r17
   1186a:	0f 91       	pop	r16
   1186c:	08 95       	ret

0001186e <LCDWrBlock>:
/***********************************************************
	Write a block of pixels from memory array to screen
***********************************************************/

void LCDWrBlock(WORD *mem, WORD row, WORD col, WORD hgt, WORD wid)
{
   1186e:	0f 93       	push	r16
   11870:	1f 93       	push	r17
   11872:	df 93       	push	r29
   11874:	cf 93       	push	r28
   11876:	cd b7       	in	r28, 0x3d	; 61
   11878:	de b7       	in	r29, 0x3e	; 62
   1187a:	2e 97       	sbiw	r28, 0x0e	; 14
   1187c:	0f b6       	in	r0, 0x3f	; 63
   1187e:	f8 94       	cli
   11880:	de bf       	out	0x3e, r29	; 62
   11882:	0f be       	out	0x3f, r0	; 63
   11884:	cd bf       	out	0x3d, r28	; 61
   11886:	9e 83       	std	Y+6, r25	; 0x06
   11888:	8d 83       	std	Y+5, r24	; 0x05
   1188a:	78 87       	std	Y+8, r23	; 0x08
   1188c:	6f 83       	std	Y+7, r22	; 0x07
   1188e:	5a 87       	std	Y+10, r21	; 0x0a
   11890:	49 87       	std	Y+9, r20	; 0x09
   11892:	3c 87       	std	Y+12, r19	; 0x0c
   11894:	2b 87       	std	Y+11, r18	; 0x0b
   11896:	1e 87       	std	Y+14, r17	; 0x0e
   11898:	0d 87       	std	Y+13, r16	; 0x0d
	WORD a, c;

	for (c = row; c <= row + hgt; c++)
   1189a:	8f 81       	ldd	r24, Y+7	; 0x07
   1189c:	98 85       	ldd	r25, Y+8	; 0x08
   1189e:	9c 83       	std	Y+4, r25	; 0x04
   118a0:	8b 83       	std	Y+3, r24	; 0x03
   118a2:	28 c0       	rjmp	.+80     	; 0x118f4 <LCDWrBlock+0x86>
	{
		LCDSetGCur(c, col);
   118a4:	8b 81       	ldd	r24, Y+3	; 0x03
   118a6:	9c 81       	ldd	r25, Y+4	; 0x04
   118a8:	29 85       	ldd	r18, Y+9	; 0x09
   118aa:	3a 85       	ldd	r19, Y+10	; 0x0a
   118ac:	b9 01       	movw	r22, r18
   118ae:	0e 94 90 8c 	call	0x11920	; 0x11920 <LCDSetGCur>
		for (a = 0; a < wid; a++)
   118b2:	1a 82       	std	Y+2, r1	; 0x02
   118b4:	19 82       	std	Y+1, r1	; 0x01
   118b6:	12 c0       	rjmp	.+36     	; 0x118dc <LCDWrBlock+0x6e>
		{
			LCDData(*mem++);
   118b8:	8d 81       	ldd	r24, Y+5	; 0x05
   118ba:	9e 81       	ldd	r25, Y+6	; 0x06
   118bc:	fc 01       	movw	r30, r24
   118be:	80 81       	ld	r24, Z
   118c0:	91 81       	ldd	r25, Z+1	; 0x01
   118c2:	2d 81       	ldd	r18, Y+5	; 0x05
   118c4:	3e 81       	ldd	r19, Y+6	; 0x06
   118c6:	2e 5f       	subi	r18, 0xFE	; 254
   118c8:	3f 4f       	sbci	r19, 0xFF	; 255
   118ca:	3e 83       	std	Y+6, r19	; 0x06
   118cc:	2d 83       	std	Y+5, r18	; 0x05
   118ce:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
	WORD a, c;

	for (c = row; c <= row + hgt; c++)
	{
		LCDSetGCur(c, col);
		for (a = 0; a < wid; a++)
   118d2:	89 81       	ldd	r24, Y+1	; 0x01
   118d4:	9a 81       	ldd	r25, Y+2	; 0x02
   118d6:	01 96       	adiw	r24, 0x01	; 1
   118d8:	9a 83       	std	Y+2, r25	; 0x02
   118da:	89 83       	std	Y+1, r24	; 0x01
   118dc:	29 81       	ldd	r18, Y+1	; 0x01
   118de:	3a 81       	ldd	r19, Y+2	; 0x02
   118e0:	8d 85       	ldd	r24, Y+13	; 0x0d
   118e2:	9e 85       	ldd	r25, Y+14	; 0x0e
   118e4:	28 17       	cp	r18, r24
   118e6:	39 07       	cpc	r19, r25
   118e8:	38 f3       	brcs	.-50     	; 0x118b8 <LCDWrBlock+0x4a>

void LCDWrBlock(WORD *mem, WORD row, WORD col, WORD hgt, WORD wid)
{
	WORD a, c;

	for (c = row; c <= row + hgt; c++)
   118ea:	8b 81       	ldd	r24, Y+3	; 0x03
   118ec:	9c 81       	ldd	r25, Y+4	; 0x04
   118ee:	01 96       	adiw	r24, 0x01	; 1
   118f0:	9c 83       	std	Y+4, r25	; 0x04
   118f2:	8b 83       	std	Y+3, r24	; 0x03
   118f4:	2f 81       	ldd	r18, Y+7	; 0x07
   118f6:	38 85       	ldd	r19, Y+8	; 0x08
   118f8:	8b 85       	ldd	r24, Y+11	; 0x0b
   118fa:	9c 85       	ldd	r25, Y+12	; 0x0c
   118fc:	28 0f       	add	r18, r24
   118fe:	39 1f       	adc	r19, r25
   11900:	8b 81       	ldd	r24, Y+3	; 0x03
   11902:	9c 81       	ldd	r25, Y+4	; 0x04
   11904:	28 17       	cp	r18, r24
   11906:	39 07       	cpc	r19, r25
   11908:	68 f6       	brcc	.-102    	; 0x118a4 <LCDWrBlock+0x36>
		for (a = 0; a < wid; a++)
		{
			LCDData(*mem++);
		}
	}
}
   1190a:	2e 96       	adiw	r28, 0x0e	; 14
   1190c:	0f b6       	in	r0, 0x3f	; 63
   1190e:	f8 94       	cli
   11910:	de bf       	out	0x3e, r29	; 62
   11912:	0f be       	out	0x3f, r0	; 63
   11914:	cd bf       	out	0x3d, r28	; 61
   11916:	cf 91       	pop	r28
   11918:	df 91       	pop	r29
   1191a:	1f 91       	pop	r17
   1191c:	0f 91       	pop	r16
   1191e:	08 95       	ret

00011920 <LCDSetGCur>:
/***********************************************************
	Write cursor address to controller
***********************************************************/

void LCDSetGCur(WORD row, WORD col)
{
   11920:	df 93       	push	r29
   11922:	cf 93       	push	r28
   11924:	00 d0       	rcall	.+0      	; 0x11926 <LCDSetGCur+0x6>
   11926:	00 d0       	rcall	.+0      	; 0x11928 <LCDSetGCur+0x8>
   11928:	cd b7       	in	r28, 0x3d	; 61
   1192a:	de b7       	in	r29, 0x3e	; 62
   1192c:	9a 83       	std	Y+2, r25	; 0x02
   1192e:	89 83       	std	Y+1, r24	; 0x01
   11930:	7c 83       	std	Y+4, r23	; 0x04
   11932:	6b 83       	std	Y+3, r22	; 0x03
	if (col > LASTCOL || row > LASTROW) return;
   11934:	8b 81       	ldd	r24, Y+3	; 0x03
   11936:	9c 81       	ldd	r25, Y+4	; 0x04
   11938:	21 e0       	ldi	r18, 0x01	; 1
   1193a:	80 34       	cpi	r24, 0x40	; 64
   1193c:	92 07       	cpc	r25, r18
   1193e:	d0 f4       	brcc	.+52     	; 0x11974 <LCDSetGCur+0x54>
   11940:	89 81       	ldd	r24, Y+1	; 0x01
   11942:	9a 81       	ldd	r25, Y+2	; 0x02
   11944:	80 3f       	cpi	r24, 0xF0	; 240
   11946:	91 05       	cpc	r25, r1
   11948:	b8 f4       	brcc	.+46     	; 0x11978 <LCDSetGCur+0x58>
	LCDCmd(0x4E);		// RAM X address set
   1194a:	8e e4       	ldi	r24, 0x4E	; 78
   1194c:	90 e0       	ldi	r25, 0x00	; 0
   1194e:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
	LCDData(col);
   11952:	8b 81       	ldd	r24, Y+3	; 0x03
   11954:	9c 81       	ldd	r25, Y+4	; 0x04
   11956:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
	LCDCmd(0x4F);		// RAM Y address set
   1195a:	8f e4       	ldi	r24, 0x4F	; 79
   1195c:	90 e0       	ldi	r25, 0x00	; 0
   1195e:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
	LCDData(row);
   11962:	89 81       	ldd	r24, Y+1	; 0x01
   11964:	9a 81       	ldd	r25, Y+2	; 0x02
   11966:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
	LCDCmd(0x22);		// access to display RAM
   1196a:	82 e2       	ldi	r24, 0x22	; 34
   1196c:	90 e0       	ldi	r25, 0x00	; 0
   1196e:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
   11972:	03 c0       	rjmp	.+6      	; 0x1197a <LCDSetGCur+0x5a>
	Write cursor address to controller
***********************************************************/

void LCDSetGCur(WORD row, WORD col)
{
	if (col > LASTCOL || row > LASTROW) return;
   11974:	00 00       	nop
   11976:	01 c0       	rjmp	.+2      	; 0x1197a <LCDSetGCur+0x5a>
   11978:	00 00       	nop
	LCDCmd(0x4E);		// RAM X address set
	LCDData(col);
	LCDCmd(0x4F);		// RAM Y address set
	LCDData(row);
	LCDCmd(0x22);		// access to display RAM
}
   1197a:	0f 90       	pop	r0
   1197c:	0f 90       	pop	r0
   1197e:	0f 90       	pop	r0
   11980:	0f 90       	pop	r0
   11982:	cf 91       	pop	r28
   11984:	df 91       	pop	r29
   11986:	08 95       	ret

00011988 <LCDSetTCur>:
/***********************************************************
	Write cursor address to controller
***********************************************************/

void LCDSetTCur(WORD row, WORD col)
{
   11988:	df 93       	push	r29
   1198a:	cf 93       	push	r28
   1198c:	cd b7       	in	r28, 0x3d	; 61
   1198e:	de b7       	in	r29, 0x3e	; 62
   11990:	29 97       	sbiw	r28, 0x09	; 9
   11992:	0f b6       	in	r0, 0x3f	; 63
   11994:	f8 94       	cli
   11996:	de bf       	out	0x3e, r29	; 62
   11998:	0f be       	out	0x3f, r0	; 63
   1199a:	cd bf       	out	0x3d, r28	; 61
   1199c:	9f 83       	std	Y+7, r25	; 0x07
   1199e:	8e 83       	std	Y+6, r24	; 0x06
   119a0:	79 87       	std	Y+9, r23	; 0x09
   119a2:	68 87       	std	Y+8, r22	; 0x08
	BYTE a;
	WORD x, y;

	a = CJ_code & ROTN;
   119a4:	80 91 bc 01 	lds	r24, 0x01BC
   119a8:	80 7c       	andi	r24, 0xC0	; 192
   119aa:	8d 83       	std	Y+5, r24	; 0x05
	if (a == 0)
   119ac:	8d 81       	ldd	r24, Y+5	; 0x05
   119ae:	88 23       	and	r24, r24
   119b0:	49 f4       	brne	.+18     	; 0x119c4 <LCDSetTCur+0x3c>
	{
		x = col;
   119b2:	88 85       	ldd	r24, Y+8	; 0x08
   119b4:	99 85       	ldd	r25, Y+9	; 0x09
   119b6:	9a 83       	std	Y+2, r25	; 0x02
   119b8:	89 83       	std	Y+1, r24	; 0x01
		y = row;
   119ba:	8e 81       	ldd	r24, Y+6	; 0x06
   119bc:	9f 81       	ldd	r25, Y+7	; 0x07
   119be:	9c 83       	std	Y+4, r25	; 0x04
   119c0:	8b 83       	std	Y+3, r24	; 0x03
   119c2:	38 c0       	rjmp	.+112    	; 0x11a34 <LCDSetTCur+0xac>
	}
	else if (a == ROT90)
   119c4:	8d 81       	ldd	r24, Y+5	; 0x05
   119c6:	80 34       	cpi	r24, 0x40	; 64
   119c8:	79 f4       	brne	.+30     	; 0x119e8 <LCDSetTCur+0x60>
	{
		x = row;
   119ca:	8e 81       	ldd	r24, Y+6	; 0x06
   119cc:	9f 81       	ldd	r25, Y+7	; 0x07
   119ce:	9a 83       	std	Y+2, r25	; 0x02
   119d0:	89 83       	std	Y+1, r24	; 0x01
		y = LASTROW - col;
   119d2:	2f ee       	ldi	r18, 0xEF	; 239
   119d4:	30 e0       	ldi	r19, 0x00	; 0
   119d6:	88 85       	ldd	r24, Y+8	; 0x08
   119d8:	99 85       	ldd	r25, Y+9	; 0x09
   119da:	a9 01       	movw	r20, r18
   119dc:	48 1b       	sub	r20, r24
   119de:	59 0b       	sbc	r21, r25
   119e0:	ca 01       	movw	r24, r20
   119e2:	9c 83       	std	Y+4, r25	; 0x04
   119e4:	8b 83       	std	Y+3, r24	; 0x03
   119e6:	26 c0       	rjmp	.+76     	; 0x11a34 <LCDSetTCur+0xac>
	}
	else if (a == ROT180)
   119e8:	8d 81       	ldd	r24, Y+5	; 0x05
   119ea:	80 38       	cpi	r24, 0x80	; 128
   119ec:	a9 f4       	brne	.+42     	; 0x11a18 <LCDSetTCur+0x90>
	{
		x = LASTCOL - col;
   119ee:	2f e3       	ldi	r18, 0x3F	; 63
   119f0:	31 e0       	ldi	r19, 0x01	; 1
   119f2:	88 85       	ldd	r24, Y+8	; 0x08
   119f4:	99 85       	ldd	r25, Y+9	; 0x09
   119f6:	a9 01       	movw	r20, r18
   119f8:	48 1b       	sub	r20, r24
   119fa:	59 0b       	sbc	r21, r25
   119fc:	ca 01       	movw	r24, r20
   119fe:	9a 83       	std	Y+2, r25	; 0x02
   11a00:	89 83       	std	Y+1, r24	; 0x01
		y = LASTROW - row;
   11a02:	2f ee       	ldi	r18, 0xEF	; 239
   11a04:	30 e0       	ldi	r19, 0x00	; 0
   11a06:	8e 81       	ldd	r24, Y+6	; 0x06
   11a08:	9f 81       	ldd	r25, Y+7	; 0x07
   11a0a:	a9 01       	movw	r20, r18
   11a0c:	48 1b       	sub	r20, r24
   11a0e:	59 0b       	sbc	r21, r25
   11a10:	ca 01       	movw	r24, r20
   11a12:	9c 83       	std	Y+4, r25	; 0x04
   11a14:	8b 83       	std	Y+3, r24	; 0x03
   11a16:	0e c0       	rjmp	.+28     	; 0x11a34 <LCDSetTCur+0xac>
	}
	else	// ROT270
	{
		x = LASTCOL - row;
   11a18:	2f e3       	ldi	r18, 0x3F	; 63
   11a1a:	31 e0       	ldi	r19, 0x01	; 1
   11a1c:	8e 81       	ldd	r24, Y+6	; 0x06
   11a1e:	9f 81       	ldd	r25, Y+7	; 0x07
   11a20:	a9 01       	movw	r20, r18
   11a22:	48 1b       	sub	r20, r24
   11a24:	59 0b       	sbc	r21, r25
   11a26:	ca 01       	movw	r24, r20
   11a28:	9a 83       	std	Y+2, r25	; 0x02
   11a2a:	89 83       	std	Y+1, r24	; 0x01
		y = col;
   11a2c:	88 85       	ldd	r24, Y+8	; 0x08
   11a2e:	99 85       	ldd	r25, Y+9	; 0x09
   11a30:	9c 83       	std	Y+4, r25	; 0x04
   11a32:	8b 83       	std	Y+3, r24	; 0x03
	}
	if (x > LASTCOL || y > LASTROW) return;
   11a34:	89 81       	ldd	r24, Y+1	; 0x01
   11a36:	9a 81       	ldd	r25, Y+2	; 0x02
   11a38:	51 e0       	ldi	r21, 0x01	; 1
   11a3a:	80 34       	cpi	r24, 0x40	; 64
   11a3c:	95 07       	cpc	r25, r21
   11a3e:	d0 f4       	brcc	.+52     	; 0x11a74 <LCDSetTCur+0xec>
   11a40:	8b 81       	ldd	r24, Y+3	; 0x03
   11a42:	9c 81       	ldd	r25, Y+4	; 0x04
   11a44:	80 3f       	cpi	r24, 0xF0	; 240
   11a46:	91 05       	cpc	r25, r1
   11a48:	b8 f4       	brcc	.+46     	; 0x11a78 <LCDSetTCur+0xf0>
	LCDCmd(0x4E);		// RAM X address set
   11a4a:	8e e4       	ldi	r24, 0x4E	; 78
   11a4c:	90 e0       	ldi	r25, 0x00	; 0
   11a4e:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
	LCDData(x);
   11a52:	89 81       	ldd	r24, Y+1	; 0x01
   11a54:	9a 81       	ldd	r25, Y+2	; 0x02
   11a56:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
	LCDCmd(0x4F);		// RAM Y address set
   11a5a:	8f e4       	ldi	r24, 0x4F	; 79
   11a5c:	90 e0       	ldi	r25, 0x00	; 0
   11a5e:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
	LCDData(y);
   11a62:	8b 81       	ldd	r24, Y+3	; 0x03
   11a64:	9c 81       	ldd	r25, Y+4	; 0x04
   11a66:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
	LCDCmd(0x22);		// access to display RAM
   11a6a:	82 e2       	ldi	r24, 0x22	; 34
   11a6c:	90 e0       	ldi	r25, 0x00	; 0
   11a6e:	0e 94 5b 86 	call	0x10cb6	; 0x10cb6 <LCDCmd>
   11a72:	03 c0       	rjmp	.+6      	; 0x11a7a <LCDSetTCur+0xf2>
	else	// ROT270
	{
		x = LASTCOL - row;
		y = col;
	}
	if (x > LASTCOL || y > LASTROW) return;
   11a74:	00 00       	nop
   11a76:	01 c0       	rjmp	.+2      	; 0x11a7a <LCDSetTCur+0xf2>
   11a78:	00 00       	nop
	LCDCmd(0x4E);		// RAM X address set
	LCDData(x);
	LCDCmd(0x4F);		// RAM Y address set
	LCDData(y);
	LCDCmd(0x22);		// access to display RAM
}
   11a7a:	29 96       	adiw	r28, 0x09	; 9
   11a7c:	0f b6       	in	r0, 0x3f	; 63
   11a7e:	f8 94       	cli
   11a80:	de bf       	out	0x3e, r29	; 62
   11a82:	0f be       	out	0x3f, r0	; 63
   11a84:	cd bf       	out	0x3d, r28	; 61
   11a86:	cf 91       	pop	r28
   11a88:	df 91       	pop	r29
   11a8a:	08 95       	ret

00011a8c <LCDPixLen>:
/***********************************************************
	Get width of display text, in pixels
***********************************************************/

WORD LCDPixLen(char *chr)
{
   11a8c:	1f 93       	push	r17
   11a8e:	df 93       	push	r29
   11a90:	cf 93       	push	r28
   11a92:	cd b7       	in	r28, 0x3d	; 61
   11a94:	de b7       	in	r29, 0x3e	; 62
   11a96:	2c 97       	sbiw	r28, 0x0c	; 12
   11a98:	0f b6       	in	r0, 0x3f	; 63
   11a9a:	f8 94       	cli
   11a9c:	de bf       	out	0x3e, r29	; 62
   11a9e:	0f be       	out	0x3f, r0	; 63
   11aa0:	cd bf       	out	0x3d, r28	; 61
   11aa2:	9c 87       	std	Y+12, r25	; 0x0c
   11aa4:	8b 87       	std	Y+11, r24	; 0x0b
	WORD wid;
	BYTE first, nrc, txt;
	const PBYTE *widtbl;

	switch (font)
   11aa6:	80 91 ef 03 	lds	r24, 0x03EF
   11aaa:	88 2f       	mov	r24, r24
   11aac:	90 e0       	ldi	r25, 0x00	; 0
   11aae:	82 30       	cpi	r24, 0x02	; 2
   11ab0:	91 05       	cpc	r25, r1
   11ab2:	f9 f0       	breq	.+62     	; 0x11af2 <LCDPixLen+0x66>
   11ab4:	83 30       	cpi	r24, 0x03	; 3
   11ab6:	91 05       	cpc	r25, r1
   11ab8:	24 f4       	brge	.+8      	; 0x11ac2 <LCDPixLen+0x36>
   11aba:	81 30       	cpi	r24, 0x01	; 1
   11abc:	91 05       	cpc	r25, r1
   11abe:	11 f1       	breq	.+68     	; 0x11b04 <LCDPixLen+0x78>
   11ac0:	2a c0       	rjmp	.+84     	; 0x11b16 <LCDPixLen+0x8a>
   11ac2:	83 30       	cpi	r24, 0x03	; 3
   11ac4:	91 05       	cpc	r25, r1
   11ac6:	61 f0       	breq	.+24     	; 0x11ae0 <LCDPixLen+0x54>
   11ac8:	84 30       	cpi	r24, 0x04	; 4
   11aca:	91 05       	cpc	r25, r1
   11acc:	21 f5       	brne	.+72     	; 0x11b16 <LCDPixLen+0x8a>
	{
	case FONT_H:
		first = firstchr_H;
   11ace:	80 e2       	ldi	r24, 0x20	; 32
   11ad0:	8b 83       	std	Y+3, r24	; 0x03
		widtbl = widtbl_H;
   11ad2:	81 e7       	ldi	r24, 0x71	; 113
   11ad4:	91 e5       	ldi	r25, 0x51	; 81
   11ad6:	9e 83       	std	Y+6, r25	; 0x06
   11ad8:	8d 83       	std	Y+5, r24	; 0x05
		nrc = nr_chrs_H;
   11ada:	8f e5       	ldi	r24, 0x5F	; 95
   11adc:	8c 83       	std	Y+4, r24	; 0x04
		break;
   11ade:	24 c0       	rjmp	.+72     	; 0x11b28 <LCDPixLen+0x9c>

	case FONT_G:
		first = firstchr_G;
   11ae0:	80 e2       	ldi	r24, 0x20	; 32
   11ae2:	8b 83       	std	Y+3, r24	; 0x03
		widtbl = widtbl_G;
   11ae4:	81 e4       	ldi	r24, 0x41	; 65
   11ae6:	9b e0       	ldi	r25, 0x0B	; 11
   11ae8:	9e 83       	std	Y+6, r25	; 0x06
   11aea:	8d 83       	std	Y+5, r24	; 0x05
		nrc = nr_chrs_G;
   11aec:	8f e5       	ldi	r24, 0x5F	; 95
   11aee:	8c 83       	std	Y+4, r24	; 0x04
		break;
   11af0:	1b c0       	rjmp	.+54     	; 0x11b28 <LCDPixLen+0x9c>

	case FONT_L:
		first = firstchr_L;
   11af2:	80 e2       	ldi	r24, 0x20	; 32
   11af4:	8b 83       	std	Y+3, r24	; 0x03
		widtbl = widtbl_L;
   11af6:	84 e8       	ldi	r24, 0x84	; 132
   11af8:	9d e3       	ldi	r25, 0x3D	; 61
   11afa:	9e 83       	std	Y+6, r25	; 0x06
   11afc:	8d 83       	std	Y+5, r24	; 0x05
		nrc = nr_chrs_L;
   11afe:	8f e5       	ldi	r24, 0x5F	; 95
   11b00:	8c 83       	std	Y+4, r24	; 0x04
		break;
   11b02:	12 c0       	rjmp	.+36     	; 0x11b28 <LCDPixLen+0x9c>

	case FONT_M:
		first = firstchr_M;
   11b04:	80 e2       	ldi	r24, 0x20	; 32
   11b06:	8b 83       	std	Y+3, r24	; 0x03
		widtbl = widtbl_M;
   11b08:	88 e9       	ldi	r24, 0x98	; 152
   11b0a:	90 e0       	ldi	r25, 0x00	; 0
   11b0c:	9e 83       	std	Y+6, r25	; 0x06
   11b0e:	8d 83       	std	Y+5, r24	; 0x05
		nrc = nr_chrs_M;
   11b10:	80 e7       	ldi	r24, 0x70	; 112
   11b12:	8c 83       	std	Y+4, r24	; 0x04
		break;
   11b14:	09 c0       	rjmp	.+18     	; 0x11b28 <LCDPixLen+0x9c>

	default:
		first = firstchr_S;
   11b16:	80 e2       	ldi	r24, 0x20	; 32
   11b18:	8b 83       	std	Y+3, r24	; 0x03
		widtbl = widtbl_S;
   11b1a:	84 e3       	ldi	r24, 0x34	; 52
   11b1c:	98 e0       	ldi	r25, 0x08	; 8
   11b1e:	9e 83       	std	Y+6, r25	; 0x06
   11b20:	8d 83       	std	Y+5, r24	; 0x05
		nrc = nr_chrs_S;
   11b22:	88 e6       	ldi	r24, 0x68	; 104
   11b24:	8c 83       	std	Y+4, r24	; 0x04
		break;
   11b26:	00 00       	nop
	}

	wid = 0;
   11b28:	1a 82       	std	Y+2, r1	; 0x02
   11b2a:	19 82       	std	Y+1, r1	; 0x01

	while (*chr)
   11b2c:	47 c0       	rjmp	.+142    	; 0x11bbc <LCDPixLen+0x130>
	{
		txt = *chr;
   11b2e:	8b 85       	ldd	r24, Y+11	; 0x0b
   11b30:	9c 85       	ldd	r25, Y+12	; 0x0c
   11b32:	fc 01       	movw	r30, r24
   11b34:	80 81       	ld	r24, Z
   11b36:	8f 83       	std	Y+7, r24	; 0x07
		if (txt >= first && (txt - first) < nrc)
   11b38:	9f 81       	ldd	r25, Y+7	; 0x07
   11b3a:	8b 81       	ldd	r24, Y+3	; 0x03
   11b3c:	98 17       	cp	r25, r24
   11b3e:	c8 f1       	brcs	.+114    	; 0x11bb2 <LCDPixLen+0x126>
   11b40:	8f 81       	ldd	r24, Y+7	; 0x07
   11b42:	28 2f       	mov	r18, r24
   11b44:	30 e0       	ldi	r19, 0x00	; 0
   11b46:	8b 81       	ldd	r24, Y+3	; 0x03
   11b48:	88 2f       	mov	r24, r24
   11b4a:	90 e0       	ldi	r25, 0x00	; 0
   11b4c:	28 1b       	sub	r18, r24
   11b4e:	39 0b       	sbc	r19, r25
   11b50:	8c 81       	ldd	r24, Y+4	; 0x04
   11b52:	88 2f       	mov	r24, r24
   11b54:	90 e0       	ldi	r25, 0x00	; 0
   11b56:	28 17       	cp	r18, r24
   11b58:	39 07       	cpc	r19, r25
   11b5a:	5c f5       	brge	.+86     	; 0x11bb2 <LCDPixLen+0x126>
		{
			wid += pgm_read_byte(&widtbl[txt - first]);
   11b5c:	8f 81       	ldd	r24, Y+7	; 0x07
   11b5e:	28 2f       	mov	r18, r24
   11b60:	30 e0       	ldi	r19, 0x00	; 0
   11b62:	8b 81       	ldd	r24, Y+3	; 0x03
   11b64:	88 2f       	mov	r24, r24
   11b66:	90 e0       	ldi	r25, 0x00	; 0
   11b68:	a9 01       	movw	r20, r18
   11b6a:	48 1b       	sub	r20, r24
   11b6c:	59 0b       	sbc	r21, r25
   11b6e:	ca 01       	movw	r24, r20
   11b70:	2d 81       	ldd	r18, Y+5	; 0x05
   11b72:	3e 81       	ldd	r19, Y+6	; 0x06
   11b74:	82 0f       	add	r24, r18
   11b76:	93 1f       	adc	r25, r19
   11b78:	99 87       	std	Y+9, r25	; 0x09
   11b7a:	88 87       	std	Y+8, r24	; 0x08
   11b7c:	88 85       	ldd	r24, Y+8	; 0x08
   11b7e:	99 85       	ldd	r25, Y+9	; 0x09
   11b80:	fc 01       	movw	r30, r24
   11b82:	14 91       	lpm	r17, Z+
   11b84:	1a 87       	std	Y+10, r17	; 0x0a
   11b86:	8a 85       	ldd	r24, Y+10	; 0x0a
   11b88:	88 2f       	mov	r24, r24
   11b8a:	90 e0       	ldi	r25, 0x00	; 0
   11b8c:	29 81       	ldd	r18, Y+1	; 0x01
   11b8e:	3a 81       	ldd	r19, Y+2	; 0x02
   11b90:	82 0f       	add	r24, r18
   11b92:	93 1f       	adc	r25, r19
   11b94:	9a 83       	std	Y+2, r25	; 0x02
   11b96:	89 83       	std	Y+1, r24	; 0x01

			if (! (CJ_code & NOSPC))
   11b98:	80 91 bc 01 	lds	r24, 0x01BC
   11b9c:	88 2f       	mov	r24, r24
   11b9e:	90 e0       	ldi	r25, 0x00	; 0
   11ba0:	80 71       	andi	r24, 0x10	; 16
   11ba2:	90 70       	andi	r25, 0x00	; 0
   11ba4:	00 97       	sbiw	r24, 0x00	; 0
   11ba6:	29 f4       	brne	.+10     	; 0x11bb2 <LCDPixLen+0x126>
			{
				wid++;			// include blank space
   11ba8:	89 81       	ldd	r24, Y+1	; 0x01
   11baa:	9a 81       	ldd	r25, Y+2	; 0x02
   11bac:	01 96       	adiw	r24, 0x01	; 1
   11bae:	9a 83       	std	Y+2, r25	; 0x02
   11bb0:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		chr++;
   11bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
   11bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
   11bb6:	01 96       	adiw	r24, 0x01	; 1
   11bb8:	9c 87       	std	Y+12, r25	; 0x0c
   11bba:	8b 87       	std	Y+11, r24	; 0x0b
		break;
	}

	wid = 0;

	while (*chr)
   11bbc:	8b 85       	ldd	r24, Y+11	; 0x0b
   11bbe:	9c 85       	ldd	r25, Y+12	; 0x0c
   11bc0:	fc 01       	movw	r30, r24
   11bc2:	80 81       	ld	r24, Z
   11bc4:	88 23       	and	r24, r24
   11bc6:	09 f0       	breq	.+2      	; 0x11bca <LCDPixLen+0x13e>
   11bc8:	b2 cf       	rjmp	.-156    	; 0x11b2e <LCDPixLen+0xa2>
				wid++;			// include blank space
			}
		}
		chr++;
	}
	return wid;
   11bca:	89 81       	ldd	r24, Y+1	; 0x01
   11bcc:	9a 81       	ldd	r25, Y+2	; 0x02
}
   11bce:	2c 96       	adiw	r28, 0x0c	; 12
   11bd0:	0f b6       	in	r0, 0x3f	; 63
   11bd2:	f8 94       	cli
   11bd4:	de bf       	out	0x3e, r29	; 62
   11bd6:	0f be       	out	0x3f, r0	; 63
   11bd8:	cd bf       	out	0x3d, r28	; 61
   11bda:	cf 91       	pop	r28
   11bdc:	df 91       	pop	r29
   11bde:	1f 91       	pop	r17
   11be0:	08 95       	ret

00011be2 <plot>:
	Plot a pixel at X,Y
	0,0 is at upper left
***********************************************************/

void plot(WORD x, WORD y)
{
   11be2:	df 93       	push	r29
   11be4:	cf 93       	push	r28
   11be6:	00 d0       	rcall	.+0      	; 0x11be8 <plot+0x6>
   11be8:	00 d0       	rcall	.+0      	; 0x11bea <plot+0x8>
   11bea:	cd b7       	in	r28, 0x3d	; 61
   11bec:	de b7       	in	r29, 0x3e	; 62
   11bee:	9a 83       	std	Y+2, r25	; 0x02
   11bf0:	89 83       	std	Y+1, r24	; 0x01
   11bf2:	7c 83       	std	Y+4, r23	; 0x04
   11bf4:	6b 83       	std	Y+3, r22	; 0x03
	LCDSetGCur(y, x);	// address the pixel
   11bf6:	8b 81       	ldd	r24, Y+3	; 0x03
   11bf8:	9c 81       	ldd	r25, Y+4	; 0x04
   11bfa:	29 81       	ldd	r18, Y+1	; 0x01
   11bfc:	3a 81       	ldd	r19, Y+2	; 0x02
   11bfe:	b9 01       	movw	r22, r18
   11c00:	0e 94 90 8c 	call	0x11920	; 0x11920 <LCDSetGCur>
	LCDData(fgcolor);
   11c04:	80 91 f5 03 	lds	r24, 0x03F5
   11c08:	90 91 f6 03 	lds	r25, 0x03F6
   11c0c:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
}
   11c10:	0f 90       	pop	r0
   11c12:	0f 90       	pop	r0
   11c14:	0f 90       	pop	r0
   11c16:	0f 90       	pop	r0
   11c18:	cf 91       	pop	r28
   11c1a:	df 91       	pop	r29
   11c1c:	08 95       	ret

00011c1e <point>:
/***********************************************************
	Plot a pixel at X,Y and save point
***********************************************************/

void point(WORD x, WORD y)
{
   11c1e:	df 93       	push	r29
   11c20:	cf 93       	push	r28
   11c22:	00 d0       	rcall	.+0      	; 0x11c24 <point+0x6>
   11c24:	00 d0       	rcall	.+0      	; 0x11c26 <point+0x8>
   11c26:	cd b7       	in	r28, 0x3d	; 61
   11c28:	de b7       	in	r29, 0x3e	; 62
   11c2a:	9a 83       	std	Y+2, r25	; 0x02
   11c2c:	89 83       	std	Y+1, r24	; 0x01
   11c2e:	7c 83       	std	Y+4, r23	; 0x04
   11c30:	6b 83       	std	Y+3, r22	; 0x03
	gr_x = x;
   11c32:	89 81       	ldd	r24, Y+1	; 0x01
   11c34:	9a 81       	ldd	r25, Y+2	; 0x02
   11c36:	90 93 be 01 	sts	0x01BE, r25
   11c3a:	80 93 bd 01 	sts	0x01BD, r24
	gr_y = y;
   11c3e:	8b 81       	ldd	r24, Y+3	; 0x03
   11c40:	9c 81       	ldd	r25, Y+4	; 0x04
   11c42:	90 93 c0 01 	sts	0x01C0, r25
   11c46:	80 93 bf 01 	sts	0x01BF, r24
	plot(x, y);
   11c4a:	89 81       	ldd	r24, Y+1	; 0x01
   11c4c:	9a 81       	ldd	r25, Y+2	; 0x02
   11c4e:	2b 81       	ldd	r18, Y+3	; 0x03
   11c50:	3c 81       	ldd	r19, Y+4	; 0x04
   11c52:	b9 01       	movw	r22, r18
   11c54:	0e 94 f1 8d 	call	0x11be2	; 0x11be2 <plot>
}
   11c58:	0f 90       	pop	r0
   11c5a:	0f 90       	pop	r0
   11c5c:	0f 90       	pop	r0
   11c5e:	0f 90       	pop	r0
   11c60:	cf 91       	pop	r28
   11c62:	df 91       	pop	r29
   11c64:	08 95       	ret

00011c66 <lineto>:
	Draw a line from saved X,Y to X2,Y2 and save new endpoint
	Bresenham's algorithm
***********************************************************/

void lineto(WORD x2, WORD y2)
{
   11c66:	df 93       	push	r29
   11c68:	cf 93       	push	r28
   11c6a:	cd b7       	in	r28, 0x3d	; 61
   11c6c:	de b7       	in	r29, 0x3e	; 62
   11c6e:	6e 97       	sbiw	r28, 0x1e	; 30
   11c70:	0f b6       	in	r0, 0x3f	; 63
   11c72:	f8 94       	cli
   11c74:	de bf       	out	0x3e, r29	; 62
   11c76:	0f be       	out	0x3f, r0	; 63
   11c78:	cd bf       	out	0x3d, r28	; 61
   11c7a:	9c 8f       	std	Y+28, r25	; 0x1c
   11c7c:	8b 8f       	std	Y+27, r24	; 0x1b
   11c7e:	7e 8f       	std	Y+30, r23	; 0x1e
   11c80:	6d 8f       	std	Y+29, r22	; 0x1d
	int d, dinc1, dinc2;
	int x, xinc1, xinc2;
	int y, yinc1, yinc2;

	// Calculate delta_x and delta_y for initialisation
	delta_x = abs(x2 - gr_x);
   11c82:	80 91 bd 01 	lds	r24, 0x01BD
   11c86:	90 91 be 01 	lds	r25, 0x01BE
   11c8a:	2b 8d       	ldd	r18, Y+27	; 0x1b
   11c8c:	3c 8d       	ldd	r19, Y+28	; 0x1c
   11c8e:	a9 01       	movw	r20, r18
   11c90:	48 1b       	sub	r20, r24
   11c92:	59 0b       	sbc	r21, r25
   11c94:	ca 01       	movw	r24, r20
   11c96:	99 23       	and	r25, r25
   11c98:	1c f4       	brge	.+6      	; 0x11ca0 <lineto+0x3a>
   11c9a:	90 95       	com	r25
   11c9c:	81 95       	neg	r24
   11c9e:	9f 4f       	sbci	r25, 0xFF	; 255
   11ca0:	98 8f       	std	Y+24, r25	; 0x18
   11ca2:	8f 8b       	std	Y+23, r24	; 0x17
	delta_y = abs(y2 - gr_y);
   11ca4:	80 91 bf 01 	lds	r24, 0x01BF
   11ca8:	90 91 c0 01 	lds	r25, 0x01C0
   11cac:	2d 8d       	ldd	r18, Y+29	; 0x1d
   11cae:	3e 8d       	ldd	r19, Y+30	; 0x1e
   11cb0:	a9 01       	movw	r20, r18
   11cb2:	48 1b       	sub	r20, r24
   11cb4:	59 0b       	sbc	r21, r25
   11cb6:	ca 01       	movw	r24, r20
   11cb8:	99 23       	and	r25, r25
   11cba:	1c f4       	brge	.+6      	; 0x11cc2 <lineto+0x5c>
   11cbc:	90 95       	com	r25
   11cbe:	81 95       	neg	r24
   11cc0:	9f 4f       	sbci	r25, 0xFF	; 255
   11cc2:	9a 8f       	std	Y+26, r25	; 0x1a
   11cc4:	89 8f       	std	Y+25, r24	; 0x19

	// Initialize all vars based on which is the independent variable
	if (delta_x >= delta_y)		// x is independent variable
   11cc6:	2f 89       	ldd	r18, Y+23	; 0x17
   11cc8:	38 8d       	ldd	r19, Y+24	; 0x18
   11cca:	89 8d       	ldd	r24, Y+25	; 0x19
   11ccc:	9a 8d       	ldd	r25, Y+26	; 0x1a
   11cce:	28 17       	cp	r18, r24
   11cd0:	39 07       	cpc	r19, r25
   11cd2:	9c f1       	brlt	.+102    	; 0x11d3a <lineto+0xd4>
	{
		numpixels = delta_x + 1;
   11cd4:	8f 89       	ldd	r24, Y+23	; 0x17
   11cd6:	98 8d       	ldd	r25, Y+24	; 0x18
   11cd8:	01 96       	adiw	r24, 0x01	; 1
   11cda:	9c 83       	std	Y+4, r25	; 0x04
   11cdc:	8b 83       	std	Y+3, r24	; 0x03
		d = (delta_y << 1) - delta_x;
   11cde:	89 8d       	ldd	r24, Y+25	; 0x19
   11ce0:	9a 8d       	ldd	r25, Y+26	; 0x1a
   11ce2:	9c 01       	movw	r18, r24
   11ce4:	22 0f       	add	r18, r18
   11ce6:	33 1f       	adc	r19, r19
   11ce8:	8f 89       	ldd	r24, Y+23	; 0x17
   11cea:	98 8d       	ldd	r25, Y+24	; 0x18
   11cec:	a9 01       	movw	r20, r18
   11cee:	48 1b       	sub	r20, r24
   11cf0:	59 0b       	sbc	r21, r25
   11cf2:	ca 01       	movw	r24, r20
   11cf4:	9e 83       	std	Y+6, r25	; 0x06
   11cf6:	8d 83       	std	Y+5, r24	; 0x05
		dinc1 = delta_y << 1;
   11cf8:	89 8d       	ldd	r24, Y+25	; 0x19
   11cfa:	9a 8d       	ldd	r25, Y+26	; 0x1a
   11cfc:	88 0f       	add	r24, r24
   11cfe:	99 1f       	adc	r25, r25
   11d00:	98 87       	std	Y+8, r25	; 0x08
   11d02:	8f 83       	std	Y+7, r24	; 0x07
		dinc2 = (delta_y - delta_x) << 1;
   11d04:	29 8d       	ldd	r18, Y+25	; 0x19
   11d06:	3a 8d       	ldd	r19, Y+26	; 0x1a
   11d08:	8f 89       	ldd	r24, Y+23	; 0x17
   11d0a:	98 8d       	ldd	r25, Y+24	; 0x18
   11d0c:	a9 01       	movw	r20, r18
   11d0e:	48 1b       	sub	r20, r24
   11d10:	59 0b       	sbc	r21, r25
   11d12:	ca 01       	movw	r24, r20
   11d14:	88 0f       	add	r24, r24
   11d16:	99 1f       	adc	r25, r25
   11d18:	9a 87       	std	Y+10, r25	; 0x0a
   11d1a:	89 87       	std	Y+9, r24	; 0x09
		xinc1 = 1;
   11d1c:	81 e0       	ldi	r24, 0x01	; 1
   11d1e:	90 e0       	ldi	r25, 0x00	; 0
   11d20:	9e 87       	std	Y+14, r25	; 0x0e
   11d22:	8d 87       	std	Y+13, r24	; 0x0d
		xinc2 = 1;
   11d24:	81 e0       	ldi	r24, 0x01	; 1
   11d26:	90 e0       	ldi	r25, 0x00	; 0
   11d28:	98 8b       	std	Y+16, r25	; 0x10
   11d2a:	8f 87       	std	Y+15, r24	; 0x0f
		yinc1 = 0;
   11d2c:	1c 8a       	std	Y+20, r1	; 0x14
   11d2e:	1b 8a       	std	Y+19, r1	; 0x13
		yinc2 = 1;
   11d30:	81 e0       	ldi	r24, 0x01	; 1
   11d32:	90 e0       	ldi	r25, 0x00	; 0
   11d34:	9e 8b       	std	Y+22, r25	; 0x16
   11d36:	8d 8b       	std	Y+21, r24	; 0x15
   11d38:	32 c0       	rjmp	.+100    	; 0x11d9e <lineto+0x138>
	}
	else			// y is independent variable
	{
		numpixels = delta_y + 1;
   11d3a:	89 8d       	ldd	r24, Y+25	; 0x19
   11d3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
   11d3e:	01 96       	adiw	r24, 0x01	; 1
   11d40:	9c 83       	std	Y+4, r25	; 0x04
   11d42:	8b 83       	std	Y+3, r24	; 0x03
		d = (delta_x << 1) - delta_y;
   11d44:	8f 89       	ldd	r24, Y+23	; 0x17
   11d46:	98 8d       	ldd	r25, Y+24	; 0x18
   11d48:	9c 01       	movw	r18, r24
   11d4a:	22 0f       	add	r18, r18
   11d4c:	33 1f       	adc	r19, r19
   11d4e:	89 8d       	ldd	r24, Y+25	; 0x19
   11d50:	9a 8d       	ldd	r25, Y+26	; 0x1a
   11d52:	a9 01       	movw	r20, r18
   11d54:	48 1b       	sub	r20, r24
   11d56:	59 0b       	sbc	r21, r25
   11d58:	ca 01       	movw	r24, r20
   11d5a:	9e 83       	std	Y+6, r25	; 0x06
   11d5c:	8d 83       	std	Y+5, r24	; 0x05
		dinc1 = delta_x << 1;
   11d5e:	8f 89       	ldd	r24, Y+23	; 0x17
   11d60:	98 8d       	ldd	r25, Y+24	; 0x18
   11d62:	88 0f       	add	r24, r24
   11d64:	99 1f       	adc	r25, r25
   11d66:	98 87       	std	Y+8, r25	; 0x08
   11d68:	8f 83       	std	Y+7, r24	; 0x07
		dinc2 = (delta_x - delta_y) << 1;
   11d6a:	2f 89       	ldd	r18, Y+23	; 0x17
   11d6c:	38 8d       	ldd	r19, Y+24	; 0x18
   11d6e:	89 8d       	ldd	r24, Y+25	; 0x19
   11d70:	9a 8d       	ldd	r25, Y+26	; 0x1a
   11d72:	a9 01       	movw	r20, r18
   11d74:	48 1b       	sub	r20, r24
   11d76:	59 0b       	sbc	r21, r25
   11d78:	ca 01       	movw	r24, r20
   11d7a:	88 0f       	add	r24, r24
   11d7c:	99 1f       	adc	r25, r25
   11d7e:	9a 87       	std	Y+10, r25	; 0x0a
   11d80:	89 87       	std	Y+9, r24	; 0x09
		xinc1 = 0;
   11d82:	1e 86       	std	Y+14, r1	; 0x0e
   11d84:	1d 86       	std	Y+13, r1	; 0x0d
		xinc2 = 1;
   11d86:	81 e0       	ldi	r24, 0x01	; 1
   11d88:	90 e0       	ldi	r25, 0x00	; 0
   11d8a:	98 8b       	std	Y+16, r25	; 0x10
   11d8c:	8f 87       	std	Y+15, r24	; 0x0f
		yinc1 = 1;
   11d8e:	81 e0       	ldi	r24, 0x01	; 1
   11d90:	90 e0       	ldi	r25, 0x00	; 0
   11d92:	9c 8b       	std	Y+20, r25	; 0x14
   11d94:	8b 8b       	std	Y+19, r24	; 0x13
		yinc2 = 1;
   11d96:	81 e0       	ldi	r24, 0x01	; 1
   11d98:	90 e0       	ldi	r25, 0x00	; 0
   11d9a:	9e 8b       	std	Y+22, r25	; 0x16
   11d9c:	8d 8b       	std	Y+21, r24	; 0x15
	}


	if (gr_x > x2)	// Make sure x and y move in the right directions
   11d9e:	20 91 bd 01 	lds	r18, 0x01BD
   11da2:	30 91 be 01 	lds	r19, 0x01BE
   11da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   11da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   11daa:	82 17       	cp	r24, r18
   11dac:	93 07       	cpc	r25, r19
   11dae:	70 f4       	brcc	.+28     	; 0x11dcc <lineto+0x166>
	{
		xinc1 = - xinc1;
   11db0:	8d 85       	ldd	r24, Y+13	; 0x0d
   11db2:	9e 85       	ldd	r25, Y+14	; 0x0e
   11db4:	90 95       	com	r25
   11db6:	81 95       	neg	r24
   11db8:	9f 4f       	sbci	r25, 0xFF	; 255
   11dba:	9e 87       	std	Y+14, r25	; 0x0e
   11dbc:	8d 87       	std	Y+13, r24	; 0x0d
		xinc2 = - xinc2;
   11dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
   11dc0:	98 89       	ldd	r25, Y+16	; 0x10
   11dc2:	90 95       	com	r25
   11dc4:	81 95       	neg	r24
   11dc6:	9f 4f       	sbci	r25, 0xFF	; 255
   11dc8:	98 8b       	std	Y+16, r25	; 0x10
   11dca:	8f 87       	std	Y+15, r24	; 0x0f
	}
	if (gr_y > y2)
   11dcc:	20 91 bf 01 	lds	r18, 0x01BF
   11dd0:	30 91 c0 01 	lds	r19, 0x01C0
   11dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
   11dd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
   11dd8:	82 17       	cp	r24, r18
   11dda:	93 07       	cpc	r25, r19
   11ddc:	70 f4       	brcc	.+28     	; 0x11dfa <lineto+0x194>
	{
		yinc1 = - yinc1;
   11dde:	8b 89       	ldd	r24, Y+19	; 0x13
   11de0:	9c 89       	ldd	r25, Y+20	; 0x14
   11de2:	90 95       	com	r25
   11de4:	81 95       	neg	r24
   11de6:	9f 4f       	sbci	r25, 0xFF	; 255
   11de8:	9c 8b       	std	Y+20, r25	; 0x14
   11dea:	8b 8b       	std	Y+19, r24	; 0x13
		yinc2 = - yinc2;
   11dec:	8d 89       	ldd	r24, Y+21	; 0x15
   11dee:	9e 89       	ldd	r25, Y+22	; 0x16
   11df0:	90 95       	com	r25
   11df2:	81 95       	neg	r24
   11df4:	9f 4f       	sbci	r25, 0xFF	; 255
   11df6:	9e 8b       	std	Y+22, r25	; 0x16
   11df8:	8d 8b       	std	Y+21, r24	; 0x15
	}


	x = gr_x;		// Start drawing from previous endpoint
   11dfa:	80 91 bd 01 	lds	r24, 0x01BD
   11dfe:	90 91 be 01 	lds	r25, 0x01BE
   11e02:	9c 87       	std	Y+12, r25	; 0x0c
   11e04:	8b 87       	std	Y+11, r24	; 0x0b
	y = gr_y;
   11e06:	80 91 bf 01 	lds	r24, 0x01BF
   11e0a:	90 91 c0 01 	lds	r25, 0x01C0
   11e0e:	9a 8b       	std	Y+18, r25	; 0x12
   11e10:	89 8b       	std	Y+17, r24	; 0x11
	gr_x = x2;		// save new endpoint for next line
   11e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
   11e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
   11e16:	90 93 be 01 	sts	0x01BE, r25
   11e1a:	80 93 bd 01 	sts	0x01BD, r24
	gr_y = y2;
   11e1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   11e20:	9e 8d       	ldd	r25, Y+30	; 0x1e
   11e22:	90 93 c0 01 	sts	0x01C0, r25
   11e26:	80 93 bf 01 	sts	0x01BF, r24

	// Draw the pixels
	for (i = 0; i < numpixels; i++)
   11e2a:	1a 82       	std	Y+2, r1	; 0x02
   11e2c:	19 82       	std	Y+1, r1	; 0x01
   11e2e:	41 c0       	rjmp	.+130    	; 0x11eb2 <lineto+0x24c>
	{
		plot(x, y);
   11e30:	8b 85       	ldd	r24, Y+11	; 0x0b
   11e32:	9c 85       	ldd	r25, Y+12	; 0x0c
   11e34:	29 89       	ldd	r18, Y+17	; 0x11
   11e36:	3a 89       	ldd	r19, Y+18	; 0x12
   11e38:	b9 01       	movw	r22, r18
   11e3a:	0e 94 f1 8d 	call	0x11be2	; 0x11be2 <plot>
		if (d < 0)
   11e3e:	8d 81       	ldd	r24, Y+5	; 0x05
   11e40:	9e 81       	ldd	r25, Y+6	; 0x06
   11e42:	99 23       	and	r25, r25
   11e44:	cc f4       	brge	.+50     	; 0x11e78 <lineto+0x212>
		{
			d = d + dinc1;
   11e46:	2d 81       	ldd	r18, Y+5	; 0x05
   11e48:	3e 81       	ldd	r19, Y+6	; 0x06
   11e4a:	8f 81       	ldd	r24, Y+7	; 0x07
   11e4c:	98 85       	ldd	r25, Y+8	; 0x08
   11e4e:	82 0f       	add	r24, r18
   11e50:	93 1f       	adc	r25, r19
   11e52:	9e 83       	std	Y+6, r25	; 0x06
   11e54:	8d 83       	std	Y+5, r24	; 0x05
			x = x + xinc1;
   11e56:	2b 85       	ldd	r18, Y+11	; 0x0b
   11e58:	3c 85       	ldd	r19, Y+12	; 0x0c
   11e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
   11e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
   11e5e:	82 0f       	add	r24, r18
   11e60:	93 1f       	adc	r25, r19
   11e62:	9c 87       	std	Y+12, r25	; 0x0c
   11e64:	8b 87       	std	Y+11, r24	; 0x0b
			y = y + yinc1;
   11e66:	29 89       	ldd	r18, Y+17	; 0x11
   11e68:	3a 89       	ldd	r19, Y+18	; 0x12
   11e6a:	8b 89       	ldd	r24, Y+19	; 0x13
   11e6c:	9c 89       	ldd	r25, Y+20	; 0x14
   11e6e:	82 0f       	add	r24, r18
   11e70:	93 1f       	adc	r25, r19
   11e72:	9a 8b       	std	Y+18, r25	; 0x12
   11e74:	89 8b       	std	Y+17, r24	; 0x11
   11e76:	18 c0       	rjmp	.+48     	; 0x11ea8 <lineto+0x242>
		}
		else
		{
			d = d + dinc2;
   11e78:	2d 81       	ldd	r18, Y+5	; 0x05
   11e7a:	3e 81       	ldd	r19, Y+6	; 0x06
   11e7c:	89 85       	ldd	r24, Y+9	; 0x09
   11e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
   11e80:	82 0f       	add	r24, r18
   11e82:	93 1f       	adc	r25, r19
   11e84:	9e 83       	std	Y+6, r25	; 0x06
   11e86:	8d 83       	std	Y+5, r24	; 0x05
			x = x + xinc2;
   11e88:	2b 85       	ldd	r18, Y+11	; 0x0b
   11e8a:	3c 85       	ldd	r19, Y+12	; 0x0c
   11e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
   11e8e:	98 89       	ldd	r25, Y+16	; 0x10
   11e90:	82 0f       	add	r24, r18
   11e92:	93 1f       	adc	r25, r19
   11e94:	9c 87       	std	Y+12, r25	; 0x0c
   11e96:	8b 87       	std	Y+11, r24	; 0x0b
			y = y + yinc2;
   11e98:	29 89       	ldd	r18, Y+17	; 0x11
   11e9a:	3a 89       	ldd	r19, Y+18	; 0x12
   11e9c:	8d 89       	ldd	r24, Y+21	; 0x15
   11e9e:	9e 89       	ldd	r25, Y+22	; 0x16
   11ea0:	82 0f       	add	r24, r18
   11ea2:	93 1f       	adc	r25, r19
   11ea4:	9a 8b       	std	Y+18, r25	; 0x12
   11ea6:	89 8b       	std	Y+17, r24	; 0x11
	y = gr_y;
	gr_x = x2;		// save new endpoint for next line
	gr_y = y2;

	// Draw the pixels
	for (i = 0; i < numpixels; i++)
   11ea8:	89 81       	ldd	r24, Y+1	; 0x01
   11eaa:	9a 81       	ldd	r25, Y+2	; 0x02
   11eac:	01 96       	adiw	r24, 0x01	; 1
   11eae:	9a 83       	std	Y+2, r25	; 0x02
   11eb0:	89 83       	std	Y+1, r24	; 0x01
   11eb2:	29 81       	ldd	r18, Y+1	; 0x01
   11eb4:	3a 81       	ldd	r19, Y+2	; 0x02
   11eb6:	8b 81       	ldd	r24, Y+3	; 0x03
   11eb8:	9c 81       	ldd	r25, Y+4	; 0x04
   11eba:	28 17       	cp	r18, r24
   11ebc:	39 07       	cpc	r19, r25
   11ebe:	0c f4       	brge	.+2      	; 0x11ec2 <lineto+0x25c>
   11ec0:	b7 cf       	rjmp	.-146    	; 0x11e30 <lineto+0x1ca>
			d = d + dinc2;
			x = x + xinc2;
			y = y + yinc2;
		}
	}
}
   11ec2:	6e 96       	adiw	r28, 0x1e	; 30
   11ec4:	0f b6       	in	r0, 0x3f	; 63
   11ec6:	f8 94       	cli
   11ec8:	de bf       	out	0x3e, r29	; 62
   11eca:	0f be       	out	0x3f, r0	; 63
   11ecc:	cd bf       	out	0x3d, r28	; 61
   11ece:	cf 91       	pop	r28
   11ed0:	df 91       	pop	r29
   11ed2:	08 95       	ret

00011ed4 <delay>:

void delay(WORD t)
{
   11ed4:	df 93       	push	r29
   11ed6:	cf 93       	push	r28
   11ed8:	00 d0       	rcall	.+0      	; 0x11eda <delay+0x6>
   11eda:	0f 92       	push	r0
   11edc:	cd b7       	in	r28, 0x3d	; 61
   11ede:	de b7       	in	r29, 0x3e	; 62
   11ee0:	9b 83       	std	Y+3, r25	; 0x03
   11ee2:	8a 83       	std	Y+2, r24	; 0x02
	BYTE t1;

	while(t--)
   11ee4:	0a c0       	rjmp	.+20     	; 0x11efa <delay+0x26>
	{
		for(t1 = 11; t1 > 0; t1--)
   11ee6:	8b e0       	ldi	r24, 0x0B	; 11
   11ee8:	89 83       	std	Y+1, r24	; 0x01
   11eea:	04 c0       	rjmp	.+8      	; 0x11ef4 <delay+0x20>
		{
			asm("nop");
   11eec:	00 00       	nop
{
	BYTE t1;

	while(t--)
	{
		for(t1 = 11; t1 > 0; t1--)
   11eee:	89 81       	ldd	r24, Y+1	; 0x01
   11ef0:	81 50       	subi	r24, 0x01	; 1
   11ef2:	89 83       	std	Y+1, r24	; 0x01
   11ef4:	89 81       	ldd	r24, Y+1	; 0x01
   11ef6:	88 23       	and	r24, r24
   11ef8:	c9 f7       	brne	.-14     	; 0x11eec <delay+0x18>

void delay(WORD t)
{
	BYTE t1;

	while(t--)
   11efa:	21 e0       	ldi	r18, 0x01	; 1
   11efc:	8a 81       	ldd	r24, Y+2	; 0x02
   11efe:	9b 81       	ldd	r25, Y+3	; 0x03
   11f00:	00 97       	sbiw	r24, 0x00	; 0
   11f02:	09 f4       	brne	.+2      	; 0x11f06 <delay+0x32>
   11f04:	20 e0       	ldi	r18, 0x00	; 0
   11f06:	8a 81       	ldd	r24, Y+2	; 0x02
   11f08:	9b 81       	ldd	r25, Y+3	; 0x03
   11f0a:	01 97       	sbiw	r24, 0x01	; 1
   11f0c:	9b 83       	std	Y+3, r25	; 0x03
   11f0e:	8a 83       	std	Y+2, r24	; 0x02
   11f10:	22 23       	and	r18, r18
   11f12:	49 f7       	brne	.-46     	; 0x11ee6 <delay+0x12>
		for(t1 = 11; t1 > 0; t1--)
		{
			asm("nop");
		}
	}
}
   11f14:	0f 90       	pop	r0
   11f16:	0f 90       	pop	r0
   11f18:	0f 90       	pop	r0
   11f1a:	cf 91       	pop	r28
   11f1c:	df 91       	pop	r29
   11f1e:	08 95       	ret

00011f20 <main>:
char txtbuf[40];

/****************END GLOBAL VARIABLES****************/

int main(void)
{
   11f20:	df 93       	push	r29
   11f22:	cf 93       	push	r28
   11f24:	cd b7       	in	r28, 0x3d	; 61
   11f26:	de b7       	in	r29, 0x3e	; 62
	USART_Init(MYUBRR);
   11f28:	80 e4       	ldi	r24, 0x40	; 64
   11f2a:	90 e0       	ldi	r25, 0x00	; 0
   11f2c:	0e 94 f3 8f 	call	0x11fe6	; 0x11fe6 <USART_Init>
	init10msTimer();
   11f30:	0e 94 a6 8f 	call	0x11f4c	; 0x11f4c <init10msTimer>
	disk_initialize(0);
   11f34:	80 e0       	ldi	r24, 0x00	; 0
   11f36:	0e 94 40 81 	call	0x10280	; 0x10280 <disk_initialize>
	f_err_code = f_mount(0, &FATFS_Obj);
   11f3a:	21 ec       	ldi	r18, 0xC1	; 193
   11f3c:	31 e0       	ldi	r19, 0x01	; 1
   11f3e:	80 e0       	ldi	r24, 0x00	; 0
   11f40:	b9 01       	movw	r22, r18
   11f42:	0e 94 64 68 	call	0xd0c8	; 0xd0c8 <f_mount>
   11f46:	80 93 f7 03 	sts	0x03F7, r24
		sleep_cpu();
		sleep_disable();
		*/
		//
        //TODO:: Please write your application code 
    }
   11f4a:	ff cf       	rjmp	.-2      	; 0x11f4a <main+0x2a>

00011f4c <init10msTimer>:
}


void init10msTimer()
{
   11f4c:	df 93       	push	r29
   11f4e:	cf 93       	push	r28
   11f50:	cd b7       	in	r28, 0x3d	; 61
   11f52:	de b7       	in	r29, 0x3e	; 62
	//CTC Mode
	TCCR0A = (1 << WGM01);
   11f54:	84 e4       	ldi	r24, 0x44	; 68
   11f56:	90 e0       	ldi	r25, 0x00	; 0
   11f58:	22 e0       	ldi	r18, 0x02	; 2
   11f5a:	fc 01       	movw	r30, r24
   11f5c:	20 83       	st	Z, r18
	//prescaler set to 1024
	TCCR0B = (1 << CS02) | (1 << CS00);
   11f5e:	85 e4       	ldi	r24, 0x45	; 69
   11f60:	90 e0       	ldi	r25, 0x00	; 0
   11f62:	25 e0       	ldi	r18, 0x05	; 5
   11f64:	fc 01       	movw	r30, r24
   11f66:	20 83       	st	Z, r18
	
	//10ms Timer requires frequency of 100Hz
	// used avrcalc to receive value of OCR
	OCR0A = 0x9B;
   11f68:	87 e4       	ldi	r24, 0x47	; 71
   11f6a:	90 e0       	ldi	r25, 0x00	; 0
   11f6c:	2b e9       	ldi	r18, 0x9B	; 155
   11f6e:	fc 01       	movw	r30, r24
   11f70:	20 83       	st	Z, r18
}
   11f72:	cf 91       	pop	r28
   11f74:	df 91       	pop	r29
   11f76:	08 95       	ret

00011f78 <display_rgb>:

void display_rgb(WORD data)
{
   11f78:	df 93       	push	r29
   11f7a:	cf 93       	push	r28
   11f7c:	00 d0       	rcall	.+0      	; 0x11f7e <display_rgb+0x6>
   11f7e:	00 d0       	rcall	.+0      	; 0x11f80 <display_rgb+0x8>
   11f80:	00 d0       	rcall	.+0      	; 0x11f82 <display_rgb+0xa>
   11f82:	cd b7       	in	r28, 0x3d	; 61
   11f84:	de b7       	in	r29, 0x3e	; 62
   11f86:	9e 83       	std	Y+6, r25	; 0x06
   11f88:	8d 83       	std	Y+5, r24	; 0x05
	WORD i,j;

	LCDSetGCur(0, 0);
   11f8a:	80 e0       	ldi	r24, 0x00	; 0
   11f8c:	90 e0       	ldi	r25, 0x00	; 0
   11f8e:	60 e0       	ldi	r22, 0x00	; 0
   11f90:	70 e0       	ldi	r23, 0x00	; 0
   11f92:	0e 94 90 8c 	call	0x11920	; 0x11920 <LCDSetGCur>
	for(i = 0; i < NR_ROWS; i++)
   11f96:	1a 82       	std	Y+2, r1	; 0x02
   11f98:	19 82       	std	Y+1, r1	; 0x01
   11f9a:	17 c0       	rjmp	.+46     	; 0x11fca <display_rgb+0x52>
	{
		for(j = 0; j < NR_COLS; j++)
   11f9c:	1c 82       	std	Y+4, r1	; 0x04
   11f9e:	1b 82       	std	Y+3, r1	; 0x03
   11fa0:	09 c0       	rjmp	.+18     	; 0x11fb4 <display_rgb+0x3c>
		{
			LCDData(data);
   11fa2:	8d 81       	ldd	r24, Y+5	; 0x05
   11fa4:	9e 81       	ldd	r25, Y+6	; 0x06
   11fa6:	0e 94 b3 86 	call	0x10d66	; 0x10d66 <LCDData>
	WORD i,j;

	LCDSetGCur(0, 0);
	for(i = 0; i < NR_ROWS; i++)
	{
		for(j = 0; j < NR_COLS; j++)
   11faa:	8b 81       	ldd	r24, Y+3	; 0x03
   11fac:	9c 81       	ldd	r25, Y+4	; 0x04
   11fae:	01 96       	adiw	r24, 0x01	; 1
   11fb0:	9c 83       	std	Y+4, r25	; 0x04
   11fb2:	8b 83       	std	Y+3, r24	; 0x03
   11fb4:	8b 81       	ldd	r24, Y+3	; 0x03
   11fb6:	9c 81       	ldd	r25, Y+4	; 0x04
   11fb8:	21 e0       	ldi	r18, 0x01	; 1
   11fba:	80 34       	cpi	r24, 0x40	; 64
   11fbc:	92 07       	cpc	r25, r18
   11fbe:	88 f3       	brcs	.-30     	; 0x11fa2 <display_rgb+0x2a>
void display_rgb(WORD data)
{
	WORD i,j;

	LCDSetGCur(0, 0);
	for(i = 0; i < NR_ROWS; i++)
   11fc0:	89 81       	ldd	r24, Y+1	; 0x01
   11fc2:	9a 81       	ldd	r25, Y+2	; 0x02
   11fc4:	01 96       	adiw	r24, 0x01	; 1
   11fc6:	9a 83       	std	Y+2, r25	; 0x02
   11fc8:	89 83       	std	Y+1, r24	; 0x01
   11fca:	89 81       	ldd	r24, Y+1	; 0x01
   11fcc:	9a 81       	ldd	r25, Y+2	; 0x02
   11fce:	80 3f       	cpi	r24, 0xF0	; 240
   11fd0:	91 05       	cpc	r25, r1
   11fd2:	20 f3       	brcs	.-56     	; 0x11f9c <display_rgb+0x24>
		for(j = 0; j < NR_COLS; j++)
		{
			LCDData(data);
		}
	}
}
   11fd4:	26 96       	adiw	r28, 0x06	; 6
   11fd6:	0f b6       	in	r0, 0x3f	; 63
   11fd8:	f8 94       	cli
   11fda:	de bf       	out	0x3e, r29	; 62
   11fdc:	0f be       	out	0x3f, r0	; 63
   11fde:	cd bf       	out	0x3d, r28	; 61
   11fe0:	cf 91       	pop	r28
   11fe2:	df 91       	pop	r29
   11fe4:	08 95       	ret

00011fe6 <USART_Init>:

void USART_Init( unsigned int ubrr)
{
   11fe6:	df 93       	push	r29
   11fe8:	cf 93       	push	r28
   11fea:	00 d0       	rcall	.+0      	; 0x11fec <USART_Init+0x6>
   11fec:	cd b7       	in	r28, 0x3d	; 61
   11fee:	de b7       	in	r29, 0x3e	; 62
   11ff0:	9a 83       	std	Y+2, r25	; 0x02
   11ff2:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
    UBRR1H = (ubrr >> 8);
   11ff4:	8d ec       	ldi	r24, 0xCD	; 205
   11ff6:	90 e0       	ldi	r25, 0x00	; 0
   11ff8:	29 81       	ldd	r18, Y+1	; 0x01
   11ffa:	3a 81       	ldd	r19, Y+2	; 0x02
   11ffc:	23 2f       	mov	r18, r19
   11ffe:	33 27       	eor	r19, r19
   12000:	fc 01       	movw	r30, r24
   12002:	20 83       	st	Z, r18
    UBRR1L = ubrr;
   12004:	8c ec       	ldi	r24, 0xCC	; 204
   12006:	90 e0       	ldi	r25, 0x00	; 0
   12008:	29 81       	ldd	r18, Y+1	; 0x01
   1200a:	fc 01       	movw	r30, r24
   1200c:	20 83       	st	Z, r18
    
    UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);      // Enable receiver and transmitter and interrupt receive
   1200e:	89 ec       	ldi	r24, 0xC9	; 201
   12010:	90 e0       	ldi	r25, 0x00	; 0
   12012:	28 e9       	ldi	r18, 0x98	; 152
   12014:	fc 01       	movw	r30, r24
   12016:	20 83       	st	Z, r18
    UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);    // Set frame: 8data, 1 stp
   12018:	8a ec       	ldi	r24, 0xCA	; 202
   1201a:	90 e0       	ldi	r25, 0x00	; 0
   1201c:	26 e0       	ldi	r18, 0x06	; 6
   1201e:	fc 01       	movw	r30, r24
   12020:	20 83       	st	Z, r18
}
   12022:	0f 90       	pop	r0
   12024:	0f 90       	pop	r0
   12026:	cf 91       	pop	r28
   12028:	df 91       	pop	r29
   1202a:	08 95       	ret

0001202c <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
   1202c:	df 93       	push	r29
   1202e:	cf 93       	push	r28
   12030:	0f 92       	push	r0
   12032:	cd b7       	in	r28, 0x3d	; 61
   12034:	de b7       	in	r29, 0x3e	; 62
   12036:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
    while ( !(UCSR1A & (1 << UDRE1)) ) // Wait until buffer is empty
   12038:	00 00       	nop
   1203a:	88 ec       	ldi	r24, 0xC8	; 200
   1203c:	90 e0       	ldi	r25, 0x00	; 0
   1203e:	fc 01       	movw	r30, r24
   12040:	80 81       	ld	r24, Z
   12042:	88 2f       	mov	r24, r24
   12044:	90 e0       	ldi	r25, 0x00	; 0
   12046:	80 72       	andi	r24, 0x20	; 32
   12048:	90 70       	andi	r25, 0x00	; 0
   1204a:	00 97       	sbiw	r24, 0x00	; 0
   1204c:	b1 f3       	breq	.-20     	; 0x1203a <USART_Transmit+0xe>

	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
   1204e:	8e ec       	ldi	r24, 0xCE	; 206
   12050:	90 e0       	ldi	r25, 0x00	; 0
   12052:	29 81       	ldd	r18, Y+1	; 0x01
   12054:	fc 01       	movw	r30, r24
   12056:	20 83       	st	Z, r18
}
   12058:	0f 90       	pop	r0
   1205a:	cf 91       	pop	r28
   1205c:	df 91       	pop	r29
   1205e:	08 95       	ret

00012060 <USART_Receive>:


unsigned char USART_Receive( void )
{
   12060:	df 93       	push	r29
   12062:	cf 93       	push	r28
   12064:	cd b7       	in	r28, 0x3d	; 61
   12066:	de b7       	in	r29, 0x3e	; 62
	return '\0';
   12068:	80 e0       	ldi	r24, 0x00	; 0
}
   1206a:	cf 91       	pop	r28
   1206c:	df 91       	pop	r29
   1206e:	08 95       	ret

00012070 <__vector_1>:

/* Interrupt Service Routines */

ISR(INT0_vect)
{
   12070:	1f 92       	push	r1
   12072:	0f 92       	push	r0
   12074:	0f b6       	in	r0, 0x3f	; 63
   12076:	0f 92       	push	r0
   12078:	11 24       	eor	r1, r1
   1207a:	df 93       	push	r29
   1207c:	cf 93       	push	r28
   1207e:	cd b7       	in	r28, 0x3d	; 61
   12080:	de b7       	in	r29, 0x3e	; 62
	
}
   12082:	cf 91       	pop	r28
   12084:	df 91       	pop	r29
   12086:	0f 90       	pop	r0
   12088:	0f be       	out	0x3f, r0	; 63
   1208a:	0f 90       	pop	r0
   1208c:	1f 90       	pop	r1
   1208e:	18 95       	reti

00012090 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
   12090:	1f 92       	push	r1
   12092:	0f 92       	push	r0
   12094:	0f b6       	in	r0, 0x3f	; 63
   12096:	0f 92       	push	r0
   12098:	00 90 5b 00 	lds	r0, 0x005B
   1209c:	0f 92       	push	r0
   1209e:	11 24       	eor	r1, r1
   120a0:	2f 93       	push	r18
   120a2:	3f 93       	push	r19
   120a4:	4f 93       	push	r20
   120a6:	5f 93       	push	r21
   120a8:	6f 93       	push	r22
   120aa:	7f 93       	push	r23
   120ac:	8f 93       	push	r24
   120ae:	9f 93       	push	r25
   120b0:	af 93       	push	r26
   120b2:	bf 93       	push	r27
   120b4:	ef 93       	push	r30
   120b6:	ff 93       	push	r31
   120b8:	df 93       	push	r29
   120ba:	cf 93       	push	r28
   120bc:	cd b7       	in	r28, 0x3d	; 61
   120be:	de b7       	in	r29, 0x3e	; 62
	disk_timerproc();
   120c0:	0e 94 cd 85 	call	0x10b9a	; 0x10b9a <disk_timerproc>
   120c4:	cf 91       	pop	r28
   120c6:	df 91       	pop	r29
   120c8:	ff 91       	pop	r31
   120ca:	ef 91       	pop	r30
   120cc:	bf 91       	pop	r27
   120ce:	af 91       	pop	r26
   120d0:	9f 91       	pop	r25
   120d2:	8f 91       	pop	r24
   120d4:	7f 91       	pop	r23
   120d6:	6f 91       	pop	r22
   120d8:	5f 91       	pop	r21
   120da:	4f 91       	pop	r20
   120dc:	3f 91       	pop	r19
   120de:	2f 91       	pop	r18
   120e0:	0f 90       	pop	r0
   120e2:	00 92 5b 00 	sts	0x005B, r0
   120e6:	0f 90       	pop	r0
   120e8:	0f be       	out	0x3f, r0	; 63
   120ea:	0f 90       	pop	r0
   120ec:	1f 90       	pop	r1
   120ee:	18 95       	reti

000120f0 <initTouchScreen>:
#include <util/delay.h>
#include <avr/sfr_defs.h>
#include "TouchScreen.h"

void initTouchScreen(void)
{
   120f0:	df 93       	push	r29
   120f2:	cf 93       	push	r28
   120f4:	cd b7       	in	r28, 0x3d	; 61
   120f6:	de b7       	in	r29, 0x3e	; 62
	//really this just initializes the ADC
	ADMUX = 0;
   120f8:	8c e7       	ldi	r24, 0x7C	; 124
   120fa:	90 e0       	ldi	r25, 0x00	; 0
   120fc:	fc 01       	movw	r30, r24
   120fe:	10 82       	st	Z, r1
	//Tells the ADC to use the AREF voltage
	ADMUX |= (1 << REFS0);
   12100:	8c e7       	ldi	r24, 0x7C	; 124
   12102:	90 e0       	ldi	r25, 0x00	; 0
   12104:	2c e7       	ldi	r18, 0x7C	; 124
   12106:	30 e0       	ldi	r19, 0x00	; 0
   12108:	f9 01       	movw	r30, r18
   1210a:	20 81       	ld	r18, Z
   1210c:	20 64       	ori	r18, 0x40	; 64
   1210e:	fc 01       	movw	r30, r24
   12110:	20 83       	st	Z, r18
	//Sets Prescaler to 128 (ADPS2..0) and Enables the ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);  
   12112:	8a e7       	ldi	r24, 0x7A	; 122
   12114:	90 e0       	ldi	r25, 0x00	; 0
   12116:	2a e7       	ldi	r18, 0x7A	; 122
   12118:	30 e0       	ldi	r19, 0x00	; 0
   1211a:	f9 01       	movw	r30, r18
   1211c:	20 81       	ld	r18, Z
   1211e:	27 68       	ori	r18, 0x87	; 135
   12120:	fc 01       	movw	r30, r24
   12122:	20 83       	st	Z, r18
	//Free running mode
	ADCSRB = 0;
   12124:	8b e7       	ldi	r24, 0x7B	; 123
   12126:	90 e0       	ldi	r25, 0x00	; 0
   12128:	fc 01       	movw	r30, r24
   1212a:	10 82       	st	Z, r1
}
   1212c:	cf 91       	pop	r28
   1212e:	df 91       	pop	r29
   12130:	08 95       	ret

00012132 <getX>:



uint16_t getX()
{
   12132:	df 93       	push	r29
   12134:	cf 93       	push	r28
   12136:	cd b7       	in	r28, 0x3d	; 61
   12138:	de b7       	in	r29, 0x3e	; 62
	TS_DIR = 0;							//Cleared to all inputs
   1213a:	80 e3       	ldi	r24, 0x30	; 48
   1213c:	90 e0       	ldi	r25, 0x00	; 0
   1213e:	fc 01       	movw	r30, r24
   12140:	10 82       	st	Z, r1
	TS_DIR |= (1 << Y1) | (1 << Y2);	//Y1 and Y2 set to outputs
   12142:	80 e3       	ldi	r24, 0x30	; 48
   12144:	90 e0       	ldi	r25, 0x00	; 0
   12146:	20 e3       	ldi	r18, 0x30	; 48
   12148:	30 e0       	ldi	r19, 0x00	; 0
   1214a:	f9 01       	movw	r30, r18
   1214c:	20 81       	ld	r18, Z
   1214e:	2a 60       	ori	r18, 0x0A	; 10
   12150:	fc 01       	movw	r30, r24
   12152:	20 83       	st	Z, r18
	TS_PORT &= ~(1 << Y1);				//Y1 is set to 0V (GND)
   12154:	81 e3       	ldi	r24, 0x31	; 49
   12156:	90 e0       	ldi	r25, 0x00	; 0
   12158:	21 e3       	ldi	r18, 0x31	; 49
   1215a:	30 e0       	ldi	r19, 0x00	; 0
   1215c:	f9 01       	movw	r30, r18
   1215e:	20 81       	ld	r18, Z
   12160:	27 7f       	andi	r18, 0xF7	; 247
   12162:	fc 01       	movw	r30, r24
   12164:	20 83       	st	Z, r18
	TS_PORT |= (1 << Y2);				//Y2 is set to 5V (VCC)
   12166:	81 e3       	ldi	r24, 0x31	; 49
   12168:	90 e0       	ldi	r25, 0x00	; 0
   1216a:	21 e3       	ldi	r18, 0x31	; 49
   1216c:	30 e0       	ldi	r19, 0x00	; 0
   1216e:	f9 01       	movw	r30, r18
   12170:	20 81       	ld	r18, Z
   12172:	22 60       	ori	r18, 0x02	; 2
   12174:	fc 01       	movw	r30, r24
   12176:	20 83       	st	Z, r18
	
	analogRead( X2 );
   12178:	82 e0       	ldi	r24, 0x02	; 2
   1217a:	0e 94 eb 90 	call	0x121d6	; 0x121d6 <analogRead>
}
   1217e:	cf 91       	pop	r28
   12180:	df 91       	pop	r29
   12182:	08 95       	ret

00012184 <getY>:

uint16_t getY()
{
   12184:	df 93       	push	r29
   12186:	cf 93       	push	r28
   12188:	cd b7       	in	r28, 0x3d	; 61
   1218a:	de b7       	in	r29, 0x3e	; 62
	TS_DIR = 0;							//Cleared to all inputs
   1218c:	80 e3       	ldi	r24, 0x30	; 48
   1218e:	90 e0       	ldi	r25, 0x00	; 0
   12190:	fc 01       	movw	r30, r24
   12192:	10 82       	st	Z, r1
	TS_DIR |= (1 << X1) | (1 << X2);	//X1 and X2 are outputs
   12194:	80 e3       	ldi	r24, 0x30	; 48
   12196:	90 e0       	ldi	r25, 0x00	; 0
   12198:	20 e3       	ldi	r18, 0x30	; 48
   1219a:	30 e0       	ldi	r19, 0x00	; 0
   1219c:	f9 01       	movw	r30, r18
   1219e:	20 81       	ld	r18, Z
   121a0:	25 60       	ori	r18, 0x05	; 5
   121a2:	fc 01       	movw	r30, r24
   121a4:	20 83       	st	Z, r18
	TS_PORT &= ~(1 << X2);				//X2 is set to 0V (GND)
   121a6:	81 e3       	ldi	r24, 0x31	; 49
   121a8:	90 e0       	ldi	r25, 0x00	; 0
   121aa:	21 e3       	ldi	r18, 0x31	; 49
   121ac:	30 e0       	ldi	r19, 0x00	; 0
   121ae:	f9 01       	movw	r30, r18
   121b0:	20 81       	ld	r18, Z
   121b2:	2b 7f       	andi	r18, 0xFB	; 251
   121b4:	fc 01       	movw	r30, r24
   121b6:	20 83       	st	Z, r18
	TS_PORT |= (1 << X1);				//X1 is set to 5V (VCC)
   121b8:	81 e3       	ldi	r24, 0x31	; 49
   121ba:	90 e0       	ldi	r25, 0x00	; 0
   121bc:	21 e3       	ldi	r18, 0x31	; 49
   121be:	30 e0       	ldi	r19, 0x00	; 0
   121c0:	f9 01       	movw	r30, r18
   121c2:	20 81       	ld	r18, Z
   121c4:	21 60       	ori	r18, 0x01	; 1
   121c6:	fc 01       	movw	r30, r24
   121c8:	20 83       	st	Z, r18
	
	analogRead( Y1 );
   121ca:	83 e0       	ldi	r24, 0x03	; 3
   121cc:	0e 94 eb 90 	call	0x121d6	; 0x121d6 <analogRead>
}
   121d0:	cf 91       	pop	r28
   121d2:	df 91       	pop	r29
   121d4:	08 95       	ret

000121d6 <analogRead>:

uint16_t analogRead( uint8_t pin )
{
   121d6:	df 93       	push	r29
   121d8:	cf 93       	push	r28
   121da:	0f 92       	push	r0
   121dc:	cd b7       	in	r28, 0x3d	; 61
   121de:	de b7       	in	r29, 0x3e	; 62
   121e0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= (0x0F & pin);				//pin set with safety mask
   121e2:	8c e7       	ldi	r24, 0x7C	; 124
   121e4:	90 e0       	ldi	r25, 0x00	; 0
   121e6:	2c e7       	ldi	r18, 0x7C	; 124
   121e8:	30 e0       	ldi	r19, 0x00	; 0
   121ea:	f9 01       	movw	r30, r18
   121ec:	30 81       	ld	r19, Z
   121ee:	29 81       	ldd	r18, Y+1	; 0x01
   121f0:	2f 70       	andi	r18, 0x0F	; 15
   121f2:	23 2b       	or	r18, r19
   121f4:	fc 01       	movw	r30, r24
   121f6:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC);				//Start the ADC calculation 
   121f8:	8a e7       	ldi	r24, 0x7A	; 122
   121fa:	90 e0       	ldi	r25, 0x00	; 0
   121fc:	2a e7       	ldi	r18, 0x7A	; 122
   121fe:	30 e0       	ldi	r19, 0x00	; 0
   12200:	f9 01       	movw	r30, r18
   12202:	20 81       	ld	r18, Z
   12204:	20 64       	ori	r18, 0x40	; 64
   12206:	fc 01       	movw	r30, r24
   12208:	20 83       	st	Z, r18
	while( ADCSRA & (1<<ADSC) );		//wait until ADC is complete
   1220a:	00 00       	nop
   1220c:	8a e7       	ldi	r24, 0x7A	; 122
   1220e:	90 e0       	ldi	r25, 0x00	; 0
   12210:	fc 01       	movw	r30, r24
   12212:	80 81       	ld	r24, Z
   12214:	88 2f       	mov	r24, r24
   12216:	90 e0       	ldi	r25, 0x00	; 0
   12218:	80 74       	andi	r24, 0x40	; 64
   1221a:	90 70       	andi	r25, 0x00	; 0
   1221c:	00 97       	sbiw	r24, 0x00	; 0
   1221e:	b1 f7       	brne	.-20     	; 0x1220c <analogRead+0x36>
	
	return ADC;
   12220:	88 e7       	ldi	r24, 0x78	; 120
   12222:	90 e0       	ldi	r25, 0x00	; 0
   12224:	fc 01       	movw	r30, r24
   12226:	80 81       	ld	r24, Z
   12228:	91 81       	ldd	r25, Z+1	; 0x01
   1222a:	0f 90       	pop	r0
   1222c:	cf 91       	pop	r28
   1222e:	df 91       	pop	r29
   12230:	08 95       	ret

00012232 <__mulsi3>:
   12232:	62 9f       	mul	r22, r18
   12234:	d0 01       	movw	r26, r0
   12236:	73 9f       	mul	r23, r19
   12238:	f0 01       	movw	r30, r0
   1223a:	82 9f       	mul	r24, r18
   1223c:	e0 0d       	add	r30, r0
   1223e:	f1 1d       	adc	r31, r1
   12240:	64 9f       	mul	r22, r20
   12242:	e0 0d       	add	r30, r0
   12244:	f1 1d       	adc	r31, r1
   12246:	92 9f       	mul	r25, r18
   12248:	f0 0d       	add	r31, r0
   1224a:	83 9f       	mul	r24, r19
   1224c:	f0 0d       	add	r31, r0
   1224e:	74 9f       	mul	r23, r20
   12250:	f0 0d       	add	r31, r0
   12252:	65 9f       	mul	r22, r21
   12254:	f0 0d       	add	r31, r0
   12256:	99 27       	eor	r25, r25
   12258:	72 9f       	mul	r23, r18
   1225a:	b0 0d       	add	r27, r0
   1225c:	e1 1d       	adc	r30, r1
   1225e:	f9 1f       	adc	r31, r25
   12260:	63 9f       	mul	r22, r19
   12262:	b0 0d       	add	r27, r0
   12264:	e1 1d       	adc	r30, r1
   12266:	f9 1f       	adc	r31, r25
   12268:	bd 01       	movw	r22, r26
   1226a:	cf 01       	movw	r24, r30
   1226c:	11 24       	eor	r1, r1
   1226e:	08 95       	ret

00012270 <__udivmodsi4>:
   12270:	a1 e2       	ldi	r26, 0x21	; 33
   12272:	1a 2e       	mov	r1, r26
   12274:	aa 1b       	sub	r26, r26
   12276:	bb 1b       	sub	r27, r27
   12278:	fd 01       	movw	r30, r26
   1227a:	0d c0       	rjmp	.+26     	; 0x12296 <__udivmodsi4_ep>

0001227c <__udivmodsi4_loop>:
   1227c:	aa 1f       	adc	r26, r26
   1227e:	bb 1f       	adc	r27, r27
   12280:	ee 1f       	adc	r30, r30
   12282:	ff 1f       	adc	r31, r31
   12284:	a2 17       	cp	r26, r18
   12286:	b3 07       	cpc	r27, r19
   12288:	e4 07       	cpc	r30, r20
   1228a:	f5 07       	cpc	r31, r21
   1228c:	20 f0       	brcs	.+8      	; 0x12296 <__udivmodsi4_ep>
   1228e:	a2 1b       	sub	r26, r18
   12290:	b3 0b       	sbc	r27, r19
   12292:	e4 0b       	sbc	r30, r20
   12294:	f5 0b       	sbc	r31, r21

00012296 <__udivmodsi4_ep>:
   12296:	66 1f       	adc	r22, r22
   12298:	77 1f       	adc	r23, r23
   1229a:	88 1f       	adc	r24, r24
   1229c:	99 1f       	adc	r25, r25
   1229e:	1a 94       	dec	r1
   122a0:	69 f7       	brne	.-38     	; 0x1227c <__udivmodsi4_loop>
   122a2:	60 95       	com	r22
   122a4:	70 95       	com	r23
   122a6:	80 95       	com	r24
   122a8:	90 95       	com	r25
   122aa:	9b 01       	movw	r18, r22
   122ac:	ac 01       	movw	r20, r24
   122ae:	bd 01       	movw	r22, r26
   122b0:	cf 01       	movw	r24, r30
   122b2:	08 95       	ret

000122b4 <_exit>:
   122b4:	f8 94       	cli

000122b6 <__stop_program>:
   122b6:	ff cf       	rjmp	.-2      	; 0x122b6 <__stop_program>
