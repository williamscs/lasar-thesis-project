
Satellite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001092  00001126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001092  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  0000112a  2**0
                  ALLOC
  3 .stab         00001ea8  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a5  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00003679  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000015d  00000000  00000000  000036b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006ec  00000000  00000000  00003816  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000224  00000000  00000000  00003f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007ed  00000000  00000000  00004126  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  00004914  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000201  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000056  00000000  00000000  00004c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00004c7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e9       	ldi	r30, 0x92	; 146
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 30       	cpi	r26, 0x04	; 4
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e0       	ldi	r26, 0x04	; 4
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 31       	cpi	r26, 0x10	; 16
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 47 08 	jmp	0x108e	; 0x108e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile uint8_t zerocross = 1;
volatile uint32_t freqCounter = 0;
volatile uint32_t frequency = 0;

int main(void)
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	6c 97       	sbiw	r28, 0x1c	; 28
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;
      be:	87 e2       	ldi	r24, 0x27	; 39
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	2f ef       	ldi	r18, 0xFF	; 255
      c4:	fc 01       	movw	r30, r24
      c6:	20 83       	st	Z, r18
    DDRD |= (1 << PORTD6); 
      c8:	8a e2       	ldi	r24, 0x2A	; 42
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	2a e2       	ldi	r18, 0x2A	; 42
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	f9 01       	movw	r30, r18
      d2:	20 81       	ld	r18, Z
      d4:	20 64       	ori	r18, 0x40	; 64
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18
	//DDRB = 0;
	PORTD &= ~(1 << PORTD6);
      da:	8b e2       	ldi	r24, 0x2B	; 43
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	2b e2       	ldi	r18, 0x2B	; 43
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	f9 01       	movw	r30, r18
      e4:	20 81       	ld	r18, Z
      e6:	2f 7b       	andi	r18, 0xBF	; 191
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
	PORTD |= (1 << PORTD6);
      ec:	8b e2       	ldi	r24, 0x2B	; 43
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	2b e2       	ldi	r18, 0x2B	; 43
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
	//_delay_ms(1000);
	
	initTimer(65);
      fe:	81 e4       	ldi	r24, 0x41	; 65
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 9e 01 	call	0x33c	; 0x33c <initTimer>
	//initInterrupts();
	initServo(SERVO_PERIOD);
     106:	88 e3       	ldi	r24, 0x38	; 56
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <initServo>
	USART_Init(MYUBRR);
     10e:	87 e6       	ldi	r24, 0x67	; 103
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 32 06 	call	0xc64	; 0xc64 <USART_Init>
	dim = 10;
     116:	8a e0       	ldi	r24, 0x0A	; 10
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	90 93 01 01 	sts	0x0101, r25
     11e:	80 93 00 01 	sts	0x0100, r24
	
	while(1)
	{
		//PORTC &= ~(1 << PORTC0);
		
		openWindow(SERVO_FWD, 1000);
     122:	8f e1       	ldi	r24, 0x1F	; 31
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	68 ee       	ldi	r22, 0xE8	; 232
     128:	73 e0       	ldi	r23, 0x03	; 3
     12a:	0e 94 76 05 	call	0xaec	; 0xaec <openWindow>
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	aa e7       	ldi	r26, 0x7A	; 122
     134:	b4 e4       	ldi	r27, 0x44	; 68
     136:	89 83       	std	Y+1, r24	; 0x01
     138:	9a 83       	std	Y+2, r25	; 0x02
     13a:	ab 83       	std	Y+3, r26	; 0x03
     13c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     13e:	69 81       	ldd	r22, Y+1	; 0x01
     140:	7a 81       	ldd	r23, Y+2	; 0x02
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	9c 81       	ldd	r25, Y+4	; 0x04
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	4a e7       	ldi	r20, 0x7A	; 122
     14c:	55 e4       	ldi	r21, 0x45	; 69
     14e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     152:	dc 01       	movw	r26, r24
     154:	cb 01       	movw	r24, r22
     156:	8d 83       	std	Y+5, r24	; 0x05
     158:	9e 83       	std	Y+6, r25	; 0x06
     15a:	af 83       	std	Y+7, r26	; 0x07
     15c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	6d 81       	ldd	r22, Y+5	; 0x05
     162:	7e 81       	ldd	r23, Y+6	; 0x06
     164:	8f 81       	ldd	r24, Y+7	; 0x07
     166:	98 85       	ldd	r25, Y+8	; 0x08
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	40 e8       	ldi	r20, 0x80	; 128
     16e:	5f e3       	ldi	r21, 0x3F	; 63
     170:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     174:	88 23       	and	r24, r24
     176:	0c f0       	brlt	.+2      	; 0x17a <main+0xd4>
     178:	10 e0       	ldi	r17, 0x00	; 0
     17a:	11 23       	and	r17, r17
     17c:	29 f0       	breq	.+10     	; 0x188 <main+0xe2>
		__ticks = 1;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9a 87       	std	Y+10, r25	; 0x0a
     184:	89 87       	std	Y+9, r24	; 0x09
     186:	46 c0       	rjmp	.+140    	; 0x214 <main+0x16e>
	else if (__tmp > 65535)
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	6d 81       	ldd	r22, Y+5	; 0x05
     18c:	7e 81       	ldd	r23, Y+6	; 0x06
     18e:	8f 81       	ldd	r24, Y+7	; 0x07
     190:	98 85       	ldd	r25, Y+8	; 0x08
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	3f ef       	ldi	r19, 0xFF	; 255
     196:	4f e7       	ldi	r20, 0x7F	; 127
     198:	57 e4       	ldi	r21, 0x47	; 71
     19a:	0e 94 c1 07 	call	0xf82	; 0xf82 <__gesf2>
     19e:	18 16       	cp	r1, r24
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <main+0xfe>
     1a2:	10 e0       	ldi	r17, 0x00	; 0
     1a4:	11 23       	and	r17, r17
     1a6:	61 f1       	breq	.+88     	; 0x200 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a8:	69 81       	ldd	r22, Y+1	; 0x01
     1aa:	7a 81       	ldd	r23, Y+2	; 0x02
     1ac:	8b 81       	ldd	r24, Y+3	; 0x03
     1ae:	9c 81       	ldd	r25, Y+4	; 0x04
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e2       	ldi	r20, 0x20	; 32
     1b6:	51 e4       	ldi	r21, 0x41	; 65
     1b8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     1bc:	dc 01       	movw	r26, r24
     1be:	cb 01       	movw	r24, r22
     1c0:	bc 01       	movw	r22, r24
     1c2:	cd 01       	movw	r24, r26
     1c4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     1c8:	dc 01       	movw	r26, r24
     1ca:	cb 01       	movw	r24, r22
     1cc:	9a 87       	std	Y+10, r25	; 0x0a
     1ce:	89 87       	std	Y+9, r24	; 0x09
     1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <main+0x150>
     1d2:	80 e9       	ldi	r24, 0x90	; 144
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	9c 87       	std	Y+12, r25	; 0x0c
     1d8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1da:	8b 85       	ldd	r24, Y+11	; 0x0b
     1dc:	9c 85       	ldd	r25, Y+12	; 0x0c
     1de:	8c 01       	movw	r16, r24
     1e0:	c8 01       	movw	r24, r16
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x13c>
     1e6:	8c 01       	movw	r16, r24
     1e8:	1c 87       	std	Y+12, r17	; 0x0c
     1ea:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ec:	89 85       	ldd	r24, Y+9	; 0x09
     1ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	9a 87       	std	Y+10, r25	; 0x0a
     1f4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	89 85       	ldd	r24, Y+9	; 0x09
     1f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1fa:	00 97       	sbiw	r24, 0x00	; 0
     1fc:	51 f7       	brne	.-44     	; 0x1d2 <main+0x12c>
     1fe:	17 c0       	rjmp	.+46     	; 0x22e <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     200:	6d 81       	ldd	r22, Y+5	; 0x05
     202:	7e 81       	ldd	r23, Y+6	; 0x06
     204:	8f 81       	ldd	r24, Y+7	; 0x07
     206:	98 85       	ldd	r25, Y+8	; 0x08
     208:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     20c:	dc 01       	movw	r26, r24
     20e:	cb 01       	movw	r24, r22
     210:	9a 87       	std	Y+10, r25	; 0x0a
     212:	89 87       	std	Y+9, r24	; 0x09
     214:	89 85       	ldd	r24, Y+9	; 0x09
     216:	9a 85       	ldd	r25, Y+10	; 0x0a
     218:	9e 87       	std	Y+14, r25	; 0x0e
     21a:	8d 87       	std	Y+13, r24	; 0x0d
     21c:	8d 85       	ldd	r24, Y+13	; 0x0d
     21e:	9e 85       	ldd	r25, Y+14	; 0x0e
     220:	8c 01       	movw	r16, r24
     222:	f8 01       	movw	r30, r16
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <main+0x17e>
     228:	8f 01       	movw	r16, r30
     22a:	1e 87       	std	Y+14, r17	; 0x0e
     22c:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(1000);
		openWindow(SERVO_REV, 1000);
     22e:	80 e1       	ldi	r24, 0x10	; 16
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	68 ee       	ldi	r22, 0xE8	; 232
     234:	73 e0       	ldi	r23, 0x03	; 3
     236:	0e 94 76 05 	call	0xaec	; 0xaec <openWindow>
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	aa e7       	ldi	r26, 0x7A	; 122
     240:	b4 e4       	ldi	r27, 0x44	; 68
     242:	8f 87       	std	Y+15, r24	; 0x0f
     244:	98 8b       	std	Y+16, r25	; 0x10
     246:	a9 8b       	std	Y+17, r26	; 0x11
     248:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     24a:	6f 85       	ldd	r22, Y+15	; 0x0f
     24c:	78 89       	ldd	r23, Y+16	; 0x10
     24e:	89 89       	ldd	r24, Y+17	; 0x11
     250:	9a 89       	ldd	r25, Y+18	; 0x12
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	4a e7       	ldi	r20, 0x7A	; 122
     258:	55 e4       	ldi	r21, 0x45	; 69
     25a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     25e:	dc 01       	movw	r26, r24
     260:	cb 01       	movw	r24, r22
     262:	8b 8b       	std	Y+19, r24	; 0x13
     264:	9c 8b       	std	Y+20, r25	; 0x14
     266:	ad 8b       	std	Y+21, r26	; 0x15
     268:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	6b 89       	ldd	r22, Y+19	; 0x13
     26e:	7c 89       	ldd	r23, Y+20	; 0x14
     270:	8d 89       	ldd	r24, Y+21	; 0x15
     272:	9e 89       	ldd	r25, Y+22	; 0x16
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e8       	ldi	r20, 0x80	; 128
     27a:	5f e3       	ldi	r21, 0x3F	; 63
     27c:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     280:	88 23       	and	r24, r24
     282:	0c f0       	brlt	.+2      	; 0x286 <main+0x1e0>
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	11 23       	and	r17, r17
     288:	29 f0       	breq	.+10     	; 0x294 <main+0x1ee>
		__ticks = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	98 8f       	std	Y+24, r25	; 0x18
     290:	8f 8b       	std	Y+23, r24	; 0x17
     292:	46 c0       	rjmp	.+140    	; 0x320 <main+0x27a>
	else if (__tmp > 65535)
     294:	11 e0       	ldi	r17, 0x01	; 1
     296:	6b 89       	ldd	r22, Y+19	; 0x13
     298:	7c 89       	ldd	r23, Y+20	; 0x14
     29a:	8d 89       	ldd	r24, Y+21	; 0x15
     29c:	9e 89       	ldd	r25, Y+22	; 0x16
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	3f ef       	ldi	r19, 0xFF	; 255
     2a2:	4f e7       	ldi	r20, 0x7F	; 127
     2a4:	57 e4       	ldi	r21, 0x47	; 71
     2a6:	0e 94 c1 07 	call	0xf82	; 0xf82 <__gesf2>
     2aa:	18 16       	cp	r1, r24
     2ac:	0c f0       	brlt	.+2      	; 0x2b0 <main+0x20a>
     2ae:	10 e0       	ldi	r17, 0x00	; 0
     2b0:	11 23       	and	r17, r17
     2b2:	61 f1       	breq	.+88     	; 0x30c <main+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2b4:	6f 85       	ldd	r22, Y+15	; 0x0f
     2b6:	78 89       	ldd	r23, Y+16	; 0x10
     2b8:	89 89       	ldd	r24, Y+17	; 0x11
     2ba:	9a 89       	ldd	r25, Y+18	; 0x12
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e2       	ldi	r20, 0x20	; 32
     2c2:	51 e4       	ldi	r21, 0x41	; 65
     2c4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     2c8:	dc 01       	movw	r26, r24
     2ca:	cb 01       	movw	r24, r22
     2cc:	bc 01       	movw	r22, r24
     2ce:	cd 01       	movw	r24, r26
     2d0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     2d4:	dc 01       	movw	r26, r24
     2d6:	cb 01       	movw	r24, r22
     2d8:	98 8f       	std	Y+24, r25	; 0x18
     2da:	8f 8b       	std	Y+23, r24	; 0x17
     2dc:	12 c0       	rjmp	.+36     	; 0x302 <main+0x25c>
     2de:	80 e9       	ldi	r24, 0x90	; 144
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	9a 8f       	std	Y+26, r25	; 0x1a
     2e4:	89 8f       	std	Y+25, r24	; 0x19
     2e6:	89 8d       	ldd	r24, Y+25	; 0x19
     2e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ea:	8c 01       	movw	r16, r24
     2ec:	c8 01       	movw	r24, r16
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x248>
     2f2:	8c 01       	movw	r16, r24
     2f4:	1a 8f       	std	Y+26, r17	; 0x1a
     2f6:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2f8:	8f 89       	ldd	r24, Y+23	; 0x17
     2fa:	98 8d       	ldd	r25, Y+24	; 0x18
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	98 8f       	std	Y+24, r25	; 0x18
     300:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     302:	8f 89       	ldd	r24, Y+23	; 0x17
     304:	98 8d       	ldd	r25, Y+24	; 0x18
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	51 f7       	brne	.-44     	; 0x2de <main+0x238>
		EIMSK &= ~(1 << INT0);
		sleep_enable();
		sleep_cpu();
		sleep_disable();
		*/
	}	
     30a:	0b cf       	rjmp	.-490    	; 0x122 <main+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     30c:	6b 89       	ldd	r22, Y+19	; 0x13
     30e:	7c 89       	ldd	r23, Y+20	; 0x14
     310:	8d 89       	ldd	r24, Y+21	; 0x15
     312:	9e 89       	ldd	r25, Y+22	; 0x16
     314:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	98 8f       	std	Y+24, r25	; 0x18
     31e:	8f 8b       	std	Y+23, r24	; 0x17
     320:	8f 89       	ldd	r24, Y+23	; 0x17
     322:	98 8d       	ldd	r25, Y+24	; 0x18
     324:	9c 8f       	std	Y+28, r25	; 0x1c
     326:	8b 8f       	std	Y+27, r24	; 0x1b
     328:	8b 8d       	ldd	r24, Y+27	; 0x1b
     32a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     32c:	8c 01       	movw	r16, r24
     32e:	f8 01       	movw	r30, r16
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <main+0x28a>
     334:	8f 01       	movw	r16, r30
     336:	1c 8f       	std	Y+28, r17	; 0x1c
     338:	0b 8f       	std	Y+27, r16	; 0x1b
     33a:	f3 ce       	rjmp	.-538    	; 0x122 <main+0x7c>

0000033c <initTimer>:
/*
 * Function Name: initTimer
 * Author: Chris Williams
 */
void initTimer( int dutycycle )
{
     33c:	df 93       	push	r29
     33e:	cf 93       	push	r28
     340:	00 d0       	rcall	.+0      	; 0x342 <initTimer+0x6>
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	9a 83       	std	Y+2, r25	; 0x02
     348:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = 130; //cap of Timer0
     34a:	87 e4       	ldi	r24, 0x47	; 71
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	22 e8       	ldi	r18, 0x82	; 130
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
	OCR0B = dutycycle;
     354:	88 e4       	ldi	r24, 0x48	; 72
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	29 81       	ldd	r18, Y+1	; 0x01
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
	 
	
	TCCR0A |= (1 << COM0A1) | (1 << WGM01);
     35e:	84 e4       	ldi	r24, 0x44	; 68
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	24 e4       	ldi	r18, 0x44	; 68
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	f9 01       	movw	r30, r18
     368:	20 81       	ld	r18, Z
     36a:	22 68       	ori	r18, 0x82	; 130
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
	// set non-inverting mode 
	// set CTC (Clear Timer on Compare) Mode

    TCCR0B |= (1 << CS01);    // set prescaler to 8 and starts PWM
     370:	85 e4       	ldi	r24, 0x45	; 69
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	25 e4       	ldi	r18, 0x45	; 69
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	f9 01       	movw	r30, r18
     37a:	20 81       	ld	r18, Z
     37c:	22 60       	ori	r18, 0x02	; 2
     37e:	fc 01       	movw	r30, r24
     380:	20 83       	st	Z, r18
	
	TIMSK0 = (1 << OCIE0A) | (1 << TOIE0);	//Enable OVF
     382:	8e e6       	ldi	r24, 0x6E	; 110
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	23 e0       	ldi	r18, 0x03	; 3
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
    // set prescaler to 8 and starts PWM
	
	TIMSK0 = (1 << OCIE0B);
	//Enable COMPA
	*/
}
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	cf 91       	pop	r28
     392:	df 91       	pop	r29
     394:	08 95       	ret

00000396 <initInterrupts>:


void initInterrupts()
{
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	//PORTD |= (1 << PORTD2) | (1 << PORTD3);
	EICRA |= (1 << ISC11) | (1 << ISC01);
     39e:	89 e6       	ldi	r24, 0x69	; 105
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	29 e6       	ldi	r18, 0x69	; 105
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	f9 01       	movw	r30, r18
     3a8:	20 81       	ld	r18, Z
     3aa:	2a 60       	ori	r18, 0x0A	; 10
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 83       	st	Z, r18
	EIMSK |= (1 << INT1) | (1 << INT0);
     3b0:	8d e3       	ldi	r24, 0x3D	; 61
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	2d e3       	ldi	r18, 0x3D	; 61
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	f9 01       	movw	r30, r18
     3ba:	20 81       	ld	r18, Z
     3bc:	23 60       	ori	r18, 0x03	; 3
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
	
	PCICR = (1 << PCIE2) | (1 << PCIE0);
     3c2:	88 e6       	ldi	r24, 0x68	; 104
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	25 e0       	ldi	r18, 0x05	; 5
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
	PCMSK2 = (1 << PCINT20);
     3cc:	8d e6       	ldi	r24, 0x6D	; 109
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	20 e1       	ldi	r18, 0x10	; 16
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
	PCMSK0 = (1 << PCINT0);
     3d6:	8b e6       	ldi	r24, 0x6B	; 107
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
}	
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	08 95       	ret

000003e6 <setCycle>:


void setCycle(int dutycycle)
{
     3e6:	df 93       	push	r29
     3e8:	cf 93       	push	r28
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <setCycle+0x6>
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	9a 83       	std	Y+2, r25	; 0x02
     3f2:	89 83       	std	Y+1, r24	; 0x01
	cli();
     3f4:	f8 94       	cli
	OCR0A = dutycycle;
     3f6:	87 e4       	ldi	r24, 0x47	; 71
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	29 81       	ldd	r18, Y+1	; 0x01
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
	sei();
     400:	78 94       	sei
	return;
}
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	08 95       	ret

0000040c <__vector_14>:
 */

//OLD: 2/15/2012
//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	2f 93       	push	r18
     41c:	3f 93       	push	r19
     41e:	4f 93       	push	r20
     420:	5f 93       	push	r21
     422:	6f 93       	push	r22
     424:	7f 93       	push	r23
     426:	8f 93       	push	r24
     428:	9f 93       	push	r25
     42a:	af 93       	push	r26
     42c:	bf 93       	push	r27
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	68 97       	sbiw	r28, 0x18	; 24
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	cd bf       	out	0x3d, r28	; 61
	if( zerocross == 1) 
     440:	80 91 02 01 	lds	r24, 0x0102
     444:	81 30       	cpi	r24, 0x01	; 1
     446:	09 f0       	breq	.+2      	; 0x44a <__vector_14+0x3e>
     448:	09 c1       	rjmp	.+530    	; 0x65c <__vector_14+0x250>
	{
		if( count >= dim )
     44a:	20 91 04 01 	lds	r18, 0x0104
     44e:	30 91 05 01 	lds	r19, 0x0105
     452:	80 91 00 01 	lds	r24, 0x0100
     456:	90 91 01 01 	lds	r25, 0x0101
     45a:	28 17       	cp	r18, r24
     45c:	39 07       	cpc	r19, r25
     45e:	08 f4       	brcc	.+2      	; 0x462 <__vector_14+0x56>
     460:	ee c0       	rjmp	.+476    	; 0x63e <__vector_14+0x232>
		{
			PORTD |= (1 << PORTD6);
     462:	8b e2       	ldi	r24, 0x2B	; 43
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	2b e2       	ldi	r18, 0x2B	; 43
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	20 64       	ori	r18, 0x40	; 64
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	a0 ea       	ldi	r26, 0xA0	; 160
     47a:	b0 e4       	ldi	r27, 0x40	; 64
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	9a 83       	std	Y+2, r25	; 0x02
     480:	ab 83       	std	Y+3, r26	; 0x03
     482:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     484:	69 81       	ldd	r22, Y+1	; 0x01
     486:	7a 81       	ldd	r23, Y+2	; 0x02
     488:	8b 81       	ldd	r24, Y+3	; 0x03
     48a:	9c 81       	ldd	r25, Y+4	; 0x04
     48c:	2b ea       	ldi	r18, 0xAB	; 171
     48e:	3a ea       	ldi	r19, 0xAA	; 170
     490:	4a ea       	ldi	r20, 0xAA	; 170
     492:	50 e4       	ldi	r21, 0x40	; 64
     494:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	8d 83       	std	Y+5, r24	; 0x05
     49e:	9e 83       	std	Y+6, r25	; 0x06
     4a0:	af 83       	std	Y+7, r26	; 0x07
     4a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4a4:	11 e0       	ldi	r17, 0x01	; 1
     4a6:	6d 81       	ldd	r22, Y+5	; 0x05
     4a8:	7e 81       	ldd	r23, Y+6	; 0x06
     4aa:	8f 81       	ldd	r24, Y+7	; 0x07
     4ac:	98 85       	ldd	r25, Y+8	; 0x08
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e8       	ldi	r20, 0x80	; 128
     4b4:	5f e3       	ldi	r21, 0x3F	; 63
     4b6:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     4ba:	88 23       	and	r24, r24
     4bc:	0c f0       	brlt	.+2      	; 0x4c0 <__vector_14+0xb4>
     4be:	10 e0       	ldi	r17, 0x00	; 0
     4c0:	11 23       	and	r17, r17
     4c2:	19 f0       	breq	.+6      	; 0x4ca <__vector_14+0xbe>
		__ticks = 1;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	89 87       	std	Y+9, r24	; 0x09
     4c8:	a3 c0       	rjmp	.+326    	; 0x610 <__vector_14+0x204>
	else if (__tmp > 255)
     4ca:	11 e0       	ldi	r17, 0x01	; 1
     4cc:	6d 81       	ldd	r22, Y+5	; 0x05
     4ce:	7e 81       	ldd	r23, Y+6	; 0x06
     4d0:	8f 81       	ldd	r24, Y+7	; 0x07
     4d2:	98 85       	ldd	r25, Y+8	; 0x08
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	4f e7       	ldi	r20, 0x7F	; 127
     4da:	53 e4       	ldi	r21, 0x43	; 67
     4dc:	0e 94 c1 07 	call	0xf82	; 0xf82 <__gesf2>
     4e0:	18 16       	cp	r1, r24
     4e2:	0c f0       	brlt	.+2      	; 0x4e6 <__vector_14+0xda>
     4e4:	10 e0       	ldi	r17, 0x00	; 0
     4e6:	11 23       	and	r17, r17
     4e8:	09 f4       	brne	.+2      	; 0x4ec <__vector_14+0xe0>
     4ea:	89 c0       	rjmp	.+274    	; 0x5fe <__vector_14+0x1f2>
	{
		_delay_ms(__us / 1000.0);
     4ec:	69 81       	ldd	r22, Y+1	; 0x01
     4ee:	7a 81       	ldd	r23, Y+2	; 0x02
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	9c 81       	ldd	r25, Y+4	; 0x04
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	4a e7       	ldi	r20, 0x7A	; 122
     4fa:	54 e4       	ldi	r21, 0x44	; 68
     4fc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__divsf3>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	8a 87       	std	Y+10, r24	; 0x0a
     506:	9b 87       	std	Y+11, r25	; 0x0b
     508:	ac 87       	std	Y+12, r26	; 0x0c
     50a:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     50c:	6a 85       	ldd	r22, Y+10	; 0x0a
     50e:	7b 85       	ldd	r23, Y+11	; 0x0b
     510:	8c 85       	ldd	r24, Y+12	; 0x0c
     512:	9d 85       	ldd	r25, Y+13	; 0x0d
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	4a e7       	ldi	r20, 0x7A	; 122
     51a:	55 e4       	ldi	r21, 0x45	; 69
     51c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	8e 87       	std	Y+14, r24	; 0x0e
     526:	9f 87       	std	Y+15, r25	; 0x0f
     528:	a8 8b       	std	Y+16, r26	; 0x10
     52a:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     52c:	11 e0       	ldi	r17, 0x01	; 1
     52e:	6e 85       	ldd	r22, Y+14	; 0x0e
     530:	7f 85       	ldd	r23, Y+15	; 0x0f
     532:	88 89       	ldd	r24, Y+16	; 0x10
     534:	99 89       	ldd	r25, Y+17	; 0x11
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e8       	ldi	r20, 0x80	; 128
     53c:	5f e3       	ldi	r21, 0x3F	; 63
     53e:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     542:	88 23       	and	r24, r24
     544:	0c f0       	brlt	.+2      	; 0x548 <__vector_14+0x13c>
     546:	10 e0       	ldi	r17, 0x00	; 0
     548:	11 23       	and	r17, r17
     54a:	29 f0       	breq	.+10     	; 0x556 <__vector_14+0x14a>
		__ticks = 1;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	9b 8b       	std	Y+19, r25	; 0x13
     552:	8a 8b       	std	Y+18, r24	; 0x12
     554:	46 c0       	rjmp	.+140    	; 0x5e2 <__vector_14+0x1d6>
	else if (__tmp > 65535)
     556:	11 e0       	ldi	r17, 0x01	; 1
     558:	6e 85       	ldd	r22, Y+14	; 0x0e
     55a:	7f 85       	ldd	r23, Y+15	; 0x0f
     55c:	88 89       	ldd	r24, Y+16	; 0x10
     55e:	99 89       	ldd	r25, Y+17	; 0x11
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	3f ef       	ldi	r19, 0xFF	; 255
     564:	4f e7       	ldi	r20, 0x7F	; 127
     566:	57 e4       	ldi	r21, 0x47	; 71
     568:	0e 94 c1 07 	call	0xf82	; 0xf82 <__gesf2>
     56c:	18 16       	cp	r1, r24
     56e:	0c f0       	brlt	.+2      	; 0x572 <__vector_14+0x166>
     570:	10 e0       	ldi	r17, 0x00	; 0
     572:	11 23       	and	r17, r17
     574:	61 f1       	breq	.+88     	; 0x5ce <__vector_14+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     576:	6a 85       	ldd	r22, Y+10	; 0x0a
     578:	7b 85       	ldd	r23, Y+11	; 0x0b
     57a:	8c 85       	ldd	r24, Y+12	; 0x0c
     57c:	9d 85       	ldd	r25, Y+13	; 0x0d
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e2       	ldi	r20, 0x20	; 32
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	bc 01       	movw	r22, r24
     590:	cd 01       	movw	r24, r26
     592:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	9b 8b       	std	Y+19, r25	; 0x13
     59c:	8a 8b       	std	Y+18, r24	; 0x12
     59e:	12 c0       	rjmp	.+36     	; 0x5c4 <__vector_14+0x1b8>
     5a0:	80 e9       	ldi	r24, 0x90	; 144
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	9d 8b       	std	Y+21, r25	; 0x15
     5a6:	8c 8b       	std	Y+20, r24	; 0x14
     5a8:	8c 89       	ldd	r24, Y+20	; 0x14
     5aa:	9d 89       	ldd	r25, Y+21	; 0x15
     5ac:	8c 01       	movw	r16, r24
     5ae:	c8 01       	movw	r24, r16
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <__vector_14+0x1a4>
     5b4:	8c 01       	movw	r16, r24
     5b6:	1d 8b       	std	Y+21, r17	; 0x15
     5b8:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ba:	8a 89       	ldd	r24, Y+18	; 0x12
     5bc:	9b 89       	ldd	r25, Y+19	; 0x13
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	9b 8b       	std	Y+19, r25	; 0x13
     5c2:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c4:	8a 89       	ldd	r24, Y+18	; 0x12
     5c6:	9b 89       	ldd	r25, Y+19	; 0x13
     5c8:	00 97       	sbiw	r24, 0x00	; 0
     5ca:	51 f7       	brne	.-44     	; 0x5a0 <__vector_14+0x194>
     5cc:	28 c0       	rjmp	.+80     	; 0x61e <__vector_14+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ce:	6e 85       	ldd	r22, Y+14	; 0x0e
     5d0:	7f 85       	ldd	r23, Y+15	; 0x0f
     5d2:	88 89       	ldd	r24, Y+16	; 0x10
     5d4:	99 89       	ldd	r25, Y+17	; 0x11
     5d6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     5da:	dc 01       	movw	r26, r24
     5dc:	cb 01       	movw	r24, r22
     5de:	9b 8b       	std	Y+19, r25	; 0x13
     5e0:	8a 8b       	std	Y+18, r24	; 0x12
     5e2:	8a 89       	ldd	r24, Y+18	; 0x12
     5e4:	9b 89       	ldd	r25, Y+19	; 0x13
     5e6:	9f 8b       	std	Y+23, r25	; 0x17
     5e8:	8e 8b       	std	Y+22, r24	; 0x16
     5ea:	8e 89       	ldd	r24, Y+22	; 0x16
     5ec:	9f 89       	ldd	r25, Y+23	; 0x17
     5ee:	8c 01       	movw	r16, r24
     5f0:	f8 01       	movw	r30, r16
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <__vector_14+0x1e6>
     5f6:	8f 01       	movw	r16, r30
     5f8:	1f 8b       	std	Y+23, r17	; 0x17
     5fa:	0e 8b       	std	Y+22, r16	; 0x16
     5fc:	10 c0       	rjmp	.+32     	; 0x61e <__vector_14+0x212>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5fe:	6d 81       	ldd	r22, Y+5	; 0x05
     600:	7e 81       	ldd	r23, Y+6	; 0x06
     602:	8f 81       	ldd	r24, Y+7	; 0x07
     604:	98 85       	ldd	r25, Y+8	; 0x08
     606:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	89 87       	std	Y+9, r24	; 0x09
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     614:	88 8d       	ldd	r24, Y+24	; 0x18
     616:	18 2f       	mov	r17, r24
     618:	1a 95       	dec	r17
     61a:	f1 f7       	brne	.-4      	; 0x618 <__vector_14+0x20c>
     61c:	18 8f       	std	Y+24, r17	; 0x18
			//PORTB |= (1 << PORTB0);
			_delay_us( 5 );
			PORTD &= ~(1 << PORTD6);
     61e:	8b e2       	ldi	r24, 0x2B	; 43
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2b e2       	ldi	r18, 0x2B	; 43
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	2f 7b       	andi	r18, 0xBF	; 191
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
			//PORTB &= ~(1 << PORTB0);
			count = 0;
     630:	10 92 05 01 	sts	0x0105, r1
     634:	10 92 04 01 	sts	0x0104, r1
			zerocross = 0;
     638:	10 92 02 01 	sts	0x0102, r1
     63c:	0f c0       	rjmp	.+30     	; 0x65c <__vector_14+0x250>
		}
		else if( count )
     63e:	80 91 04 01 	lds	r24, 0x0104
     642:	90 91 05 01 	lds	r25, 0x0105
     646:	00 97       	sbiw	r24, 0x00	; 0
     648:	49 f0       	breq	.+18     	; 0x65c <__vector_14+0x250>
		{
			
			count = count + 1;
     64a:	80 91 04 01 	lds	r24, 0x0104
     64e:	90 91 05 01 	lds	r25, 0x0105
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	90 93 05 01 	sts	0x0105, r25
     658:	80 93 04 01 	sts	0x0104, r24
		}
	}
}
     65c:	68 96       	adiw	r28, 0x18	; 24
     65e:	de bf       	out	0x3e, r29	; 62
     660:	cd bf       	out	0x3d, r28	; 61
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	7f 91       	pop	r23
     674:	6f 91       	pop	r22
     676:	5f 91       	pop	r21
     678:	4f 91       	pop	r20
     67a:	3f 91       	pop	r19
     67c:	2f 91       	pop	r18
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <__vector_11>:

ISR(TIMER1_COMPA_vect)
{	
     68c:	1f 92       	push	r1
     68e:	0f 92       	push	r0
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
	frequency = freqCounter * 50;
     6b6:	80 91 08 01 	lds	r24, 0x0108
     6ba:	90 91 09 01 	lds	r25, 0x0109
     6be:	a0 91 0a 01 	lds	r26, 0x010A
     6c2:	b0 91 0b 01 	lds	r27, 0x010B
     6c6:	22 e3       	ldi	r18, 0x32	; 50
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	bc 01       	movw	r22, r24
     6d0:	cd 01       	movw	r24, r26
     6d2:	0e 94 28 08 	call	0x1050	; 0x1050 <__mulsi3>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	80 93 0c 01 	sts	0x010C, r24
     6de:	90 93 0d 01 	sts	0x010D, r25
     6e2:	a0 93 0e 01 	sts	0x010E, r26
     6e6:	b0 93 0f 01 	sts	0x010F, r27
	freqCounter = 0;
     6ea:	10 92 08 01 	sts	0x0108, r1
     6ee:	10 92 09 01 	sts	0x0109, r1
     6f2:	10 92 0a 01 	sts	0x010A, r1
     6f6:	10 92 0b 01 	sts	0x010B, r1
}
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	ff 91       	pop	r31
     700:	ef 91       	pop	r30
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	7f 91       	pop	r23
     70c:	6f 91       	pop	r22
     70e:	5f 91       	pop	r21
     710:	4f 91       	pop	r20
     712:	3f 91       	pop	r19
     714:	2f 91       	pop	r18
     716:	0f 90       	pop	r0
     718:	0f be       	out	0x3f, r0	; 63
     71a:	0f 90       	pop	r0
     71c:	1f 90       	pop	r1
     71e:	18 95       	reti

00000720 <__vector_1>:

ISR(INT0_vect)
{
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	8f 93       	push	r24
     72c:	df 93       	push	r29
     72e:	cf 93       	push	r28
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
	zerocross = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 02 01 	sts	0x0102, r24
}
     73a:	cf 91       	pop	r28
     73c:	df 91       	pop	r29
     73e:	8f 91       	pop	r24
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	0f 90       	pop	r0
     746:	1f 90       	pop	r1
     748:	18 95       	reti

0000074a <__vector_18>:

ISR(USART_RX_vect)
{
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	ef 93       	push	r30
     75a:	ff 93       	push	r31
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSR0A  & (1 << RXC0)) )
     764:	00 00       	nop
     766:	80 ec       	ldi	r24, 0xC0	; 192
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	fc 01       	movw	r30, r24
     76c:	80 81       	ld	r24, Z
     76e:	88 23       	and	r24, r24
     770:	d4 f7       	brge	.-12     	; 0x766 <__vector_18+0x1c>
	;
	/* Get and return received data from buffer */
	//dim = UDR0;
	rxflag = 1;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 06 01 	sts	0x0106, r24
}
     778:	cf 91       	pop	r28
     77a:	df 91       	pop	r29
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	9f 91       	pop	r25
     782:	8f 91       	pop	r24
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <__vector_3>:

//PIR Sensor
ISR(PCINT0_vect)
{
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	ef 93       	push	r30
     7b2:	ff 93       	push	r31
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	6c 97       	sbiw	r28, 0x1c	; 28
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	cd bf       	out	0x3d, r28	; 61
	if( !(PINB & (1 << PORTB0)) )
     7c2:	83 e2       	ldi	r24, 0x23	; 35
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	88 2f       	mov	r24, r24
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	81 70       	andi	r24, 0x01	; 1
     7d0:	90 70       	andi	r25, 0x00	; 0
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_3+0x4a>
     7d6:	8a c0       	rjmp	.+276    	; 0x8ec <__vector_3+0x15e>
	{
		//SOMETHING WAS SENSED
		PORTC |= (1 << PORTC0);
     7d8:	88 e2       	ldi	r24, 0x28	; 40
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	28 e2       	ldi	r18, 0x28	; 40
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	20 81       	ld	r18, Z
     7e4:	21 60       	ori	r18, 0x01	; 1
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	aa e7       	ldi	r26, 0x7A	; 122
     7f0:	b4 e4       	ldi	r27, 0x44	; 68
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	ab 83       	std	Y+3, r26	; 0x03
     7f8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7fa:	69 81       	ldd	r22, Y+1	; 0x01
     7fc:	7a 81       	ldd	r23, Y+2	; 0x02
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	9c 81       	ldd	r25, Y+4	; 0x04
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	4a e7       	ldi	r20, 0x7A	; 122
     808:	55 e4       	ldi	r21, 0x45	; 69
     80a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	8d 83       	std	Y+5, r24	; 0x05
     814:	9e 83       	std	Y+6, r25	; 0x06
     816:	af 83       	std	Y+7, r26	; 0x07
     818:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     81a:	11 e0       	ldi	r17, 0x01	; 1
     81c:	6d 81       	ldd	r22, Y+5	; 0x05
     81e:	7e 81       	ldd	r23, Y+6	; 0x06
     820:	8f 81       	ldd	r24, Y+7	; 0x07
     822:	98 85       	ldd	r25, Y+8	; 0x08
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e8       	ldi	r20, 0x80	; 128
     82a:	5f e3       	ldi	r21, 0x3F	; 63
     82c:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     830:	88 23       	and	r24, r24
     832:	0c f0       	brlt	.+2      	; 0x836 <__vector_3+0xa8>
     834:	10 e0       	ldi	r17, 0x00	; 0
     836:	11 23       	and	r17, r17
     838:	29 f0       	breq	.+10     	; 0x844 <__vector_3+0xb6>
		__ticks = 1;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	9a 87       	std	Y+10, r25	; 0x0a
     840:	89 87       	std	Y+9, r24	; 0x09
     842:	46 c0       	rjmp	.+140    	; 0x8d0 <__vector_3+0x142>
	else if (__tmp > 65535)
     844:	11 e0       	ldi	r17, 0x01	; 1
     846:	6d 81       	ldd	r22, Y+5	; 0x05
     848:	7e 81       	ldd	r23, Y+6	; 0x06
     84a:	8f 81       	ldd	r24, Y+7	; 0x07
     84c:	98 85       	ldd	r25, Y+8	; 0x08
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	4f e7       	ldi	r20, 0x7F	; 127
     854:	57 e4       	ldi	r21, 0x47	; 71
     856:	0e 94 c1 07 	call	0xf82	; 0xf82 <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	0c f0       	brlt	.+2      	; 0x860 <__vector_3+0xd2>
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	11 23       	and	r17, r17
     862:	61 f1       	breq	.+88     	; 0x8bc <__vector_3+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     864:	69 81       	ldd	r22, Y+1	; 0x01
     866:	7a 81       	ldd	r23, Y+2	; 0x02
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e2       	ldi	r20, 0x20	; 32
     872:	51 e4       	ldi	r21, 0x41	; 65
     874:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	bc 01       	movw	r22, r24
     87e:	cd 01       	movw	r24, r26
     880:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
     888:	9a 87       	std	Y+10, r25	; 0x0a
     88a:	89 87       	std	Y+9, r24	; 0x09
     88c:	12 c0       	rjmp	.+36     	; 0x8b2 <__vector_3+0x124>
     88e:	80 e9       	ldi	r24, 0x90	; 144
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	9c 87       	std	Y+12, r25	; 0x0c
     894:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     896:	8b 85       	ldd	r24, Y+11	; 0x0b
     898:	9c 85       	ldd	r25, Y+12	; 0x0c
     89a:	8c 01       	movw	r16, r24
     89c:	c8 01       	movw	r24, r16
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <__vector_3+0x110>
     8a2:	8c 01       	movw	r16, r24
     8a4:	1c 87       	std	Y+12, r17	; 0x0c
     8a6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a8:	89 85       	ldd	r24, Y+9	; 0x09
     8aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	9a 87       	std	Y+10, r25	; 0x0a
     8b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b2:	89 85       	ldd	r24, Y+9	; 0x09
     8b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	51 f7       	brne	.-44     	; 0x88e <__vector_3+0x100>
     8ba:	a1 c0       	rjmp	.+322    	; 0x9fe <__stack+0xff>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8bc:	6d 81       	ldd	r22, Y+5	; 0x05
     8be:	7e 81       	ldd	r23, Y+6	; 0x06
     8c0:	8f 81       	ldd	r24, Y+7	; 0x07
     8c2:	98 85       	ldd	r25, Y+8	; 0x08
     8c4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	9a 87       	std	Y+10, r25	; 0x0a
     8ce:	89 87       	std	Y+9, r24	; 0x09
     8d0:	89 85       	ldd	r24, Y+9	; 0x09
     8d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d4:	9e 87       	std	Y+14, r25	; 0x0e
     8d6:	8d 87       	std	Y+13, r24	; 0x0d
     8d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     8da:	9e 85       	ldd	r25, Y+14	; 0x0e
     8dc:	8c 01       	movw	r16, r24
     8de:	f8 01       	movw	r30, r16
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <__vector_3+0x152>
     8e4:	8f 01       	movw	r16, r30
     8e6:	1e 87       	std	Y+14, r17	; 0x0e
     8e8:	0d 87       	std	Y+13, r16	; 0x0d
     8ea:	89 c0       	rjmp	.+274    	; 0x9fe <__stack+0xff>
		_delay_ms(1000);
		
	}
	else
	{
		PORTC &= ~(1 << PORTC0);
     8ec:	88 e2       	ldi	r24, 0x28	; 40
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	28 e2       	ldi	r18, 0x28	; 40
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	f9 01       	movw	r30, r18
     8f6:	20 81       	ld	r18, Z
     8f8:	2e 7f       	andi	r18, 0xFE	; 254
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	aa e7       	ldi	r26, 0x7A	; 122
     904:	b4 e4       	ldi	r27, 0x44	; 68
     906:	8f 87       	std	Y+15, r24	; 0x0f
     908:	98 8b       	std	Y+16, r25	; 0x10
     90a:	a9 8b       	std	Y+17, r26	; 0x11
     90c:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     90e:	6f 85       	ldd	r22, Y+15	; 0x0f
     910:	78 89       	ldd	r23, Y+16	; 0x10
     912:	89 89       	ldd	r24, Y+17	; 0x11
     914:	9a 89       	ldd	r25, Y+18	; 0x12
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	4a e7       	ldi	r20, 0x7A	; 122
     91c:	55 e4       	ldi	r21, 0x45	; 69
     91e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	8b 8b       	std	Y+19, r24	; 0x13
     928:	9c 8b       	std	Y+20, r25	; 0x14
     92a:	ad 8b       	std	Y+21, r26	; 0x15
     92c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     92e:	11 e0       	ldi	r17, 0x01	; 1
     930:	6b 89       	ldd	r22, Y+19	; 0x13
     932:	7c 89       	ldd	r23, Y+20	; 0x14
     934:	8d 89       	ldd	r24, Y+21	; 0x15
     936:	9e 89       	ldd	r25, Y+22	; 0x16
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e8       	ldi	r20, 0x80	; 128
     93e:	5f e3       	ldi	r21, 0x3F	; 63
     940:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     944:	88 23       	and	r24, r24
     946:	0c f0       	brlt	.+2      	; 0x94a <__stack+0x4b>
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	11 23       	and	r17, r17
     94c:	29 f0       	breq	.+10     	; 0x958 <__stack+0x59>
		__ticks = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	98 8f       	std	Y+24, r25	; 0x18
     954:	8f 8b       	std	Y+23, r24	; 0x17
     956:	46 c0       	rjmp	.+140    	; 0x9e4 <__stack+0xe5>
	else if (__tmp > 65535)
     958:	11 e0       	ldi	r17, 0x01	; 1
     95a:	6b 89       	ldd	r22, Y+19	; 0x13
     95c:	7c 89       	ldd	r23, Y+20	; 0x14
     95e:	8d 89       	ldd	r24, Y+21	; 0x15
     960:	9e 89       	ldd	r25, Y+22	; 0x16
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 c1 07 	call	0xf82	; 0xf82 <__gesf2>
     96e:	18 16       	cp	r1, r24
     970:	0c f0       	brlt	.+2      	; 0x974 <__stack+0x75>
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	11 23       	and	r17, r17
     976:	61 f1       	breq	.+88     	; 0x9d0 <__stack+0xd1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     978:	6f 85       	ldd	r22, Y+15	; 0x0f
     97a:	78 89       	ldd	r23, Y+16	; 0x10
     97c:	89 89       	ldd	r24, Y+17	; 0x11
     97e:	9a 89       	ldd	r25, Y+18	; 0x12
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e2       	ldi	r20, 0x20	; 32
     986:	51 e4       	ldi	r21, 0x41	; 65
     988:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	bc 01       	movw	r22, r24
     992:	cd 01       	movw	r24, r26
     994:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	98 8f       	std	Y+24, r25	; 0x18
     99e:	8f 8b       	std	Y+23, r24	; 0x17
     9a0:	12 c0       	rjmp	.+36     	; 0x9c6 <__stack+0xc7>
     9a2:	80 e9       	ldi	r24, 0x90	; 144
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	9a 8f       	std	Y+26, r25	; 0x1a
     9a8:	89 8f       	std	Y+25, r24	; 0x19
     9aa:	89 8d       	ldd	r24, Y+25	; 0x19
     9ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9ae:	8c 01       	movw	r16, r24
     9b0:	c8 01       	movw	r24, r16
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <__stack+0xb3>
     9b6:	8c 01       	movw	r16, r24
     9b8:	1a 8f       	std	Y+26, r17	; 0x1a
     9ba:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9bc:	8f 89       	ldd	r24, Y+23	; 0x17
     9be:	98 8d       	ldd	r25, Y+24	; 0x18
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	98 8f       	std	Y+24, r25	; 0x18
     9c4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c6:	8f 89       	ldd	r24, Y+23	; 0x17
     9c8:	98 8d       	ldd	r25, Y+24	; 0x18
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	51 f7       	brne	.-44     	; 0x9a2 <__stack+0xa3>
     9ce:	17 c0       	rjmp	.+46     	; 0x9fe <__stack+0xff>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d0:	6b 89       	ldd	r22, Y+19	; 0x13
     9d2:	7c 89       	ldd	r23, Y+20	; 0x14
     9d4:	8d 89       	ldd	r24, Y+21	; 0x15
     9d6:	9e 89       	ldd	r25, Y+22	; 0x16
     9d8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	98 8f       	std	Y+24, r25	; 0x18
     9e2:	8f 8b       	std	Y+23, r24	; 0x17
     9e4:	8f 89       	ldd	r24, Y+23	; 0x17
     9e6:	98 8d       	ldd	r25, Y+24	; 0x18
     9e8:	9c 8f       	std	Y+28, r25	; 0x1c
     9ea:	8b 8f       	std	Y+27, r24	; 0x1b
     9ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9f0:	8c 01       	movw	r16, r24
     9f2:	f8 01       	movw	r30, r16
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <__stack+0xf5>
     9f8:	8f 01       	movw	r16, r30
     9fa:	1c 8f       	std	Y+28, r17	; 0x1c
     9fc:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(1000);
	}
	
}
     9fe:	6c 96       	adiw	r28, 0x1c	; 28
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	cf 91       	pop	r28
     a06:	df 91       	pop	r29
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_5>:

//Frequency Counter
ISR(PCINT2_vect)
{
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
	if(PIND & (1 << PORTD3))
     a4c:	89 e2       	ldi	r24, 0x29	; 41
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	fc 01       	movw	r30, r24
     a52:	80 81       	ld	r24, Z
     a54:	88 2f       	mov	r24, r24
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	88 70       	andi	r24, 0x08	; 8
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	99 f0       	breq	.+38     	; 0xa86 <__vector_5+0x58>
	{
		freqCounter++;
     a60:	80 91 08 01 	lds	r24, 0x0108
     a64:	90 91 09 01 	lds	r25, 0x0109
     a68:	a0 91 0a 01 	lds	r26, 0x010A
     a6c:	b0 91 0b 01 	lds	r27, 0x010B
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	a1 1d       	adc	r26, r1
     a74:	b1 1d       	adc	r27, r1
     a76:	80 93 08 01 	sts	0x0108, r24
     a7a:	90 93 09 01 	sts	0x0109, r25
     a7e:	a0 93 0a 01 	sts	0x010A, r26
     a82:	b0 93 0b 01 	sts	0x010B, r27
	}
}
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	ff 91       	pop	r31
     a8c:	ef 91       	pop	r30
     a8e:	bf 91       	pop	r27
     a90:	af 91       	pop	r26
     a92:	9f 91       	pop	r25
     a94:	8f 91       	pop	r24
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <initServo>:
	sleep_disable();
	EIMSK |= (1 << INT1) | (1 << INT0);
}*/

void initServo(const int period_64us) 
{
     aa0:	df 93       	push	r29
     aa2:	cf 93       	push	r28
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <initServo+0x6>
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	9a 83       	std	Y+2, r25	; 0x02
     aac:	89 83       	std	Y+1, r24	; 0x01
	
	DDRB |= (1 << PORTB1);
     aae:	84 e2       	ldi	r24, 0x24	; 36
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	24 e2       	ldi	r18, 0x24	; 36
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	f9 01       	movw	r30, r18
     ab8:	20 81       	ld	r18, Z
     aba:	22 60       	ori	r18, 0x02	; 2
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
	//initialize TMR1 (PWM) 
	// clear on compare, fast PWM, TOP=ICR1 (WGM13/WGM12 in TCCR1B)
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	22 e8       	ldi	r18, 0x82	; 130
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
	// prescaler 1024 (and WGM12 and WGM13)
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10) | (1 << CS12); 
     aca:	81 e8       	ldi	r24, 0x81	; 129
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	2d e1       	ldi	r18, 0x1D	; 29
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 83       	st	Z, r18
	ICR1 = period_64us;
     ad4:	86 e8       	ldi	r24, 0x86	; 134
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	29 81       	ldd	r18, Y+1	; 0x01
     ada:	3a 81       	ldd	r19, Y+2	; 0x02
     adc:	fc 01       	movw	r30, r24
     ade:	31 83       	std	Z+1, r19	; 0x01
     ae0:	20 83       	st	Z, r18
} 
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	08 95       	ret

00000aec <openWindow>:
 

void openWindow(int pwm, int time) 
{
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	df 93       	push	r29
     af2:	cf 93       	push	r28
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	62 97       	sbiw	r28, 0x12	; 18
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	98 8b       	std	Y+16, r25	; 0x10
     b06:	8f 87       	std	Y+15, r24	; 0x0f
     b08:	7a 8b       	std	Y+18, r23	; 0x12
     b0a:	69 8b       	std	Y+17, r22	; 0x11
	TCCR1B |= (1 << CS10) | (1 << CS12);
     b0c:	81 e8       	ldi	r24, 0x81	; 129
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	21 e8       	ldi	r18, 0x81	; 129
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	f9 01       	movw	r30, r18
     b16:	20 81       	ld	r18, Z
     b18:	25 60       	ori	r18, 0x05	; 5
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
	OCR1A = pwm;
     b1e:	88 e8       	ldi	r24, 0x88	; 136
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	2f 85       	ldd	r18, Y+15	; 0x0f
     b24:	38 89       	ldd	r19, Y+16	; 0x10
     b26:	fc 01       	movw	r30, r24
     b28:	31 83       	std	Z+1, r19	; 0x01
     b2a:	20 83       	st	Z, r18
	_delay_ms(time);
     b2c:	89 89       	ldd	r24, Y+17	; 0x11
     b2e:	9a 89       	ldd	r25, Y+18	; 0x12
     b30:	aa 27       	eor	r26, r26
     b32:	97 fd       	sbrc	r25, 7
     b34:	a0 95       	com	r26
     b36:	ba 2f       	mov	r27, r26
     b38:	bc 01       	movw	r22, r24
     b3a:	cd 01       	movw	r24, r26
     b3c:	0e 94 11 07 	call	0xe22	; 0xe22 <__floatsisf>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	ab 83       	std	Y+3, r26	; 0x03
     b4a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	69 81       	ldd	r22, Y+1	; 0x01
     b4e:	7a 81       	ldd	r23, Y+2	; 0x02
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	4a e7       	ldi	r20, 0x7A	; 122
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8d 83       	std	Y+5, r24	; 0x05
     b66:	9e 83       	std	Y+6, r25	; 0x06
     b68:	af 83       	std	Y+7, r26	; 0x07
     b6a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b6c:	11 e0       	ldi	r17, 0x01	; 1
     b6e:	6d 81       	ldd	r22, Y+5	; 0x05
     b70:	7e 81       	ldd	r23, Y+6	; 0x06
     b72:	8f 81       	ldd	r24, Y+7	; 0x07
     b74:	98 85       	ldd	r25, Y+8	; 0x08
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e8       	ldi	r20, 0x80	; 128
     b7c:	5f e3       	ldi	r21, 0x3F	; 63
     b7e:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     b82:	88 23       	and	r24, r24
     b84:	0c f0       	brlt	.+2      	; 0xb88 <openWindow+0x9c>
     b86:	10 e0       	ldi	r17, 0x00	; 0
     b88:	11 23       	and	r17, r17
     b8a:	29 f0       	breq	.+10     	; 0xb96 <openWindow+0xaa>
		__ticks = 1;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9a 87       	std	Y+10, r25	; 0x0a
     b92:	89 87       	std	Y+9, r24	; 0x09
     b94:	46 c0       	rjmp	.+140    	; 0xc22 <openWindow+0x136>
	else if (__tmp > 65535)
     b96:	11 e0       	ldi	r17, 0x01	; 1
     b98:	6d 81       	ldd	r22, Y+5	; 0x05
     b9a:	7e 81       	ldd	r23, Y+6	; 0x06
     b9c:	8f 81       	ldd	r24, Y+7	; 0x07
     b9e:	98 85       	ldd	r25, Y+8	; 0x08
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	4f e7       	ldi	r20, 0x7F	; 127
     ba6:	57 e4       	ldi	r21, 0x47	; 71
     ba8:	0e 94 c1 07 	call	0xf82	; 0xf82 <__gesf2>
     bac:	18 16       	cp	r1, r24
     bae:	0c f0       	brlt	.+2      	; 0xbb2 <openWindow+0xc6>
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	11 23       	and	r17, r17
     bb4:	61 f1       	breq	.+88     	; 0xc0e <openWindow+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb6:	69 81       	ldd	r22, Y+1	; 0x01
     bb8:	7a 81       	ldd	r23, Y+2	; 0x02
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e2       	ldi	r20, 0x20	; 32
     bc4:	51 e4       	ldi	r21, 0x41	; 65
     bc6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__mulsf3>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	bc 01       	movw	r22, r24
     bd0:	cd 01       	movw	r24, r26
     bd2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	9a 87       	std	Y+10, r25	; 0x0a
     bdc:	89 87       	std	Y+9, r24	; 0x09
     bde:	12 c0       	rjmp	.+36     	; 0xc04 <openWindow+0x118>
     be0:	80 e9       	ldi	r24, 0x90	; 144
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	9c 87       	std	Y+12, r25	; 0x0c
     be6:	8b 87       	std	Y+11, r24	; 0x0b
     be8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bea:	9c 85       	ldd	r25, Y+12	; 0x0c
     bec:	8c 01       	movw	r16, r24
     bee:	c8 01       	movw	r24, r16
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <openWindow+0x104>
     bf4:	8c 01       	movw	r16, r24
     bf6:	1c 87       	std	Y+12, r17	; 0x0c
     bf8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfa:	89 85       	ldd	r24, Y+9	; 0x09
     bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	9a 87       	std	Y+10, r25	; 0x0a
     c02:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c04:	89 85       	ldd	r24, Y+9	; 0x09
     c06:	9a 85       	ldd	r25, Y+10	; 0x0a
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	51 f7       	brne	.-44     	; 0xbe0 <openWindow+0xf4>
     c0c:	17 c0       	rjmp	.+46     	; 0xc3c <openWindow+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c0e:	6d 81       	ldd	r22, Y+5	; 0x05
     c10:	7e 81       	ldd	r23, Y+6	; 0x06
     c12:	8f 81       	ldd	r24, Y+7	; 0x07
     c14:	98 85       	ldd	r25, Y+8	; 0x08
     c16:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	9a 87       	std	Y+10, r25	; 0x0a
     c20:	89 87       	std	Y+9, r24	; 0x09
     c22:	89 85       	ldd	r24, Y+9	; 0x09
     c24:	9a 85       	ldd	r25, Y+10	; 0x0a
     c26:	9e 87       	std	Y+14, r25	; 0x0e
     c28:	8d 87       	std	Y+13, r24	; 0x0d
     c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2e:	8c 01       	movw	r16, r24
     c30:	f8 01       	movw	r30, r16
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <openWindow+0x146>
     c36:	8f 01       	movw	r16, r30
     c38:	1e 87       	std	Y+14, r17	; 0x0e
     c3a:	0d 87       	std	Y+13, r16	; 0x0d
	TCCR1B &= 0xF8;
     c3c:	81 e8       	ldi	r24, 0x81	; 129
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	21 e8       	ldi	r18, 0x81	; 129
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	f9 01       	movw	r30, r18
     c46:	20 81       	ld	r18, Z
     c48:	28 7f       	andi	r18, 0xF8	; 248
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18
}
     c4e:	62 96       	adiw	r28, 0x12	; 18
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <USART_Init>:

#include<avr/io.h> 
#include"USART.h"

void USART_Init( unsigned int ubrr)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	00 d0       	rcall	.+0      	; 0xc6a <USART_Init+0x6>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
    UBRR0H = (ubrr >> 8);
     c72:	85 ec       	ldi	r24, 0xC5	; 197
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	29 81       	ldd	r18, Y+1	; 0x01
     c78:	3a 81       	ldd	r19, Y+2	; 0x02
     c7a:	23 2f       	mov	r18, r19
     c7c:	33 27       	eor	r19, r19
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
    UBRR0L = ubrr;
     c82:	84 ec       	ldi	r24, 0xC4	; 196
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	29 81       	ldd	r18, Y+1	; 0x01
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18
    
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);      // Enable receiver and transmitter and interrupt receive
     c8c:	81 ec       	ldi	r24, 0xC1	; 193
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	28 e9       	ldi	r18, 0x98	; 152
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
     c96:	82 ec       	ldi	r24, 0xC2	; 194
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	26 e0       	ldi	r18, 0x06	; 6
     c9c:	fc 01       	movw	r30, r24
     c9e:	20 83       	st	Z, r18
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	0f 92       	push	r0
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
    while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
     cb6:	00 00       	nop
     cb8:	80 ec       	ldi	r24, 0xC0	; 192
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	fc 01       	movw	r30, r24
     cbe:	80 81       	ld	r24, Z
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	80 72       	andi	r24, 0x20	; 32
     cc6:	90 70       	andi	r25, 0x00	; 0
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	b1 f3       	breq	.-20     	; 0xcb8 <USART_Transmit+0xe>

	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     ccc:	86 ec       	ldi	r24, 0xC6	; 198
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	29 81       	ldd	r18, Y+1	; 0x01
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
}
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <USART_Receive>:


unsigned char USART_Receive( void )
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	return '\0';
     ce6:	80 e0       	ldi	r24, 0x00	; 0
}
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <__cmpsf2>:
     cee:	d4 d0       	rcall	.+424    	; 0xe98 <__fp_cmp>
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <__cmpsf2+0x6>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	08 95       	ret

00000cf6 <__divsf3>:
     cf6:	0c d0       	rcall	.+24     	; 0xd10 <__divsf3x>
     cf8:	0a c1       	rjmp	.+532    	; 0xf0e <__fp_round>
     cfa:	02 d1       	rcall	.+516    	; 0xf00 <__fp_pscB>
     cfc:	40 f0       	brcs	.+16     	; 0xd0e <__divsf3+0x18>
     cfe:	f9 d0       	rcall	.+498    	; 0xef2 <__fp_pscA>
     d00:	30 f0       	brcs	.+12     	; 0xd0e <__divsf3+0x18>
     d02:	21 f4       	brne	.+8      	; 0xd0c <__divsf3+0x16>
     d04:	5f 3f       	cpi	r21, 0xFF	; 255
     d06:	19 f0       	breq	.+6      	; 0xd0e <__divsf3+0x18>
     d08:	eb c0       	rjmp	.+470    	; 0xee0 <__fp_inf>
     d0a:	51 11       	cpse	r21, r1
     d0c:	34 c1       	rjmp	.+616    	; 0xf76 <__fp_szero>
     d0e:	ee c0       	rjmp	.+476    	; 0xeec <__fp_nan>

00000d10 <__divsf3x>:
     d10:	0f d1       	rcall	.+542    	; 0xf30 <__fp_split3>
     d12:	98 f3       	brcs	.-26     	; 0xcfa <__divsf3+0x4>

00000d14 <__divsf3_pse>:
     d14:	99 23       	and	r25, r25
     d16:	c9 f3       	breq	.-14     	; 0xd0a <__divsf3+0x14>
     d18:	55 23       	and	r21, r21
     d1a:	b1 f3       	breq	.-20     	; 0xd08 <__divsf3+0x12>
     d1c:	95 1b       	sub	r25, r21
     d1e:	55 0b       	sbc	r21, r21
     d20:	bb 27       	eor	r27, r27
     d22:	aa 27       	eor	r26, r26
     d24:	62 17       	cp	r22, r18
     d26:	73 07       	cpc	r23, r19
     d28:	84 07       	cpc	r24, r20
     d2a:	38 f0       	brcs	.+14     	; 0xd3a <__divsf3_pse+0x26>
     d2c:	9f 5f       	subi	r25, 0xFF	; 255
     d2e:	5f 4f       	sbci	r21, 0xFF	; 255
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	44 1f       	adc	r20, r20
     d36:	aa 1f       	adc	r26, r26
     d38:	a9 f3       	breq	.-22     	; 0xd24 <__divsf3_pse+0x10>
     d3a:	33 d0       	rcall	.+102    	; 0xda2 <__divsf3_pse+0x8e>
     d3c:	0e 2e       	mov	r0, r30
     d3e:	3a f0       	brmi	.+14     	; 0xd4e <__divsf3_pse+0x3a>
     d40:	e0 e8       	ldi	r30, 0x80	; 128
     d42:	30 d0       	rcall	.+96     	; 0xda4 <__divsf3_pse+0x90>
     d44:	91 50       	subi	r25, 0x01	; 1
     d46:	50 40       	sbci	r21, 0x00	; 0
     d48:	e6 95       	lsr	r30
     d4a:	00 1c       	adc	r0, r0
     d4c:	ca f7       	brpl	.-14     	; 0xd40 <__divsf3_pse+0x2c>
     d4e:	29 d0       	rcall	.+82     	; 0xda2 <__divsf3_pse+0x8e>
     d50:	fe 2f       	mov	r31, r30
     d52:	27 d0       	rcall	.+78     	; 0xda2 <__divsf3_pse+0x8e>
     d54:	66 0f       	add	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	88 1f       	adc	r24, r24
     d5a:	bb 1f       	adc	r27, r27
     d5c:	26 17       	cp	r18, r22
     d5e:	37 07       	cpc	r19, r23
     d60:	48 07       	cpc	r20, r24
     d62:	ab 07       	cpc	r26, r27
     d64:	b0 e8       	ldi	r27, 0x80	; 128
     d66:	09 f0       	breq	.+2      	; 0xd6a <__divsf3_pse+0x56>
     d68:	bb 0b       	sbc	r27, r27
     d6a:	80 2d       	mov	r24, r0
     d6c:	bf 01       	movw	r22, r30
     d6e:	ff 27       	eor	r31, r31
     d70:	93 58       	subi	r25, 0x83	; 131
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	2a f0       	brmi	.+10     	; 0xd80 <__divsf3_pse+0x6c>
     d76:	9e 3f       	cpi	r25, 0xFE	; 254
     d78:	51 05       	cpc	r21, r1
     d7a:	68 f0       	brcs	.+26     	; 0xd96 <__divsf3_pse+0x82>
     d7c:	b1 c0       	rjmp	.+354    	; 0xee0 <__fp_inf>
     d7e:	fb c0       	rjmp	.+502    	; 0xf76 <__fp_szero>
     d80:	5f 3f       	cpi	r21, 0xFF	; 255
     d82:	ec f3       	brlt	.-6      	; 0xd7e <__divsf3_pse+0x6a>
     d84:	98 3e       	cpi	r25, 0xE8	; 232
     d86:	dc f3       	brlt	.-10     	; 0xd7e <__divsf3_pse+0x6a>
     d88:	86 95       	lsr	r24
     d8a:	77 95       	ror	r23
     d8c:	67 95       	ror	r22
     d8e:	b7 95       	ror	r27
     d90:	f7 95       	ror	r31
     d92:	9f 5f       	subi	r25, 0xFF	; 255
     d94:	c9 f7       	brne	.-14     	; 0xd88 <__divsf3_pse+0x74>
     d96:	88 0f       	add	r24, r24
     d98:	91 1d       	adc	r25, r1
     d9a:	96 95       	lsr	r25
     d9c:	87 95       	ror	r24
     d9e:	97 f9       	bld	r25, 7
     da0:	08 95       	ret
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	66 0f       	add	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	88 1f       	adc	r24, r24
     daa:	bb 1f       	adc	r27, r27
     dac:	62 17       	cp	r22, r18
     dae:	73 07       	cpc	r23, r19
     db0:	84 07       	cpc	r24, r20
     db2:	ba 07       	cpc	r27, r26
     db4:	20 f0       	brcs	.+8      	; 0xdbe <__divsf3_pse+0xaa>
     db6:	62 1b       	sub	r22, r18
     db8:	73 0b       	sbc	r23, r19
     dba:	84 0b       	sbc	r24, r20
     dbc:	ba 0b       	sbc	r27, r26
     dbe:	ee 1f       	adc	r30, r30
     dc0:	88 f7       	brcc	.-30     	; 0xda4 <__divsf3_pse+0x90>
     dc2:	e0 95       	com	r30
     dc4:	08 95       	ret

00000dc6 <__fixunssfsi>:
     dc6:	bc d0       	rcall	.+376    	; 0xf40 <__fp_splitA>
     dc8:	88 f0       	brcs	.+34     	; 0xdec <__fixunssfsi+0x26>
     dca:	9f 57       	subi	r25, 0x7F	; 127
     dcc:	90 f0       	brcs	.+36     	; 0xdf2 <__fixunssfsi+0x2c>
     dce:	b9 2f       	mov	r27, r25
     dd0:	99 27       	eor	r25, r25
     dd2:	b7 51       	subi	r27, 0x17	; 23
     dd4:	a0 f0       	brcs	.+40     	; 0xdfe <__fixunssfsi+0x38>
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <__fixunssfsi+0x46>
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	88 1f       	adc	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	1a f0       	brmi	.+6      	; 0xde8 <__fixunssfsi+0x22>
     de2:	ba 95       	dec	r27
     de4:	c9 f7       	brne	.-14     	; 0xdd8 <__fixunssfsi+0x12>
     de6:	12 c0       	rjmp	.+36     	; 0xe0c <__fixunssfsi+0x46>
     de8:	b1 30       	cpi	r27, 0x01	; 1
     dea:	81 f0       	breq	.+32     	; 0xe0c <__fixunssfsi+0x46>
     dec:	c3 d0       	rcall	.+390    	; 0xf74 <__fp_zero>
     dee:	b1 e0       	ldi	r27, 0x01	; 1
     df0:	08 95       	ret
     df2:	c0 c0       	rjmp	.+384    	; 0xf74 <__fp_zero>
     df4:	67 2f       	mov	r22, r23
     df6:	78 2f       	mov	r23, r24
     df8:	88 27       	eor	r24, r24
     dfa:	b8 5f       	subi	r27, 0xF8	; 248
     dfc:	39 f0       	breq	.+14     	; 0xe0c <__fixunssfsi+0x46>
     dfe:	b9 3f       	cpi	r27, 0xF9	; 249
     e00:	cc f3       	brlt	.-14     	; 0xdf4 <__fixunssfsi+0x2e>
     e02:	86 95       	lsr	r24
     e04:	77 95       	ror	r23
     e06:	67 95       	ror	r22
     e08:	b3 95       	inc	r27
     e0a:	d9 f7       	brne	.-10     	; 0xe02 <__fixunssfsi+0x3c>
     e0c:	3e f4       	brtc	.+14     	; 0xe1c <__fixunssfsi+0x56>
     e0e:	90 95       	com	r25
     e10:	80 95       	com	r24
     e12:	70 95       	com	r23
     e14:	61 95       	neg	r22
     e16:	7f 4f       	sbci	r23, 0xFF	; 255
     e18:	8f 4f       	sbci	r24, 0xFF	; 255
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	08 95       	ret

00000e1e <__floatunsisf>:
     e1e:	e8 94       	clt
     e20:	09 c0       	rjmp	.+18     	; 0xe34 <__floatsisf+0x12>

00000e22 <__floatsisf>:
     e22:	97 fb       	bst	r25, 7
     e24:	3e f4       	brtc	.+14     	; 0xe34 <__floatsisf+0x12>
     e26:	90 95       	com	r25
     e28:	80 95       	com	r24
     e2a:	70 95       	com	r23
     e2c:	61 95       	neg	r22
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	8f 4f       	sbci	r24, 0xFF	; 255
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	99 23       	and	r25, r25
     e36:	a9 f0       	breq	.+42     	; 0xe62 <__floatsisf+0x40>
     e38:	f9 2f       	mov	r31, r25
     e3a:	96 e9       	ldi	r25, 0x96	; 150
     e3c:	bb 27       	eor	r27, r27
     e3e:	93 95       	inc	r25
     e40:	f6 95       	lsr	r31
     e42:	87 95       	ror	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b7 95       	ror	r27
     e4a:	f1 11       	cpse	r31, r1
     e4c:	f8 cf       	rjmp	.-16     	; 0xe3e <__floatsisf+0x1c>
     e4e:	fa f4       	brpl	.+62     	; 0xe8e <__floatsisf+0x6c>
     e50:	bb 0f       	add	r27, r27
     e52:	11 f4       	brne	.+4      	; 0xe58 <__floatsisf+0x36>
     e54:	60 ff       	sbrs	r22, 0
     e56:	1b c0       	rjmp	.+54     	; 0xe8e <__floatsisf+0x6c>
     e58:	6f 5f       	subi	r22, 0xFF	; 255
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	8f 4f       	sbci	r24, 0xFF	; 255
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	16 c0       	rjmp	.+44     	; 0xe8e <__floatsisf+0x6c>
     e62:	88 23       	and	r24, r24
     e64:	11 f0       	breq	.+4      	; 0xe6a <__floatsisf+0x48>
     e66:	96 e9       	ldi	r25, 0x96	; 150
     e68:	11 c0       	rjmp	.+34     	; 0xe8c <__floatsisf+0x6a>
     e6a:	77 23       	and	r23, r23
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__floatsisf+0x54>
     e6e:	9e e8       	ldi	r25, 0x8E	; 142
     e70:	87 2f       	mov	r24, r23
     e72:	76 2f       	mov	r23, r22
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <__floatsisf+0x5e>
     e76:	66 23       	and	r22, r22
     e78:	71 f0       	breq	.+28     	; 0xe96 <__floatsisf+0x74>
     e7a:	96 e8       	ldi	r25, 0x86	; 134
     e7c:	86 2f       	mov	r24, r22
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	2a f0       	brmi	.+10     	; 0xe8e <__floatsisf+0x6c>
     e84:	9a 95       	dec	r25
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	da f7       	brpl	.-10     	; 0xe84 <__floatsisf+0x62>
     e8e:	88 0f       	add	r24, r24
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	97 f9       	bld	r25, 7
     e96:	08 95       	ret

00000e98 <__fp_cmp>:
     e98:	99 0f       	add	r25, r25
     e9a:	00 08       	sbc	r0, r0
     e9c:	55 0f       	add	r21, r21
     e9e:	aa 0b       	sbc	r26, r26
     ea0:	e0 e8       	ldi	r30, 0x80	; 128
     ea2:	fe ef       	ldi	r31, 0xFE	; 254
     ea4:	16 16       	cp	r1, r22
     ea6:	17 06       	cpc	r1, r23
     ea8:	e8 07       	cpc	r30, r24
     eaa:	f9 07       	cpc	r31, r25
     eac:	c0 f0       	brcs	.+48     	; 0xede <__fp_cmp+0x46>
     eae:	12 16       	cp	r1, r18
     eb0:	13 06       	cpc	r1, r19
     eb2:	e4 07       	cpc	r30, r20
     eb4:	f5 07       	cpc	r31, r21
     eb6:	98 f0       	brcs	.+38     	; 0xede <__fp_cmp+0x46>
     eb8:	62 1b       	sub	r22, r18
     eba:	73 0b       	sbc	r23, r19
     ebc:	84 0b       	sbc	r24, r20
     ebe:	95 0b       	sbc	r25, r21
     ec0:	39 f4       	brne	.+14     	; 0xed0 <__fp_cmp+0x38>
     ec2:	0a 26       	eor	r0, r26
     ec4:	61 f0       	breq	.+24     	; 0xede <__fp_cmp+0x46>
     ec6:	23 2b       	or	r18, r19
     ec8:	24 2b       	or	r18, r20
     eca:	25 2b       	or	r18, r21
     ecc:	21 f4       	brne	.+8      	; 0xed6 <__fp_cmp+0x3e>
     ece:	08 95       	ret
     ed0:	0a 26       	eor	r0, r26
     ed2:	09 f4       	brne	.+2      	; 0xed6 <__fp_cmp+0x3e>
     ed4:	a1 40       	sbci	r26, 0x01	; 1
     ed6:	a6 95       	lsr	r26
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	81 1d       	adc	r24, r1
     edc:	81 1d       	adc	r24, r1
     ede:	08 95       	ret

00000ee0 <__fp_inf>:
     ee0:	97 f9       	bld	r25, 7
     ee2:	9f 67       	ori	r25, 0x7F	; 127
     ee4:	80 e8       	ldi	r24, 0x80	; 128
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	08 95       	ret

00000eec <__fp_nan>:
     eec:	9f ef       	ldi	r25, 0xFF	; 255
     eee:	80 ec       	ldi	r24, 0xC0	; 192
     ef0:	08 95       	ret

00000ef2 <__fp_pscA>:
     ef2:	00 24       	eor	r0, r0
     ef4:	0a 94       	dec	r0
     ef6:	16 16       	cp	r1, r22
     ef8:	17 06       	cpc	r1, r23
     efa:	18 06       	cpc	r1, r24
     efc:	09 06       	cpc	r0, r25
     efe:	08 95       	ret

00000f00 <__fp_pscB>:
     f00:	00 24       	eor	r0, r0
     f02:	0a 94       	dec	r0
     f04:	12 16       	cp	r1, r18
     f06:	13 06       	cpc	r1, r19
     f08:	14 06       	cpc	r1, r20
     f0a:	05 06       	cpc	r0, r21
     f0c:	08 95       	ret

00000f0e <__fp_round>:
     f0e:	09 2e       	mov	r0, r25
     f10:	03 94       	inc	r0
     f12:	00 0c       	add	r0, r0
     f14:	11 f4       	brne	.+4      	; 0xf1a <__fp_round+0xc>
     f16:	88 23       	and	r24, r24
     f18:	52 f0       	brmi	.+20     	; 0xf2e <__fp_round+0x20>
     f1a:	bb 0f       	add	r27, r27
     f1c:	40 f4       	brcc	.+16     	; 0xf2e <__fp_round+0x20>
     f1e:	bf 2b       	or	r27, r31
     f20:	11 f4       	brne	.+4      	; 0xf26 <__fp_round+0x18>
     f22:	60 ff       	sbrs	r22, 0
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <__fp_round+0x20>
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	08 95       	ret

00000f30 <__fp_split3>:
     f30:	57 fd       	sbrc	r21, 7
     f32:	90 58       	subi	r25, 0x80	; 128
     f34:	44 0f       	add	r20, r20
     f36:	55 1f       	adc	r21, r21
     f38:	59 f0       	breq	.+22     	; 0xf50 <__fp_splitA+0x10>
     f3a:	5f 3f       	cpi	r21, 0xFF	; 255
     f3c:	71 f0       	breq	.+28     	; 0xf5a <__fp_splitA+0x1a>
     f3e:	47 95       	ror	r20

00000f40 <__fp_splitA>:
     f40:	88 0f       	add	r24, r24
     f42:	97 fb       	bst	r25, 7
     f44:	99 1f       	adc	r25, r25
     f46:	61 f0       	breq	.+24     	; 0xf60 <__fp_splitA+0x20>
     f48:	9f 3f       	cpi	r25, 0xFF	; 255
     f4a:	79 f0       	breq	.+30     	; 0xf6a <__fp_splitA+0x2a>
     f4c:	87 95       	ror	r24
     f4e:	08 95       	ret
     f50:	12 16       	cp	r1, r18
     f52:	13 06       	cpc	r1, r19
     f54:	14 06       	cpc	r1, r20
     f56:	55 1f       	adc	r21, r21
     f58:	f2 cf       	rjmp	.-28     	; 0xf3e <__fp_split3+0xe>
     f5a:	46 95       	lsr	r20
     f5c:	f1 df       	rcall	.-30     	; 0xf40 <__fp_splitA>
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <__fp_splitA+0x30>
     f60:	16 16       	cp	r1, r22
     f62:	17 06       	cpc	r1, r23
     f64:	18 06       	cpc	r1, r24
     f66:	99 1f       	adc	r25, r25
     f68:	f1 cf       	rjmp	.-30     	; 0xf4c <__fp_splitA+0xc>
     f6a:	86 95       	lsr	r24
     f6c:	71 05       	cpc	r23, r1
     f6e:	61 05       	cpc	r22, r1
     f70:	08 94       	sec
     f72:	08 95       	ret

00000f74 <__fp_zero>:
     f74:	e8 94       	clt

00000f76 <__fp_szero>:
     f76:	bb 27       	eor	r27, r27
     f78:	66 27       	eor	r22, r22
     f7a:	77 27       	eor	r23, r23
     f7c:	cb 01       	movw	r24, r22
     f7e:	97 f9       	bld	r25, 7
     f80:	08 95       	ret

00000f82 <__gesf2>:
     f82:	8a df       	rcall	.-236    	; 0xe98 <__fp_cmp>
     f84:	08 f4       	brcc	.+2      	; 0xf88 <__gesf2+0x6>
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	08 95       	ret

00000f8a <__mulsf3>:
     f8a:	0b d0       	rcall	.+22     	; 0xfa2 <__mulsf3x>
     f8c:	c0 cf       	rjmp	.-128    	; 0xf0e <__fp_round>
     f8e:	b1 df       	rcall	.-158    	; 0xef2 <__fp_pscA>
     f90:	28 f0       	brcs	.+10     	; 0xf9c <__mulsf3+0x12>
     f92:	b6 df       	rcall	.-148    	; 0xf00 <__fp_pscB>
     f94:	18 f0       	brcs	.+6      	; 0xf9c <__mulsf3+0x12>
     f96:	95 23       	and	r25, r21
     f98:	09 f0       	breq	.+2      	; 0xf9c <__mulsf3+0x12>
     f9a:	a2 cf       	rjmp	.-188    	; 0xee0 <__fp_inf>
     f9c:	a7 cf       	rjmp	.-178    	; 0xeec <__fp_nan>
     f9e:	11 24       	eor	r1, r1
     fa0:	ea cf       	rjmp	.-44     	; 0xf76 <__fp_szero>

00000fa2 <__mulsf3x>:
     fa2:	c6 df       	rcall	.-116    	; 0xf30 <__fp_split3>
     fa4:	a0 f3       	brcs	.-24     	; 0xf8e <__mulsf3+0x4>

00000fa6 <__mulsf3_pse>:
     fa6:	95 9f       	mul	r25, r21
     fa8:	d1 f3       	breq	.-12     	; 0xf9e <__mulsf3+0x14>
     faa:	95 0f       	add	r25, r21
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	55 1f       	adc	r21, r21
     fb0:	62 9f       	mul	r22, r18
     fb2:	f0 01       	movw	r30, r0
     fb4:	72 9f       	mul	r23, r18
     fb6:	bb 27       	eor	r27, r27
     fb8:	f0 0d       	add	r31, r0
     fba:	b1 1d       	adc	r27, r1
     fbc:	63 9f       	mul	r22, r19
     fbe:	aa 27       	eor	r26, r26
     fc0:	f0 0d       	add	r31, r0
     fc2:	b1 1d       	adc	r27, r1
     fc4:	aa 1f       	adc	r26, r26
     fc6:	64 9f       	mul	r22, r20
     fc8:	66 27       	eor	r22, r22
     fca:	b0 0d       	add	r27, r0
     fcc:	a1 1d       	adc	r26, r1
     fce:	66 1f       	adc	r22, r22
     fd0:	82 9f       	mul	r24, r18
     fd2:	22 27       	eor	r18, r18
     fd4:	b0 0d       	add	r27, r0
     fd6:	a1 1d       	adc	r26, r1
     fd8:	62 1f       	adc	r22, r18
     fda:	73 9f       	mul	r23, r19
     fdc:	b0 0d       	add	r27, r0
     fde:	a1 1d       	adc	r26, r1
     fe0:	62 1f       	adc	r22, r18
     fe2:	83 9f       	mul	r24, r19
     fe4:	a0 0d       	add	r26, r0
     fe6:	61 1d       	adc	r22, r1
     fe8:	22 1f       	adc	r18, r18
     fea:	74 9f       	mul	r23, r20
     fec:	33 27       	eor	r19, r19
     fee:	a0 0d       	add	r26, r0
     ff0:	61 1d       	adc	r22, r1
     ff2:	23 1f       	adc	r18, r19
     ff4:	84 9f       	mul	r24, r20
     ff6:	60 0d       	add	r22, r0
     ff8:	21 1d       	adc	r18, r1
     ffa:	82 2f       	mov	r24, r18
     ffc:	76 2f       	mov	r23, r22
     ffe:	6a 2f       	mov	r22, r26
    1000:	11 24       	eor	r1, r1
    1002:	9f 57       	subi	r25, 0x7F	; 127
    1004:	50 40       	sbci	r21, 0x00	; 0
    1006:	8a f0       	brmi	.+34     	; 0x102a <__mulsf3_pse+0x84>
    1008:	e1 f0       	breq	.+56     	; 0x1042 <__mulsf3_pse+0x9c>
    100a:	88 23       	and	r24, r24
    100c:	4a f0       	brmi	.+18     	; 0x1020 <__mulsf3_pse+0x7a>
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	bb 1f       	adc	r27, r27
    1014:	66 1f       	adc	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	a9 f7       	brne	.-22     	; 0x100a <__mulsf3_pse+0x64>
    1020:	9e 3f       	cpi	r25, 0xFE	; 254
    1022:	51 05       	cpc	r21, r1
    1024:	70 f0       	brcs	.+28     	; 0x1042 <__mulsf3_pse+0x9c>
    1026:	5c cf       	rjmp	.-328    	; 0xee0 <__fp_inf>
    1028:	a6 cf       	rjmp	.-180    	; 0xf76 <__fp_szero>
    102a:	5f 3f       	cpi	r21, 0xFF	; 255
    102c:	ec f3       	brlt	.-6      	; 0x1028 <__mulsf3_pse+0x82>
    102e:	98 3e       	cpi	r25, 0xE8	; 232
    1030:	dc f3       	brlt	.-10     	; 0x1028 <__mulsf3_pse+0x82>
    1032:	86 95       	lsr	r24
    1034:	77 95       	ror	r23
    1036:	67 95       	ror	r22
    1038:	b7 95       	ror	r27
    103a:	f7 95       	ror	r31
    103c:	e7 95       	ror	r30
    103e:	9f 5f       	subi	r25, 0xFF	; 255
    1040:	c1 f7       	brne	.-16     	; 0x1032 <__mulsf3_pse+0x8c>
    1042:	fe 2b       	or	r31, r30
    1044:	88 0f       	add	r24, r24
    1046:	91 1d       	adc	r25, r1
    1048:	96 95       	lsr	r25
    104a:	87 95       	ror	r24
    104c:	97 f9       	bld	r25, 7
    104e:	08 95       	ret

00001050 <__mulsi3>:
    1050:	62 9f       	mul	r22, r18
    1052:	d0 01       	movw	r26, r0
    1054:	73 9f       	mul	r23, r19
    1056:	f0 01       	movw	r30, r0
    1058:	82 9f       	mul	r24, r18
    105a:	e0 0d       	add	r30, r0
    105c:	f1 1d       	adc	r31, r1
    105e:	64 9f       	mul	r22, r20
    1060:	e0 0d       	add	r30, r0
    1062:	f1 1d       	adc	r31, r1
    1064:	92 9f       	mul	r25, r18
    1066:	f0 0d       	add	r31, r0
    1068:	83 9f       	mul	r24, r19
    106a:	f0 0d       	add	r31, r0
    106c:	74 9f       	mul	r23, r20
    106e:	f0 0d       	add	r31, r0
    1070:	65 9f       	mul	r22, r21
    1072:	f0 0d       	add	r31, r0
    1074:	99 27       	eor	r25, r25
    1076:	72 9f       	mul	r23, r18
    1078:	b0 0d       	add	r27, r0
    107a:	e1 1d       	adc	r30, r1
    107c:	f9 1f       	adc	r31, r25
    107e:	63 9f       	mul	r22, r19
    1080:	b0 0d       	add	r27, r0
    1082:	e1 1d       	adc	r30, r1
    1084:	f9 1f       	adc	r31, r25
    1086:	bd 01       	movw	r22, r26
    1088:	cf 01       	movw	r24, r30
    108a:	11 24       	eor	r1, r1
    108c:	08 95       	ret

0000108e <_exit>:
    108e:	f8 94       	cli

00001090 <__stop_program>:
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <__stop_program>
