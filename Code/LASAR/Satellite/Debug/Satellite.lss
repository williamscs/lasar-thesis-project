
Satellite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000ae2  00000b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000b7a  2**0
                  ALLOC
  3 .stab         00001b90  00000000  00000000  00000b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000641  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00002d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000f4  00000000  00000000  00002d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004eb  00000000  00000000  00002e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001dd  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000063b  00000000  00000000  00003549  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00003b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000019a  00000000  00000000  00003c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000049  00000000  00000000  00003dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 6f 05 	jmp	0xade	; 0xade <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile uint8_t rxflag = 0;
volatile uint8_t slpflg = 0;
volatile uint8_t zerocross = 1;

int main(void)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	a0 97       	sbiw	r28, 0x20	; 32
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
	DDRB = (1<<PORTB0);
  be:	84 e2       	ldi	r24, 0x24	; 36
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	DDRC = 0xFF;
  c8:	87 e2       	ldi	r24, 0x27	; 39
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	//DDRB = (1 << PORTD6);
	//DDRD = (1 << PORTD3);
	DDRD &= ~(1 << PORTD2);
  d2:	8a e2       	ldi	r24, 0x2A	; 42
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2a e2       	ldi	r18, 0x2A	; 42
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	2b 7f       	andi	r18, 0xFB	; 251
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	DDRD &= ~(1 << PORTD3);
  e4:	8a e2       	ldi	r24, 0x2A	; 42
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	2a e2       	ldi	r18, 0x2A	; 42
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	20 81       	ld	r18, Z
  f0:	27 7f       	andi	r18, 0xF7	; 247
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	PORTB &= ~(1 << PORTB0);
  f6:	85 e2       	ldi	r24, 0x25	; 37
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	25 e2       	ldi	r18, 0x25	; 37
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	20 81       	ld	r18, Z
 102:	2e 7f       	andi	r18, 0xFE	; 254
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	//PORTD &= (1 << PORTD6);
	
	initTimer(65);
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 c8 01 	call	0x390	; 0x390 <initTimer>
	initInterrupt0();
 110:	0e 94 07 02 	call	0x40e	; 0x40e <initInterrupt0>
	dim = 10;
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 01 01 	sts	0x0101, r25
 11c:	80 93 00 01 	sts	0x0100, r24
	
	// turn on interrupts
	sei();
 120:	78 94       	sei
	
	while(1)
	{
		for( int j = 10; j < 90; ++j )
 122:	8a e0       	ldi	r24, 0x0A	; 10
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	90 c0       	rjmp	.+288    	; 0x24c <main+0x1a6>
		{
			//PORTD |= (1 << PORTD3);
			dim = j;
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	90 93 01 01 	sts	0x0101, r25
 134:	80 93 00 01 	sts	0x0100, r24
			PORTC = j;
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	29 81       	ldd	r18, Y+1	; 0x01
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	a8 ec       	ldi	r26, 0xC8	; 200
 148:	b2 e4       	ldi	r27, 0x42	; 66
 14a:	8d 83       	std	Y+5, r24	; 0x05
 14c:	9e 83       	std	Y+6, r25	; 0x06
 14e:	af 83       	std	Y+7, r26	; 0x07
 150:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
 152:	6d 81       	ldd	r22, Y+5	; 0x05
 154:	7e 81       	ldd	r23, Y+6	; 0x06
 156:	8f 81       	ldd	r24, Y+7	; 0x07
 158:	98 85       	ldd	r25, Y+8	; 0x08
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	4a e7       	ldi	r20, 0x7A	; 122
 160:	55 e4       	ldi	r21, 0x45	; 69
 162:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 166:	dc 01       	movw	r26, r24
 168:	cb 01       	movw	r24, r22
 16a:	89 87       	std	Y+9, r24	; 0x09
 16c:	9a 87       	std	Y+10, r25	; 0x0a
 16e:	ab 87       	std	Y+11, r26	; 0x0b
 170:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 172:	11 e0       	ldi	r17, 0x01	; 1
 174:	69 85       	ldd	r22, Y+9	; 0x09
 176:	7a 85       	ldd	r23, Y+10	; 0x0a
 178:	8b 85       	ldd	r24, Y+11	; 0x0b
 17a:	9c 85       	ldd	r25, Y+12	; 0x0c
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	40 e8       	ldi	r20, 0x80	; 128
 182:	5f e3       	ldi	r21, 0x3F	; 63
 184:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__cmpsf2>
 188:	88 23       	and	r24, r24
 18a:	0c f0       	brlt	.+2      	; 0x18e <main+0xe8>
 18c:	10 e0       	ldi	r17, 0x00	; 0
 18e:	11 23       	and	r17, r17
 190:	29 f0       	breq	.+10     	; 0x19c <main+0xf6>
		__ticks = 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9e 87       	std	Y+14, r25	; 0x0e
 198:	8d 87       	std	Y+13, r24	; 0x0d
 19a:	46 c0       	rjmp	.+140    	; 0x228 <main+0x182>
	else if (__tmp > 65535)
 19c:	11 e0       	ldi	r17, 0x01	; 1
 19e:	69 85       	ldd	r22, Y+9	; 0x09
 1a0:	7a 85       	ldd	r23, Y+10	; 0x0a
 1a2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1a4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	3f ef       	ldi	r19, 0xFF	; 255
 1aa:	4f e7       	ldi	r20, 0x7F	; 127
 1ac:	57 e4       	ldi	r21, 0x47	; 71
 1ae:	0e 94 08 05 	call	0xa10	; 0xa10 <__gesf2>
 1b2:	18 16       	cp	r1, r24
 1b4:	0c f0       	brlt	.+2      	; 0x1b8 <main+0x112>
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	11 23       	and	r17, r17
 1ba:	61 f1       	breq	.+88     	; 0x214 <main+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1bc:	6d 81       	ldd	r22, Y+5	; 0x05
 1be:	7e 81       	ldd	r23, Y+6	; 0x06
 1c0:	8f 81       	ldd	r24, Y+7	; 0x07
 1c2:	98 85       	ldd	r25, Y+8	; 0x08
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e2       	ldi	r20, 0x20	; 32
 1ca:	51 e4       	ldi	r21, 0x41	; 65
 1cc:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 1d0:	dc 01       	movw	r26, r24
 1d2:	cb 01       	movw	r24, r22
 1d4:	bc 01       	movw	r22, r24
 1d6:	cd 01       	movw	r24, r26
 1d8:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 1dc:	dc 01       	movw	r26, r24
 1de:	cb 01       	movw	r24, r22
 1e0:	9e 87       	std	Y+14, r25	; 0x0e
 1e2:	8d 87       	std	Y+13, r24	; 0x0d
 1e4:	12 c0       	rjmp	.+36     	; 0x20a <main+0x164>
 1e6:	80 e9       	ldi	r24, 0x90	; 144
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	98 8b       	std	Y+16, r25	; 0x10
 1ec:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ee:	8f 85       	ldd	r24, Y+15	; 0x0f
 1f0:	98 89       	ldd	r25, Y+16	; 0x10
 1f2:	8c 01       	movw	r16, r24
 1f4:	c8 01       	movw	r24, r16
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x150>
 1fa:	8c 01       	movw	r16, r24
 1fc:	18 8b       	std	Y+16, r17	; 0x10
 1fe:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 200:	8d 85       	ldd	r24, Y+13	; 0x0d
 202:	9e 85       	ldd	r25, Y+14	; 0x0e
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	9e 87       	std	Y+14, r25	; 0x0e
 208:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20a:	8d 85       	ldd	r24, Y+13	; 0x0d
 20c:	9e 85       	ldd	r25, Y+14	; 0x0e
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	51 f7       	brne	.-44     	; 0x1e6 <main+0x140>
 212:	17 c0       	rjmp	.+46     	; 0x242 <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 214:	69 85       	ldd	r22, Y+9	; 0x09
 216:	7a 85       	ldd	r23, Y+10	; 0x0a
 218:	8b 85       	ldd	r24, Y+11	; 0x0b
 21a:	9c 85       	ldd	r25, Y+12	; 0x0c
 21c:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 220:	dc 01       	movw	r26, r24
 222:	cb 01       	movw	r24, r22
 224:	9e 87       	std	Y+14, r25	; 0x0e
 226:	8d 87       	std	Y+13, r24	; 0x0d
 228:	8d 85       	ldd	r24, Y+13	; 0x0d
 22a:	9e 85       	ldd	r25, Y+14	; 0x0e
 22c:	9a 8b       	std	Y+18, r25	; 0x12
 22e:	89 8b       	std	Y+17, r24	; 0x11
 230:	89 89       	ldd	r24, Y+17	; 0x11
 232:	9a 89       	ldd	r25, Y+18	; 0x12
 234:	8c 01       	movw	r16, r24
 236:	f8 01       	movw	r30, r16
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x192>
 23c:	8f 01       	movw	r16, r30
 23e:	1a 8b       	std	Y+18, r17	; 0x12
 240:	09 8b       	std	Y+17, r16	; 0x11
	// turn on interrupts
	sei();
	
	while(1)
	{
		for( int j = 10; j < 90; ++j )
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	9a 83       	std	Y+2, r25	; 0x02
 24a:	89 83       	std	Y+1, r24	; 0x01
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	9a 81       	ldd	r25, Y+2	; 0x02
 250:	8a 35       	cpi	r24, 0x5A	; 90
 252:	91 05       	cpc	r25, r1
 254:	0c f4       	brge	.+2      	; 0x258 <main+0x1b2>
 256:	6a cf       	rjmp	.-300    	; 0x12c <main+0x86>
			dim = j;
			PORTC = j;
			
			_delay_ms(100);
		}
		for( int j = 90; j > 10; --j)
 258:	8a e5       	ldi	r24, 0x5A	; 90
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03
 260:	90 c0       	rjmp	.+288    	; 0x382 <main+0x2dc>
		{
			//PORTD &= ~(1 << PORTD3);
			dim = j;
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	9c 81       	ldd	r25, Y+4	; 0x04
 266:	90 93 01 01 	sts	0x0101, r25
 26a:	80 93 00 01 	sts	0x0100, r24
			PORTC = j;
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	2b 81       	ldd	r18, Y+3	; 0x03
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	a8 ec       	ldi	r26, 0xC8	; 200
 27e:	b2 e4       	ldi	r27, 0x42	; 66
 280:	8b 8b       	std	Y+19, r24	; 0x13
 282:	9c 8b       	std	Y+20, r25	; 0x14
 284:	ad 8b       	std	Y+21, r26	; 0x15
 286:	be 8b       	std	Y+22, r27	; 0x16
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
 288:	6b 89       	ldd	r22, Y+19	; 0x13
 28a:	7c 89       	ldd	r23, Y+20	; 0x14
 28c:	8d 89       	ldd	r24, Y+21	; 0x15
 28e:	9e 89       	ldd	r25, Y+22	; 0x16
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	4a e7       	ldi	r20, 0x7A	; 122
 296:	55 e4       	ldi	r21, 0x45	; 69
 298:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	8f 8b       	std	Y+23, r24	; 0x17
 2a2:	98 8f       	std	Y+24, r25	; 0x18
 2a4:	a9 8f       	std	Y+25, r26	; 0x19
 2a6:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 2a8:	11 e0       	ldi	r17, 0x01	; 1
 2aa:	6f 89       	ldd	r22, Y+23	; 0x17
 2ac:	78 8d       	ldd	r23, Y+24	; 0x18
 2ae:	89 8d       	ldd	r24, Y+25	; 0x19
 2b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	40 e8       	ldi	r20, 0x80	; 128
 2b8:	5f e3       	ldi	r21, 0x3F	; 63
 2ba:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__cmpsf2>
 2be:	88 23       	and	r24, r24
 2c0:	0c f0       	brlt	.+2      	; 0x2c4 <main+0x21e>
 2c2:	10 e0       	ldi	r17, 0x00	; 0
 2c4:	11 23       	and	r17, r17
 2c6:	29 f0       	breq	.+10     	; 0x2d2 <main+0x22c>
		__ticks = 1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	9c 8f       	std	Y+28, r25	; 0x1c
 2ce:	8b 8f       	std	Y+27, r24	; 0x1b
 2d0:	46 c0       	rjmp	.+140    	; 0x35e <main+0x2b8>
	else if (__tmp > 65535)
 2d2:	11 e0       	ldi	r17, 0x01	; 1
 2d4:	6f 89       	ldd	r22, Y+23	; 0x17
 2d6:	78 8d       	ldd	r23, Y+24	; 0x18
 2d8:	89 8d       	ldd	r24, Y+25	; 0x19
 2da:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	3f ef       	ldi	r19, 0xFF	; 255
 2e0:	4f e7       	ldi	r20, 0x7F	; 127
 2e2:	57 e4       	ldi	r21, 0x47	; 71
 2e4:	0e 94 08 05 	call	0xa10	; 0xa10 <__gesf2>
 2e8:	18 16       	cp	r1, r24
 2ea:	0c f0       	brlt	.+2      	; 0x2ee <main+0x248>
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	11 23       	and	r17, r17
 2f0:	61 f1       	breq	.+88     	; 0x34a <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2f2:	6b 89       	ldd	r22, Y+19	; 0x13
 2f4:	7c 89       	ldd	r23, Y+20	; 0x14
 2f6:	8d 89       	ldd	r24, Y+21	; 0x15
 2f8:	9e 89       	ldd	r25, Y+22	; 0x16
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	40 e2       	ldi	r20, 0x20	; 32
 300:	51 e4       	ldi	r21, 0x41	; 65
 302:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 306:	dc 01       	movw	r26, r24
 308:	cb 01       	movw	r24, r22
 30a:	bc 01       	movw	r22, r24
 30c:	cd 01       	movw	r24, r26
 30e:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 312:	dc 01       	movw	r26, r24
 314:	cb 01       	movw	r24, r22
 316:	9c 8f       	std	Y+28, r25	; 0x1c
 318:	8b 8f       	std	Y+27, r24	; 0x1b
 31a:	12 c0       	rjmp	.+36     	; 0x340 <main+0x29a>
 31c:	80 e9       	ldi	r24, 0x90	; 144
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	9e 8f       	std	Y+30, r25	; 0x1e
 322:	8d 8f       	std	Y+29, r24	; 0x1d
 324:	8d 8d       	ldd	r24, Y+29	; 0x1d
 326:	9e 8d       	ldd	r25, Y+30	; 0x1e
 328:	8c 01       	movw	r16, r24
 32a:	c8 01       	movw	r24, r16
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0x286>
 330:	8c 01       	movw	r16, r24
 332:	1e 8f       	std	Y+30, r17	; 0x1e
 334:	0d 8f       	std	Y+29, r16	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 336:	8b 8d       	ldd	r24, Y+27	; 0x1b
 338:	9c 8d       	ldd	r25, Y+28	; 0x1c
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	9c 8f       	std	Y+28, r25	; 0x1c
 33e:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 340:	8b 8d       	ldd	r24, Y+27	; 0x1b
 342:	9c 8d       	ldd	r25, Y+28	; 0x1c
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	51 f7       	brne	.-44     	; 0x31c <main+0x276>
 348:	17 c0       	rjmp	.+46     	; 0x378 <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 34a:	6f 89       	ldd	r22, Y+23	; 0x17
 34c:	78 8d       	ldd	r23, Y+24	; 0x18
 34e:	89 8d       	ldd	r24, Y+25	; 0x19
 350:	9a 8d       	ldd	r25, Y+26	; 0x1a
 352:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 356:	dc 01       	movw	r26, r24
 358:	cb 01       	movw	r24, r22
 35a:	9c 8f       	std	Y+28, r25	; 0x1c
 35c:	8b 8f       	std	Y+27, r24	; 0x1b
 35e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 360:	9c 8d       	ldd	r25, Y+28	; 0x1c
 362:	98 a3       	std	Y+32, r25	; 0x20
 364:	8f 8f       	std	Y+31, r24	; 0x1f
 366:	8f 8d       	ldd	r24, Y+31	; 0x1f
 368:	98 a1       	ldd	r25, Y+32	; 0x20
 36a:	8c 01       	movw	r16, r24
 36c:	f8 01       	movw	r30, r16
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x2c8>
 372:	8f 01       	movw	r16, r30
 374:	18 a3       	std	Y+32, r17	; 0x20
 376:	0f 8f       	std	Y+31, r16	; 0x1f
			dim = j;
			PORTC = j;
			
			_delay_ms(100);
		}
		for( int j = 90; j > 10; --j)
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	9c 81       	ldd	r25, Y+4	; 0x04
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	9c 83       	std	Y+4, r25	; 0x04
 380:	8b 83       	std	Y+3, r24	; 0x03
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	9c 81       	ldd	r25, Y+4	; 0x04
 386:	8b 30       	cpi	r24, 0x0B	; 11
 388:	91 05       	cpc	r25, r1
 38a:	0c f0       	brlt	.+2      	; 0x38e <main+0x2e8>
 38c:	6a cf       	rjmp	.-300    	; 0x262 <main+0x1bc>
		EIMSK &= ~(1 << INT0);
		sleep_enable();
		sleep_cpu();
		sleep_disable();
		*/
	}				
 38e:	c9 ce       	rjmp	.-622    	; 0x122 <main+0x7c>

00000390 <initTimer>:
/*
 * Function Name:
 * Author: Chris Williams
 */
void initTimer( int dutycycle )
{
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	00 d0       	rcall	.+0      	; 0x396 <initTimer+0x6>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	9a 83       	std	Y+2, r25	; 0x02
 39c:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = 130; //cap of Timer0
 39e:	87 e4       	ldi	r24, 0x47	; 71
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	22 e8       	ldi	r18, 0x82	; 130
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
	OCR0B = dutycycle;
 3a8:	88 e4       	ldi	r24, 0x48	; 72
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	29 81       	ldd	r18, Y+1	; 0x01
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 83       	st	Z, r18
	
    DDRD |= (1 << PORTD6);         
 3b2:	8a e2       	ldi	r24, 0x2A	; 42
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	2a e2       	ldi	r18, 0x2A	; 42
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	f9 01       	movw	r30, r18
 3bc:	20 81       	ld	r18, Z
 3be:	20 64       	ori	r18, 0x40	; 64
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 83       	st	Z, r18
	
	TCCR0A |= (1 << COM0A1);  // set non-inverting mode
 3c4:	84 e4       	ldi	r24, 0x44	; 68
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	24 e4       	ldi	r18, 0x44	; 68
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	f9 01       	movw	r30, r18
 3ce:	20 81       	ld	r18, Z
 3d0:	20 68       	ori	r18, 0x80	; 128
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 83       	st	Z, r18

    TCCR0A |= (1 << WGM01);   // set CTC (Clear Timer on Compare) Mode
 3d6:	84 e4       	ldi	r24, 0x44	; 68
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	24 e4       	ldi	r18, 0x44	; 68
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	f9 01       	movw	r30, r18
 3e0:	20 81       	ld	r18, Z
 3e2:	22 60       	ori	r18, 0x02	; 2
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18

    TCCR0B |= (1 << CS01);    // set prescaler to 8 and starts PWM
 3e8:	85 e4       	ldi	r24, 0x45	; 69
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	25 e4       	ldi	r18, 0x45	; 69
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	f9 01       	movw	r30, r18
 3f2:	20 81       	ld	r18, Z
 3f4:	22 60       	ori	r18, 0x02	; 2
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
	
	TIMSK0 = (1 << OCIE0A) | (1 << TOIE0);	//Enable OVF
 3fa:	8e e6       	ldi	r24, 0x6E	; 110
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	23 e0       	ldi	r18, 0x03	; 3
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
    // set prescaler to 8 and starts PWM
	
	TIMSK0 = (1 << OCIE0B);
	//Enable COMPA
	*/
}
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	cf 91       	pop	r28
 40a:	df 91       	pop	r29
 40c:	08 95       	ret

0000040e <initInterrupt0>:


void initInterrupt0()
{
 40e:	df 93       	push	r29
 410:	cf 93       	push	r28
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
	PORTD |= (1 << PORTD2) | (1 << PORTD3);
 416:	8b e2       	ldi	r24, 0x2B	; 43
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	2b e2       	ldi	r18, 0x2B	; 43
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	f9 01       	movw	r30, r18
 420:	20 81       	ld	r18, Z
 422:	2c 60       	ori	r18, 0x0C	; 12
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
	EICRA = 0;
 428:	89 e6       	ldi	r24, 0x69	; 105
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	10 82       	st	Z, r1
	EICRA |= (1 << ISC11) | (1 << ISC01);
 430:	89 e6       	ldi	r24, 0x69	; 105
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	29 e6       	ldi	r18, 0x69	; 105
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	2a 60       	ori	r18, 0x0A	; 10
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
	EIMSK |= (1 << INT1) | (1 << INT0);
 442:	8d e3       	ldi	r24, 0x3D	; 61
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	2d e3       	ldi	r18, 0x3D	; 61
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	f9 01       	movw	r30, r18
 44c:	20 81       	ld	r18, Z
 44e:	23 60       	ori	r18, 0x03	; 3
 450:	fc 01       	movw	r30, r24
 452:	20 83       	st	Z, r18
}	
 454:	cf 91       	pop	r28
 456:	df 91       	pop	r29
 458:	08 95       	ret

0000045a <setCycle>:


void setCycle(int dutycycle)
{
 45a:	df 93       	push	r29
 45c:	cf 93       	push	r28
 45e:	00 d0       	rcall	.+0      	; 0x460 <setCycle+0x6>
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	9a 83       	std	Y+2, r25	; 0x02
 466:	89 83       	std	Y+1, r24	; 0x01
	cli();
 468:	f8 94       	cli
	OCR0A = dutycycle;
 46a:	87 e4       	ldi	r24, 0x47	; 71
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	29 81       	ldd	r18, Y+1	; 0x01
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
	sei();
 474:	78 94       	sei
	return;
}
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	cf 91       	pop	r28
 47c:	df 91       	pop	r29
 47e:	08 95       	ret

00000480 <__vector_18>:
/*
 * INTERRUPT SERVICE ROUTINES
 */

ISR(USART_RX_vect)
{
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
 492:	df 93       	push	r29
 494:	cf 93       	push	r28
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSR0A  & (1 << RXC0)) )
 49a:	00 00       	nop
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	fc 01       	movw	r30, r24
 4a2:	80 81       	ld	r24, Z
 4a4:	88 23       	and	r24, r24
 4a6:	d4 f7       	brge	.-12     	; 0x49c <__vector_18+0x1c>
	;
	/* Get and return received data from buffer */
	//dim = UDR0;
	rxflag = 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 06 01 	sts	0x0106, r24
}
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_14>:
 
 
//OLD: 2/15/2012
//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	2f 93       	push	r18
 4d4:	3f 93       	push	r19
 4d6:	4f 93       	push	r20
 4d8:	5f 93       	push	r21
 4da:	6f 93       	push	r22
 4dc:	7f 93       	push	r23
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	af 93       	push	r26
 4e4:	bf 93       	push	r27
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31
 4ea:	df 93       	push	r29
 4ec:	cf 93       	push	r28
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	68 97       	sbiw	r28, 0x18	; 24
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	cd bf       	out	0x3d, r28	; 61
	if( zerocross == 1) 
 4f8:	80 91 02 01 	lds	r24, 0x0102
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	09 f0       	breq	.+2      	; 0x502 <__vector_14+0x3e>
 500:	09 c1       	rjmp	.+530    	; 0x714 <__vector_14+0x250>
	{
		if( count >= dim )
 502:	20 91 04 01 	lds	r18, 0x0104
 506:	30 91 05 01 	lds	r19, 0x0105
 50a:	80 91 00 01 	lds	r24, 0x0100
 50e:	90 91 01 01 	lds	r25, 0x0101
 512:	28 17       	cp	r18, r24
 514:	39 07       	cpc	r19, r25
 516:	08 f4       	brcc	.+2      	; 0x51a <__vector_14+0x56>
 518:	ee c0       	rjmp	.+476    	; 0x6f6 <__vector_14+0x232>
		{
			//PORTD |= (1 << PORTD6);
			PORTB |= (1 << PORTB0);
 51a:	85 e2       	ldi	r24, 0x25	; 37
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	25 e2       	ldi	r18, 0x25	; 37
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	f9 01       	movw	r30, r18
 524:	20 81       	ld	r18, Z
 526:	21 60       	ori	r18, 0x01	; 1
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	a0 ea       	ldi	r26, 0xA0	; 160
 532:	b0 e4       	ldi	r27, 0x40	; 64
 534:	89 83       	std	Y+1, r24	; 0x01
 536:	9a 83       	std	Y+2, r25	; 0x02
 538:	ab 83       	std	Y+3, r26	; 0x03
 53a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
 53c:	69 81       	ldd	r22, Y+1	; 0x01
 53e:	7a 81       	ldd	r23, Y+2	; 0x02
 540:	8b 81       	ldd	r24, Y+3	; 0x03
 542:	9c 81       	ldd	r25, Y+4	; 0x04
 544:	2b ea       	ldi	r18, 0xAB	; 171
 546:	3a ea       	ldi	r19, 0xAA	; 170
 548:	4a ea       	ldi	r20, 0xAA	; 170
 54a:	50 e4       	ldi	r21, 0x40	; 64
 54c:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 550:	dc 01       	movw	r26, r24
 552:	cb 01       	movw	r24, r22
 554:	8d 83       	std	Y+5, r24	; 0x05
 556:	9e 83       	std	Y+6, r25	; 0x06
 558:	af 83       	std	Y+7, r26	; 0x07
 55a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 55c:	11 e0       	ldi	r17, 0x01	; 1
 55e:	6d 81       	ldd	r22, Y+5	; 0x05
 560:	7e 81       	ldd	r23, Y+6	; 0x06
 562:	8f 81       	ldd	r24, Y+7	; 0x07
 564:	98 85       	ldd	r25, Y+8	; 0x08
 566:	20 e0       	ldi	r18, 0x00	; 0
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	40 e8       	ldi	r20, 0x80	; 128
 56c:	5f e3       	ldi	r21, 0x3F	; 63
 56e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__cmpsf2>
 572:	88 23       	and	r24, r24
 574:	0c f0       	brlt	.+2      	; 0x578 <__vector_14+0xb4>
 576:	10 e0       	ldi	r17, 0x00	; 0
 578:	11 23       	and	r17, r17
 57a:	19 f0       	breq	.+6      	; 0x582 <__vector_14+0xbe>
		__ticks = 1;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	89 87       	std	Y+9, r24	; 0x09
 580:	a3 c0       	rjmp	.+326    	; 0x6c8 <__vector_14+0x204>
	else if (__tmp > 255)
 582:	11 e0       	ldi	r17, 0x01	; 1
 584:	6d 81       	ldd	r22, Y+5	; 0x05
 586:	7e 81       	ldd	r23, Y+6	; 0x06
 588:	8f 81       	ldd	r24, Y+7	; 0x07
 58a:	98 85       	ldd	r25, Y+8	; 0x08
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	4f e7       	ldi	r20, 0x7F	; 127
 592:	53 e4       	ldi	r21, 0x43	; 67
 594:	0e 94 08 05 	call	0xa10	; 0xa10 <__gesf2>
 598:	18 16       	cp	r1, r24
 59a:	0c f0       	brlt	.+2      	; 0x59e <__vector_14+0xda>
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	11 23       	and	r17, r17
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <__vector_14+0xe0>
 5a2:	89 c0       	rjmp	.+274    	; 0x6b6 <__vector_14+0x1f2>
	{
		_delay_ms(__us / 1000.0);
 5a4:	69 81       	ldd	r22, Y+1	; 0x01
 5a6:	7a 81       	ldd	r23, Y+2	; 0x02
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	9c 81       	ldd	r25, Y+4	; 0x04
 5ac:	20 e0       	ldi	r18, 0x00	; 0
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	4a e7       	ldi	r20, 0x7A	; 122
 5b2:	54 e4       	ldi	r21, 0x44	; 68
 5b4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__divsf3>
 5b8:	dc 01       	movw	r26, r24
 5ba:	cb 01       	movw	r24, r22
 5bc:	8a 87       	std	Y+10, r24	; 0x0a
 5be:	9b 87       	std	Y+11, r25	; 0x0b
 5c0:	ac 87       	std	Y+12, r26	; 0x0c
 5c2:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
 5c4:	6a 85       	ldd	r22, Y+10	; 0x0a
 5c6:	7b 85       	ldd	r23, Y+11	; 0x0b
 5c8:	8c 85       	ldd	r24, Y+12	; 0x0c
 5ca:	9d 85       	ldd	r25, Y+13	; 0x0d
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	4a e7       	ldi	r20, 0x7A	; 122
 5d2:	55 e4       	ldi	r21, 0x45	; 69
 5d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 5d8:	dc 01       	movw	r26, r24
 5da:	cb 01       	movw	r24, r22
 5dc:	8e 87       	std	Y+14, r24	; 0x0e
 5de:	9f 87       	std	Y+15, r25	; 0x0f
 5e0:	a8 8b       	std	Y+16, r26	; 0x10
 5e2:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
 5e4:	11 e0       	ldi	r17, 0x01	; 1
 5e6:	6e 85       	ldd	r22, Y+14	; 0x0e
 5e8:	7f 85       	ldd	r23, Y+15	; 0x0f
 5ea:	88 89       	ldd	r24, Y+16	; 0x10
 5ec:	99 89       	ldd	r25, Y+17	; 0x11
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	40 e8       	ldi	r20, 0x80	; 128
 5f4:	5f e3       	ldi	r21, 0x3F	; 63
 5f6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__cmpsf2>
 5fa:	88 23       	and	r24, r24
 5fc:	0c f0       	brlt	.+2      	; 0x600 <__vector_14+0x13c>
 5fe:	10 e0       	ldi	r17, 0x00	; 0
 600:	11 23       	and	r17, r17
 602:	29 f0       	breq	.+10     	; 0x60e <__vector_14+0x14a>
		__ticks = 1;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	9b 8b       	std	Y+19, r25	; 0x13
 60a:	8a 8b       	std	Y+18, r24	; 0x12
 60c:	46 c0       	rjmp	.+140    	; 0x69a <__vector_14+0x1d6>
	else if (__tmp > 65535)
 60e:	11 e0       	ldi	r17, 0x01	; 1
 610:	6e 85       	ldd	r22, Y+14	; 0x0e
 612:	7f 85       	ldd	r23, Y+15	; 0x0f
 614:	88 89       	ldd	r24, Y+16	; 0x10
 616:	99 89       	ldd	r25, Y+17	; 0x11
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	3f ef       	ldi	r19, 0xFF	; 255
 61c:	4f e7       	ldi	r20, 0x7F	; 127
 61e:	57 e4       	ldi	r21, 0x47	; 71
 620:	0e 94 08 05 	call	0xa10	; 0xa10 <__gesf2>
 624:	18 16       	cp	r1, r24
 626:	0c f0       	brlt	.+2      	; 0x62a <__vector_14+0x166>
 628:	10 e0       	ldi	r17, 0x00	; 0
 62a:	11 23       	and	r17, r17
 62c:	61 f1       	breq	.+88     	; 0x686 <__vector_14+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 62e:	6a 85       	ldd	r22, Y+10	; 0x0a
 630:	7b 85       	ldd	r23, Y+11	; 0x0b
 632:	8c 85       	ldd	r24, Y+12	; 0x0c
 634:	9d 85       	ldd	r25, Y+13	; 0x0d
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e2       	ldi	r20, 0x20	; 32
 63c:	51 e4       	ldi	r21, 0x41	; 65
 63e:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 642:	dc 01       	movw	r26, r24
 644:	cb 01       	movw	r24, r22
 646:	bc 01       	movw	r22, r24
 648:	cd 01       	movw	r24, r26
 64a:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 64e:	dc 01       	movw	r26, r24
 650:	cb 01       	movw	r24, r22
 652:	9b 8b       	std	Y+19, r25	; 0x13
 654:	8a 8b       	std	Y+18, r24	; 0x12
 656:	12 c0       	rjmp	.+36     	; 0x67c <__vector_14+0x1b8>
 658:	80 e9       	ldi	r24, 0x90	; 144
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	9d 8b       	std	Y+21, r25	; 0x15
 65e:	8c 8b       	std	Y+20, r24	; 0x14
 660:	8c 89       	ldd	r24, Y+20	; 0x14
 662:	9d 89       	ldd	r25, Y+21	; 0x15
 664:	8c 01       	movw	r16, r24
 666:	c8 01       	movw	r24, r16
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <__vector_14+0x1a4>
 66c:	8c 01       	movw	r16, r24
 66e:	1d 8b       	std	Y+21, r17	; 0x15
 670:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 672:	8a 89       	ldd	r24, Y+18	; 0x12
 674:	9b 89       	ldd	r25, Y+19	; 0x13
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	9b 8b       	std	Y+19, r25	; 0x13
 67a:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 67c:	8a 89       	ldd	r24, Y+18	; 0x12
 67e:	9b 89       	ldd	r25, Y+19	; 0x13
 680:	00 97       	sbiw	r24, 0x00	; 0
 682:	51 f7       	brne	.-44     	; 0x658 <__vector_14+0x194>
 684:	28 c0       	rjmp	.+80     	; 0x6d6 <__vector_14+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 686:	6e 85       	ldd	r22, Y+14	; 0x0e
 688:	7f 85       	ldd	r23, Y+15	; 0x0f
 68a:	88 89       	ldd	r24, Y+16	; 0x10
 68c:	99 89       	ldd	r25, Y+17	; 0x11
 68e:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 692:	dc 01       	movw	r26, r24
 694:	cb 01       	movw	r24, r22
 696:	9b 8b       	std	Y+19, r25	; 0x13
 698:	8a 8b       	std	Y+18, r24	; 0x12
 69a:	8a 89       	ldd	r24, Y+18	; 0x12
 69c:	9b 89       	ldd	r25, Y+19	; 0x13
 69e:	9f 8b       	std	Y+23, r25	; 0x17
 6a0:	8e 8b       	std	Y+22, r24	; 0x16
 6a2:	8e 89       	ldd	r24, Y+22	; 0x16
 6a4:	9f 89       	ldd	r25, Y+23	; 0x17
 6a6:	8c 01       	movw	r16, r24
 6a8:	f8 01       	movw	r30, r16
 6aa:	31 97       	sbiw	r30, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <__vector_14+0x1e6>
 6ae:	8f 01       	movw	r16, r30
 6b0:	1f 8b       	std	Y+23, r17	; 0x17
 6b2:	0e 8b       	std	Y+22, r16	; 0x16
 6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <__vector_14+0x212>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 6b6:	6d 81       	ldd	r22, Y+5	; 0x05
 6b8:	7e 81       	ldd	r23, Y+6	; 0x06
 6ba:	8f 81       	ldd	r24, Y+7	; 0x07
 6bc:	98 85       	ldd	r25, Y+8	; 0x08
 6be:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 6c2:	dc 01       	movw	r26, r24
 6c4:	cb 01       	movw	r24, r22
 6c6:	89 87       	std	Y+9, r24	; 0x09
 6c8:	89 85       	ldd	r24, Y+9	; 0x09
 6ca:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6cc:	88 8d       	ldd	r24, Y+24	; 0x18
 6ce:	18 2f       	mov	r17, r24
 6d0:	1a 95       	dec	r17
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <__vector_14+0x20c>
 6d4:	18 8f       	std	Y+24, r17	; 0x18
			_delay_us( 5 );
			//PORTD &= ~(1 << PORTD6);
			PORTB &= ~(1 << PORTB0);
 6d6:	85 e2       	ldi	r24, 0x25	; 37
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	25 e2       	ldi	r18, 0x25	; 37
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	f9 01       	movw	r30, r18
 6e0:	20 81       	ld	r18, Z
 6e2:	2e 7f       	andi	r18, 0xFE	; 254
 6e4:	fc 01       	movw	r30, r24
 6e6:	20 83       	st	Z, r18
			count = 0;
 6e8:	10 92 05 01 	sts	0x0105, r1
 6ec:	10 92 04 01 	sts	0x0104, r1
			zerocross = 0;
 6f0:	10 92 02 01 	sts	0x0102, r1
 6f4:	0f c0       	rjmp	.+30     	; 0x714 <__vector_14+0x250>
		}
		else if( count )
 6f6:	80 91 04 01 	lds	r24, 0x0104
 6fa:	90 91 05 01 	lds	r25, 0x0105
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	49 f0       	breq	.+18     	; 0x714 <__vector_14+0x250>
		{
			
			count = count + 1;
 702:	80 91 04 01 	lds	r24, 0x0104
 706:	90 91 05 01 	lds	r25, 0x0105
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	90 93 05 01 	sts	0x0105, r25
 710:	80 93 04 01 	sts	0x0104, r24
		}
	}
}
 714:	68 96       	adiw	r28, 0x18	; 24
 716:	de bf       	out	0x3e, r29	; 62
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	cf 91       	pop	r28
 71c:	df 91       	pop	r29
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	bf 91       	pop	r27
 724:	af 91       	pop	r26
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	7f 91       	pop	r23
 72c:	6f 91       	pop	r22
 72e:	5f 91       	pop	r21
 730:	4f 91       	pop	r20
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	0f 90       	pop	r0
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	0f 90       	pop	r0
 740:	1f 90       	pop	r1
 742:	18 95       	reti

00000744 <__vector_1>:

ISR(INT0_vect)
{
 744:	1f 92       	push	r1
 746:	0f 92       	push	r0
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	0f 92       	push	r0
 74c:	11 24       	eor	r1, r1
 74e:	8f 93       	push	r24
 750:	df 93       	push	r29
 752:	cf 93       	push	r28
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
	zerocross = 1;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	80 93 02 01 	sts	0x0102, r24
}
 75e:	cf 91       	pop	r28
 760:	df 91       	pop	r29
 762:	8f 91       	pop	r24
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <USART_Init>:
 */ 

#include<avr/io.h> 

void USART_Init( unsigned int ubrr)
{
 76e:	df 93       	push	r29
 770:	cf 93       	push	r28
 772:	00 d0       	rcall	.+0      	; 0x774 <USART_Init+0x6>
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
 778:	9a 83       	std	Y+2, r25	; 0x02
 77a:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
    UBRR0H = (ubrr >> 8);
 77c:	85 ec       	ldi	r24, 0xC5	; 197
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	29 81       	ldd	r18, Y+1	; 0x01
 782:	3a 81       	ldd	r19, Y+2	; 0x02
 784:	23 2f       	mov	r18, r19
 786:	33 27       	eor	r19, r19
 788:	fc 01       	movw	r30, r24
 78a:	20 83       	st	Z, r18
    UBRR0L = ubrr;
 78c:	84 ec       	ldi	r24, 0xC4	; 196
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	29 81       	ldd	r18, Y+1	; 0x01
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
    
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);      // Enable receiver and transmitter and interrupt receive
 796:	81 ec       	ldi	r24, 0xC1	; 193
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	28 e9       	ldi	r18, 0x98	; 152
 79c:	fc 01       	movw	r30, r24
 79e:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
 7a0:	82 ec       	ldi	r24, 0xC2	; 194
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	26 e0       	ldi	r18, 0x06	; 6
 7a6:	fc 01       	movw	r30, r24
 7a8:	20 83       	st	Z, r18
}
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	cf 91       	pop	r28
 7b0:	df 91       	pop	r29
 7b2:	08 95       	ret

000007b4 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
 7b4:	df 93       	push	r29
 7b6:	cf 93       	push	r28
 7b8:	0f 92       	push	r0
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62
 7be:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
    while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
 7c0:	00 00       	nop
 7c2:	80 ec       	ldi	r24, 0xC0	; 192
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	fc 01       	movw	r30, r24
 7c8:	80 81       	ld	r24, Z
 7ca:	88 2f       	mov	r24, r24
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	80 72       	andi	r24, 0x20	; 32
 7d0:	90 70       	andi	r25, 0x00	; 0
 7d2:	00 97       	sbiw	r24, 0x00	; 0
 7d4:	b1 f3       	breq	.-20     	; 0x7c2 <USART_Transmit+0xe>

	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 7d6:	86 ec       	ldi	r24, 0xC6	; 198
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	29 81       	ldd	r18, Y+1	; 0x01
 7dc:	fc 01       	movw	r30, r24
 7de:	20 83       	st	Z, r18
}
 7e0:	0f 90       	pop	r0
 7e2:	cf 91       	pop	r28
 7e4:	df 91       	pop	r29
 7e6:	08 95       	ret

000007e8 <USART_Receive>:


unsigned char USART_Receive( void )
{
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
	
}
 7f0:	cf 91       	pop	r28
 7f2:	df 91       	pop	r29
 7f4:	08 95       	ret

000007f6 <__cmpsf2>:
 7f6:	97 d0       	rcall	.+302    	; 0x926 <__fp_cmp>
 7f8:	08 f4       	brcc	.+2      	; 0x7fc <__cmpsf2+0x6>
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	08 95       	ret

000007fe <__divsf3>:
 7fe:	0c d0       	rcall	.+24     	; 0x818 <__divsf3x>
 800:	cd c0       	rjmp	.+410    	; 0x99c <__fp_round>
 802:	c5 d0       	rcall	.+394    	; 0x98e <__fp_pscB>
 804:	40 f0       	brcs	.+16     	; 0x816 <__divsf3+0x18>
 806:	bc d0       	rcall	.+376    	; 0x980 <__fp_pscA>
 808:	30 f0       	brcs	.+12     	; 0x816 <__divsf3+0x18>
 80a:	21 f4       	brne	.+8      	; 0x814 <__divsf3+0x16>
 80c:	5f 3f       	cpi	r21, 0xFF	; 255
 80e:	19 f0       	breq	.+6      	; 0x816 <__divsf3+0x18>
 810:	ae c0       	rjmp	.+348    	; 0x96e <__fp_inf>
 812:	51 11       	cpse	r21, r1
 814:	f7 c0       	rjmp	.+494    	; 0xa04 <__fp_szero>
 816:	b1 c0       	rjmp	.+354    	; 0x97a <__fp_nan>

00000818 <__divsf3x>:
 818:	d2 d0       	rcall	.+420    	; 0x9be <__fp_split3>
 81a:	98 f3       	brcs	.-26     	; 0x802 <__divsf3+0x4>

0000081c <__divsf3_pse>:
 81c:	99 23       	and	r25, r25
 81e:	c9 f3       	breq	.-14     	; 0x812 <__divsf3+0x14>
 820:	55 23       	and	r21, r21
 822:	b1 f3       	breq	.-20     	; 0x810 <__divsf3+0x12>
 824:	95 1b       	sub	r25, r21
 826:	55 0b       	sbc	r21, r21
 828:	bb 27       	eor	r27, r27
 82a:	aa 27       	eor	r26, r26
 82c:	62 17       	cp	r22, r18
 82e:	73 07       	cpc	r23, r19
 830:	84 07       	cpc	r24, r20
 832:	38 f0       	brcs	.+14     	; 0x842 <__divsf3_pse+0x26>
 834:	9f 5f       	subi	r25, 0xFF	; 255
 836:	5f 4f       	sbci	r21, 0xFF	; 255
 838:	22 0f       	add	r18, r18
 83a:	33 1f       	adc	r19, r19
 83c:	44 1f       	adc	r20, r20
 83e:	aa 1f       	adc	r26, r26
 840:	a9 f3       	breq	.-22     	; 0x82c <__divsf3_pse+0x10>
 842:	33 d0       	rcall	.+102    	; 0x8aa <__divsf3_pse+0x8e>
 844:	0e 2e       	mov	r0, r30
 846:	3a f0       	brmi	.+14     	; 0x856 <__divsf3_pse+0x3a>
 848:	e0 e8       	ldi	r30, 0x80	; 128
 84a:	30 d0       	rcall	.+96     	; 0x8ac <__divsf3_pse+0x90>
 84c:	91 50       	subi	r25, 0x01	; 1
 84e:	50 40       	sbci	r21, 0x00	; 0
 850:	e6 95       	lsr	r30
 852:	00 1c       	adc	r0, r0
 854:	ca f7       	brpl	.-14     	; 0x848 <__divsf3_pse+0x2c>
 856:	29 d0       	rcall	.+82     	; 0x8aa <__divsf3_pse+0x8e>
 858:	fe 2f       	mov	r31, r30
 85a:	27 d0       	rcall	.+78     	; 0x8aa <__divsf3_pse+0x8e>
 85c:	66 0f       	add	r22, r22
 85e:	77 1f       	adc	r23, r23
 860:	88 1f       	adc	r24, r24
 862:	bb 1f       	adc	r27, r27
 864:	26 17       	cp	r18, r22
 866:	37 07       	cpc	r19, r23
 868:	48 07       	cpc	r20, r24
 86a:	ab 07       	cpc	r26, r27
 86c:	b0 e8       	ldi	r27, 0x80	; 128
 86e:	09 f0       	breq	.+2      	; 0x872 <__divsf3_pse+0x56>
 870:	bb 0b       	sbc	r27, r27
 872:	80 2d       	mov	r24, r0
 874:	bf 01       	movw	r22, r30
 876:	ff 27       	eor	r31, r31
 878:	93 58       	subi	r25, 0x83	; 131
 87a:	5f 4f       	sbci	r21, 0xFF	; 255
 87c:	2a f0       	brmi	.+10     	; 0x888 <__divsf3_pse+0x6c>
 87e:	9e 3f       	cpi	r25, 0xFE	; 254
 880:	51 05       	cpc	r21, r1
 882:	68 f0       	brcs	.+26     	; 0x89e <__divsf3_pse+0x82>
 884:	74 c0       	rjmp	.+232    	; 0x96e <__fp_inf>
 886:	be c0       	rjmp	.+380    	; 0xa04 <__fp_szero>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	ec f3       	brlt	.-6      	; 0x886 <__divsf3_pse+0x6a>
 88c:	98 3e       	cpi	r25, 0xE8	; 232
 88e:	dc f3       	brlt	.-10     	; 0x886 <__divsf3_pse+0x6a>
 890:	86 95       	lsr	r24
 892:	77 95       	ror	r23
 894:	67 95       	ror	r22
 896:	b7 95       	ror	r27
 898:	f7 95       	ror	r31
 89a:	9f 5f       	subi	r25, 0xFF	; 255
 89c:	c9 f7       	brne	.-14     	; 0x890 <__divsf3_pse+0x74>
 89e:	88 0f       	add	r24, r24
 8a0:	91 1d       	adc	r25, r1
 8a2:	96 95       	lsr	r25
 8a4:	87 95       	ror	r24
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret
 8aa:	e1 e0       	ldi	r30, 0x01	; 1
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	bb 1f       	adc	r27, r27
 8b4:	62 17       	cp	r22, r18
 8b6:	73 07       	cpc	r23, r19
 8b8:	84 07       	cpc	r24, r20
 8ba:	ba 07       	cpc	r27, r26
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <__divsf3_pse+0xaa>
 8be:	62 1b       	sub	r22, r18
 8c0:	73 0b       	sbc	r23, r19
 8c2:	84 0b       	sbc	r24, r20
 8c4:	ba 0b       	sbc	r27, r26
 8c6:	ee 1f       	adc	r30, r30
 8c8:	88 f7       	brcc	.-30     	; 0x8ac <__divsf3_pse+0x90>
 8ca:	e0 95       	com	r30
 8cc:	08 95       	ret

000008ce <__fixunssfsi>:
 8ce:	7f d0       	rcall	.+254    	; 0x9ce <__fp_splitA>
 8d0:	88 f0       	brcs	.+34     	; 0x8f4 <__fixunssfsi+0x26>
 8d2:	9f 57       	subi	r25, 0x7F	; 127
 8d4:	90 f0       	brcs	.+36     	; 0x8fa <__fixunssfsi+0x2c>
 8d6:	b9 2f       	mov	r27, r25
 8d8:	99 27       	eor	r25, r25
 8da:	b7 51       	subi	r27, 0x17	; 23
 8dc:	a0 f0       	brcs	.+40     	; 0x906 <__stack+0x7>
 8de:	d1 f0       	breq	.+52     	; 0x914 <__stack+0x15>
 8e0:	66 0f       	add	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	1a f0       	brmi	.+6      	; 0x8f0 <__fixunssfsi+0x22>
 8ea:	ba 95       	dec	r27
 8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__fixunssfsi+0x12>
 8ee:	12 c0       	rjmp	.+36     	; 0x914 <__stack+0x15>
 8f0:	b1 30       	cpi	r27, 0x01	; 1
 8f2:	81 f0       	breq	.+32     	; 0x914 <__stack+0x15>
 8f4:	86 d0       	rcall	.+268    	; 0xa02 <__fp_zero>
 8f6:	b1 e0       	ldi	r27, 0x01	; 1
 8f8:	08 95       	ret
 8fa:	83 c0       	rjmp	.+262    	; 0xa02 <__fp_zero>
 8fc:	67 2f       	mov	r22, r23
 8fe:	78 2f       	mov	r23, r24
 900:	88 27       	eor	r24, r24
 902:	b8 5f       	subi	r27, 0xF8	; 248
 904:	39 f0       	breq	.+14     	; 0x914 <__stack+0x15>
 906:	b9 3f       	cpi	r27, 0xF9	; 249
 908:	cc f3       	brlt	.-14     	; 0x8fc <__fixunssfsi+0x2e>
 90a:	86 95       	lsr	r24
 90c:	77 95       	ror	r23
 90e:	67 95       	ror	r22
 910:	b3 95       	inc	r27
 912:	d9 f7       	brne	.-10     	; 0x90a <__stack+0xb>
 914:	3e f4       	brtc	.+14     	; 0x924 <__stack+0x25>
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	08 95       	ret

00000926 <__fp_cmp>:
 926:	99 0f       	add	r25, r25
 928:	00 08       	sbc	r0, r0
 92a:	55 0f       	add	r21, r21
 92c:	aa 0b       	sbc	r26, r26
 92e:	e0 e8       	ldi	r30, 0x80	; 128
 930:	fe ef       	ldi	r31, 0xFE	; 254
 932:	16 16       	cp	r1, r22
 934:	17 06       	cpc	r1, r23
 936:	e8 07       	cpc	r30, r24
 938:	f9 07       	cpc	r31, r25
 93a:	c0 f0       	brcs	.+48     	; 0x96c <__fp_cmp+0x46>
 93c:	12 16       	cp	r1, r18
 93e:	13 06       	cpc	r1, r19
 940:	e4 07       	cpc	r30, r20
 942:	f5 07       	cpc	r31, r21
 944:	98 f0       	brcs	.+38     	; 0x96c <__fp_cmp+0x46>
 946:	62 1b       	sub	r22, r18
 948:	73 0b       	sbc	r23, r19
 94a:	84 0b       	sbc	r24, r20
 94c:	95 0b       	sbc	r25, r21
 94e:	39 f4       	brne	.+14     	; 0x95e <__fp_cmp+0x38>
 950:	0a 26       	eor	r0, r26
 952:	61 f0       	breq	.+24     	; 0x96c <__fp_cmp+0x46>
 954:	23 2b       	or	r18, r19
 956:	24 2b       	or	r18, r20
 958:	25 2b       	or	r18, r21
 95a:	21 f4       	brne	.+8      	; 0x964 <__fp_cmp+0x3e>
 95c:	08 95       	ret
 95e:	0a 26       	eor	r0, r26
 960:	09 f4       	brne	.+2      	; 0x964 <__fp_cmp+0x3e>
 962:	a1 40       	sbci	r26, 0x01	; 1
 964:	a6 95       	lsr	r26
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	81 1d       	adc	r24, r1
 96a:	81 1d       	adc	r24, r1
 96c:	08 95       	ret

0000096e <__fp_inf>:
 96e:	97 f9       	bld	r25, 7
 970:	9f 67       	ori	r25, 0x7F	; 127
 972:	80 e8       	ldi	r24, 0x80	; 128
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	08 95       	ret

0000097a <__fp_nan>:
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	80 ec       	ldi	r24, 0xC0	; 192
 97e:	08 95       	ret

00000980 <__fp_pscA>:
 980:	00 24       	eor	r0, r0
 982:	0a 94       	dec	r0
 984:	16 16       	cp	r1, r22
 986:	17 06       	cpc	r1, r23
 988:	18 06       	cpc	r1, r24
 98a:	09 06       	cpc	r0, r25
 98c:	08 95       	ret

0000098e <__fp_pscB>:
 98e:	00 24       	eor	r0, r0
 990:	0a 94       	dec	r0
 992:	12 16       	cp	r1, r18
 994:	13 06       	cpc	r1, r19
 996:	14 06       	cpc	r1, r20
 998:	05 06       	cpc	r0, r21
 99a:	08 95       	ret

0000099c <__fp_round>:
 99c:	09 2e       	mov	r0, r25
 99e:	03 94       	inc	r0
 9a0:	00 0c       	add	r0, r0
 9a2:	11 f4       	brne	.+4      	; 0x9a8 <__fp_round+0xc>
 9a4:	88 23       	and	r24, r24
 9a6:	52 f0       	brmi	.+20     	; 0x9bc <__fp_round+0x20>
 9a8:	bb 0f       	add	r27, r27
 9aa:	40 f4       	brcc	.+16     	; 0x9bc <__fp_round+0x20>
 9ac:	bf 2b       	or	r27, r31
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__fp_round+0x18>
 9b0:	60 ff       	sbrs	r22, 0
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__fp_round+0x20>
 9b4:	6f 5f       	subi	r22, 0xFF	; 255
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	08 95       	ret

000009be <__fp_split3>:
 9be:	57 fd       	sbrc	r21, 7
 9c0:	90 58       	subi	r25, 0x80	; 128
 9c2:	44 0f       	add	r20, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	59 f0       	breq	.+22     	; 0x9de <__fp_splitA+0x10>
 9c8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ca:	71 f0       	breq	.+28     	; 0x9e8 <__fp_splitA+0x1a>
 9cc:	47 95       	ror	r20

000009ce <__fp_splitA>:
 9ce:	88 0f       	add	r24, r24
 9d0:	97 fb       	bst	r25, 7
 9d2:	99 1f       	adc	r25, r25
 9d4:	61 f0       	breq	.+24     	; 0x9ee <__fp_splitA+0x20>
 9d6:	9f 3f       	cpi	r25, 0xFF	; 255
 9d8:	79 f0       	breq	.+30     	; 0x9f8 <__fp_splitA+0x2a>
 9da:	87 95       	ror	r24
 9dc:	08 95       	ret
 9de:	12 16       	cp	r1, r18
 9e0:	13 06       	cpc	r1, r19
 9e2:	14 06       	cpc	r1, r20
 9e4:	55 1f       	adc	r21, r21
 9e6:	f2 cf       	rjmp	.-28     	; 0x9cc <__fp_split3+0xe>
 9e8:	46 95       	lsr	r20
 9ea:	f1 df       	rcall	.-30     	; 0x9ce <__fp_splitA>
 9ec:	08 c0       	rjmp	.+16     	; 0x9fe <__fp_splitA+0x30>
 9ee:	16 16       	cp	r1, r22
 9f0:	17 06       	cpc	r1, r23
 9f2:	18 06       	cpc	r1, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	f1 cf       	rjmp	.-30     	; 0x9da <__fp_splitA+0xc>
 9f8:	86 95       	lsr	r24
 9fa:	71 05       	cpc	r23, r1
 9fc:	61 05       	cpc	r22, r1
 9fe:	08 94       	sec
 a00:	08 95       	ret

00000a02 <__fp_zero>:
 a02:	e8 94       	clt

00000a04 <__fp_szero>:
 a04:	bb 27       	eor	r27, r27
 a06:	66 27       	eor	r22, r22
 a08:	77 27       	eor	r23, r23
 a0a:	cb 01       	movw	r24, r22
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <__gesf2>:
 a10:	8a df       	rcall	.-236    	; 0x926 <__fp_cmp>
 a12:	08 f4       	brcc	.+2      	; 0xa16 <__gesf2+0x6>
 a14:	8f ef       	ldi	r24, 0xFF	; 255
 a16:	08 95       	ret

00000a18 <__mulsf3>:
 a18:	0b d0       	rcall	.+22     	; 0xa30 <__mulsf3x>
 a1a:	c0 cf       	rjmp	.-128    	; 0x99c <__fp_round>
 a1c:	b1 df       	rcall	.-158    	; 0x980 <__fp_pscA>
 a1e:	28 f0       	brcs	.+10     	; 0xa2a <__mulsf3+0x12>
 a20:	b6 df       	rcall	.-148    	; 0x98e <__fp_pscB>
 a22:	18 f0       	brcs	.+6      	; 0xa2a <__mulsf3+0x12>
 a24:	95 23       	and	r25, r21
 a26:	09 f0       	breq	.+2      	; 0xa2a <__mulsf3+0x12>
 a28:	a2 cf       	rjmp	.-188    	; 0x96e <__fp_inf>
 a2a:	a7 cf       	rjmp	.-178    	; 0x97a <__fp_nan>
 a2c:	11 24       	eor	r1, r1
 a2e:	ea cf       	rjmp	.-44     	; 0xa04 <__fp_szero>

00000a30 <__mulsf3x>:
 a30:	c6 df       	rcall	.-116    	; 0x9be <__fp_split3>
 a32:	a0 f3       	brcs	.-24     	; 0xa1c <__mulsf3+0x4>

00000a34 <__mulsf3_pse>:
 a34:	95 9f       	mul	r25, r21
 a36:	d1 f3       	breq	.-12     	; 0xa2c <__mulsf3+0x14>
 a38:	95 0f       	add	r25, r21
 a3a:	50 e0       	ldi	r21, 0x00	; 0
 a3c:	55 1f       	adc	r21, r21
 a3e:	62 9f       	mul	r22, r18
 a40:	f0 01       	movw	r30, r0
 a42:	72 9f       	mul	r23, r18
 a44:	bb 27       	eor	r27, r27
 a46:	f0 0d       	add	r31, r0
 a48:	b1 1d       	adc	r27, r1
 a4a:	63 9f       	mul	r22, r19
 a4c:	aa 27       	eor	r26, r26
 a4e:	f0 0d       	add	r31, r0
 a50:	b1 1d       	adc	r27, r1
 a52:	aa 1f       	adc	r26, r26
 a54:	64 9f       	mul	r22, r20
 a56:	66 27       	eor	r22, r22
 a58:	b0 0d       	add	r27, r0
 a5a:	a1 1d       	adc	r26, r1
 a5c:	66 1f       	adc	r22, r22
 a5e:	82 9f       	mul	r24, r18
 a60:	22 27       	eor	r18, r18
 a62:	b0 0d       	add	r27, r0
 a64:	a1 1d       	adc	r26, r1
 a66:	62 1f       	adc	r22, r18
 a68:	73 9f       	mul	r23, r19
 a6a:	b0 0d       	add	r27, r0
 a6c:	a1 1d       	adc	r26, r1
 a6e:	62 1f       	adc	r22, r18
 a70:	83 9f       	mul	r24, r19
 a72:	a0 0d       	add	r26, r0
 a74:	61 1d       	adc	r22, r1
 a76:	22 1f       	adc	r18, r18
 a78:	74 9f       	mul	r23, r20
 a7a:	33 27       	eor	r19, r19
 a7c:	a0 0d       	add	r26, r0
 a7e:	61 1d       	adc	r22, r1
 a80:	23 1f       	adc	r18, r19
 a82:	84 9f       	mul	r24, r20
 a84:	60 0d       	add	r22, r0
 a86:	21 1d       	adc	r18, r1
 a88:	82 2f       	mov	r24, r18
 a8a:	76 2f       	mov	r23, r22
 a8c:	6a 2f       	mov	r22, r26
 a8e:	11 24       	eor	r1, r1
 a90:	9f 57       	subi	r25, 0x7F	; 127
 a92:	50 40       	sbci	r21, 0x00	; 0
 a94:	8a f0       	brmi	.+34     	; 0xab8 <__mulsf3_pse+0x84>
 a96:	e1 f0       	breq	.+56     	; 0xad0 <__mulsf3_pse+0x9c>
 a98:	88 23       	and	r24, r24
 a9a:	4a f0       	brmi	.+18     	; 0xaae <__mulsf3_pse+0x7a>
 a9c:	ee 0f       	add	r30, r30
 a9e:	ff 1f       	adc	r31, r31
 aa0:	bb 1f       	adc	r27, r27
 aa2:	66 1f       	adc	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	91 50       	subi	r25, 0x01	; 1
 aaa:	50 40       	sbci	r21, 0x00	; 0
 aac:	a9 f7       	brne	.-22     	; 0xa98 <__mulsf3_pse+0x64>
 aae:	9e 3f       	cpi	r25, 0xFE	; 254
 ab0:	51 05       	cpc	r21, r1
 ab2:	70 f0       	brcs	.+28     	; 0xad0 <__mulsf3_pse+0x9c>
 ab4:	5c cf       	rjmp	.-328    	; 0x96e <__fp_inf>
 ab6:	a6 cf       	rjmp	.-180    	; 0xa04 <__fp_szero>
 ab8:	5f 3f       	cpi	r21, 0xFF	; 255
 aba:	ec f3       	brlt	.-6      	; 0xab6 <__mulsf3_pse+0x82>
 abc:	98 3e       	cpi	r25, 0xE8	; 232
 abe:	dc f3       	brlt	.-10     	; 0xab6 <__mulsf3_pse+0x82>
 ac0:	86 95       	lsr	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	b7 95       	ror	r27
 ac8:	f7 95       	ror	r31
 aca:	e7 95       	ror	r30
 acc:	9f 5f       	subi	r25, 0xFF	; 255
 ace:	c1 f7       	brne	.-16     	; 0xac0 <__mulsf3_pse+0x8c>
 ad0:	fe 2b       	or	r31, r30
 ad2:	88 0f       	add	r24, r24
 ad4:	91 1d       	adc	r25, r1
 ad6:	96 95       	lsr	r25
 ad8:	87 95       	ror	r24
 ada:	97 f9       	bld	r25, 7
 adc:	08 95       	ret

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
