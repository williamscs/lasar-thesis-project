
Satellite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00002780  00002834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002780  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800268  00800268  0000299c  2**0
                  ALLOC
  3 .eeprom       00000013  00810000  00810000  0000299c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000023ac  00000000  00000000  000029b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000008fc  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000e0  00000000  00000000  00005658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000033a  00000000  00000000  00005738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000154a  00000000  00000000  00005a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000081a  00000000  00000000  00006fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001ca7  00000000  00000000  000077d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000280  00000000  00000000  00009480  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004de  00000000  00000000  00009700  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000749  00000000  00000000  00009bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000019e  00000000  00000000  0000a327  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  0000a4c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__vector_4>
      14:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e8       	ldi	r30, 0x80	; 128
      7c:	f7 e2       	ldi	r31, 0x27	; 39
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 36       	cpi	r26, 0x68	; 104
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	a8 e6       	ldi	r26, 0x68	; 104
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 31       	cpi	r26, 0x14	; 20
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <main>
      9e:	0c 94 be 13 	jmp	0x277c	; 0x277c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_default>

000000a6 <RTC_init>:
#include <util/delay.h>
#include <string.h>
#include "SPI\spi.h"

void RTC_init()
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	2e 97       	sbiw	r28, 0x0e	; 14
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
	  // start the SPI library:
	  setup_spi(SPI_MODE_1, SPI_MSB, SPI_NO_INTERRUPT, SPI_MSTR_CLK16);
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	60 e0       	ldi	r22, 0x00	; 0
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	40 e0       	ldi	r20, 0x00	; 0
      c6:	50 e0       	ldi	r21, 0x00	; 0
      c8:	21 e0       	ldi	r18, 0x01	; 1
      ca:	0e 94 0d 03 	call	0x61a	; 0x61a <setup_spi>
	  //set control register 
	  send_spi(0x8E);
      ce:	8e e8       	ldi	r24, 0x8E	; 142
      d0:	0e 94 c5 03 	call	0x78a	; 0x78a <send_spi>
	  send_spi(0x60);
      d4:	80 e6       	ldi	r24, 0x60	; 96
      d6:	0e 94 c5 03 	call	0x78a	; 0x78a <send_spi>
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	a0 e2       	ldi	r26, 0x20	; 32
      e0:	b1 e4       	ldi	r27, 0x41	; 65
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	9a 83       	std	Y+2, r25	; 0x02
      e6:	ab 83       	std	Y+3, r26	; 0x03
      e8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
      ea:	69 81       	ldd	r22, Y+1	; 0x01
      ec:	7a 81       	ldd	r23, Y+2	; 0x02
      ee:	8b 81       	ldd	r24, Y+3	; 0x03
      f0:	9c 81       	ldd	r25, Y+4	; 0x04
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	4a e7       	ldi	r20, 0x7A	; 122
      f8:	55 e4       	ldi	r21, 0x45	; 69
      fa:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
      fe:	dc 01       	movw	r26, r24
     100:	cb 01       	movw	r24, r22
     102:	8d 83       	std	Y+5, r24	; 0x05
     104:	9e 83       	std	Y+6, r25	; 0x06
     106:	af 83       	std	Y+7, r26	; 0x07
     108:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	6d 81       	ldd	r22, Y+5	; 0x05
     10e:	7e 81       	ldd	r23, Y+6	; 0x06
     110:	8f 81       	ldd	r24, Y+7	; 0x07
     112:	98 85       	ldd	r25, Y+8	; 0x08
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	40 e8       	ldi	r20, 0x80	; 128
     11a:	5f e3       	ldi	r21, 0x3F	; 63
     11c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__cmpsf2>
     120:	88 23       	and	r24, r24
     122:	0c f0       	brlt	.+2      	; 0x126 <RTC_init+0x80>
     124:	10 e0       	ldi	r17, 0x00	; 0
     126:	11 23       	and	r17, r17
     128:	29 f0       	breq	.+10     	; 0x134 <RTC_init+0x8e>
		__ticks = 1;
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	9a 87       	std	Y+10, r25	; 0x0a
     130:	89 87       	std	Y+9, r24	; 0x09
     132:	46 c0       	rjmp	.+140    	; 0x1c0 <RTC_init+0x11a>
	else if (__tmp > 65535)
     134:	11 e0       	ldi	r17, 0x01	; 1
     136:	6d 81       	ldd	r22, Y+5	; 0x05
     138:	7e 81       	ldd	r23, Y+6	; 0x06
     13a:	8f 81       	ldd	r24, Y+7	; 0x07
     13c:	98 85       	ldd	r25, Y+8	; 0x08
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	3f ef       	ldi	r19, 0xFF	; 255
     142:	4f e7       	ldi	r20, 0x7F	; 127
     144:	57 e4       	ldi	r21, 0x47	; 71
     146:	0e 94 0e 10 	call	0x201c	; 0x201c <__gesf2>
     14a:	18 16       	cp	r1, r24
     14c:	0c f0       	brlt	.+2      	; 0x150 <RTC_init+0xaa>
     14e:	10 e0       	ldi	r17, 0x00	; 0
     150:	11 23       	and	r17, r17
     152:	61 f1       	breq	.+88     	; 0x1ac <RTC_init+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	69 81       	ldd	r22, Y+1	; 0x01
     156:	7a 81       	ldd	r23, Y+2	; 0x02
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9a 87       	std	Y+10, r25	; 0x0a
     17a:	89 87       	std	Y+9, r24	; 0x09
     17c:	12 c0       	rjmp	.+36     	; 0x1a2 <RTC_init+0xfc>
     17e:	80 e9       	ldi	r24, 0x90	; 144
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	9c 87       	std	Y+12, r25	; 0x0c
     184:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 85       	ldd	r24, Y+11	; 0x0b
     188:	9c 85       	ldd	r25, Y+12	; 0x0c
     18a:	8c 01       	movw	r16, r24
     18c:	c8 01       	movw	r24, r16
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <RTC_init+0xe8>
     192:	8c 01       	movw	r16, r24
     194:	1c 87       	std	Y+12, r17	; 0x0c
     196:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     198:	89 85       	ldd	r24, Y+9	; 0x09
     19a:	9a 85       	ldd	r25, Y+10	; 0x0a
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	9a 87       	std	Y+10, r25	; 0x0a
     1a0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	89 85       	ldd	r24, Y+9	; 0x09
     1a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a6:	00 97       	sbiw	r24, 0x00	; 0
     1a8:	51 f7       	brne	.-44     	; 0x17e <RTC_init+0xd8>
     1aa:	17 c0       	rjmp	.+46     	; 0x1da <RTC_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ac:	6d 81       	ldd	r22, Y+5	; 0x05
     1ae:	7e 81       	ldd	r23, Y+6	; 0x06
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
     1b8:	dc 01       	movw	r26, r24
     1ba:	cb 01       	movw	r24, r22
     1bc:	9a 87       	std	Y+10, r25	; 0x0a
     1be:	89 87       	std	Y+9, r24	; 0x09
     1c0:	89 85       	ldd	r24, Y+9	; 0x09
     1c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c4:	9e 87       	std	Y+14, r25	; 0x0e
     1c6:	8d 87       	std	Y+13, r24	; 0x0d
     1c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ca:	9e 85       	ldd	r25, Y+14	; 0x0e
     1cc:	8c 01       	movw	r16, r24
     1ce:	c8 01       	movw	r24, r16
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <RTC_init+0x12a>
     1d4:	8c 01       	movw	r16, r24
     1d6:	1e 87       	std	Y+14, r17	; 0x0e
     1d8:	0d 87       	std	Y+13, r16	; 0x0d
	  //0b01100000
	  
	  _delay_ms(10);
}
     1da:	2e 96       	adiw	r28, 0x0e	; 14
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	cf 91       	pop	r28
     1e8:	df 91       	pop	r29
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	08 95       	ret

000001f0 <SetTimeDate>:

void SetTimeDate(int d, int mo, int y, int h, int mi, int s)
{ 
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	a0 97       	sbiw	r28, 0x20	; 32
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	9e 8b       	std	Y+22, r25	; 0x16
     20e:	8d 8b       	std	Y+21, r24	; 0x15
     210:	78 8f       	std	Y+24, r23	; 0x18
     212:	6f 8b       	std	Y+23, r22	; 0x17
     214:	5a 8f       	std	Y+26, r21	; 0x1a
     216:	49 8f       	std	Y+25, r20	; 0x19
     218:	3c 8f       	std	Y+28, r19	; 0x1c
     21a:	2b 8f       	std	Y+27, r18	; 0x1b
     21c:	1e 8f       	std	Y+30, r17	; 0x1e
     21e:	0d 8f       	std	Y+29, r16	; 0x1d
     220:	f8 a2       	std	Y+32, r15	; 0x20
     222:	ef 8e       	std	Y+31, r14	; 0x1f
	int TimeDate [7]={s,mi,h,0,d,mo,y};
     224:	8f 8d       	ldd	r24, Y+31	; 0x1f
     226:	98 a1       	ldd	r25, Y+32	; 0x20
     228:	98 87       	std	Y+8, r25	; 0x08
     22a:	8f 83       	std	Y+7, r24	; 0x07
     22c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     22e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     230:	9a 87       	std	Y+10, r25	; 0x0a
     232:	89 87       	std	Y+9, r24	; 0x09
     234:	8b 8d       	ldd	r24, Y+27	; 0x1b
     236:	9c 8d       	ldd	r25, Y+28	; 0x1c
     238:	9c 87       	std	Y+12, r25	; 0x0c
     23a:	8b 87       	std	Y+11, r24	; 0x0b
     23c:	1e 86       	std	Y+14, r1	; 0x0e
     23e:	1d 86       	std	Y+13, r1	; 0x0d
     240:	8d 89       	ldd	r24, Y+21	; 0x15
     242:	9e 89       	ldd	r25, Y+22	; 0x16
     244:	98 8b       	std	Y+16, r25	; 0x10
     246:	8f 87       	std	Y+15, r24	; 0x0f
     248:	8f 89       	ldd	r24, Y+23	; 0x17
     24a:	98 8d       	ldd	r25, Y+24	; 0x18
     24c:	9a 8b       	std	Y+18, r25	; 0x12
     24e:	89 8b       	std	Y+17, r24	; 0x11
     250:	89 8d       	ldd	r24, Y+25	; 0x19
     252:	9a 8d       	ldd	r25, Y+26	; 0x1a
     254:	9c 8b       	std	Y+20, r25	; 0x14
     256:	8b 8b       	std	Y+19, r24	; 0x13
	for(int i=0; i<=6;i++)
     258:	1a 82       	std	Y+2, r1	; 0x02
     25a:	19 82       	std	Y+1, r1	; 0x01
     25c:	9a c0       	rjmp	.+308    	; 0x392 <SetTimeDate+0x1a2>
	{
		if(i==3)
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	91 05       	cpc	r25, r1
     266:	29 f4       	brne	.+10     	; 0x272 <SetTimeDate+0x82>
			i++;
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	9a 81       	ldd	r25, Y+2	; 0x02
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	89 83       	std	Y+1, r24	; 0x01
		
		int b= TimeDate[i]/10;
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	9e 01       	movw	r18, r28
     27c:	2f 5f       	subi	r18, 0xFF	; 255
     27e:	3f 4f       	sbci	r19, 0xFF	; 255
     280:	82 0f       	add	r24, r18
     282:	93 1f       	adc	r25, r19
     284:	06 96       	adiw	r24, 0x06	; 6
     286:	fc 01       	movw	r30, r24
     288:	80 81       	ld	r24, Z
     28a:	91 81       	ldd	r25, Z+1	; 0x01
     28c:	2a e0       	ldi	r18, 0x0A	; 10
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	b9 01       	movw	r22, r18
     292:	0e 94 75 10 	call	0x20ea	; 0x20ea <__divmodhi4>
     296:	9b 01       	movw	r18, r22
     298:	3c 83       	std	Y+4, r19	; 0x04
     29a:	2b 83       	std	Y+3, r18	; 0x03
		int a= TimeDate[i]-b*10;
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	9a 81       	ldd	r25, Y+2	; 0x02
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	9e 01       	movw	r18, r28
     2a6:	2f 5f       	subi	r18, 0xFF	; 255
     2a8:	3f 4f       	sbci	r19, 0xFF	; 255
     2aa:	82 0f       	add	r24, r18
     2ac:	93 1f       	adc	r25, r19
     2ae:	06 96       	adiw	r24, 0x06	; 6
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	ac 01       	movw	r20, r24
     2c0:	44 0f       	add	r20, r20
     2c2:	55 1f       	adc	r21, r21
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	84 0f       	add	r24, r20
     2ca:	95 1f       	adc	r25, r21
     2cc:	90 95       	com	r25
     2ce:	81 95       	neg	r24
     2d0:	9f 4f       	sbci	r25, 0xFF	; 255
     2d2:	82 0f       	add	r24, r18
     2d4:	93 1f       	adc	r25, r19
     2d6:	9e 83       	std	Y+6, r25	; 0x06
     2d8:	8d 83       	std	Y+5, r24	; 0x05
		
		if(i==2)
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	91 05       	cpc	r25, r1
     2e2:	99 f4       	brne	.+38     	; 0x30a <SetTimeDate+0x11a>
		{
			if (b==2)
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	91 05       	cpc	r25, r1
     2ec:	29 f4       	brne	.+10     	; 0x2f8 <SetTimeDate+0x108>
				b=0b00000010;
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	9c 83       	std	Y+4, r25	; 0x04
     2f4:	8b 83       	std	Y+3, r24	; 0x03
     2f6:	09 c0       	rjmp	.+18     	; 0x30a <SetTimeDate+0x11a>
			else if (b==1)
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	9c 81       	ldd	r25, Y+4	; 0x04
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	91 05       	cpc	r25, r1
     300:	21 f4       	brne	.+8      	; 0x30a <SetTimeDate+0x11a>
				b=0b00000001;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	9c 83       	std	Y+4, r25	; 0x04
     308:	8b 83       	std	Y+3, r24	; 0x03
		}	
		TimeDate[i]= a+(b<<4);
     30a:	8b 81       	ldd	r24, Y+3	; 0x03
     30c:	9c 81       	ldd	r25, Y+4	; 0x04
     30e:	9c 01       	movw	r18, r24
     310:	22 95       	swap	r18
     312:	32 95       	swap	r19
     314:	30 7f       	andi	r19, 0xF0	; 240
     316:	32 27       	eor	r19, r18
     318:	20 7f       	andi	r18, 0xF0	; 240
     31a:	32 27       	eor	r19, r18
     31c:	8d 81       	ldd	r24, Y+5	; 0x05
     31e:	9e 81       	ldd	r25, Y+6	; 0x06
     320:	28 0f       	add	r18, r24
     322:	39 1f       	adc	r19, r25
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	ae 01       	movw	r20, r28
     32e:	4f 5f       	subi	r20, 0xFF	; 255
     330:	5f 4f       	sbci	r21, 0xFF	; 255
     332:	84 0f       	add	r24, r20
     334:	95 1f       	adc	r25, r21
     336:	06 96       	adiw	r24, 0x06	; 6
     338:	fc 01       	movw	r30, r24
     33a:	31 83       	std	Z+1, r19	; 0x01
     33c:	20 83       	st	Z, r18
		
		PORTD &= ~(1 << PORTD5);
     33e:	8b e2       	ldi	r24, 0x2B	; 43
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2b e2       	ldi	r18, 0x2B	; 43
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	f9 01       	movw	r30, r18
     348:	20 81       	ld	r18, Z
     34a:	2f 7d       	andi	r18, 0xDF	; 223
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
		send_spi(i+0x80);
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	80 58       	subi	r24, 0x80	; 128
     354:	0e 94 c5 03 	call	0x78a	; 0x78a <send_spi>
		send_spi((uint8_t)TimeDate[i]);
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	9e 01       	movw	r18, r28
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	82 0f       	add	r24, r18
     368:	93 1f       	adc	r25, r19
     36a:	06 96       	adiw	r24, 0x06	; 6
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	91 81       	ldd	r25, Z+1	; 0x01
     372:	0e 94 c5 03 	call	0x78a	; 0x78a <send_spi>
		PORTD |= (1 << PORTD5);
     376:	8b e2       	ldi	r24, 0x2B	; 43
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	2b e2       	ldi	r18, 0x2B	; 43
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	20 81       	ld	r18, Z
     382:	20 62       	ori	r18, 0x20	; 32
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
}

void SetTimeDate(int d, int mo, int y, int h, int mi, int s)
{ 
	int TimeDate [7]={s,mi,h,0,d,mo,y};
	for(int i=0; i<=6;i++)
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	9a 83       	std	Y+2, r25	; 0x02
     390:	89 83       	std	Y+1, r24	; 0x01
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	87 30       	cpi	r24, 0x07	; 7
     398:	91 05       	cpc	r25, r1
     39a:	0c f4       	brge	.+2      	; 0x39e <SetTimeDate+0x1ae>
     39c:	60 cf       	rjmp	.-320    	; 0x25e <SetTimeDate+0x6e>
		PORTD &= ~(1 << PORTD5);
		send_spi(i+0x80);
		send_spi((uint8_t)TimeDate[i]);
		PORTD |= (1 << PORTD5);
	}
}
     39e:	a0 96       	adiw	r28, 0x20	; 32
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	cf 91       	pop	r28
     3ac:	df 91       	pop	r29
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	08 95       	ret

000003b8 <ReadTimeDate>:

char* ReadTimeDate()
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	6f 97       	sbiw	r28, 0x1f	; 31
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
	char * temp = "";
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	9e 83       	std	Y+6, r25	; 0x06
     3d2:	8d 83       	std	Y+5, r24	; 0x05
	int TimeDate [7]; //second,minute,hour,null,day,month,year
	//int TimeDate[7] = {1,2,3,4,5,6,7};
	for(int i=0; i<=6;i++)
     3d4:	1a 82       	std	Y+2, r1	; 0x02
     3d6:	19 82       	std	Y+1, r1	; 0x01
     3d8:	0f c1       	rjmp	.+542    	; 0x5f8 <ReadTimeDate+0x240>
	{
		if(i==3)
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	9a 81       	ldd	r25, Y+2	; 0x02
     3de:	83 30       	cpi	r24, 0x03	; 3
     3e0:	91 05       	cpc	r25, r1
     3e2:	29 f4       	brne	.+10     	; 0x3ee <ReadTimeDate+0x36>
			i++;
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	89 83       	std	Y+1, r24	; 0x01
		send_spi(i+0x00); 
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	0e 94 c5 03 	call	0x78a	; 0x78a <send_spi>
		uint8_t n = send_spi(0x00);
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 c5 03 	call	0x78a	; 0x78a <send_spi>
     3fa:	8f 83       	std	Y+7, r24	; 0x07
		int a=n & 0b00001111;    
     3fc:	8f 81       	ldd	r24, Y+7	; 0x07
     3fe:	88 2f       	mov	r24, r24
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	8f 70       	andi	r24, 0x0F	; 15
     404:	90 70       	andi	r25, 0x00	; 0
     406:	99 87       	std	Y+9, r25	; 0x09
     408:	88 87       	std	Y+8, r24	; 0x08
		if(i==2)
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	82 30       	cpi	r24, 0x02	; 2
     410:	91 05       	cpc	r25, r1
     412:	b1 f5       	brne	.+108    	; 0x480 <ReadTimeDate+0xc8>
		{	
			int b=(n & 0b00110000)>>4; //24 hour mode
     414:	8f 81       	ldd	r24, Y+7	; 0x07
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	80 73       	andi	r24, 0x30	; 48
     41c:	90 70       	andi	r25, 0x00	; 0
     41e:	95 95       	asr	r25
     420:	87 95       	ror	r24
     422:	95 95       	asr	r25
     424:	87 95       	ror	r24
     426:	95 95       	asr	r25
     428:	87 95       	ror	r24
     42a:	95 95       	asr	r25
     42c:	87 95       	ror	r24
     42e:	9c 83       	std	Y+4, r25	; 0x04
     430:	8b 83       	std	Y+3, r24	; 0x03
			if(b==0b00000010)
     432:	8b 81       	ldd	r24, Y+3	; 0x03
     434:	9c 81       	ldd	r25, Y+4	; 0x04
     436:	82 30       	cpi	r24, 0x02	; 2
     438:	91 05       	cpc	r25, r1
     43a:	29 f4       	brne	.+10     	; 0x446 <ReadTimeDate+0x8e>
				b=20;        
     43c:	84 e1       	ldi	r24, 0x14	; 20
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	8b 83       	std	Y+3, r24	; 0x03
     444:	09 c0       	rjmp	.+18     	; 0x458 <ReadTimeDate+0xa0>
			else if(b==0b00000001)
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9c 81       	ldd	r25, Y+4	; 0x04
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	91 05       	cpc	r25, r1
     44e:	21 f4       	brne	.+8      	; 0x458 <ReadTimeDate+0xa0>
				b=10;
     450:	8a e0       	ldi	r24, 0x0A	; 10
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9c 83       	std	Y+4, r25	; 0x04
     456:	8b 83       	std	Y+3, r24	; 0x03
			TimeDate[i]=a+b;
     458:	28 85       	ldd	r18, Y+8	; 0x08
     45a:	39 85       	ldd	r19, Y+9	; 0x09
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	9c 81       	ldd	r25, Y+4	; 0x04
     460:	28 0f       	add	r18, r24
     462:	39 1f       	adc	r19, r25
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	ae 01       	movw	r20, r28
     46e:	4f 5f       	subi	r20, 0xFF	; 255
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	84 0f       	add	r24, r20
     474:	95 1f       	adc	r25, r21
     476:	41 96       	adiw	r24, 0x11	; 17
     478:	fc 01       	movw	r30, r24
     47a:	31 83       	std	Z+1, r19	; 0x01
     47c:	20 83       	st	Z, r18
     47e:	b7 c0       	rjmp	.+366    	; 0x5ee <ReadTimeDate+0x236>
		}
		else if(i==4)
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	84 30       	cpi	r24, 0x04	; 4
     486:	91 05       	cpc	r25, r1
     488:	61 f5       	brne	.+88     	; 0x4e2 <ReadTimeDate+0x12a>
		{
			int b=(n & 0b00110000)>>4;
     48a:	8f 81       	ldd	r24, Y+7	; 0x07
     48c:	88 2f       	mov	r24, r24
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	80 73       	andi	r24, 0x30	; 48
     492:	90 70       	andi	r25, 0x00	; 0
     494:	95 95       	asr	r25
     496:	87 95       	ror	r24
     498:	95 95       	asr	r25
     49a:	87 95       	ror	r24
     49c:	95 95       	asr	r25
     49e:	87 95       	ror	r24
     4a0:	95 95       	asr	r25
     4a2:	87 95       	ror	r24
     4a4:	9b 87       	std	Y+11, r25	; 0x0b
     4a6:	8a 87       	std	Y+10, r24	; 0x0a
			TimeDate[i]=a+b*10;
     4a8:	8a 85       	ldd	r24, Y+10	; 0x0a
     4aa:	9b 85       	ldd	r25, Y+11	; 0x0b
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	9c 01       	movw	r18, r24
     4b2:	22 0f       	add	r18, r18
     4b4:	33 1f       	adc	r19, r19
     4b6:	22 0f       	add	r18, r18
     4b8:	33 1f       	adc	r19, r19
     4ba:	28 0f       	add	r18, r24
     4bc:	39 1f       	adc	r19, r25
     4be:	88 85       	ldd	r24, Y+8	; 0x08
     4c0:	99 85       	ldd	r25, Y+9	; 0x09
     4c2:	28 0f       	add	r18, r24
     4c4:	39 1f       	adc	r19, r25
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	ae 01       	movw	r20, r28
     4d0:	4f 5f       	subi	r20, 0xFF	; 255
     4d2:	5f 4f       	sbci	r21, 0xFF	; 255
     4d4:	84 0f       	add	r24, r20
     4d6:	95 1f       	adc	r25, r21
     4d8:	41 96       	adiw	r24, 0x11	; 17
     4da:	fc 01       	movw	r30, r24
     4dc:	31 83       	std	Z+1, r19	; 0x01
     4de:	20 83       	st	Z, r18
     4e0:	86 c0       	rjmp	.+268    	; 0x5ee <ReadTimeDate+0x236>
		}
		else if(i==5)
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	85 30       	cpi	r24, 0x05	; 5
     4e8:	91 05       	cpc	r25, r1
     4ea:	61 f5       	brne	.+88     	; 0x544 <ReadTimeDate+0x18c>
		{
			int b=(n & 0b00010000)>>4;
     4ec:	8f 81       	ldd	r24, Y+7	; 0x07
     4ee:	88 2f       	mov	r24, r24
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	80 71       	andi	r24, 0x10	; 16
     4f4:	90 70       	andi	r25, 0x00	; 0
     4f6:	95 95       	asr	r25
     4f8:	87 95       	ror	r24
     4fa:	95 95       	asr	r25
     4fc:	87 95       	ror	r24
     4fe:	95 95       	asr	r25
     500:	87 95       	ror	r24
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	9d 87       	std	Y+13, r25	; 0x0d
     508:	8c 87       	std	Y+12, r24	; 0x0c
			TimeDate[i]=a+b*10;
     50a:	8c 85       	ldd	r24, Y+12	; 0x0c
     50c:	9d 85       	ldd	r25, Y+13	; 0x0d
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	9c 01       	movw	r18, r24
     514:	22 0f       	add	r18, r18
     516:	33 1f       	adc	r19, r19
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	28 0f       	add	r18, r24
     51e:	39 1f       	adc	r19, r25
     520:	88 85       	ldd	r24, Y+8	; 0x08
     522:	99 85       	ldd	r25, Y+9	; 0x09
     524:	28 0f       	add	r18, r24
     526:	39 1f       	adc	r19, r25
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	ae 01       	movw	r20, r28
     532:	4f 5f       	subi	r20, 0xFF	; 255
     534:	5f 4f       	sbci	r21, 0xFF	; 255
     536:	84 0f       	add	r24, r20
     538:	95 1f       	adc	r25, r21
     53a:	41 96       	adiw	r24, 0x11	; 17
     53c:	fc 01       	movw	r30, r24
     53e:	31 83       	std	Z+1, r19	; 0x01
     540:	20 83       	st	Z, r18
     542:	55 c0       	rjmp	.+170    	; 0x5ee <ReadTimeDate+0x236>
		}
		else if(i==6)
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	86 30       	cpi	r24, 0x06	; 6
     54a:	91 05       	cpc	r25, r1
     54c:	29 f5       	brne	.+74     	; 0x598 <ReadTimeDate+0x1e0>
		{
			int b=(n & 0b11110000)>>4;
     54e:	8f 81       	ldd	r24, Y+7	; 0x07
     550:	82 95       	swap	r24
     552:	8f 70       	andi	r24, 0x0F	; 15
     554:	88 2f       	mov	r24, r24
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	90 70       	andi	r25, 0x00	; 0
     55a:	9f 87       	std	Y+15, r25	; 0x0f
     55c:	8e 87       	std	Y+14, r24	; 0x0e
			TimeDate[i]=a+b*10;
     55e:	8e 85       	ldd	r24, Y+14	; 0x0e
     560:	9f 85       	ldd	r25, Y+15	; 0x0f
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	9c 01       	movw	r18, r24
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	28 0f       	add	r18, r24
     572:	39 1f       	adc	r19, r25
     574:	88 85       	ldd	r24, Y+8	; 0x08
     576:	99 85       	ldd	r25, Y+9	; 0x09
     578:	28 0f       	add	r18, r24
     57a:	39 1f       	adc	r19, r25
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	ae 01       	movw	r20, r28
     586:	4f 5f       	subi	r20, 0xFF	; 255
     588:	5f 4f       	sbci	r21, 0xFF	; 255
     58a:	84 0f       	add	r24, r20
     58c:	95 1f       	adc	r25, r21
     58e:	41 96       	adiw	r24, 0x11	; 17
     590:	fc 01       	movw	r30, r24
     592:	31 83       	std	Z+1, r19	; 0x01
     594:	20 83       	st	Z, r18
     596:	2b c0       	rjmp	.+86     	; 0x5ee <ReadTimeDate+0x236>
		}
		else
		{	
			int b=(n & 0b01110000)>>4;
     598:	8f 81       	ldd	r24, Y+7	; 0x07
     59a:	88 2f       	mov	r24, r24
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	80 77       	andi	r24, 0x70	; 112
     5a0:	90 70       	andi	r25, 0x00	; 0
     5a2:	95 95       	asr	r25
     5a4:	87 95       	ror	r24
     5a6:	95 95       	asr	r25
     5a8:	87 95       	ror	r24
     5aa:	95 95       	asr	r25
     5ac:	87 95       	ror	r24
     5ae:	95 95       	asr	r25
     5b0:	87 95       	ror	r24
     5b2:	99 8b       	std	Y+17, r25	; 0x11
     5b4:	88 8b       	std	Y+16, r24	; 0x10
			TimeDate[i]=a+b*10;	
     5b6:	88 89       	ldd	r24, Y+16	; 0x10
     5b8:	99 89       	ldd	r25, Y+17	; 0x11
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	9c 01       	movw	r18, r24
     5c0:	22 0f       	add	r18, r18
     5c2:	33 1f       	adc	r19, r19
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	28 0f       	add	r18, r24
     5ca:	39 1f       	adc	r19, r25
     5cc:	88 85       	ldd	r24, Y+8	; 0x08
     5ce:	99 85       	ldd	r25, Y+9	; 0x09
     5d0:	28 0f       	add	r18, r24
     5d2:	39 1f       	adc	r19, r25
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	ae 01       	movw	r20, r28
     5de:	4f 5f       	subi	r20, 0xFF	; 255
     5e0:	5f 4f       	sbci	r21, 0xFF	; 255
     5e2:	84 0f       	add	r24, r20
     5e4:	95 1f       	adc	r25, r21
     5e6:	41 96       	adiw	r24, 0x11	; 17
     5e8:	fc 01       	movw	r30, r24
     5ea:	31 83       	std	Z+1, r19	; 0x01
     5ec:	20 83       	st	Z, r18
char* ReadTimeDate()
{
	char * temp = "";
	int TimeDate [7]; //second,minute,hour,null,day,month,year
	//int TimeDate[7] = {1,2,3,4,5,6,7};
	for(int i=0; i<=6;i++)
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	9a 83       	std	Y+2, r25	; 0x02
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	9a 81       	ldd	r25, Y+2	; 0x02
     5fc:	87 30       	cpi	r24, 0x07	; 7
     5fe:	91 05       	cpc	r25, r1
     600:	0c f4       	brge	.+2      	; 0x604 <ReadTimeDate+0x24c>
     602:	eb ce       	rjmp	.-554    	; 0x3da <ReadTimeDate+0x22>
			int b=(n & 0b01110000)>>4;
			TimeDate[i]=a+b*10;	
		}
	}
	
	return temp;
     604:	8d 81       	ldd	r24, Y+5	; 0x05
     606:	9e 81       	ldd	r25, Y+6	; 0x06
}
     608:	6f 96       	adiw	r28, 0x1f	; 31
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	08 95       	ret

0000061a <setup_spi>:
#ifdef __ARDUINO__
#include <wiring.h>
#endif

void setup_spi(uint8_t mode, int dord, int interrupt, uint8_t clock)
{
     61a:	df 93       	push	r29
     61c:	cf 93       	push	r28
     61e:	00 d0       	rcall	.+0      	; 0x620 <setup_spi+0x6>
     620:	00 d0       	rcall	.+0      	; 0x622 <setup_spi+0x8>
     622:	00 d0       	rcall	.+0      	; 0x624 <setup_spi+0xa>
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	7b 83       	std	Y+3, r23	; 0x03
     62c:	6a 83       	std	Y+2, r22	; 0x02
     62e:	5d 83       	std	Y+5, r21	; 0x05
     630:	4c 83       	std	Y+4, r20	; 0x04
     632:	2e 83       	std	Y+6, r18	; 0x06
  // specify pin directions for SPI pins on port B
	if (clock == SPI_SLAVE) // if slave SS and SCK is input
     634:	8e 81       	ldd	r24, Y+6	; 0x06
     636:	80 3f       	cpi	r24, 0xF0	; 240
     638:	29 f5       	brne	.+74     	; 0x684 <setup_spi+0x6a>
	{ 
		DDRB &= ~(1<<SPI_MOSI_PIN); // input
     63a:	84 e2       	ldi	r24, 0x24	; 36
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	24 e2       	ldi	r18, 0x24	; 36
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	f9 01       	movw	r30, r18
     644:	20 81       	ld	r18, Z
     646:	27 7f       	andi	r18, 0xF7	; 247
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
		DDRB |= (1<<SPI_MISO_PIN); // output
     64c:	84 e2       	ldi	r24, 0x24	; 36
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	24 e2       	ldi	r18, 0x24	; 36
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	f9 01       	movw	r30, r18
     656:	20 81       	ld	r18, Z
     658:	20 61       	ori	r18, 0x10	; 16
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
		DDRD &= ~(1<<SPI_SS_PIN); // input
     65e:	8a e2       	ldi	r24, 0x2A	; 42
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	2a e2       	ldi	r18, 0x2A	; 42
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	f9 01       	movw	r30, r18
     668:	20 81       	ld	r18, Z
     66a:	2f 7d       	andi	r18, 0xDF	; 223
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
		DDRB &= ~(1<<SPI_SCK_PIN);// input
     670:	84 e2       	ldi	r24, 0x24	; 36
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	24 e2       	ldi	r18, 0x24	; 36
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	2f 7d       	andi	r18, 0xDF	; 223
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
     682:	24 c0       	rjmp	.+72     	; 0x6cc <setup_spi+0xb2>
	} 
	else 
	{
		DDRB |= (1<<SPI_MOSI_PIN); // output
     684:	84 e2       	ldi	r24, 0x24	; 36
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	24 e2       	ldi	r18, 0x24	; 36
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	f9 01       	movw	r30, r18
     68e:	20 81       	ld	r18, Z
     690:	28 60       	ori	r18, 0x08	; 8
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
		DDRB &= ~(1<<SPI_MISO_PIN); // input
     696:	84 e2       	ldi	r24, 0x24	; 36
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	24 e2       	ldi	r18, 0x24	; 36
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	f9 01       	movw	r30, r18
     6a0:	20 81       	ld	r18, Z
     6a2:	2f 7e       	andi	r18, 0xEF	; 239
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18
		DDRB |= (1<<SPI_SCK_PIN);// output
     6a8:	84 e2       	ldi	r24, 0x24	; 36
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	24 e2       	ldi	r18, 0x24	; 36
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	20 81       	ld	r18, Z
     6b4:	20 62       	ori	r18, 0x20	; 32
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
		DDRD |= (1<<SPI_SS_PIN);// output
     6ba:	8a e2       	ldi	r24, 0x2A	; 42
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	2a e2       	ldi	r18, 0x2A	; 42
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	f9 01       	movw	r30, r18
     6c4:	20 81       	ld	r18, Z
     6c6:	20 62       	ori	r18, 0x20	; 32
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     6cc:	8c e4       	ldi	r24, 0x4C	; 76
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	2c 81       	ldd	r18, Y+4	; 0x04
     6d2:	3d 81       	ldd	r19, Y+5	; 0x05
     6d4:	21 15       	cp	r18, r1
     6d6:	31 05       	cpc	r19, r1
     6d8:	11 f0       	breq	.+4      	; 0x6de <setup_spi+0xc4>
     6da:	40 ec       	ldi	r20, 0xC0	; 192
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <setup_spi+0xc6>
     6de:	40 e4       	ldi	r20, 0x40	; 64
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
     6e0:	2a 81       	ldd	r18, Y+2	; 0x02
     6e2:	3b 81       	ldd	r19, Y+3	; 0x03
     6e4:	22 0f       	add	r18, r18
     6e6:	33 1f       	adc	r19, r19
     6e8:	22 95       	swap	r18
     6ea:	32 95       	swap	r19
     6ec:	30 7f       	andi	r19, 0xF0	; 240
     6ee:	32 27       	eor	r19, r18
     6f0:	20 7f       	andi	r18, 0xF0	; 240
     6f2:	32 27       	eor	r19, r18
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     6f4:	34 2f       	mov	r19, r20
     6f6:	32 2b       	or	r19, r18
     6f8:	2e 81       	ldd	r18, Y+6	; 0x06
     6fa:	20 3f       	cpi	r18, 0xF0	; 240
     6fc:	11 f0       	breq	.+4      	; 0x702 <setup_spi+0xe8>
     6fe:	20 e1       	ldi	r18, 0x10	; 16
     700:	01 c0       	rjmp	.+2      	; 0x704 <setup_spi+0xea>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	43 2f       	mov	r20, r19
     706:	42 2b       	or	r20, r18
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
     708:	29 81       	ldd	r18, Y+1	; 0x01
     70a:	22 2f       	mov	r18, r18
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	22 70       	andi	r18, 0x02	; 2
     710:	30 70       	andi	r19, 0x00	; 0
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     712:	21 15       	cp	r18, r1
     714:	31 05       	cpc	r19, r1
     716:	11 f0       	breq	.+4      	; 0x71c <setup_spi+0x102>
     718:	28 e0       	ldi	r18, 0x08	; 8
     71a:	01 c0       	rjmp	.+2      	; 0x71e <setup_spi+0x104>
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	42 2b       	or	r20, r18
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
		| (((mode & 0x01)) << CPHA) // clock timing mode CPHA
     720:	29 81       	ldd	r18, Y+1	; 0x01
     722:	22 2f       	mov	r18, r18
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	21 70       	andi	r18, 0x01	; 1
     728:	30 70       	andi	r19, 0x00	; 0
     72a:	22 0f       	add	r18, r18
     72c:	33 1f       	adc	r19, r19
     72e:	22 0f       	add	r18, r18
     730:	33 1f       	adc	r19, r19
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     732:	34 2f       	mov	r19, r20
     734:	32 2b       	or	r19, r18
     736:	2e 81       	ldd	r18, Y+6	; 0x06
     738:	22 70       	andi	r18, 0x02	; 2
     73a:	32 2b       	or	r19, r18
     73c:	2e 81       	ldd	r18, Y+6	; 0x06
     73e:	21 70       	andi	r18, 0x01	; 1
     740:	23 2b       	or	r18, r19
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
		| (((mode & 0x01)) << CPHA) // clock timing mode CPHA
		| (((clock & 0x02) == 2) << SPR1) // cpu clock divisor SPR1
		| ((clock & 0x01) << SPR0); // cpu clock divisor SPR0
	SPSR = (((clock & 0x04) == 4) << SPI2X); // clock divisor SPI2X
     746:	8d e4       	ldi	r24, 0x4D	; 77
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	2e 81       	ldd	r18, Y+6	; 0x06
     74c:	22 2f       	mov	r18, r18
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	24 70       	andi	r18, 0x04	; 4
     752:	30 70       	andi	r19, 0x00	; 0
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	21 15       	cp	r18, r1
     758:	31 05       	cpc	r19, r1
     75a:	09 f4       	brne	.+2      	; 0x75e <setup_spi+0x144>
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	fc 01       	movw	r30, r24
     760:	40 83       	st	Z, r20
}
     762:	26 96       	adiw	r28, 0x06	; 6
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	cf 91       	pop	r28
     770:	df 91       	pop	r29
     772:	08 95       	ret

00000774 <disable_spi>:

void disable_spi()
{
     774:	df 93       	push	r29
     776:	cf 93       	push	r28
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
  SPCR = 0;
     77c:	8c e4       	ldi	r24, 0x4C	; 76
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	10 82       	st	Z, r1
}
     784:	cf 91       	pop	r28
     786:	df 91       	pop	r29
     788:	08 95       	ret

0000078a <send_spi>:

uint8_t inline send_spi(uint8_t out)
{
     78a:	df 93       	push	r29
     78c:	cf 93       	push	r28
     78e:	0f 92       	push	r0
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	89 83       	std	Y+1, r24	; 0x01

  SPDR = out;
     796:	8e e4       	ldi	r24, 0x4E	; 78
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	29 81       	ldd	r18, Y+1	; 0x01
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
  while (!(SPSR & (1<<SPIF)));
     7a0:	00 00       	nop
     7a2:	8d e4       	ldi	r24, 0x4D	; 77
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	fc 01       	movw	r30, r24
     7a8:	80 81       	ld	r24, Z
     7aa:	88 23       	and	r24, r24
     7ac:	d4 f7       	brge	.-12     	; 0x7a2 <send_spi+0x18>
  return SPDR;
     7ae:	8e e4       	ldi	r24, 0x4E	; 78
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	80 81       	ld	r24, Z

}
     7b6:	0f 90       	pop	r0
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	08 95       	ret

000007be <received_from_spi>:

uint8_t received_from_spi(uint8_t data)
{
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	0f 92       	push	r0
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	89 83       	std	Y+1, r24	; 0x01
  SPDR = data;
     7ca:	8e e4       	ldi	r24, 0x4E	; 78
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	29 81       	ldd	r18, Y+1	; 0x01
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
  return SPDR;
     7d4:	8e e4       	ldi	r24, 0x4E	; 78
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	fc 01       	movw	r30, r24
     7da:	80 81       	ld	r24, Z
}
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <main>:
Time EEMEM lTime;
uint8_t EEMEM sBlinds = 0;
char buffer[12];

int main(void)
{
     7e4:	cf 92       	push	r12
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	df 93       	push	r29
     7f2:	cf 93       	push	r28
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	a2 97       	sbiw	r28, 0x22	; 34
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
	uint8_t hours = 0;
     804:	19 82       	std	Y+1, r1	; 0x01
	uint8_t min = 0;
     806:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t sec;
	uint8_t i = 0;
     808:	1b 8a       	std	Y+19, r1	; 0x13
	
	char cmd[15];
    DDRC |= (1 << DDC0);
     80a:	87 e2       	ldi	r24, 0x27	; 39
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	27 e2       	ldi	r18, 0x27	; 39
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	d9 01       	movw	r26, r18
     814:	2c 91       	ld	r18, X
     816:	21 60       	ori	r18, 0x01	; 1
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
	
	initAC(65);
     81c:	81 e4       	ldi	r24, 0x41	; 65
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 b9 09 	call	0x1372	; 0x1372 <initAC>
	//initL2F();
	initPIR();
     824:	0e 94 16 0a 	call	0x142c	; 0x142c <initPIR>
	//Bluetooth Init
	USART_Init(MYUBRR);
     828:	89 e1       	ldi	r24, 0x19	; 25
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <USART_Init>
	// turn on interrupts
    sei();
     830:	78 94       	sei
	print("Start");
     832:	00 d0       	rcall	.+0      	; 0x834 <main+0x50>
     834:	8d b7       	in	r24, 0x3d	; 61
     836:	9e b7       	in	r25, 0x3e	; 62
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	25 e0       	ldi	r18, 0x05	; 5
     83c:	31 e0       	ldi	r19, 0x01	; 1
     83e:	dc 01       	movw	r26, r24
     840:	2d 93       	st	X+, r18
     842:	3c 93       	st	X, r19
     844:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
	if(eeprom_read_byte(&sBlinds))
     84c:	82 e1       	ldi	r24, 0x12	; 18
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
     854:	88 23       	and	r24, r24
     856:	31 f0       	breq	.+12     	; 0x864 <main+0x80>
		blinds = eeprom_read_byte(&sBlinds);
     858:	82 e1       	ldi	r24, 0x12	; 18
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
     860:	80 93 6d 02 	sts	0x026D, r24
	#if DEBUG
	print("Wake set to %d:%d with dim value %d",
		eeprom_read_byte (&wake.hour),
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
    sei();
	print("Start");
	if(eeprom_read_byte(&sBlinds))
		blinds = eeprom_read_byte(&sBlinds);
	#if DEBUG
	print("Wake set to %d:%d with dim value %d",
     86c:	c8 2e       	mov	r12, r24
     86e:	dd 24       	eor	r13, r13
		eeprom_read_byte (&wake.hour),
		eeprom_read_byte (&wake.min),
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
    sei();
	print("Start");
	if(eeprom_read_byte(&sBlinds))
		blinds = eeprom_read_byte(&sBlinds);
	#if DEBUG
	print("Wake set to %d:%d with dim value %d",
     878:	e8 2e       	mov	r14, r24
     87a:	ff 24       	eor	r15, r15
		eeprom_read_byte (&wake.hour),
		eeprom_read_byte (&wake.min),
		eeprom_read_byte (&wake.dim),
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
    sei();
	print("Start");
	if(eeprom_read_byte(&sBlinds))
		blinds = eeprom_read_byte(&sBlinds);
	#if DEBUG
	print("Wake set to %d:%d with dim value %d",
     884:	08 2f       	mov	r16, r24
     886:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_read_byte (&wake.hour),
		eeprom_read_byte (&wake.min),
		eeprom_read_byte (&wake.dim),
		eeprom_read_byte (&wake.blinds));
     888:	83 e0       	ldi	r24, 0x03	; 3
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
    sei();
	print("Start");
	if(eeprom_read_byte(&sBlinds))
		blinds = eeprom_read_byte(&sBlinds);
	#if DEBUG
	print("Wake set to %d:%d with dim value %d",
     890:	28 2f       	mov	r18, r24
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	ed b7       	in	r30, 0x3d	; 61
     896:	fe b7       	in	r31, 0x3e	; 62
     898:	3a 97       	sbiw	r30, 0x0a	; 10
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	fe bf       	out	0x3e, r31	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	ed bf       	out	0x3d, r30	; 61
     8a4:	8d b7       	in	r24, 0x3d	; 61
     8a6:	9e b7       	in	r25, 0x3e	; 62
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	4b e0       	ldi	r20, 0x0B	; 11
     8ac:	51 e0       	ldi	r21, 0x01	; 1
     8ae:	dc 01       	movw	r26, r24
     8b0:	4d 93       	st	X+, r20
     8b2:	5c 93       	st	X, r21
     8b4:	fc 01       	movw	r30, r24
     8b6:	d3 82       	std	Z+3, r13	; 0x03
     8b8:	c2 82       	std	Z+2, r12	; 0x02
     8ba:	dc 01       	movw	r26, r24
     8bc:	15 96       	adiw	r26, 0x05	; 5
     8be:	fc 92       	st	X, r15
     8c0:	ee 92       	st	-X, r14
     8c2:	14 97       	sbiw	r26, 0x04	; 4
     8c4:	fc 01       	movw	r30, r24
     8c6:	17 83       	std	Z+7, r17	; 0x07
     8c8:	06 83       	std	Z+6, r16	; 0x06
     8ca:	dc 01       	movw	r26, r24
     8cc:	19 96       	adiw	r26, 0x09	; 9
     8ce:	3c 93       	st	X, r19
     8d0:	2e 93       	st	-X, r18
     8d2:	18 97       	sbiw	r26, 0x08	; 8
     8d4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     8d8:	ed b7       	in	r30, 0x3d	; 61
     8da:	fe b7       	in	r31, 0x3e	; 62
     8dc:	3a 96       	adiw	r30, 0x0a	; 10
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	fe bf       	out	0x3e, r31	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	ed bf       	out	0x3d, r30	; 61
		eeprom_read_byte (&wake.hour),
		eeprom_read_byte (&wake.min),
		eeprom_read_byte (&wake.dim),
		eeprom_read_byte (&wake.blinds));
	print("Leave set to %d:%d with dim value %d",
		eeprom_read_byte (&leave.hour),
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Wake set to %d:%d with dim value %d",
		eeprom_read_byte (&wake.hour),
		eeprom_read_byte (&wake.min),
		eeprom_read_byte (&wake.dim),
		eeprom_read_byte (&wake.blinds));
	print("Leave set to %d:%d with dim value %d",
     8f0:	c8 2e       	mov	r12, r24
     8f2:	dd 24       	eor	r13, r13
		eeprom_read_byte (&leave.hour),
		eeprom_read_byte (&leave.min),
     8f4:	85 e0       	ldi	r24, 0x05	; 5
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Wake set to %d:%d with dim value %d",
		eeprom_read_byte (&wake.hour),
		eeprom_read_byte (&wake.min),
		eeprom_read_byte (&wake.dim),
		eeprom_read_byte (&wake.blinds));
	print("Leave set to %d:%d with dim value %d",
     8fc:	e8 2e       	mov	r14, r24
     8fe:	ff 24       	eor	r15, r15
		eeprom_read_byte (&leave.hour),
		eeprom_read_byte (&leave.min),
		eeprom_read_byte (&leave.dim),
     900:	86 e0       	ldi	r24, 0x06	; 6
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Wake set to %d:%d with dim value %d",
		eeprom_read_byte (&wake.hour),
		eeprom_read_byte (&wake.min),
		eeprom_read_byte (&wake.dim),
		eeprom_read_byte (&wake.blinds));
	print("Leave set to %d:%d with dim value %d",
     908:	08 2f       	mov	r16, r24
     90a:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_read_byte (&leave.hour),
		eeprom_read_byte (&leave.min),
		eeprom_read_byte (&leave.dim),
		eeprom_read_byte (&leave.blinds));
     90c:	87 e0       	ldi	r24, 0x07	; 7
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Wake set to %d:%d with dim value %d",
		eeprom_read_byte (&wake.hour),
		eeprom_read_byte (&wake.min),
		eeprom_read_byte (&wake.dim),
		eeprom_read_byte (&wake.blinds));
	print("Leave set to %d:%d with dim value %d",
     914:	28 2f       	mov	r18, r24
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	8d b7       	in	r24, 0x3d	; 61
     91a:	9e b7       	in	r25, 0x3e	; 62
     91c:	0a 97       	sbiw	r24, 0x0a	; 10
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	9e bf       	out	0x3e, r25	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	8d bf       	out	0x3d, r24	; 61
     928:	8d b7       	in	r24, 0x3d	; 61
     92a:	9e b7       	in	r25, 0x3e	; 62
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	4f e2       	ldi	r20, 0x2F	; 47
     930:	51 e0       	ldi	r21, 0x01	; 1
     932:	dc 01       	movw	r26, r24
     934:	4d 93       	st	X+, r20
     936:	5c 93       	st	X, r21
     938:	fc 01       	movw	r30, r24
     93a:	d3 82       	std	Z+3, r13	; 0x03
     93c:	c2 82       	std	Z+2, r12	; 0x02
     93e:	dc 01       	movw	r26, r24
     940:	15 96       	adiw	r26, 0x05	; 5
     942:	fc 92       	st	X, r15
     944:	ee 92       	st	-X, r14
     946:	14 97       	sbiw	r26, 0x04	; 4
     948:	fc 01       	movw	r30, r24
     94a:	17 83       	std	Z+7, r17	; 0x07
     94c:	06 83       	std	Z+6, r16	; 0x06
     94e:	dc 01       	movw	r26, r24
     950:	19 96       	adiw	r26, 0x09	; 9
     952:	3c 93       	st	X, r19
     954:	2e 93       	st	-X, r18
     956:	18 97       	sbiw	r26, 0x08	; 8
     958:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     95c:	ed b7       	in	r30, 0x3d	; 61
     95e:	fe b7       	in	r31, 0x3e	; 62
     960:	3a 96       	adiw	r30, 0x0a	; 10
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	fe bf       	out	0x3e, r31	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	ed bf       	out	0x3d, r30	; 61
		eeprom_read_byte (&leave.hour),
		eeprom_read_byte (&leave.min),
		eeprom_read_byte (&leave.dim),
		eeprom_read_byte (&leave.blinds));
	print("Return set to %d:%d with dim value %d",
		eeprom_read_byte (&ret.hour),
     96c:	8c e0       	ldi	r24, 0x0C	; 12
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Leave set to %d:%d with dim value %d",
		eeprom_read_byte (&leave.hour),
		eeprom_read_byte (&leave.min),
		eeprom_read_byte (&leave.dim),
		eeprom_read_byte (&leave.blinds));
	print("Return set to %d:%d with dim value %d",
     974:	c8 2e       	mov	r12, r24
     976:	dd 24       	eor	r13, r13
		eeprom_read_byte (&ret.hour),
		eeprom_read_byte (&ret.min),
     978:	8d e0       	ldi	r24, 0x0D	; 13
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Leave set to %d:%d with dim value %d",
		eeprom_read_byte (&leave.hour),
		eeprom_read_byte (&leave.min),
		eeprom_read_byte (&leave.dim),
		eeprom_read_byte (&leave.blinds));
	print("Return set to %d:%d with dim value %d",
     980:	e8 2e       	mov	r14, r24
     982:	ff 24       	eor	r15, r15
		eeprom_read_byte (&ret.hour),
		eeprom_read_byte (&ret.min),
		eeprom_read_byte (&ret.dim),
     984:	8e e0       	ldi	r24, 0x0E	; 14
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Leave set to %d:%d with dim value %d",
		eeprom_read_byte (&leave.hour),
		eeprom_read_byte (&leave.min),
		eeprom_read_byte (&leave.dim),
		eeprom_read_byte (&leave.blinds));
	print("Return set to %d:%d with dim value %d",
     98c:	08 2f       	mov	r16, r24
     98e:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_read_byte (&ret.hour),
		eeprom_read_byte (&ret.min),
		eeprom_read_byte (&ret.dim),
		eeprom_read_byte (&ret.blinds));
     990:	8f e0       	ldi	r24, 0x0F	; 15
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Leave set to %d:%d with dim value %d",
		eeprom_read_byte (&leave.hour),
		eeprom_read_byte (&leave.min),
		eeprom_read_byte (&leave.dim),
		eeprom_read_byte (&leave.blinds));
	print("Return set to %d:%d with dim value %d",
     998:	28 2f       	mov	r18, r24
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	8d b7       	in	r24, 0x3d	; 61
     99e:	9e b7       	in	r25, 0x3e	; 62
     9a0:	0a 97       	sbiw	r24, 0x0a	; 10
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	9e bf       	out	0x3e, r25	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	8d bf       	out	0x3d, r24	; 61
     9ac:	8d b7       	in	r24, 0x3d	; 61
     9ae:	9e b7       	in	r25, 0x3e	; 62
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	44 e5       	ldi	r20, 0x54	; 84
     9b4:	51 e0       	ldi	r21, 0x01	; 1
     9b6:	dc 01       	movw	r26, r24
     9b8:	4d 93       	st	X+, r20
     9ba:	5c 93       	st	X, r21
     9bc:	fc 01       	movw	r30, r24
     9be:	d3 82       	std	Z+3, r13	; 0x03
     9c0:	c2 82       	std	Z+2, r12	; 0x02
     9c2:	dc 01       	movw	r26, r24
     9c4:	15 96       	adiw	r26, 0x05	; 5
     9c6:	fc 92       	st	X, r15
     9c8:	ee 92       	st	-X, r14
     9ca:	14 97       	sbiw	r26, 0x04	; 4
     9cc:	fc 01       	movw	r30, r24
     9ce:	17 83       	std	Z+7, r17	; 0x07
     9d0:	06 83       	std	Z+6, r16	; 0x06
     9d2:	dc 01       	movw	r26, r24
     9d4:	19 96       	adiw	r26, 0x09	; 9
     9d6:	3c 93       	st	X, r19
     9d8:	2e 93       	st	-X, r18
     9da:	18 97       	sbiw	r26, 0x08	; 8
     9dc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     9e0:	ed b7       	in	r30, 0x3d	; 61
     9e2:	fe b7       	in	r31, 0x3e	; 62
     9e4:	3a 96       	adiw	r30, 0x0a	; 10
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	fe bf       	out	0x3e, r31	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	ed bf       	out	0x3d, r30	; 61
		eeprom_read_byte (&ret.hour),
		eeprom_read_byte (&ret.min),
		eeprom_read_byte (&ret.dim),
		eeprom_read_byte (&ret.blinds));
    print("Sleep set to %d:%d with dim value %d",
		eeprom_read_byte (&sleep.hour),
     9f0:	88 e0       	ldi	r24, 0x08	; 8
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Return set to %d:%d with dim value %d",
		eeprom_read_byte (&ret.hour),
		eeprom_read_byte (&ret.min),
		eeprom_read_byte (&ret.dim),
		eeprom_read_byte (&ret.blinds));
    print("Sleep set to %d:%d with dim value %d",
     9f8:	c8 2e       	mov	r12, r24
     9fa:	dd 24       	eor	r13, r13
		eeprom_read_byte (&sleep.hour),
		eeprom_read_byte (&sleep.min),
     9fc:	89 e0       	ldi	r24, 0x09	; 9
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Return set to %d:%d with dim value %d",
		eeprom_read_byte (&ret.hour),
		eeprom_read_byte (&ret.min),
		eeprom_read_byte (&ret.dim),
		eeprom_read_byte (&ret.blinds));
    print("Sleep set to %d:%d with dim value %d",
     a04:	e8 2e       	mov	r14, r24
     a06:	ff 24       	eor	r15, r15
		eeprom_read_byte (&sleep.hour),
		eeprom_read_byte (&sleep.min),
		eeprom_read_byte (&sleep.dim),
     a08:	8a e0       	ldi	r24, 0x0A	; 10
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Return set to %d:%d with dim value %d",
		eeprom_read_byte (&ret.hour),
		eeprom_read_byte (&ret.min),
		eeprom_read_byte (&ret.dim),
		eeprom_read_byte (&ret.blinds));
    print("Sleep set to %d:%d with dim value %d",
     a10:	08 2f       	mov	r16, r24
     a12:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_read_byte (&sleep.hour),
		eeprom_read_byte (&sleep.min),
		eeprom_read_byte (&sleep.dim),
		eeprom_read_byte (&sleep.blinds));
     a14:	8b e0       	ldi	r24, 0x0B	; 11
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
	print("Return set to %d:%d with dim value %d",
		eeprom_read_byte (&ret.hour),
		eeprom_read_byte (&ret.min),
		eeprom_read_byte (&ret.dim),
		eeprom_read_byte (&ret.blinds));
    print("Sleep set to %d:%d with dim value %d",
     a1c:	28 2f       	mov	r18, r24
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	8d b7       	in	r24, 0x3d	; 61
     a22:	9e b7       	in	r25, 0x3e	; 62
     a24:	0a 97       	sbiw	r24, 0x0a	; 10
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	9e bf       	out	0x3e, r25	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	8d bf       	out	0x3d, r24	; 61
     a30:	8d b7       	in	r24, 0x3d	; 61
     a32:	9e b7       	in	r25, 0x3e	; 62
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	4a e7       	ldi	r20, 0x7A	; 122
     a38:	51 e0       	ldi	r21, 0x01	; 1
     a3a:	dc 01       	movw	r26, r24
     a3c:	4d 93       	st	X+, r20
     a3e:	5c 93       	st	X, r21
     a40:	fc 01       	movw	r30, r24
     a42:	d3 82       	std	Z+3, r13	; 0x03
     a44:	c2 82       	std	Z+2, r12	; 0x02
     a46:	dc 01       	movw	r26, r24
     a48:	15 96       	adiw	r26, 0x05	; 5
     a4a:	fc 92       	st	X, r15
     a4c:	ee 92       	st	-X, r14
     a4e:	14 97       	sbiw	r26, 0x04	; 4
     a50:	fc 01       	movw	r30, r24
     a52:	17 83       	std	Z+7, r17	; 0x07
     a54:	06 83       	std	Z+6, r16	; 0x06
     a56:	dc 01       	movw	r26, r24
     a58:	19 96       	adiw	r26, 0x09	; 9
     a5a:	3c 93       	st	X, r19
     a5c:	2e 93       	st	-X, r18
     a5e:	18 97       	sbiw	r26, 0x08	; 8
     a60:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     a64:	ed b7       	in	r30, 0x3d	; 61
     a66:	fe b7       	in	r31, 0x3e	; 62
     a68:	3a 96       	adiw	r30, 0x0a	; 10
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	fe bf       	out	0x3e, r31	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	ed bf       	out	0x3d, r30	; 61
		eeprom_read_byte (&sleep.blinds));
	#endif
    while(1)
    {
		
		checkPIR();
     a74:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <checkPIR>
		if(!set)
     a78:	80 91 01 01 	lds	r24, 0x0101
     a7c:	88 23       	and	r24, r24
     a7e:	09 f0       	breq	.+2      	; 0xa82 <__stack+0x183>
     a80:	89 c2       	rjmp	.+1298   	; 0xf94 <__stack+0x695>
		{
			strcpy(cmd, (const char*)command);
     a82:	ce 01       	movw	r24, r28
     a84:	44 96       	adiw	r24, 0x14	; 20
     a86:	29 ef       	ldi	r18, 0xF9	; 249
     a88:	32 e0       	ldi	r19, 0x02	; 2
     a8a:	b9 01       	movw	r22, r18
     a8c:	0e 94 be 10 	call	0x217c	; 0x217c <strcpy>
			print(cmd);
     a90:	00 d0       	rcall	.+0      	; 0xa92 <__stack+0x193>
     a92:	8d b7       	in	r24, 0x3d	; 61
     a94:	9e b7       	in	r25, 0x3e	; 62
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	9e 01       	movw	r18, r28
     a9a:	2c 5e       	subi	r18, 0xEC	; 236
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	dc 01       	movw	r26, r24
     aa0:	2d 93       	st	X+, r18
     aa2:	3c 93       	st	X, r19
     aa4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
			for(i = 0; i < strlen(cmd); ++i)
     aac:	1b 8a       	std	Y+19, r1	; 0x13
     aae:	64 c2       	rjmp	.+1224   	; 0xf78 <__stack+0x679>
			{
				switch (cmd[i])
     ab0:	8b 89       	ldd	r24, Y+19	; 0x13
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	9e 01       	movw	r18, r28
     ab8:	2c 5e       	subi	r18, 0xEC	; 236
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	82 0f       	add	r24, r18
     abe:	93 1f       	adc	r25, r19
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	8c 34       	cpi	r24, 0x4C	; 76
     aca:	91 05       	cpc	r25, r1
     acc:	09 f4       	brne	.+2      	; 0xad0 <__stack+0x1d1>
     ace:	c9 c1       	rjmp	.+914    	; 0xe62 <__stack+0x563>
     ad0:	8d 34       	cpi	r24, 0x4D	; 77
     ad2:	91 05       	cpc	r25, r1
     ad4:	64 f4       	brge	.+24     	; 0xaee <__stack+0x1ef>
     ad6:	83 34       	cpi	r24, 0x43	; 67
     ad8:	91 05       	cpc	r25, r1
     ada:	f1 f0       	breq	.+60     	; 0xb18 <__stack+0x219>
     adc:	84 34       	cpi	r24, 0x44	; 68
     ade:	91 05       	cpc	r25, r1
     ae0:	09 f4       	brne	.+2      	; 0xae4 <__stack+0x1e5>
     ae2:	e0 c0       	rjmp	.+448    	; 0xca4 <__stack+0x3a5>
     ae4:	82 34       	cpi	r24, 0x42	; 66
     ae6:	91 05       	cpc	r25, r1
     ae8:	09 f4       	brne	.+2      	; 0xaec <__stack+0x1ed>
     aea:	05 c1       	rjmp	.+522    	; 0xcf6 <__stack+0x3f7>
						eeprom_write_byte (&sleep.blinds, blinds);
						i++;
						break;
					default:
						//print("Default case");
						break;//do nothing
     aec:	42 c2       	rjmp	.+1156   	; 0xf72 <__stack+0x673>
		{
			strcpy(cmd, (const char*)command);
			print(cmd);
			for(i = 0; i < strlen(cmd); ++i)
			{
				switch (cmd[i])
     aee:	82 35       	cpi	r24, 0x52	; 82
     af0:	91 05       	cpc	r25, r1
     af2:	09 f4       	brne	.+2      	; 0xaf6 <__stack+0x1f7>
     af4:	e3 c1       	rjmp	.+966    	; 0xebc <__stack+0x5bd>
     af6:	83 35       	cpi	r24, 0x53	; 83
     af8:	91 05       	cpc	r25, r1
     afa:	2c f4       	brge	.+10     	; 0xb06 <__stack+0x207>
     afc:	8f 34       	cpi	r24, 0x4F	; 79
     afe:	91 05       	cpc	r25, r1
     b00:	09 f4       	brne	.+2      	; 0xb04 <__stack+0x205>
     b02:	51 c1       	rjmp	.+674    	; 0xda6 <__stack+0x4a7>
						eeprom_write_byte (&sleep.blinds, blinds);
						i++;
						break;
					default:
						//print("Default case");
						break;//do nothing
     b04:	36 c2       	rjmp	.+1132   	; 0xf72 <__stack+0x673>
		{
			strcpy(cmd, (const char*)command);
			print(cmd);
			for(i = 0; i < strlen(cmd); ++i)
			{
				switch (cmd[i])
     b06:	83 35       	cpi	r24, 0x53	; 83
     b08:	91 05       	cpc	r25, r1
     b0a:	09 f4       	brne	.+2      	; 0xb0e <__stack+0x20f>
     b0c:	04 c2       	rjmp	.+1032   	; 0xf16 <__stack+0x617>
     b0e:	87 35       	cpi	r24, 0x57	; 87
     b10:	91 05       	cpc	r25, r1
     b12:	09 f4       	brne	.+2      	; 0xb16 <__stack+0x217>
     b14:	79 c1       	rjmp	.+754    	; 0xe08 <__stack+0x509>
						eeprom_write_byte (&sleep.blinds, blinds);
						i++;
						break;
					default:
						//print("Default case");
						break;//do nothing
     b16:	2d c2       	rjmp	.+1114   	; 0xf72 <__stack+0x673>
			for(i = 0; i < strlen(cmd); ++i)
			{
				switch (cmd[i])
				{
					case 'C':	//Clock
						hours = getDigits(cmd, &i);
     b18:	ce 01       	movw	r24, r28
     b1a:	44 96       	adiw	r24, 0x14	; 20
     b1c:	9e 01       	movw	r18, r28
     b1e:	2d 5e       	subi	r18, 0xED	; 237
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	b9 01       	movw	r22, r18
     b24:	0e 94 67 08 	call	0x10ce	; 0x10ce <getDigits>
     b28:	89 83       	std	Y+1, r24	; 0x01
						min = getDigits(cmd, &i);
     b2a:	ce 01       	movw	r24, r28
     b2c:	44 96       	adiw	r24, 0x14	; 20
     b2e:	9e 01       	movw	r18, r28
     b30:	2d 5e       	subi	r18, 0xED	; 237
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	b9 01       	movw	r22, r18
     b36:	0e 94 67 08 	call	0x10ce	; 0x10ce <getDigits>
     b3a:	8a 83       	std	Y+2, r24	; 0x02
						sec = getDigits(cmd, &i);
     b3c:	ce 01       	movw	r24, r28
     b3e:	44 96       	adiw	r24, 0x14	; 20
     b40:	9e 01       	movw	r18, r28
     b42:	2d 5e       	subi	r18, 0xED	; 237
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	b9 01       	movw	r22, r18
     b48:	0e 94 67 08 	call	0x10ce	; 0x10ce <getDigits>
     b4c:	8b 83       	std	Y+3, r24	; 0x03
						#if DEBUG
						print("Clock set to %d:%d:%d", hours, min, sec );
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	68 2f       	mov	r22, r24
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	48 2f       	mov	r20, r24
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	8d b7       	in	r24, 0x3d	; 61
     b62:	9e b7       	in	r25, 0x3e	; 62
     b64:	08 97       	sbiw	r24, 0x08	; 8
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	9e bf       	out	0x3e, r25	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	8d bf       	out	0x3d, r24	; 61
     b70:	8d b7       	in	r24, 0x3d	; 61
     b72:	9e b7       	in	r25, 0x3e	; 62
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	ef e9       	ldi	r30, 0x9F	; 159
     b78:	f1 e0       	ldi	r31, 0x01	; 1
     b7a:	dc 01       	movw	r26, r24
     b7c:	ed 93       	st	X+, r30
     b7e:	fc 93       	st	X, r31
     b80:	fc 01       	movw	r30, r24
     b82:	73 83       	std	Z+3, r23	; 0x03
     b84:	62 83       	std	Z+2, r22	; 0x02
     b86:	dc 01       	movw	r26, r24
     b88:	15 96       	adiw	r26, 0x05	; 5
     b8a:	5c 93       	st	X, r21
     b8c:	4e 93       	st	-X, r20
     b8e:	14 97       	sbiw	r26, 0x04	; 4
     b90:	fc 01       	movw	r30, r24
     b92:	37 83       	std	Z+7, r19	; 0x07
     b94:	26 83       	std	Z+6, r18	; 0x06
     b96:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     b9a:	8d b7       	in	r24, 0x3d	; 61
     b9c:	9e b7       	in	r25, 0x3e	; 62
     b9e:	08 96       	adiw	r24, 0x08	; 8
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	9e bf       	out	0x3e, r25	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	8d bf       	out	0x3d, r24	; 61
						#endif
						i++;
     baa:	8b 89       	ldd	r24, Y+19	; 0x13
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	8b 8b       	std	Y+19, r24	; 0x13
						if(cmd[i+1] == '\0')	//Setting current time
     bb0:	8b 89       	ldd	r24, Y+19	; 0x13
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	9e 01       	movw	r18, r28
     bba:	2c 5e       	subi	r18, 0xEC	; 236
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
     bbe:	82 0f       	add	r24, r18
     bc0:	93 1f       	adc	r25, r19
     bc2:	dc 01       	movw	r26, r24
     bc4:	8c 91       	ld	r24, X
     bc6:	88 23       	and	r24, r24
     bc8:	09 f0       	breq	.+2      	; 0xbcc <__stack+0x2cd>
     bca:	d2 c1       	rjmp	.+932    	; 0xf70 <__stack+0x671>
						{
							#if DEBUG
							print("Time on chip: %02d:%02d:%02d\n", chour, cmin, csec);
     bcc:	80 91 04 01 	lds	r24, 0x0104
     bd0:	68 2f       	mov	r22, r24
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	80 91 77 02 	lds	r24, 0x0277
     bd8:	48 2f       	mov	r20, r24
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	80 91 78 02 	lds	r24, 0x0278
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	ed b7       	in	r30, 0x3d	; 61
     be6:	fe b7       	in	r31, 0x3e	; 62
     be8:	38 97       	sbiw	r30, 0x08	; 8
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	fe bf       	out	0x3e, r31	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	ed bf       	out	0x3d, r30	; 61
     bf4:	8d b7       	in	r24, 0x3d	; 61
     bf6:	9e b7       	in	r25, 0x3e	; 62
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	e5 eb       	ldi	r30, 0xB5	; 181
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	dc 01       	movw	r26, r24
     c00:	ed 93       	st	X+, r30
     c02:	fc 93       	st	X, r31
     c04:	fc 01       	movw	r30, r24
     c06:	73 83       	std	Z+3, r23	; 0x03
     c08:	62 83       	std	Z+2, r22	; 0x02
     c0a:	dc 01       	movw	r26, r24
     c0c:	15 96       	adiw	r26, 0x05	; 5
     c0e:	5c 93       	st	X, r21
     c10:	4e 93       	st	-X, r20
     c12:	14 97       	sbiw	r26, 0x04	; 4
     c14:	fc 01       	movw	r30, r24
     c16:	37 83       	std	Z+7, r19	; 0x07
     c18:	26 83       	std	Z+6, r18	; 0x06
     c1a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     c1e:	8d b7       	in	r24, 0x3d	; 61
     c20:	9e b7       	in	r25, 0x3e	; 62
     c22:	08 96       	adiw	r24, 0x08	; 8
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	9e bf       	out	0x3e, r25	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	8d bf       	out	0x3d, r24	; 61
							#endif
							chour = hours;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	80 93 04 01 	sts	0x0104, r24
							cmin = min;
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	80 93 77 02 	sts	0x0277, r24
							csec = sec;
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	80 93 78 02 	sts	0x0278, r24
							#if DEBUG
							print("New Time: %02d:%02d:%02d", chour, cmin, csec);
     c40:	80 91 04 01 	lds	r24, 0x0104
     c44:	68 2f       	mov	r22, r24
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 91 77 02 	lds	r24, 0x0277
     c4c:	48 2f       	mov	r20, r24
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	80 91 78 02 	lds	r24, 0x0278
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	ad b7       	in	r26, 0x3d	; 61
     c5a:	be b7       	in	r27, 0x3e	; 62
     c5c:	18 97       	sbiw	r26, 0x08	; 8
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	be bf       	out	0x3e, r27	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	ad bf       	out	0x3d, r26	; 61
     c68:	8d b7       	in	r24, 0x3d	; 61
     c6a:	9e b7       	in	r25, 0x3e	; 62
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	e3 ed       	ldi	r30, 0xD3	; 211
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	dc 01       	movw	r26, r24
     c74:	ed 93       	st	X+, r30
     c76:	fc 93       	st	X, r31
     c78:	fc 01       	movw	r30, r24
     c7a:	73 83       	std	Z+3, r23	; 0x03
     c7c:	62 83       	std	Z+2, r22	; 0x02
     c7e:	dc 01       	movw	r26, r24
     c80:	15 96       	adiw	r26, 0x05	; 5
     c82:	5c 93       	st	X, r21
     c84:	4e 93       	st	-X, r20
     c86:	14 97       	sbiw	r26, 0x04	; 4
     c88:	fc 01       	movw	r30, r24
     c8a:	37 83       	std	Z+7, r19	; 0x07
     c8c:	26 83       	std	Z+6, r18	; 0x06
     c8e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     c92:	8d b7       	in	r24, 0x3d	; 61
     c94:	9e b7       	in	r25, 0x3e	; 62
     c96:	08 96       	adiw	r24, 0x08	; 8
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	9e bf       	out	0x3e, r25	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	8d bf       	out	0x3d, r24	; 61
							#endif
							
						}							
						break;
     ca2:	67 c1       	rjmp	.+718    	; 0xf72 <__stack+0x673>
					case 'D':	//Dimness
						dim  = getDigits(cmd, &i);
     ca4:	ce 01       	movw	r24, r28
     ca6:	44 96       	adiw	r24, 0x14	; 20
     ca8:	9e 01       	movw	r18, r28
     caa:	2d 5e       	subi	r18, 0xED	; 237
     cac:	3f 4f       	sbci	r19, 0xFF	; 255
     cae:	b9 01       	movw	r22, r18
     cb0:	0e 94 67 08 	call	0x10ce	; 0x10ce <getDigits>
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	90 93 03 01 	sts	0x0103, r25
     cbc:	80 93 02 01 	sts	0x0102, r24
						#if DEBUG
						print("Dim set to %d", dim);
     cc0:	20 91 02 01 	lds	r18, 0x0102
     cc4:	30 91 03 01 	lds	r19, 0x0103
     cc8:	00 d0       	rcall	.+0      	; 0xcca <__stack+0x3cb>
     cca:	00 d0       	rcall	.+0      	; 0xccc <__stack+0x3cd>
     ccc:	8d b7       	in	r24, 0x3d	; 61
     cce:	9e b7       	in	r25, 0x3e	; 62
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	4c ee       	ldi	r20, 0xEC	; 236
     cd4:	51 e0       	ldi	r21, 0x01	; 1
     cd6:	dc 01       	movw	r26, r24
     cd8:	4d 93       	st	X+, r20
     cda:	5c 93       	st	X, r21
     cdc:	fc 01       	movw	r30, r24
     cde:	33 83       	std	Z+3, r19	; 0x03
     ce0:	22 83       	std	Z+2, r18	; 0x02
     ce2:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
						#endif
						i++;
     cee:	8b 89       	ldd	r24, Y+19	; 0x13
     cf0:	8f 5f       	subi	r24, 0xFF	; 255
     cf2:	8b 8b       	std	Y+19, r24	; 0x13
						break;
     cf4:	3e c1       	rjmp	.+636    	; 0xf72 <__stack+0x673>
					case 'B':	//Blinds
						#if DEBUG
						print("Blinds set to %d", blinds);
     cf6:	80 91 6d 02 	lds	r24, 0x026D
     cfa:	28 2f       	mov	r18, r24
     cfc:	33 27       	eor	r19, r19
     cfe:	27 fd       	sbrc	r18, 7
     d00:	30 95       	com	r19
     d02:	00 d0       	rcall	.+0      	; 0xd04 <__stack+0x405>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <__stack+0x407>
     d06:	8d b7       	in	r24, 0x3d	; 61
     d08:	9e b7       	in	r25, 0x3e	; 62
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	4a ef       	ldi	r20, 0xFA	; 250
     d0e:	51 e0       	ldi	r21, 0x01	; 1
     d10:	dc 01       	movw	r26, r24
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	fc 01       	movw	r30, r24
     d18:	33 83       	std	Z+3, r19	; 0x03
     d1a:	22 83       	std	Z+2, r18	; 0x02
     d1c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
						#endif
						blinds = getDigits(cmd, &i);
     d28:	ce 01       	movw	r24, r28
     d2a:	44 96       	adiw	r24, 0x14	; 20
     d2c:	9e 01       	movw	r18, r28
     d2e:	2d 5e       	subi	r18, 0xED	; 237
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	b9 01       	movw	r22, r18
     d34:	0e 94 67 08 	call	0x10ce	; 0x10ce <getDigits>
     d38:	80 93 6d 02 	sts	0x026D, r24
						int8_t cmpBlinds = (int8_t)eeprom_read_byte(&sBlinds) - blinds;
     d3c:	82 e1       	ldi	r24, 0x12	; 18
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__eerd_byte_m328p>
     d44:	98 2f       	mov	r25, r24
     d46:	80 91 6d 02 	lds	r24, 0x026D
     d4a:	f9 2f       	mov	r31, r25
     d4c:	f8 1b       	sub	r31, r24
     d4e:	8f 2f       	mov	r24, r31
     d50:	8c 83       	std	Y+4, r24	; 0x04
						#if DEBUG
						print("Blinds difference is %d", cmpBlinds);
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	28 2f       	mov	r18, r24
     d56:	33 27       	eor	r19, r19
     d58:	27 fd       	sbrc	r18, 7
     d5a:	30 95       	com	r19
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <__stack+0x45f>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <__stack+0x461>
     d60:	8d b7       	in	r24, 0x3d	; 61
     d62:	9e b7       	in	r25, 0x3e	; 62
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	4b e0       	ldi	r20, 0x0B	; 11
     d68:	52 e0       	ldi	r21, 0x02	; 2
     d6a:	dc 01       	movw	r26, r24
     d6c:	4d 93       	st	X+, r20
     d6e:	5c 93       	st	X, r21
     d70:	fc 01       	movw	r30, r24
     d72:	33 83       	std	Z+3, r19	; 0x03
     d74:	22 83       	std	Z+2, r18	; 0x02
     d76:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
						#endif
						if(cmpBlinds != 0)
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	88 23       	and	r24, r24
     d86:	19 f0       	breq	.+6      	; 0xd8e <__stack+0x48f>
						{
							varyBlinds(cmpBlinds);
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <varyBlinds>
						}
						eeprom_write_byte(&sBlinds, (uint8_t)blinds);
     d8e:	80 91 6d 02 	lds	r24, 0x026D
     d92:	28 2f       	mov	r18, r24
     d94:	82 e1       	ldi	r24, 0x12	; 18
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	62 2f       	mov	r22, r18
     d9a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						i++;
     d9e:	8b 89       	ldd	r24, Y+19	; 0x13
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	8b 8b       	std	Y+19, r24	; 0x13
						break;
     da4:	e6 c0       	rjmp	.+460    	; 0xf72 <__stack+0x673>
					case 'O':	//Toggle On/Off
						if(cmd[1] == 'F')	//OFF
     da6:	8d 89       	ldd	r24, Y+21	; 0x15
     da8:	86 34       	cpi	r24, 0x46	; 70
     daa:	51 f4       	brne	.+20     	; 0xdc0 <__stack+0x4c1>
						{
							dim = -1;
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	9f ef       	ldi	r25, 0xFF	; 255
     db0:	90 93 03 01 	sts	0x0103, r25
     db4:	80 93 02 01 	sts	0x0102, r24
							i = i + 2;
     db8:	8b 89       	ldd	r24, Y+19	; 0x13
     dba:	8e 5f       	subi	r24, 0xFE	; 254
     dbc:	8b 8b       	std	Y+19, r24	; 0x13
     dbe:	0c c0       	rjmp	.+24     	; 0xdd8 <__stack+0x4d9>
						}							
						else if (cmd[1] == 'N')	//ON
     dc0:	8d 89       	ldd	r24, Y+21	; 0x15
     dc2:	8e 34       	cpi	r24, 0x4E	; 78
     dc4:	49 f4       	brne	.+18     	; 0xdd8 <__stack+0x4d9>
						{
							dim = MAX;
     dc6:	8a e5       	ldi	r24, 0x5A	; 90
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	90 93 03 01 	sts	0x0103, r25
     dce:	80 93 02 01 	sts	0x0102, r24
							i++;
     dd2:	8b 89       	ldd	r24, Y+19	; 0x13
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	8b 8b       	std	Y+19, r24	; 0x13
						}
						print("Dim set to %d", dim);
     dd8:	20 91 02 01 	lds	r18, 0x0102
     ddc:	30 91 03 01 	lds	r19, 0x0103
     de0:	00 d0       	rcall	.+0      	; 0xde2 <__stack+0x4e3>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <__stack+0x4e5>
     de4:	8d b7       	in	r24, 0x3d	; 61
     de6:	9e b7       	in	r25, 0x3e	; 62
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	4c ee       	ldi	r20, 0xEC	; 236
     dec:	51 e0       	ldi	r21, 0x01	; 1
     dee:	dc 01       	movw	r26, r24
     df0:	4d 93       	st	X+, r20
     df2:	5c 93       	st	X, r21
     df4:	fc 01       	movw	r30, r24
     df6:	33 83       	std	Z+3, r19	; 0x03
     df8:	22 83       	std	Z+2, r18	; 0x02
     dfa:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
						break;
     e06:	b5 c0       	rjmp	.+362    	; 0xf72 <__stack+0x673>
					case 'W':
						#if DEBUG
						print("Wake!");
     e08:	00 d0       	rcall	.+0      	; 0xe0a <__stack+0x50b>
     e0a:	8d b7       	in	r24, 0x3d	; 61
     e0c:	9e b7       	in	r25, 0x3e	; 62
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	23 e2       	ldi	r18, 0x23	; 35
     e12:	32 e0       	ldi	r19, 0x02	; 2
     e14:	dc 01       	movw	r26, r24
     e16:	2d 93       	st	X+, r18
     e18:	3c 93       	st	X, r19
     e1a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
						#endif
						eeprom_write_byte (&wake.hour, hours); 
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	69 81       	ldd	r22, Y+1	; 0x01
     e28:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&wake.min, min); 
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	6a 81       	ldd	r22, Y+2	; 0x02
     e32:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&wake.dim, dim);
     e36:	80 91 02 01 	lds	r24, 0x0102
     e3a:	90 91 03 01 	lds	r25, 0x0103
     e3e:	28 2f       	mov	r18, r24
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	62 2f       	mov	r22, r18
     e46:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&wake.blinds, blinds);
     e4a:	80 91 6d 02 	lds	r24, 0x026D
     e4e:	28 2f       	mov	r18, r24
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	62 2f       	mov	r22, r18
     e56:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						i++;
     e5a:	8b 89       	ldd	r24, Y+19	; 0x13
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	8b 8b       	std	Y+19, r24	; 0x13
						break;
     e60:	88 c0       	rjmp	.+272    	; 0xf72 <__stack+0x673>
					case 'L':
						#if DEBUG
						print("Leave!");
     e62:	00 d0       	rcall	.+0      	; 0xe64 <__stack+0x565>
     e64:	8d b7       	in	r24, 0x3d	; 61
     e66:	9e b7       	in	r25, 0x3e	; 62
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	29 e2       	ldi	r18, 0x29	; 41
     e6c:	32 e0       	ldi	r19, 0x02	; 2
     e6e:	fc 01       	movw	r30, r24
     e70:	31 83       	std	Z+1, r19	; 0x01
     e72:	20 83       	st	Z, r18
     e74:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
						#endif
						eeprom_write_byte (&leave.hour, hours); 
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	69 81       	ldd	r22, Y+1	; 0x01
     e82:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&leave.min, min); 
     e86:	85 e0       	ldi	r24, 0x05	; 5
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	6a 81       	ldd	r22, Y+2	; 0x02
     e8c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&leave.dim, dim);
     e90:	80 91 02 01 	lds	r24, 0x0102
     e94:	90 91 03 01 	lds	r25, 0x0103
     e98:	28 2f       	mov	r18, r24
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	62 2f       	mov	r22, r18
     ea0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&leave.blinds, blinds);
     ea4:	80 91 6d 02 	lds	r24, 0x026D
     ea8:	28 2f       	mov	r18, r24
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	62 2f       	mov	r22, r18
     eb0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						i++;
     eb4:	8b 89       	ldd	r24, Y+19	; 0x13
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	8b 8b       	std	Y+19, r24	; 0x13
						break;	
     eba:	5b c0       	rjmp	.+182    	; 0xf72 <__stack+0x673>
					case 'R':
						#if DEBUG
						print("Return!");
     ebc:	00 d0       	rcall	.+0      	; 0xebe <__stack+0x5bf>
     ebe:	8d b7       	in	r24, 0x3d	; 61
     ec0:	9e b7       	in	r25, 0x3e	; 62
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	20 e3       	ldi	r18, 0x30	; 48
     ec6:	32 e0       	ldi	r19, 0x02	; 2
     ec8:	dc 01       	movw	r26, r24
     eca:	2d 93       	st	X+, r18
     ecc:	3c 93       	st	X, r19
     ece:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
						#endif
						eeprom_write_byte (&ret.hour, hours); 
     ed6:	8c e0       	ldi	r24, 0x0C	; 12
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	69 81       	ldd	r22, Y+1	; 0x01
     edc:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&ret.min, min); 
     ee0:	8d e0       	ldi	r24, 0x0D	; 13
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	6a 81       	ldd	r22, Y+2	; 0x02
     ee6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&ret.dim, dim);
     eea:	80 91 02 01 	lds	r24, 0x0102
     eee:	90 91 03 01 	lds	r25, 0x0103
     ef2:	28 2f       	mov	r18, r24
     ef4:	8e e0       	ldi	r24, 0x0E	; 14
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	62 2f       	mov	r22, r18
     efa:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&ret.blinds, blinds);
     efe:	80 91 6d 02 	lds	r24, 0x026D
     f02:	28 2f       	mov	r18, r24
     f04:	8f e0       	ldi	r24, 0x0F	; 15
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	62 2f       	mov	r22, r18
     f0a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						i++;
     f0e:	8b 89       	ldd	r24, Y+19	; 0x13
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	8b 8b       	std	Y+19, r24	; 0x13
						break;
     f14:	2e c0       	rjmp	.+92     	; 0xf72 <__stack+0x673>
					case 'S':
						#if DEBUG
						print("Sleep!");
     f16:	00 d0       	rcall	.+0      	; 0xf18 <__stack+0x619>
     f18:	8d b7       	in	r24, 0x3d	; 61
     f1a:	9e b7       	in	r25, 0x3e	; 62
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	28 e3       	ldi	r18, 0x38	; 56
     f20:	32 e0       	ldi	r19, 0x02	; 2
     f22:	fc 01       	movw	r30, r24
     f24:	31 83       	std	Z+1, r19	; 0x01
     f26:	20 83       	st	Z, r18
     f28:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
						#endif
						eeprom_write_byte (&sleep.hour, hours); 
     f30:	88 e0       	ldi	r24, 0x08	; 8
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	69 81       	ldd	r22, Y+1	; 0x01
     f36:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&sleep.min, min); 
     f3a:	89 e0       	ldi	r24, 0x09	; 9
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	6a 81       	ldd	r22, Y+2	; 0x02
     f40:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&sleep.dim, dim);
     f44:	80 91 02 01 	lds	r24, 0x0102
     f48:	90 91 03 01 	lds	r25, 0x0103
     f4c:	28 2f       	mov	r18, r24
     f4e:	8a e0       	ldi	r24, 0x0A	; 10
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	62 2f       	mov	r22, r18
     f54:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						eeprom_write_byte (&sleep.blinds, blinds);
     f58:	80 91 6d 02 	lds	r24, 0x026D
     f5c:	28 2f       	mov	r18, r24
     f5e:	8b e0       	ldi	r24, 0x0B	; 11
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	62 2f       	mov	r22, r18
     f64:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__eewr_byte_m328p>
						i++;
     f68:	8b 89       	ldd	r24, Y+19	; 0x13
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	8b 8b       	std	Y+19, r24	; 0x13
						break;
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <__stack+0x673>
							#if DEBUG
							print("New Time: %02d:%02d:%02d", chour, cmin, csec);
							#endif
							
						}							
						break;
     f70:	00 00       	nop
		checkPIR();
		if(!set)
		{
			strcpy(cmd, (const char*)command);
			print(cmd);
			for(i = 0; i < strlen(cmd); ++i)
     f72:	8b 89       	ldd	r24, Y+19	; 0x13
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	8b 8b       	std	Y+19, r24	; 0x13
     f78:	8b 89       	ldd	r24, Y+19	; 0x13
     f7a:	08 2f       	mov	r16, r24
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	ce 01       	movw	r24, r28
     f80:	44 96       	adiw	r24, 0x14	; 20
     f82:	0e 94 c5 10 	call	0x218a	; 0x218a <strlen>
     f86:	08 17       	cp	r16, r24
     f88:	19 07       	cpc	r17, r25
     f8a:	08 f4       	brcc	.+2      	; 0xf8e <__stack+0x68f>
     f8c:	91 cd       	rjmp	.-1246   	; 0xab0 <__stack+0x1b1>
						//print("Default case");
						break;//do nothing
				}
				
			}
			set = 1;		
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 01 01 	sts	0x0101, r24
		}
		
		
		//Clock Logic
		if( csec >= 60)				//Seconds no greater than 60
     f94:	80 91 78 02 	lds	r24, 0x0278
     f98:	8c 33       	cpi	r24, 0x3C	; 60
     f9a:	c0 f0       	brcs	.+48     	; 0xfcc <__stack+0x6cd>
		{
			csec = 0;
     f9c:	10 92 78 02 	sts	0x0278, r1
			cmin++;
     fa0:	80 91 77 02 	lds	r24, 0x0277
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	80 93 77 02 	sts	0x0277, r24
			if( cmin >= 60)			//Minutes no greater than 60
     faa:	80 91 77 02 	lds	r24, 0x0277
     fae:	8c 33       	cpi	r24, 0x3C	; 60
     fb0:	68 f0       	brcs	.+26     	; 0xfcc <__stack+0x6cd>
			{
				cmin = 0;
     fb2:	10 92 77 02 	sts	0x0277, r1
				chour++;
     fb6:	80 91 04 01 	lds	r24, 0x0104
     fba:	8f 5f       	subi	r24, 0xFF	; 255
     fbc:	80 93 04 01 	sts	0x0104, r24
				if( chour >= 23 )	//Hours no greater than 23
     fc0:	80 91 04 01 	lds	r24, 0x0104
     fc4:	87 31       	cpi	r24, 0x17	; 23
     fc6:	10 f0       	brcs	.+4      	; 0xfcc <__stack+0x6cd>
				{
					chour = 0;
     fc8:	10 92 04 01 	sts	0x0104, r1
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	aa e7       	ldi	r26, 0x7A	; 122
     fd2:	b4 e4       	ldi	r27, 0x44	; 68
     fd4:	8d 83       	std	Y+5, r24	; 0x05
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	af 83       	std	Y+7, r26	; 0x07
     fda:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     fdc:	6d 81       	ldd	r22, Y+5	; 0x05
     fde:	7e 81       	ldd	r23, Y+6	; 0x06
     fe0:	8f 81       	ldd	r24, Y+7	; 0x07
     fe2:	98 85       	ldd	r25, Y+8	; 0x08
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	4a e7       	ldi	r20, 0x7A	; 122
     fea:	55 e4       	ldi	r21, 0x45	; 69
     fec:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	89 87       	std	Y+9, r24	; 0x09
     ff6:	9a 87       	std	Y+10, r25	; 0x0a
     ff8:	ab 87       	std	Y+11, r26	; 0x0b
     ffa:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     ffc:	11 e0       	ldi	r17, 0x01	; 1
     ffe:	69 85       	ldd	r22, Y+9	; 0x09
    1000:	7a 85       	ldd	r23, Y+10	; 0x0a
    1002:	8b 85       	ldd	r24, Y+11	; 0x0b
    1004:	9c 85       	ldd	r25, Y+12	; 0x0c
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__cmpsf2>
    1012:	88 23       	and	r24, r24
    1014:	0c f0       	brlt	.+2      	; 0x1018 <__stack+0x719>
    1016:	10 e0       	ldi	r17, 0x00	; 0
    1018:	11 23       	and	r17, r17
    101a:	29 f0       	breq	.+10     	; 0x1026 <__stack+0x727>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9e 87       	std	Y+14, r25	; 0x0e
    1022:	8d 87       	std	Y+13, r24	; 0x0d
    1024:	46 c0       	rjmp	.+140    	; 0x10b2 <__stack+0x7b3>
	else if (__tmp > 65535)
    1026:	11 e0       	ldi	r17, 0x01	; 1
    1028:	69 85       	ldd	r22, Y+9	; 0x09
    102a:	7a 85       	ldd	r23, Y+10	; 0x0a
    102c:	8b 85       	ldd	r24, Y+11	; 0x0b
    102e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 0e 10 	call	0x201c	; 0x201c <__gesf2>
    103c:	18 16       	cp	r1, r24
    103e:	0c f0       	brlt	.+2      	; 0x1042 <__stack+0x743>
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	11 23       	and	r17, r17
    1044:	61 f1       	breq	.+88     	; 0x109e <__stack+0x79f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1046:	6d 81       	ldd	r22, Y+5	; 0x05
    1048:	7e 81       	ldd	r23, Y+6	; 0x06
    104a:	8f 81       	ldd	r24, Y+7	; 0x07
    104c:	98 85       	ldd	r25, Y+8	; 0x08
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e2       	ldi	r20, 0x20	; 32
    1054:	51 e4       	ldi	r21, 0x41	; 65
    1056:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9e 87       	std	Y+14, r25	; 0x0e
    106c:	8d 87       	std	Y+13, r24	; 0x0d
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <__stack+0x795>
    1070:	80 e9       	ldi	r24, 0x90	; 144
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	98 8b       	std	Y+16, r25	; 0x10
    1076:	8f 87       	std	Y+15, r24	; 0x0f
    1078:	8f 85       	ldd	r24, Y+15	; 0x0f
    107a:	98 89       	ldd	r25, Y+16	; 0x10
    107c:	8c 01       	movw	r16, r24
    107e:	c8 01       	movw	r24, r16
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <__stack+0x781>
    1084:	8c 01       	movw	r16, r24
    1086:	18 8b       	std	Y+16, r17	; 0x10
    1088:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108a:	8d 85       	ldd	r24, Y+13	; 0x0d
    108c:	9e 85       	ldd	r25, Y+14	; 0x0e
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9e 87       	std	Y+14, r25	; 0x0e
    1092:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	8d 85       	ldd	r24, Y+13	; 0x0d
    1096:	9e 85       	ldd	r25, Y+14	; 0x0e
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	51 f7       	brne	.-44     	; 0x1070 <__stack+0x771>
				}					
			}
		}
		
		_delay_ms(1000);
    }
    109c:	eb cc       	rjmp	.-1578   	; 0xa74 <__stack+0x175>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	69 85       	ldd	r22, Y+9	; 0x09
    10a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    10a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9e 87       	std	Y+14, r25	; 0x0e
    10b0:	8d 87       	std	Y+13, r24	; 0x0d
    10b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b6:	9a 8b       	std	Y+18, r25	; 0x12
    10b8:	89 8b       	std	Y+17, r24	; 0x11
    10ba:	89 89       	ldd	r24, Y+17	; 0x11
    10bc:	9a 89       	ldd	r25, Y+18	; 0x12
    10be:	8c 01       	movw	r16, r24
    10c0:	d8 01       	movw	r26, r16
    10c2:	11 97       	sbiw	r26, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <__stack+0x7c3>
    10c6:	8d 01       	movw	r16, r26
    10c8:	1a 8b       	std	Y+18, r17	; 0x12
    10ca:	09 8b       	std	Y+17, r16	; 0x11
    10cc:	d3 cc       	rjmp	.-1626   	; 0xa74 <__stack+0x175>

000010ce <getDigits>:
	                              
    return(0);
}

uint8_t getDigits(char * cmd, uint8_t * i)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <getDigits+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <getDigits+0x8>
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	9b 83       	std	Y+3, r25	; 0x03
    10de:	8a 83       	std	Y+2, r24	; 0x02
    10e0:	7d 83       	std	Y+5, r23	; 0x05
    10e2:	6c 83       	std	Y+4, r22	; 0x04
	*i = *i +2;
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	fc 01       	movw	r30, r24
    10ea:	80 81       	ld	r24, Z
    10ec:	28 2f       	mov	r18, r24
    10ee:	2e 5f       	subi	r18, 0xFE	; 254
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 83       	st	Z, r18
	uint8_t tmp = (cmd[*i]-48);
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	2a 81       	ldd	r18, Y+2	; 0x02
    1106:	3b 81       	ldd	r19, Y+3	; 0x03
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	fc 01       	movw	r30, r24
    110e:	80 81       	ld	r24, Z
    1110:	80 53       	subi	r24, 0x30	; 48
    1112:	89 83       	std	Y+1, r24	; 0x01
	if(cmd[*i+1] != '\0' && cmd[*i+1] != ':')
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	2a 81       	ldd	r18, Y+2	; 0x02
    1124:	3b 81       	ldd	r19, Y+3	; 0x03
    1126:	82 0f       	add	r24, r18
    1128:	93 1f       	adc	r25, r19
    112a:	fc 01       	movw	r30, r24
    112c:	80 81       	ld	r24, Z
    112e:	88 23       	and	r24, r24
    1130:	81 f1       	breq	.+96     	; 0x1192 <getDigits+0xc4>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	fc 01       	movw	r30, r24
    1138:	80 81       	ld	r24, Z
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	2a 81       	ldd	r18, Y+2	; 0x02
    1142:	3b 81       	ldd	r19, Y+3	; 0x03
    1144:	82 0f       	add	r24, r18
    1146:	93 1f       	adc	r25, r19
    1148:	fc 01       	movw	r30, r24
    114a:	80 81       	ld	r24, Z
    114c:	8a 33       	cpi	r24, 0x3A	; 58
    114e:	09 f1       	breq	.+66     	; 0x1192 <getDigits+0xc4>
	{
		*i = *i + 1;
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	2f 5f       	subi	r18, 0xFF	; 255
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	fc 01       	movw	r30, r24
    1162:	20 83       	st	Z, r18
		tmp *= 10;				//this is a tens value
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	88 0f       	add	r24, r24
    1168:	98 2f       	mov	r25, r24
    116a:	99 0f       	add	r25, r25
    116c:	99 0f       	add	r25, r25
    116e:	89 0f       	add	r24, r25
    1170:	89 83       	std	Y+1, r24	; 0x01
		tmp += (cmd[*i]-48);	//add ones
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	fc 01       	movw	r30, r24
    1178:	80 81       	ld	r24, Z
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	2a 81       	ldd	r18, Y+2	; 0x02
    1180:	3b 81       	ldd	r19, Y+3	; 0x03
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	fc 01       	movw	r30, r24
    1188:	90 81       	ld	r25, Z
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	89 0f       	add	r24, r25
    118e:	80 53       	subi	r24, 0x30	; 48
    1190:	89 83       	std	Y+1, r24	; 0x01
	}		
	return tmp;	
    1192:	89 81       	ldd	r24, Y+1	; 0x01
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <checkPIR>:


void checkPIR()
{
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	2e 97       	sbiw	r28, 0x0e	; 14
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
	if( !active && !(PINB & (1 << PINB0)))
    11bc:	80 91 6f 02 	lds	r24, 0x026F
    11c0:	88 23       	and	r24, r24
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <checkPIR+0x22>
    11c4:	ac c0       	rjmp	.+344    	; 0x131e <checkPIR+0x17a>
    11c6:	83 e2       	ldi	r24, 0x23	; 35
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	fc 01       	movw	r30, r24
    11cc:	80 81       	ld	r24, Z
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	81 70       	andi	r24, 0x01	; 1
    11d4:	90 70       	andi	r25, 0x00	; 0
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	09 f0       	breq	.+2      	; 0x11dc <checkPIR+0x38>
    11da:	a1 c0       	rjmp	.+322    	; 0x131e <checkPIR+0x17a>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a8 ec       	ldi	r26, 0xC8	; 200
    11e2:	b1 e4       	ldi	r27, 0x41	; 65
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	ab 83       	std	Y+3, r26	; 0x03
    11ea:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    11ec:	69 81       	ldd	r22, Y+1	; 0x01
    11ee:	7a 81       	ldd	r23, Y+2	; 0x02
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	4a e7       	ldi	r20, 0x7A	; 122
    11fa:	55 e4       	ldi	r21, 0x45	; 69
    11fc:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	af 83       	std	Y+7, r26	; 0x07
    120a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    120c:	11 e0       	ldi	r17, 0x01	; 1
    120e:	6d 81       	ldd	r22, Y+5	; 0x05
    1210:	7e 81       	ldd	r23, Y+6	; 0x06
    1212:	8f 81       	ldd	r24, Y+7	; 0x07
    1214:	98 85       	ldd	r25, Y+8	; 0x08
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	5f e3       	ldi	r21, 0x3F	; 63
    121e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__cmpsf2>
    1222:	88 23       	and	r24, r24
    1224:	0c f0       	brlt	.+2      	; 0x1228 <checkPIR+0x84>
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	11 23       	and	r17, r17
    122a:	29 f0       	breq	.+10     	; 0x1236 <checkPIR+0x92>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9a 87       	std	Y+10, r25	; 0x0a
    1232:	89 87       	std	Y+9, r24	; 0x09
    1234:	46 c0       	rjmp	.+140    	; 0x12c2 <checkPIR+0x11e>
	else if (__tmp > 65535)
    1236:	11 e0       	ldi	r17, 0x01	; 1
    1238:	6d 81       	ldd	r22, Y+5	; 0x05
    123a:	7e 81       	ldd	r23, Y+6	; 0x06
    123c:	8f 81       	ldd	r24, Y+7	; 0x07
    123e:	98 85       	ldd	r25, Y+8	; 0x08
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	3f ef       	ldi	r19, 0xFF	; 255
    1244:	4f e7       	ldi	r20, 0x7F	; 127
    1246:	57 e4       	ldi	r21, 0x47	; 71
    1248:	0e 94 0e 10 	call	0x201c	; 0x201c <__gesf2>
    124c:	18 16       	cp	r1, r24
    124e:	0c f0       	brlt	.+2      	; 0x1252 <checkPIR+0xae>
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	11 23       	and	r17, r17
    1254:	61 f1       	breq	.+88     	; 0x12ae <checkPIR+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	69 81       	ldd	r22, Y+1	; 0x01
    1258:	7a 81       	ldd	r23, Y+2	; 0x02
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9a 87       	std	Y+10, r25	; 0x0a
    127c:	89 87       	std	Y+9, r24	; 0x09
    127e:	12 c0       	rjmp	.+36     	; 0x12a4 <checkPIR+0x100>
    1280:	80 e9       	ldi	r24, 0x90	; 144
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	9c 87       	std	Y+12, r25	; 0x0c
    1286:	8b 87       	std	Y+11, r24	; 0x0b
    1288:	8b 85       	ldd	r24, Y+11	; 0x0b
    128a:	9c 85       	ldd	r25, Y+12	; 0x0c
    128c:	8c 01       	movw	r16, r24
    128e:	c8 01       	movw	r24, r16
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <checkPIR+0xec>
    1294:	8c 01       	movw	r16, r24
    1296:	1c 87       	std	Y+12, r17	; 0x0c
    1298:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9a 87       	std	Y+10, r25	; 0x0a
    12a2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	89 85       	ldd	r24, Y+9	; 0x09
    12a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	51 f7       	brne	.-44     	; 0x1280 <checkPIR+0xdc>
    12ac:	17 c0       	rjmp	.+46     	; 0x12dc <checkPIR+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	6d 81       	ldd	r22, Y+5	; 0x05
    12b0:	7e 81       	ldd	r23, Y+6	; 0x06
    12b2:	8f 81       	ldd	r24, Y+7	; 0x07
    12b4:	98 85       	ldd	r25, Y+8	; 0x08
    12b6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	9a 87       	std	Y+10, r25	; 0x0a
    12c0:	89 87       	std	Y+9, r24	; 0x09
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	9e 87       	std	Y+14, r25	; 0x0e
    12c8:	8d 87       	std	Y+13, r24	; 0x0d
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	8c 01       	movw	r16, r24
    12d0:	f8 01       	movw	r30, r16
    12d2:	31 97       	sbiw	r30, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <checkPIR+0x12e>
    12d6:	8f 01       	movw	r16, r30
    12d8:	1e 87       	std	Y+14, r17	; 0x0e
    12da:	0d 87       	std	Y+13, r16	; 0x0d
	{
		_delay_ms(25);
		if( !(PINB & (1 << PINB0)) && !active)
    12dc:	83 e2       	ldi	r24, 0x23	; 35
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	fc 01       	movw	r30, r24
    12e2:	80 81       	ld	r24, Z
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	81 70       	andi	r24, 0x01	; 1
    12ea:	90 70       	andi	r25, 0x00	; 0
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	b1 f5       	brne	.+108    	; 0x135c <checkPIR+0x1b8>
    12f0:	80 91 6f 02 	lds	r24, 0x026F
    12f4:	88 23       	and	r24, r24
    12f6:	89 f5       	brne	.+98     	; 0x135a <checkPIR+0x1b6>
		{
			#if DEBUG
			print(" !!");
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <checkPIR+0x156>
    12fa:	8d b7       	in	r24, 0x3d	; 61
    12fc:	9e b7       	in	r25, 0x3e	; 62
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	2f e3       	ldi	r18, 0x3F	; 63
    1302:	32 e0       	ldi	r19, 0x02	; 2
    1304:	fc 01       	movw	r30, r24
    1306:	31 83       	std	Z+1, r19	; 0x01
    1308:	20 83       	st	Z, r18
    130a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
			#endif
			active = 1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	80 93 6f 02 	sts	0x026F, r24
		
			tInactive = 0;
    1318:	10 92 70 02 	sts	0x0270, r1
void checkPIR()
{
	if( !active && !(PINB & (1 << PINB0)))
	{
		_delay_ms(25);
		if( !(PINB & (1 << PINB0)) && !active)
    131c:	1f c0       	rjmp	.+62     	; 0x135c <checkPIR+0x1b8>
			active = 1;
		
			tInactive = 0;
		}			
	}
	else if(active && (PINB & (1<<PINB0)))
    131e:	80 91 6f 02 	lds	r24, 0x026F
    1322:	88 23       	and	r24, r24
    1324:	d9 f0       	breq	.+54     	; 0x135c <checkPIR+0x1b8>
    1326:	83 e2       	ldi	r24, 0x23	; 35
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	fc 01       	movw	r30, r24
    132c:	80 81       	ld	r24, Z
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	90 70       	andi	r25, 0x00	; 0
    1336:	88 23       	and	r24, r24
    1338:	89 f0       	breq	.+34     	; 0x135c <checkPIR+0x1b8>
	{
		print(" No Motion");
    133a:	00 d0       	rcall	.+0      	; 0x133c <checkPIR+0x198>
    133c:	8d b7       	in	r24, 0x3d	; 61
    133e:	9e b7       	in	r25, 0x3e	; 62
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	23 e4       	ldi	r18, 0x43	; 67
    1344:	32 e0       	ldi	r19, 0x02	; 2
    1346:	fc 01       	movw	r30, r24
    1348:	31 83       	std	Z+1, r19	; 0x01
    134a:	20 83       	st	Z, r18
    134c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
		active = 0;
    1354:	10 92 6f 02 	sts	0x026F, r1
    1358:	01 c0       	rjmp	.+2      	; 0x135c <checkPIR+0x1b8>
void checkPIR()
{
	if( !active && !(PINB & (1 << PINB0)))
	{
		_delay_ms(25);
		if( !(PINB & (1 << PINB0)) && !active)
    135a:	00 00       	nop
	{
		print(" No Motion");
		active = 0;
		
	}	
}
    135c:	2e 96       	adiw	r28, 0x0e	; 14
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <initAC>:

void initAC(int dutycycle)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <initAC+0x6>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
	DDRC |= (1<<DDC0);
    1380:	87 e2       	ldi	r24, 0x27	; 39
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	27 e2       	ldi	r18, 0x27	; 39
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	f9 01       	movw	r30, r18
    138a:	20 81       	ld	r18, Z
    138c:	21 60       	ori	r18, 0x01	; 1
    138e:	fc 01       	movw	r30, r24
    1390:	20 83       	st	Z, r18
	
    OCR0A = 130; //cap of Timer0
    1392:	87 e4       	ldi	r24, 0x47	; 71
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	22 e8       	ldi	r18, 0x82	; 130
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
    OCR0B = dutycycle;
    139c:	88 e4       	ldi	r24, 0x48	; 72
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	29 81       	ldd	r18, Y+1	; 0x01
    13a2:	fc 01       	movw	r30, r24
    13a4:	20 83       	st	Z, r18
                
    //Timer
    //TCCR0A |= (1 << COM0A1);    // set non-inverting mode
    TCCR0A |= (1 << WGM01);     // set CTC (Clear Timer on Compare) Mode
    13a6:	84 e4       	ldi	r24, 0x44	; 68
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	24 e4       	ldi	r18, 0x44	; 68
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	f9 01       	movw	r30, r18
    13b0:	20 81       	ld	r18, Z
    13b2:	22 60       	ori	r18, 0x02	; 2
    13b4:	fc 01       	movw	r30, r24
    13b6:	20 83       	st	Z, r18
    TCCR0B |= (1 << CS01);      // set prescaler to 8 and starts PWM
    13b8:	85 e4       	ldi	r24, 0x45	; 69
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	25 e4       	ldi	r18, 0x45	; 69
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	22 60       	ori	r18, 0x02	; 2
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
    TIMSK0 = (1 << OCIE0A) | (1 << TOIE0);    //Enable OVF
    13ca:	8e e6       	ldi	r24, 0x6E	; 110
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	23 e0       	ldi	r18, 0x03	; 3
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
	
	//Interrupt
    EICRA = (1 << ISC01);
    13d4:	89 e6       	ldi	r24, 0x69	; 105
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	22 e0       	ldi	r18, 0x02	; 2
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
    EIMSK |= (1 << INT0);
    13de:	8d e3       	ldi	r24, 0x3D	; 61
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	2d e3       	ldi	r18, 0x3D	; 61
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	f9 01       	movw	r30, r18
    13e8:	20 81       	ld	r18, Z
    13ea:	21 60       	ori	r18, 0x01	; 1
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <initL2F>:

void initL2F()
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	//Uses same Timer as PIR
	
	//Interrupt
	PCICR |=  (1 << PCIE2);
    1402:	88 e6       	ldi	r24, 0x68	; 104
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	28 e6       	ldi	r18, 0x68	; 104
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	f9 01       	movw	r30, r18
    140c:	20 81       	ld	r18, Z
    140e:	24 60       	ori	r18, 0x04	; 4
    1410:	fc 01       	movw	r30, r24
    1412:	20 83       	st	Z, r18
	PCMSK2 |= (1 << PCINT20);	
    1414:	8d e6       	ldi	r24, 0x6D	; 109
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	2d e6       	ldi	r18, 0x6D	; 109
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	f9 01       	movw	r30, r18
    141e:	20 81       	ld	r18, Z
    1420:	20 61       	ori	r18, 0x10	; 16
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
}
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <initPIR>:

void initPIR()
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	PORTB |= (1 << PORTB0);
    1434:	85 e2       	ldi	r24, 0x25	; 37
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	25 e2       	ldi	r18, 0x25	; 37
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	f9 01       	movw	r30, r18
    143e:	20 81       	ld	r18, Z
    1440:	21 60       	ori	r18, 0x01	; 1
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
	//Timer
	TCCR1A |= (1 << COM1A0);
    1446:	80 e8       	ldi	r24, 0x80	; 128
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	20 e8       	ldi	r18, 0x80	; 128
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	f9 01       	movw	r30, r18
    1450:	20 81       	ld	r18, Z
    1452:	20 64       	ori	r18, 0x40	; 64
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12) | (1 << CS12);
    1458:	81 e8       	ldi	r24, 0x81	; 129
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	21 e8       	ldi	r18, 0x81	; 129
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	f9 01       	movw	r30, r18
    1462:	20 81       	ld	r18, Z
    1464:	2c 60       	ori	r18, 0x0C	; 12
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
	TIMSK1 |= (1 << OCIE1A);
    146a:	8f e6       	ldi	r24, 0x6F	; 111
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	2f e6       	ldi	r18, 0x6F	; 111
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	f9 01       	movw	r30, r18
    1474:	20 81       	ld	r18, Z
    1476:	22 60       	ori	r18, 0x02	; 2
    1478:	fc 01       	movw	r30, r24
    147a:	20 83       	st	Z, r18
	OCR1A = 0xF423;							//sets a 1Hz Timer
    147c:	88 e8       	ldi	r24, 0x88	; 136
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	23 e2       	ldi	r18, 0x23	; 35
    1482:	34 ef       	ldi	r19, 0xF4	; 244
    1484:	fc 01       	movw	r30, r24
    1486:	31 83       	std	Z+1, r19	; 0x01
    1488:	20 83       	st	Z, r18
	
	//Interrupt
	//PCICR |= (1 << PCIE0);
	//PCMSK0 |= (1 << PCINT0);
}
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <initServo>:

void initServo() 
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1 << PORTB1);
    1498:	84 e2       	ldi	r24, 0x24	; 36
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	24 e2       	ldi	r18, 0x24	; 36
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	f9 01       	movw	r30, r18
    14a2:	20 81       	ld	r18, Z
    14a4:	22 60       	ori	r18, 0x02	; 2
    14a6:	fc 01       	movw	r30, r24
    14a8:	20 83       	st	Z, r18
	//// clear on compare, fast PWM, TOP=ICR1 (WGM13/WGM12 in TCCR1B)
	//TCCR1A = (1 << COM1A1) | (1 << WGM11);
	//// prescaler 1024 (and WGM12 and WGM13)
	//TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10) | (1 << CS12); 
	//ICR1 = 250;
	TCNT2 = 0;
    14aa:	82 eb       	ldi	r24, 0xB2	; 178
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	fc 01       	movw	r30, r24
    14b0:	10 82       	st	Z, r1
	
	
	
	TCCR2A = 0;
    14b2:	80 eb       	ldi	r24, 0xB0	; 176
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	fc 01       	movw	r30, r24
    14b8:	10 82       	st	Z, r1
	//prescalar /1024	
	OCR2A = 1;
    14ba:	83 eb       	ldi	r24, 0xB3	; 179
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	fc 01       	movw	r30, r24
    14c2:	20 83       	st	Z, r18
	TIMSK2 = (1 << OCIE2A) | (1 << TOIE2);  //Enable OVF
    14c4:	80 e7       	ldi	r24, 0x70	; 112
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	23 e0       	ldi	r18, 0x03	; 3
    14ca:	fc 01       	movw	r30, r24
    14cc:	20 83       	st	Z, r18
} 
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <varyBlinds>:

void static inline varyBlinds(int8_t percent) 
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <varyBlinds+0x6>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8b 83       	std	Y+3, r24	; 0x03
	int16_t time = percent*(CLOSE_TIME/100);
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	99 27       	eor	r25, r25
    14e6:	87 fd       	sbrc	r24, 7
    14e8:	90 95       	com	r25
    14ea:	9c 01       	movw	r18, r24
    14ec:	22 0f       	add	r18, r18
    14ee:	33 1f       	adc	r19, r19
    14f0:	28 0f       	add	r18, r24
    14f2:	39 1f       	adc	r19, r25
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
	sActive = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	80 93 6e 02 	sts	0x026E, r24
	#if DEBUG
	print("Blinds closing for %d ms", time);
    150e:	00 d0       	rcall	.+0      	; 0x1510 <varyBlinds+0x3c>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <varyBlinds+0x3e>
    1512:	8d b7       	in	r24, 0x3d	; 61
    1514:	9e b7       	in	r25, 0x3e	; 62
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	2e e4       	ldi	r18, 0x4E	; 78
    151a:	32 e0       	ldi	r19, 0x02	; 2
    151c:	fc 01       	movw	r30, r24
    151e:	31 83       	std	Z+1, r19	; 0x01
    1520:	20 83       	st	Z, r18
    1522:	29 81       	ldd	r18, Y+1	; 0x01
    1524:	3a 81       	ldd	r19, Y+2	; 0x02
    1526:	fc 01       	movw	r30, r24
    1528:	33 83       	std	Z+3, r19	; 0x03
    152a:	22 83       	std	Z+2, r18	; 0x02
    152c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
	#endif
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
    1538:	81 eb       	ldi	r24, 0xB1	; 177
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	27 e0       	ldi	r18, 0x07	; 7
    153e:	fc 01       	movw	r30, r24
    1540:	20 83       	st	Z, r18
	if(time > 0)
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	18 16       	cp	r1, r24
    1548:	19 06       	cpc	r1, r25
    154a:	34 f4       	brge	.+12     	; 0x1558 <varyBlinds+0x84>
	{
		OCR2A = SERVO_FWD;
    154c:	83 eb       	ldi	r24, 0xB3	; 179
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	2a e0       	ldi	r18, 0x0A	; 10
    1552:	fc 01       	movw	r30, r24
    1554:	20 83       	st	Z, r18
    1556:	0c c0       	rjmp	.+24     	; 0x1570 <varyBlinds+0x9c>
	}		
	else
	{
		OCR2A = SERVO_REV;
    1558:	83 eb       	ldi	r24, 0xB3	; 179
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	2f e2       	ldi	r18, 0x2F	; 47
    155e:	fc 01       	movw	r30, r24
    1560:	20 83       	st	Z, r18
		time *= -1;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	90 95       	com	r25
    1568:	81 95       	neg	r24
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	9a 83       	std	Y+2, r25	; 0x02
    156e:	89 83       	std	Y+1, r24	; 0x01
	}		
	delay_ms(time);
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <delay_ms>
	sActive = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	80 93 6e 02 	sts	0x026E, r24
	TCCR2B = 0;
    157e:	81 eb       	ldi	r24, 0xB1	; 177
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	fc 01       	movw	r30, r24
    1584:	10 82       	st	Z, r1
	PORTB &= ~(1 << PORTB1);
    1586:	85 e2       	ldi	r24, 0x25	; 37
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	25 e2       	ldi	r18, 0x25	; 37
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	f9 01       	movw	r30, r18
    1590:	20 81       	ld	r18, Z
    1592:	2d 7f       	andi	r18, 0xFD	; 253
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <__vector_4>:


///////////////////////////
//---------PCINT Counter---
ISR(PCINT1_vect) 
{
    15a4:	1f 92       	push	r1
    15a6:	0f 92       	push	r0
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	0f 92       	push	r0
    15ac:	11 24       	eor	r1, r1
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	if(PINC & (1<<PINC3)) //detect Rising Edge
    15c2:	86 e2       	ldi	r24, 0x26	; 38
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	fc 01       	movw	r30, r24
    15c8:	80 81       	ld	r24, Z
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	88 70       	andi	r24, 0x08	; 8
    15d0:	90 70       	andi	r25, 0x00	; 0
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	99 f0       	breq	.+38     	; 0x15fc <__vector_4+0x58>
		NumChanges = NumChanges + 1;
    15d6:	80 91 71 02 	lds	r24, 0x0271
    15da:	90 91 72 02 	lds	r25, 0x0272
    15de:	a0 91 73 02 	lds	r26, 0x0273
    15e2:	b0 91 74 02 	lds	r27, 0x0274
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	a1 1d       	adc	r26, r1
    15ea:	b1 1d       	adc	r27, r1
    15ec:	80 93 71 02 	sts	0x0271, r24
    15f0:	90 93 72 02 	sts	0x0272, r25
    15f4:	a0 93 73 02 	sts	0x0273, r26
    15f8:	b0 93 74 02 	sts	0x0274, r27
		//PORTD ^= (1<<PORTD6);   //LED Alternates ON and OFF
		////delay_ms(2000);
		//PORTC ^= (1 << PORTC2); //[Follows the Input]		
} 
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	1f 90       	pop	r1
    1614:	18 95       	reti

00001616 <__vector_5>:

//L2F Detection
ISR(PCINT2_vect)
{
    1616:	1f 92       	push	r1
    1618:	0f 92       	push	r0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	0f 92       	push	r0
    161e:	11 24       	eor	r1, r1
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	if(PIND & (1<< PORTD4))
    1634:	89 e2       	ldi	r24, 0x29	; 41
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	fc 01       	movw	r30, r24
    163a:	80 81       	ld	r24, Z
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	80 71       	andi	r24, 0x10	; 16
    1642:	90 70       	andi	r25, 0x00	; 0
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	99 f0       	breq	.+38     	; 0x166e <__vector_5+0x58>
		NumChanges++;
    1648:	80 91 71 02 	lds	r24, 0x0271
    164c:	90 91 72 02 	lds	r25, 0x0272
    1650:	a0 91 73 02 	lds	r26, 0x0273
    1654:	b0 91 74 02 	lds	r27, 0x0274
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	a1 1d       	adc	r26, r1
    165c:	b1 1d       	adc	r27, r1
    165e:	80 93 71 02 	sts	0x0271, r24
    1662:	90 93 72 02 	sts	0x0272, r25
    1666:	a0 93 73 02 	sts	0x0273, r26
    166a:	b0 93 74 02 	sts	0x0274, r27
	//_delay_ms(50);
	
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0f 90       	pop	r0
    1684:	1f 90       	pop	r1
    1686:	18 95       	reti

00001688 <__vector_18>:

////////////////////////////
//-----Bluetooth Receive----
ISR(USART_RX_vect)
{
    1688:	1f 92       	push	r1
    168a:	0f 92       	push	r0
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	0f 92       	push	r0
    1690:	11 24       	eor	r1, r1
    1692:	2f 93       	push	r18
    1694:	3f 93       	push	r19
    1696:	4f 93       	push	r20
    1698:	5f 93       	push	r21
    169a:	6f 93       	push	r22
    169c:	7f 93       	push	r23
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	af 93       	push	r26
    16a4:	bf 93       	push	r27
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <__vector_18+0x28>
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	/* Get and return received data from buffer */
	
	uint8_t i = 0;
    16b4:	19 82       	std	Y+1, r1	; 0x01
	unsigned char received = 0;
    16b6:	1a 82       	std	Y+2, r1	; 0x02
	while ( !(UCSR0A & (1<<RXC0)) );
    16b8:	00 00       	nop
    16ba:	80 ec       	ldi	r24, 0xC0	; 192
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	fc 01       	movw	r30, r24
    16c0:	80 81       	ld	r24, Z
    16c2:	88 23       	and	r24, r24
    16c4:	d4 f7       	brge	.-12     	; 0x16ba <__vector_18+0x32>
	received = UDR0;
    16c6:	86 ec       	ldi	r24, 0xC6	; 198
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	fc 01       	movw	r30, r24
    16cc:	80 81       	ld	r24, Z
    16ce:	8a 83       	std	Y+2, r24	; 0x02
	while(received != ';')
    16d0:	1a c0       	rjmp	.+52     	; 0x1706 <__vector_18+0x7e>
	{
		#if DEBUG
		//print("!");
		#endif
		if( received != 10)
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	8a 30       	cpi	r24, 0x0A	; 10
    16d6:	b9 f0       	breq	.+46     	; 0x1706 <__vector_18+0x7e>
		{
			#if DEBUG
			//print(" %c at %d", received, i);
			#endif
			command[i] = received;			
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	88 2f       	mov	r24, r24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	87 50       	subi	r24, 0x07	; 7
    16e0:	9d 4f       	sbci	r25, 0xFD	; 253
    16e2:	2a 81       	ldd	r18, Y+2	; 0x02
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18
			i++;
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	8f 5f       	subi	r24, 0xFF	; 255
    16ec:	89 83       	std	Y+1, r24	; 0x01
			while ( !(UCSR0A & (1<<RXC0)) );
    16ee:	00 00       	nop
    16f0:	80 ec       	ldi	r24, 0xC0	; 192
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	fc 01       	movw	r30, r24
    16f6:	80 81       	ld	r24, Z
    16f8:	88 23       	and	r24, r24
    16fa:	d4 f7       	brge	.-12     	; 0x16f0 <__vector_18+0x68>
			received = UDR0;
    16fc:	86 ec       	ldi	r24, 0xC6	; 198
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	fc 01       	movw	r30, r24
    1702:	80 81       	ld	r24, Z
    1704:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t i = 0;
	unsigned char received = 0;
	while ( !(UCSR0A & (1<<RXC0)) );
	received = UDR0;
	while(received != ';')
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	8b 33       	cpi	r24, 0x3B	; 59
    170a:	19 f7       	brne	.-58     	; 0x16d2 <__vector_18+0x4a>
			i++;
			while ( !(UCSR0A & (1<<RXC0)) );
			received = UDR0;
		}
	}
	command[i] = '\0';
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	87 50       	subi	r24, 0x07	; 7
    1714:	9d 4f       	sbci	r25, 0xFD	; 253
    1716:	fc 01       	movw	r30, r24
    1718:	10 82       	st	Z, r1
	set = 0;
    171a:	10 92 01 01 	sts	0x0101, r1
	print((char *)command);
    171e:	00 d0       	rcall	.+0      	; 0x1720 <__vector_18+0x98>
    1720:	8d b7       	in	r24, 0x3d	; 61
    1722:	9e b7       	in	r25, 0x3e	; 62
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	29 ef       	ldi	r18, 0xF9	; 249
    1728:	32 e0       	ldi	r19, 0x02	; 2
    172a:	fc 01       	movw	r30, r24
    172c:	31 83       	std	Z+1, r19	; 0x01
    172e:	20 83       	st	Z, r18
    1730:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <print>
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
} 
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_14>:
 
//CREATED: 2/15/2012
//AC Lighting - Phase Control
ISR(TIMER0_COMPA_vect)
{
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	6f 93       	push	r22
    177a:	7f 93       	push	r23
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
    1780:	af 93       	push	r26
    1782:	bf 93       	push	r27
    1784:	ef 93       	push	r30
    1786:	ff 93       	push	r31
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	68 97       	sbiw	r28, 0x18	; 24
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	cd bf       	out	0x3d, r28	; 61
    if( zerocross == 1) 
    1796:	80 91 6c 02 	lds	r24, 0x026C
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	09 f0       	breq	.+2      	; 0x17a0 <__vector_14+0x3e>
    179e:	04 c1       	rjmp	.+520    	; 0x19a8 <__vector_14+0x246>
    {
        if( count >= dim )
    17a0:	80 91 02 01 	lds	r24, 0x0102
    17a4:	90 91 03 01 	lds	r25, 0x0103
    17a8:	9c 01       	movw	r18, r24
    17aa:	80 91 6a 02 	lds	r24, 0x026A
    17ae:	90 91 6b 02 	lds	r25, 0x026B
    17b2:	82 17       	cp	r24, r18
    17b4:	93 07       	cpc	r25, r19
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <__vector_14+0x58>
    17b8:	ee c0       	rjmp	.+476    	; 0x1996 <__vector_14+0x234>
        {
			
			PORTC |= (1 << PORTC0);
    17ba:	88 e2       	ldi	r24, 0x28	; 40
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	28 e2       	ldi	r18, 0x28	; 40
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	f9 01       	movw	r30, r18
    17c4:	20 81       	ld	r18, Z
    17c6:	21 60       	ori	r18, 0x01	; 1
    17c8:	fc 01       	movw	r30, r24
    17ca:	20 83       	st	Z, r18
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 e2       	ldi	r26, 0x20	; 32
    17d2:	b1 e4       	ldi	r27, 0x41	; 65
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	9a 83       	std	Y+2, r25	; 0x02
    17d8:	ab 83       	std	Y+3, r26	; 0x03
    17da:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    17dc:	69 81       	ldd	r22, Y+1	; 0x01
    17de:	7a 81       	ldd	r23, Y+2	; 0x02
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	2b ea       	ldi	r18, 0xAB	; 171
    17e6:	3a ea       	ldi	r19, 0xAA	; 170
    17e8:	4a ea       	ldi	r20, 0xAA	; 170
    17ea:	50 e4       	ldi	r21, 0x40	; 64
    17ec:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	af 83       	std	Y+7, r26	; 0x07
    17fa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    17fc:	11 e0       	ldi	r17, 0x01	; 1
    17fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1800:	7e 81       	ldd	r23, Y+6	; 0x06
    1802:	8f 81       	ldd	r24, Y+7	; 0x07
    1804:	98 85       	ldd	r25, Y+8	; 0x08
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__cmpsf2>
    1812:	88 23       	and	r24, r24
    1814:	0c f0       	brlt	.+2      	; 0x1818 <__vector_14+0xb6>
    1816:	10 e0       	ldi	r17, 0x00	; 0
    1818:	11 23       	and	r17, r17
    181a:	19 f0       	breq	.+6      	; 0x1822 <__vector_14+0xc0>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	89 87       	std	Y+9, r24	; 0x09
    1820:	a3 c0       	rjmp	.+326    	; 0x1968 <__vector_14+0x206>
	else if (__tmp > 255)
    1822:	11 e0       	ldi	r17, 0x01	; 1
    1824:	6d 81       	ldd	r22, Y+5	; 0x05
    1826:	7e 81       	ldd	r23, Y+6	; 0x06
    1828:	8f 81       	ldd	r24, Y+7	; 0x07
    182a:	98 85       	ldd	r25, Y+8	; 0x08
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	53 e4       	ldi	r21, 0x43	; 67
    1834:	0e 94 0e 10 	call	0x201c	; 0x201c <__gesf2>
    1838:	18 16       	cp	r1, r24
    183a:	0c f0       	brlt	.+2      	; 0x183e <__vector_14+0xdc>
    183c:	10 e0       	ldi	r17, 0x00	; 0
    183e:	11 23       	and	r17, r17
    1840:	09 f4       	brne	.+2      	; 0x1844 <__vector_14+0xe2>
    1842:	89 c0       	rjmp	.+274    	; 0x1956 <__vector_14+0x1f4>
	{
		_delay_ms(__us / 1000.0);
    1844:	69 81       	ldd	r22, Y+1	; 0x01
    1846:	7a 81       	ldd	r23, Y+2	; 0x02
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a e7       	ldi	r20, 0x7A	; 122
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__divsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8a 87       	std	Y+10, r24	; 0x0a
    185e:	9b 87       	std	Y+11, r25	; 0x0b
    1860:	ac 87       	std	Y+12, r26	; 0x0c
    1862:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1864:	6a 85       	ldd	r22, Y+10	; 0x0a
    1866:	7b 85       	ldd	r23, Y+11	; 0x0b
    1868:	8c 85       	ldd	r24, Y+12	; 0x0c
    186a:	9d 85       	ldd	r25, Y+13	; 0x0d
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a e7       	ldi	r20, 0x7A	; 122
    1872:	55 e4       	ldi	r21, 0x45	; 69
    1874:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8e 87       	std	Y+14, r24	; 0x0e
    187e:	9f 87       	std	Y+15, r25	; 0x0f
    1880:	a8 8b       	std	Y+16, r26	; 0x10
    1882:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1884:	11 e0       	ldi	r17, 0x01	; 1
    1886:	6e 85       	ldd	r22, Y+14	; 0x0e
    1888:	7f 85       	ldd	r23, Y+15	; 0x0f
    188a:	88 89       	ldd	r24, Y+16	; 0x10
    188c:	99 89       	ldd	r25, Y+17	; 0x11
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__cmpsf2>
    189a:	88 23       	and	r24, r24
    189c:	0c f0       	brlt	.+2      	; 0x18a0 <__vector_14+0x13e>
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	11 23       	and	r17, r17
    18a2:	29 f0       	breq	.+10     	; 0x18ae <__vector_14+0x14c>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9b 8b       	std	Y+19, r25	; 0x13
    18aa:	8a 8b       	std	Y+18, r24	; 0x12
    18ac:	46 c0       	rjmp	.+140    	; 0x193a <__vector_14+0x1d8>
	else if (__tmp > 65535)
    18ae:	11 e0       	ldi	r17, 0x01	; 1
    18b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    18b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    18b4:	88 89       	ldd	r24, Y+16	; 0x10
    18b6:	99 89       	ldd	r25, Y+17	; 0x11
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	57 e4       	ldi	r21, 0x47	; 71
    18c0:	0e 94 0e 10 	call	0x201c	; 0x201c <__gesf2>
    18c4:	18 16       	cp	r1, r24
    18c6:	0c f0       	brlt	.+2      	; 0x18ca <__vector_14+0x168>
    18c8:	10 e0       	ldi	r17, 0x00	; 0
    18ca:	11 23       	and	r17, r17
    18cc:	61 f1       	breq	.+88     	; 0x1926 <__vector_14+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	6a 85       	ldd	r22, Y+10	; 0x0a
    18d0:	7b 85       	ldd	r23, Y+11	; 0x0b
    18d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    18d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e2       	ldi	r20, 0x20	; 32
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9b 8b       	std	Y+19, r25	; 0x13
    18f4:	8a 8b       	std	Y+18, r24	; 0x12
    18f6:	12 c0       	rjmp	.+36     	; 0x191c <__vector_14+0x1ba>
    18f8:	80 e9       	ldi	r24, 0x90	; 144
    18fa:	91 e0       	ldi	r25, 0x01	; 1
    18fc:	9d 8b       	std	Y+21, r25	; 0x15
    18fe:	8c 8b       	std	Y+20, r24	; 0x14
    1900:	8c 89       	ldd	r24, Y+20	; 0x14
    1902:	9d 89       	ldd	r25, Y+21	; 0x15
    1904:	8c 01       	movw	r16, r24
    1906:	c8 01       	movw	r24, r16
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <__vector_14+0x1a6>
    190c:	8c 01       	movw	r16, r24
    190e:	1d 8b       	std	Y+21, r17	; 0x15
    1910:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1912:	8a 89       	ldd	r24, Y+18	; 0x12
    1914:	9b 89       	ldd	r25, Y+19	; 0x13
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	9b 8b       	std	Y+19, r25	; 0x13
    191a:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191c:	8a 89       	ldd	r24, Y+18	; 0x12
    191e:	9b 89       	ldd	r25, Y+19	; 0x13
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	51 f7       	brne	.-44     	; 0x18f8 <__vector_14+0x196>
    1924:	28 c0       	rjmp	.+80     	; 0x1976 <__vector_14+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1926:	6e 85       	ldd	r22, Y+14	; 0x0e
    1928:	7f 85       	ldd	r23, Y+15	; 0x0f
    192a:	88 89       	ldd	r24, Y+16	; 0x10
    192c:	99 89       	ldd	r25, Y+17	; 0x11
    192e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9b 8b       	std	Y+19, r25	; 0x13
    1938:	8a 8b       	std	Y+18, r24	; 0x12
    193a:	8a 89       	ldd	r24, Y+18	; 0x12
    193c:	9b 89       	ldd	r25, Y+19	; 0x13
    193e:	9f 8b       	std	Y+23, r25	; 0x17
    1940:	8e 8b       	std	Y+22, r24	; 0x16
    1942:	8e 89       	ldd	r24, Y+22	; 0x16
    1944:	9f 89       	ldd	r25, Y+23	; 0x17
    1946:	8c 01       	movw	r16, r24
    1948:	f8 01       	movw	r30, r16
    194a:	31 97       	sbiw	r30, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <__vector_14+0x1e8>
    194e:	8f 01       	movw	r16, r30
    1950:	1f 8b       	std	Y+23, r17	; 0x17
    1952:	0e 8b       	std	Y+22, r16	; 0x16
    1954:	10 c0       	rjmp	.+32     	; 0x1976 <__vector_14+0x214>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1956:	6d 81       	ldd	r22, Y+5	; 0x05
    1958:	7e 81       	ldd	r23, Y+6	; 0x06
    195a:	8f 81       	ldd	r24, Y+7	; 0x07
    195c:	98 85       	ldd	r25, Y+8	; 0x08
    195e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	89 87       	std	Y+9, r24	; 0x09
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    196c:	88 8d       	ldd	r24, Y+24	; 0x18
    196e:	18 2f       	mov	r17, r24
    1970:	1a 95       	dec	r17
    1972:	f1 f7       	brne	.-4      	; 0x1970 <__vector_14+0x20e>
    1974:	18 8f       	std	Y+24, r17	; 0x18
            _delay_us( 10 );
			PORTC &= ~(1 << PORTC0);
    1976:	88 e2       	ldi	r24, 0x28	; 40
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	28 e2       	ldi	r18, 0x28	; 40
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	f9 01       	movw	r30, r18
    1980:	20 81       	ld	r18, Z
    1982:	2e 7f       	andi	r18, 0xFE	; 254
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18
            count = 0;
    1988:	10 92 6b 02 	sts	0x026B, r1
    198c:	10 92 6a 02 	sts	0x026A, r1
            zerocross = 0;
    1990:	10 92 6c 02 	sts	0x026C, r1
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <__vector_14+0x246>
        }
        else
        {
                  
            count = count + 1;
    1996:	80 91 6a 02 	lds	r24, 0x026A
    199a:	90 91 6b 02 	lds	r25, 0x026B
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	90 93 6b 02 	sts	0x026B, r25
    19a4:	80 93 6a 02 	sts	0x026A, r24
        }
    }
}
    19a8:	68 96       	adiw	r28, 0x18	; 24
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	7f 91       	pop	r23
    19c0:	6f 91       	pop	r22
    19c2:	5f 91       	pop	r21
    19c4:	4f 91       	pop	r20
    19c6:	3f 91       	pop	r19
    19c8:	2f 91       	pop	r18
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <__vector_11>:

//L2F - Frequency Calculation
ISR(TIMER1_COMPA_vect)
{
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	2f 93       	push	r18
    19e4:	3f 93       	push	r19
    19e6:	4f 93       	push	r20
    19e8:	5f 93       	push	r21
    19ea:	6f 93       	push	r22
    19ec:	7f 93       	push	r23
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    Freq = NumChanges/1000;
    1a02:	80 91 71 02 	lds	r24, 0x0271
    1a06:	90 91 72 02 	lds	r25, 0x0272
    1a0a:	a0 91 73 02 	lds	r26, 0x0273
    1a0e:	b0 91 74 02 	lds	r27, 0x0274
    1a12:	28 ee       	ldi	r18, 0xE8	; 232
    1a14:	33 e0       	ldi	r19, 0x03	; 3
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodsi4>
    1a22:	da 01       	movw	r26, r20
    1a24:	c9 01       	movw	r24, r18
    1a26:	90 93 76 02 	sts	0x0276, r25
    1a2a:	80 93 75 02 	sts	0x0275, r24
	NumChanges = 0;
    1a2e:	10 92 71 02 	sts	0x0271, r1
    1a32:	10 92 72 02 	sts	0x0272, r1
    1a36:	10 92 73 02 	sts	0x0273, r1
    1a3a:	10 92 74 02 	sts	0x0274, r1
	++csec;
    1a3e:	80 91 78 02 	lds	r24, 0x0278
    1a42:	8f 5f       	subi	r24, 0xFF	; 255
    1a44:	80 93 78 02 	sts	0x0278, r24
	
	if(!active)
    1a48:	80 91 6f 02 	lds	r24, 0x026F
    1a4c:	88 23       	and	r24, r24
    1a4e:	29 f4       	brne	.+10     	; 0x1a5a <__vector_11+0x82>
		tInactive++;
    1a50:	80 91 70 02 	lds	r24, 0x0270
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	80 93 70 02 	sts	0x0270, r24
}
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	bf 91       	pop	r27
    1a64:	af 91       	pop	r26
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	7f 91       	pop	r23
    1a6c:	6f 91       	pop	r22
    1a6e:	5f 91       	pop	r21
    1a70:	4f 91       	pop	r20
    1a72:	3f 91       	pop	r19
    1a74:	2f 91       	pop	r18
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	0f 90       	pop	r0
    1a7c:	1f 90       	pop	r1
    1a7e:	18 95       	reti

00001a80 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
    1a80:	1f 92       	push	r1
    1a82:	0f 92       	push	r0
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	0f 92       	push	r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	2f 93       	push	r18
    1a8c:	3f 93       	push	r19
    1a8e:	8f 93       	push	r24
    1a90:	9f 93       	push	r25
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	if(sActive)
    1a9e:	80 91 6e 02 	lds	r24, 0x026E
    1aa2:	88 23       	and	r24, r24
    1aa4:	49 f0       	breq	.+18     	; 0x1ab8 <__vector_7+0x38>
		PORTB &= ~(1 << PORTB1);
    1aa6:	85 e2       	ldi	r24, 0x25	; 37
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	25 e2       	ldi	r18, 0x25	; 37
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	f9 01       	movw	r30, r18
    1ab0:	20 81       	ld	r18, Z
    1ab2:	2d 7f       	andi	r18, 0xFD	; 253
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	20 83       	st	Z, r18
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	ff 91       	pop	r31
    1abe:	ef 91       	pop	r30
    1ac0:	9f 91       	pop	r25
    1ac2:	8f 91       	pop	r24
    1ac4:	3f 91       	pop	r19
    1ac6:	2f 91       	pop	r18
    1ac8:	0f 90       	pop	r0
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	0f 90       	pop	r0
    1ace:	1f 90       	pop	r1
    1ad0:	18 95       	reti

00001ad2 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
    1ad2:	1f 92       	push	r1
    1ad4:	0f 92       	push	r0
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	0f 92       	push	r0
    1ada:	11 24       	eor	r1, r1
    1adc:	2f 93       	push	r18
    1ade:	3f 93       	push	r19
    1ae0:	8f 93       	push	r24
    1ae2:	9f 93       	push	r25
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	if(sActive)
    1af0:	80 91 6e 02 	lds	r24, 0x026E
    1af4:	88 23       	and	r24, r24
    1af6:	49 f0       	breq	.+18     	; 0x1b0a <__vector_9+0x38>
		PORTB |= (1 << PORTB1);
    1af8:	85 e2       	ldi	r24, 0x25	; 37
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	25 e2       	ldi	r18, 0x25	; 37
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	f9 01       	movw	r30, r18
    1b02:	20 81       	ld	r18, Z
    1b04:	22 60       	ori	r18, 0x02	; 2
    1b06:	fc 01       	movw	r30, r24
    1b08:	20 83       	st	Z, r18
}
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	ff 91       	pop	r31
    1b10:	ef 91       	pop	r30
    1b12:	9f 91       	pop	r25
    1b14:	8f 91       	pop	r24
    1b16:	3f 91       	pop	r19
    1b18:	2f 91       	pop	r18
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	0f 90       	pop	r0
    1b20:	1f 90       	pop	r1
    1b22:	18 95       	reti

00001b24 <__vector_1>:

//AC - Zero Cross Detection
ISR(INT0_vect)
{
    1b24:	1f 92       	push	r1
    1b26:	0f 92       	push	r0
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	0f 92       	push	r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	8f 93       	push	r24
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    zerocross = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	80 93 6c 02 	sts	0x026C, r24
}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	8f 91       	pop	r24
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_default>:

ISR(__vector_default){} //prevents microcontroller from resetting
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	0f 90       	pop	r0
    1b6a:	1f 90       	pop	r1
    1b6c:	18 95       	reti

00001b6e <delay_ms>:
	
void static inline delay_ms(uint16_t tick)
{
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	62 97       	sbiw	r28, 0x12	; 18
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	9a 8b       	std	Y+18, r25	; 0x12
    1b88:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0; i < tick; ++i)
    1b8a:	1a 82       	std	Y+2, r1	; 0x02
    1b8c:	19 82       	std	Y+1, r1	; 0x01
    1b8e:	85 c0       	rjmp	.+266    	; 0x1c9a <delay_ms+0x12c>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8b 83       	std	Y+3, r24	; 0x03
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	ad 83       	std	Y+5, r26	; 0x05
    1b9e:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ba2:	7c 81       	ldd	r23, Y+4	; 0x04
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	55 e4       	ldi	r21, 0x45	; 69
    1bb0:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8f 83       	std	Y+7, r24	; 0x07
    1bba:	98 87       	std	Y+8, r25	; 0x08
    1bbc:	a9 87       	std	Y+9, r26	; 0x09
    1bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc0:	11 e0       	ldi	r17, 0x01	; 1
    1bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc4:	78 85       	ldd	r23, Y+8	; 0x08
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e8       	ldi	r20, 0x80	; 128
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__cmpsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	0c f0       	brlt	.+2      	; 0x1bdc <delay_ms+0x6e>
    1bda:	10 e0       	ldi	r17, 0x00	; 0
    1bdc:	11 23       	and	r17, r17
    1bde:	29 f0       	breq	.+10     	; 0x1bea <delay_ms+0x7c>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	8b 87       	std	Y+11, r24	; 0x0b
    1be8:	46 c0       	rjmp	.+140    	; 0x1c76 <delay_ms+0x108>
	else if (__tmp > 65535)
    1bea:	11 e0       	ldi	r17, 0x01	; 1
    1bec:	6f 81       	ldd	r22, Y+7	; 0x07
    1bee:	78 85       	ldd	r23, Y+8	; 0x08
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	3f ef       	ldi	r19, 0xFF	; 255
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	57 e4       	ldi	r21, 0x47	; 71
    1bfc:	0e 94 0e 10 	call	0x201c	; 0x201c <__gesf2>
    1c00:	18 16       	cp	r1, r24
    1c02:	0c f0       	brlt	.+2      	; 0x1c06 <delay_ms+0x98>
    1c04:	10 e0       	ldi	r17, 0x00	; 0
    1c06:	11 23       	and	r17, r17
    1c08:	61 f1       	breq	.+88     	; 0x1c62 <delay_ms+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6b 81       	ldd	r22, Y+3	; 0x03
    1c0c:	7c 81       	ldd	r23, Y+4	; 0x04
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 12 10 	call	0x2024	; 0x2024 <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9c 87       	std	Y+12, r25	; 0x0c
    1c30:	8b 87       	std	Y+11, r24	; 0x0b
    1c32:	12 c0       	rjmp	.+36     	; 0x1c58 <delay_ms+0xea>
    1c34:	80 e9       	ldi	r24, 0x90	; 144
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	9e 87       	std	Y+14, r25	; 0x0e
    1c3a:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	8c 01       	movw	r16, r24
    1c42:	c8 01       	movw	r24, r16
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <delay_ms+0xd6>
    1c48:	8c 01       	movw	r16, r24
    1c4a:	1e 87       	std	Y+14, r17	; 0x0e
    1c4c:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c50:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	9c 87       	std	Y+12, r25	; 0x0c
    1c56:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	51 f7       	brne	.-44     	; 0x1c34 <delay_ms+0xc6>
    1c60:	17 c0       	rjmp	.+46     	; 0x1c90 <delay_ms+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9c 87       	std	Y+12, r25	; 0x0c
    1c74:	8b 87       	std	Y+11, r24	; 0x0b
    1c76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c7a:	98 8b       	std	Y+16, r25	; 0x10
    1c7c:	8f 87       	std	Y+15, r24	; 0x0f
    1c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c80:	98 89       	ldd	r25, Y+16	; 0x10
    1c82:	8c 01       	movw	r16, r24
    1c84:	c8 01       	movw	r24, r16
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <delay_ms+0x118>
    1c8a:	8c 01       	movw	r16, r24
    1c8c:	18 8b       	std	Y+16, r17	; 0x10
    1c8e:	0f 87       	std	Y+15, r16	; 0x0f
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	29 81       	ldd	r18, Y+1	; 0x01
    1c9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c9e:	89 89       	ldd	r24, Y+17	; 0x11
    1ca0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca2:	28 17       	cp	r18, r24
    1ca4:	39 07       	cpc	r19, r25
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <delay_ms+0x13c>
    1ca8:	73 cf       	rjmp	.-282    	; 0x1b90 <delay_ms+0x22>
		_delay_ms(1);
    1caa:	62 96       	adiw	r28, 0x12	; 18
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret

00001cc0 <USART_Init>:
#include <stdarg.h>
#include <string.h> 
#include"USART.h"

void USART_Init( unsigned int ubrr)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <USART_Init+0x6>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
	DDRD |= (1 << PORTD1) | (1 << PORTD0);
    1cce:	8a e2       	ldi	r24, 0x2A	; 42
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	2a e2       	ldi	r18, 0x2A	; 42
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	20 81       	ld	r18, Z
    1cda:	23 60       	ori	r18, 0x03	; 3
    1cdc:	fc 01       	movw	r30, r24
    1cde:	20 83       	st	Z, r18
    UBRR0H = (ubrr >> 8);
    1ce0:	85 ec       	ldi	r24, 0xC5	; 197
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	29 81       	ldd	r18, Y+1	; 0x01
    1ce6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce8:	23 2f       	mov	r18, r19
    1cea:	33 27       	eor	r19, r19
    1cec:	fc 01       	movw	r30, r24
    1cee:	20 83       	st	Z, r18
    UBRR0L = ubrr;
    1cf0:	84 ec       	ldi	r24, 0xC4	; 196
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	29 81       	ldd	r18, Y+1	; 0x01
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
    
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);      // Enable receiver and transmitter and interrupt receive
    1cfa:	81 ec       	ldi	r24, 0xC1	; 193
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	28 e9       	ldi	r18, 0x98	; 152
    1d00:	fc 01       	movw	r30, r24
    1d02:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
    1d04:	82 ec       	ldi	r24, 0xC2	; 194
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	26 e0       	ldi	r18, 0x06	; 6
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	20 83       	st	Z, r18
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	0f 92       	push	r0
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for empty transmit buffer */
    while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
    1d24:	00 00       	nop
    1d26:	80 ec       	ldi	r24, 0xC0	; 192
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	80 81       	ld	r24, Z
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	80 72       	andi	r24, 0x20	; 32
    1d34:	90 70       	andi	r25, 0x00	; 0
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	b1 f3       	breq	.-20     	; 0x1d26 <USART_Transmit+0xe>

	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1d3a:	86 ec       	ldi	r24, 0xC6	; 198
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	29 81       	ldd	r18, Y+1	; 0x01
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
}
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <USART_Receive>:


unsigned char USART_Receive( void )
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
	return '\0';
    1d54:	80 e0       	ldi	r24, 0x00	; 0
}
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <USART_Print>:


void USART_Print(char * input, int n)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <USART_Print+0x6>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <USART_Print+0x8>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <USART_Print+0xa>
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
    1d6e:	7e 83       	std	Y+6, r23	; 0x06
    1d70:	6d 83       	std	Y+5, r22	; 0x05
	
	for(int i = 0; i < n; ++i)
    1d72:	1a 82       	std	Y+2, r1	; 0x02
    1d74:	19 82       	std	Y+1, r1	; 0x01
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <USART_Print+0x3a>
	{
		USART_Transmit(input[i]);
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d80:	82 0f       	add	r24, r18
    1d82:	93 1f       	adc	r25, r19
    1d84:	fc 01       	movw	r30, r24
    1d86:	80 81       	ld	r24, Z
    1d88:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <USART_Transmit>


void USART_Print(char * input, int n)
{
	
	for(int i = 0; i < n; ++i)
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	29 81       	ldd	r18, Y+1	; 0x01
    1d98:	3a 81       	ldd	r19, Y+2	; 0x02
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	28 17       	cp	r18, r24
    1da0:	39 07       	cpc	r19, r25
    1da2:	54 f3       	brlt	.-44     	; 0x1d78 <USART_Print+0x1c>
	{
		USART_Transmit(input[i]);
	}
	
}
    1da4:	26 96       	adiw	r28, 0x06	; 6
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <print>:

int print(char *format, ...)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <print+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <print+0x8>
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	static char buf[128];
	va_list va;
	int n;
	va_start(va, format);
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	0b 96       	adiw	r24, 0x0b	; 11
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
	n = vsprintf(buf, format, va);
    1dca:	2b 81       	ldd	r18, Y+3	; 0x03
    1dcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dce:	89 e7       	ldi	r24, 0x79	; 121
    1dd0:	92 e0       	ldi	r25, 0x02	; 2
    1dd2:	49 85       	ldd	r20, Y+9	; 0x09
    1dd4:	5a 85       	ldd	r21, Y+10	; 0x0a
    1dd6:	ba 01       	movw	r22, r20
    1dd8:	a9 01       	movw	r20, r18
    1dda:	0e 94 ce 10 	call	0x219c	; 0x219c <vsprintf>
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
	USART_Print(buf, n);
    1de2:	89 e7       	ldi	r24, 0x79	; 121
    1de4:	92 e0       	ldi	r25, 0x02	; 2
    1de6:	29 81       	ldd	r18, Y+1	; 0x01
    1de8:	3a 81       	ldd	r19, Y+2	; 0x02
    1dea:	b9 01       	movw	r22, r18
    1dec:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <USART_Print>
	va_end(va);
	return n;
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
	
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <__cmpsf2>:
    1e02:	97 d0       	rcall	.+302    	; 0x1f32 <__fp_cmp>
    1e04:	08 f4       	brcc	.+2      	; 0x1e08 <__cmpsf2+0x6>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	08 95       	ret

00001e0a <__divsf3>:
    1e0a:	0c d0       	rcall	.+24     	; 0x1e24 <__divsf3x>
    1e0c:	cd c0       	rjmp	.+410    	; 0x1fa8 <__fp_round>
    1e0e:	c5 d0       	rcall	.+394    	; 0x1f9a <__fp_pscB>
    1e10:	40 f0       	brcs	.+16     	; 0x1e22 <__divsf3+0x18>
    1e12:	bc d0       	rcall	.+376    	; 0x1f8c <__fp_pscA>
    1e14:	30 f0       	brcs	.+12     	; 0x1e22 <__divsf3+0x18>
    1e16:	21 f4       	brne	.+8      	; 0x1e20 <__divsf3+0x16>
    1e18:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1a:	19 f0       	breq	.+6      	; 0x1e22 <__divsf3+0x18>
    1e1c:	ae c0       	rjmp	.+348    	; 0x1f7a <__fp_inf>
    1e1e:	51 11       	cpse	r21, r1
    1e20:	f7 c0       	rjmp	.+494    	; 0x2010 <__fp_szero>
    1e22:	b1 c0       	rjmp	.+354    	; 0x1f86 <__fp_nan>

00001e24 <__divsf3x>:
    1e24:	d2 d0       	rcall	.+420    	; 0x1fca <__fp_split3>
    1e26:	98 f3       	brcs	.-26     	; 0x1e0e <__divsf3+0x4>

00001e28 <__divsf3_pse>:
    1e28:	99 23       	and	r25, r25
    1e2a:	c9 f3       	breq	.-14     	; 0x1e1e <__divsf3+0x14>
    1e2c:	55 23       	and	r21, r21
    1e2e:	b1 f3       	breq	.-20     	; 0x1e1c <__divsf3+0x12>
    1e30:	95 1b       	sub	r25, r21
    1e32:	55 0b       	sbc	r21, r21
    1e34:	bb 27       	eor	r27, r27
    1e36:	aa 27       	eor	r26, r26
    1e38:	62 17       	cp	r22, r18
    1e3a:	73 07       	cpc	r23, r19
    1e3c:	84 07       	cpc	r24, r20
    1e3e:	38 f0       	brcs	.+14     	; 0x1e4e <__divsf3_pse+0x26>
    1e40:	9f 5f       	subi	r25, 0xFF	; 255
    1e42:	5f 4f       	sbci	r21, 0xFF	; 255
    1e44:	22 0f       	add	r18, r18
    1e46:	33 1f       	adc	r19, r19
    1e48:	44 1f       	adc	r20, r20
    1e4a:	aa 1f       	adc	r26, r26
    1e4c:	a9 f3       	breq	.-22     	; 0x1e38 <__divsf3_pse+0x10>
    1e4e:	33 d0       	rcall	.+102    	; 0x1eb6 <__divsf3_pse+0x8e>
    1e50:	0e 2e       	mov	r0, r30
    1e52:	3a f0       	brmi	.+14     	; 0x1e62 <__divsf3_pse+0x3a>
    1e54:	e0 e8       	ldi	r30, 0x80	; 128
    1e56:	30 d0       	rcall	.+96     	; 0x1eb8 <__divsf3_pse+0x90>
    1e58:	91 50       	subi	r25, 0x01	; 1
    1e5a:	50 40       	sbci	r21, 0x00	; 0
    1e5c:	e6 95       	lsr	r30
    1e5e:	00 1c       	adc	r0, r0
    1e60:	ca f7       	brpl	.-14     	; 0x1e54 <__divsf3_pse+0x2c>
    1e62:	29 d0       	rcall	.+82     	; 0x1eb6 <__divsf3_pse+0x8e>
    1e64:	fe 2f       	mov	r31, r30
    1e66:	27 d0       	rcall	.+78     	; 0x1eb6 <__divsf3_pse+0x8e>
    1e68:	66 0f       	add	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	bb 1f       	adc	r27, r27
    1e70:	26 17       	cp	r18, r22
    1e72:	37 07       	cpc	r19, r23
    1e74:	48 07       	cpc	r20, r24
    1e76:	ab 07       	cpc	r26, r27
    1e78:	b0 e8       	ldi	r27, 0x80	; 128
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <__divsf3_pse+0x56>
    1e7c:	bb 0b       	sbc	r27, r27
    1e7e:	80 2d       	mov	r24, r0
    1e80:	bf 01       	movw	r22, r30
    1e82:	ff 27       	eor	r31, r31
    1e84:	93 58       	subi	r25, 0x83	; 131
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	2a f0       	brmi	.+10     	; 0x1e94 <__divsf3_pse+0x6c>
    1e8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	68 f0       	brcs	.+26     	; 0x1eaa <__divsf3_pse+0x82>
    1e90:	74 c0       	rjmp	.+232    	; 0x1f7a <__fp_inf>
    1e92:	be c0       	rjmp	.+380    	; 0x2010 <__fp_szero>
    1e94:	5f 3f       	cpi	r21, 0xFF	; 255
    1e96:	ec f3       	brlt	.-6      	; 0x1e92 <__divsf3_pse+0x6a>
    1e98:	98 3e       	cpi	r25, 0xE8	; 232
    1e9a:	dc f3       	brlt	.-10     	; 0x1e92 <__divsf3_pse+0x6a>
    1e9c:	86 95       	lsr	r24
    1e9e:	77 95       	ror	r23
    1ea0:	67 95       	ror	r22
    1ea2:	b7 95       	ror	r27
    1ea4:	f7 95       	ror	r31
    1ea6:	9f 5f       	subi	r25, 0xFF	; 255
    1ea8:	c9 f7       	brne	.-14     	; 0x1e9c <__divsf3_pse+0x74>
    1eaa:	88 0f       	add	r24, r24
    1eac:	91 1d       	adc	r25, r1
    1eae:	96 95       	lsr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	97 f9       	bld	r25, 7
    1eb4:	08 95       	ret
    1eb6:	e1 e0       	ldi	r30, 0x01	; 1
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	88 1f       	adc	r24, r24
    1ebe:	bb 1f       	adc	r27, r27
    1ec0:	62 17       	cp	r22, r18
    1ec2:	73 07       	cpc	r23, r19
    1ec4:	84 07       	cpc	r24, r20
    1ec6:	ba 07       	cpc	r27, r26
    1ec8:	20 f0       	brcs	.+8      	; 0x1ed2 <__divsf3_pse+0xaa>
    1eca:	62 1b       	sub	r22, r18
    1ecc:	73 0b       	sbc	r23, r19
    1ece:	84 0b       	sbc	r24, r20
    1ed0:	ba 0b       	sbc	r27, r26
    1ed2:	ee 1f       	adc	r30, r30
    1ed4:	88 f7       	brcc	.-30     	; 0x1eb8 <__divsf3_pse+0x90>
    1ed6:	e0 95       	com	r30
    1ed8:	08 95       	ret

00001eda <__fixunssfsi>:
    1eda:	7f d0       	rcall	.+254    	; 0x1fda <__fp_splitA>
    1edc:	88 f0       	brcs	.+34     	; 0x1f00 <__fixunssfsi+0x26>
    1ede:	9f 57       	subi	r25, 0x7F	; 127
    1ee0:	90 f0       	brcs	.+36     	; 0x1f06 <__fixunssfsi+0x2c>
    1ee2:	b9 2f       	mov	r27, r25
    1ee4:	99 27       	eor	r25, r25
    1ee6:	b7 51       	subi	r27, 0x17	; 23
    1ee8:	a0 f0       	brcs	.+40     	; 0x1f12 <__fixunssfsi+0x38>
    1eea:	d1 f0       	breq	.+52     	; 0x1f20 <__fixunssfsi+0x46>
    1eec:	66 0f       	add	r22, r22
    1eee:	77 1f       	adc	r23, r23
    1ef0:	88 1f       	adc	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	1a f0       	brmi	.+6      	; 0x1efc <__fixunssfsi+0x22>
    1ef6:	ba 95       	dec	r27
    1ef8:	c9 f7       	brne	.-14     	; 0x1eec <__fixunssfsi+0x12>
    1efa:	12 c0       	rjmp	.+36     	; 0x1f20 <__fixunssfsi+0x46>
    1efc:	b1 30       	cpi	r27, 0x01	; 1
    1efe:	81 f0       	breq	.+32     	; 0x1f20 <__fixunssfsi+0x46>
    1f00:	86 d0       	rcall	.+268    	; 0x200e <__fp_zero>
    1f02:	b1 e0       	ldi	r27, 0x01	; 1
    1f04:	08 95       	ret
    1f06:	83 c0       	rjmp	.+262    	; 0x200e <__fp_zero>
    1f08:	67 2f       	mov	r22, r23
    1f0a:	78 2f       	mov	r23, r24
    1f0c:	88 27       	eor	r24, r24
    1f0e:	b8 5f       	subi	r27, 0xF8	; 248
    1f10:	39 f0       	breq	.+14     	; 0x1f20 <__fixunssfsi+0x46>
    1f12:	b9 3f       	cpi	r27, 0xF9	; 249
    1f14:	cc f3       	brlt	.-14     	; 0x1f08 <__fixunssfsi+0x2e>
    1f16:	86 95       	lsr	r24
    1f18:	77 95       	ror	r23
    1f1a:	67 95       	ror	r22
    1f1c:	b3 95       	inc	r27
    1f1e:	d9 f7       	brne	.-10     	; 0x1f16 <__fixunssfsi+0x3c>
    1f20:	3e f4       	brtc	.+14     	; 0x1f30 <__fixunssfsi+0x56>
    1f22:	90 95       	com	r25
    1f24:	80 95       	com	r24
    1f26:	70 95       	com	r23
    1f28:	61 95       	neg	r22
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	08 95       	ret

00001f32 <__fp_cmp>:
    1f32:	99 0f       	add	r25, r25
    1f34:	00 08       	sbc	r0, r0
    1f36:	55 0f       	add	r21, r21
    1f38:	aa 0b       	sbc	r26, r26
    1f3a:	e0 e8       	ldi	r30, 0x80	; 128
    1f3c:	fe ef       	ldi	r31, 0xFE	; 254
    1f3e:	16 16       	cp	r1, r22
    1f40:	17 06       	cpc	r1, r23
    1f42:	e8 07       	cpc	r30, r24
    1f44:	f9 07       	cpc	r31, r25
    1f46:	c0 f0       	brcs	.+48     	; 0x1f78 <__fp_cmp+0x46>
    1f48:	12 16       	cp	r1, r18
    1f4a:	13 06       	cpc	r1, r19
    1f4c:	e4 07       	cpc	r30, r20
    1f4e:	f5 07       	cpc	r31, r21
    1f50:	98 f0       	brcs	.+38     	; 0x1f78 <__fp_cmp+0x46>
    1f52:	62 1b       	sub	r22, r18
    1f54:	73 0b       	sbc	r23, r19
    1f56:	84 0b       	sbc	r24, r20
    1f58:	95 0b       	sbc	r25, r21
    1f5a:	39 f4       	brne	.+14     	; 0x1f6a <__fp_cmp+0x38>
    1f5c:	0a 26       	eor	r0, r26
    1f5e:	61 f0       	breq	.+24     	; 0x1f78 <__fp_cmp+0x46>
    1f60:	23 2b       	or	r18, r19
    1f62:	24 2b       	or	r18, r20
    1f64:	25 2b       	or	r18, r21
    1f66:	21 f4       	brne	.+8      	; 0x1f70 <__fp_cmp+0x3e>
    1f68:	08 95       	ret
    1f6a:	0a 26       	eor	r0, r26
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <__fp_cmp+0x3e>
    1f6e:	a1 40       	sbci	r26, 0x01	; 1
    1f70:	a6 95       	lsr	r26
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	81 1d       	adc	r24, r1
    1f76:	81 1d       	adc	r24, r1
    1f78:	08 95       	ret

00001f7a <__fp_inf>:
    1f7a:	97 f9       	bld	r25, 7
    1f7c:	9f 67       	ori	r25, 0x7F	; 127
    1f7e:	80 e8       	ldi	r24, 0x80	; 128
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	08 95       	ret

00001f86 <__fp_nan>:
    1f86:	9f ef       	ldi	r25, 0xFF	; 255
    1f88:	80 ec       	ldi	r24, 0xC0	; 192
    1f8a:	08 95       	ret

00001f8c <__fp_pscA>:
    1f8c:	00 24       	eor	r0, r0
    1f8e:	0a 94       	dec	r0
    1f90:	16 16       	cp	r1, r22
    1f92:	17 06       	cpc	r1, r23
    1f94:	18 06       	cpc	r1, r24
    1f96:	09 06       	cpc	r0, r25
    1f98:	08 95       	ret

00001f9a <__fp_pscB>:
    1f9a:	00 24       	eor	r0, r0
    1f9c:	0a 94       	dec	r0
    1f9e:	12 16       	cp	r1, r18
    1fa0:	13 06       	cpc	r1, r19
    1fa2:	14 06       	cpc	r1, r20
    1fa4:	05 06       	cpc	r0, r21
    1fa6:	08 95       	ret

00001fa8 <__fp_round>:
    1fa8:	09 2e       	mov	r0, r25
    1faa:	03 94       	inc	r0
    1fac:	00 0c       	add	r0, r0
    1fae:	11 f4       	brne	.+4      	; 0x1fb4 <__fp_round+0xc>
    1fb0:	88 23       	and	r24, r24
    1fb2:	52 f0       	brmi	.+20     	; 0x1fc8 <__fp_round+0x20>
    1fb4:	bb 0f       	add	r27, r27
    1fb6:	40 f4       	brcc	.+16     	; 0x1fc8 <__fp_round+0x20>
    1fb8:	bf 2b       	or	r27, r31
    1fba:	11 f4       	brne	.+4      	; 0x1fc0 <__fp_round+0x18>
    1fbc:	60 ff       	sbrs	r22, 0
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <__fp_round+0x20>
    1fc0:	6f 5f       	subi	r22, 0xFF	; 255
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	08 95       	ret

00001fca <__fp_split3>:
    1fca:	57 fd       	sbrc	r21, 7
    1fcc:	90 58       	subi	r25, 0x80	; 128
    1fce:	44 0f       	add	r20, r20
    1fd0:	55 1f       	adc	r21, r21
    1fd2:	59 f0       	breq	.+22     	; 0x1fea <__fp_splitA+0x10>
    1fd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd6:	71 f0       	breq	.+28     	; 0x1ff4 <__fp_splitA+0x1a>
    1fd8:	47 95       	ror	r20

00001fda <__fp_splitA>:
    1fda:	88 0f       	add	r24, r24
    1fdc:	97 fb       	bst	r25, 7
    1fde:	99 1f       	adc	r25, r25
    1fe0:	61 f0       	breq	.+24     	; 0x1ffa <__fp_splitA+0x20>
    1fe2:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe4:	79 f0       	breq	.+30     	; 0x2004 <__fp_splitA+0x2a>
    1fe6:	87 95       	ror	r24
    1fe8:	08 95       	ret
    1fea:	12 16       	cp	r1, r18
    1fec:	13 06       	cpc	r1, r19
    1fee:	14 06       	cpc	r1, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	f2 cf       	rjmp	.-28     	; 0x1fd8 <__fp_split3+0xe>
    1ff4:	46 95       	lsr	r20
    1ff6:	f1 df       	rcall	.-30     	; 0x1fda <__fp_splitA>
    1ff8:	08 c0       	rjmp	.+16     	; 0x200a <__fp_splitA+0x30>
    1ffa:	16 16       	cp	r1, r22
    1ffc:	17 06       	cpc	r1, r23
    1ffe:	18 06       	cpc	r1, r24
    2000:	99 1f       	adc	r25, r25
    2002:	f1 cf       	rjmp	.-30     	; 0x1fe6 <__fp_splitA+0xc>
    2004:	86 95       	lsr	r24
    2006:	71 05       	cpc	r23, r1
    2008:	61 05       	cpc	r22, r1
    200a:	08 94       	sec
    200c:	08 95       	ret

0000200e <__fp_zero>:
    200e:	e8 94       	clt

00002010 <__fp_szero>:
    2010:	bb 27       	eor	r27, r27
    2012:	66 27       	eor	r22, r22
    2014:	77 27       	eor	r23, r23
    2016:	cb 01       	movw	r24, r22
    2018:	97 f9       	bld	r25, 7
    201a:	08 95       	ret

0000201c <__gesf2>:
    201c:	8a df       	rcall	.-236    	; 0x1f32 <__fp_cmp>
    201e:	08 f4       	brcc	.+2      	; 0x2022 <__gesf2+0x6>
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    2022:	08 95       	ret

00002024 <__mulsf3>:
    2024:	0b d0       	rcall	.+22     	; 0x203c <__mulsf3x>
    2026:	c0 cf       	rjmp	.-128    	; 0x1fa8 <__fp_round>
    2028:	b1 df       	rcall	.-158    	; 0x1f8c <__fp_pscA>
    202a:	28 f0       	brcs	.+10     	; 0x2036 <__mulsf3+0x12>
    202c:	b6 df       	rcall	.-148    	; 0x1f9a <__fp_pscB>
    202e:	18 f0       	brcs	.+6      	; 0x2036 <__mulsf3+0x12>
    2030:	95 23       	and	r25, r21
    2032:	09 f0       	breq	.+2      	; 0x2036 <__mulsf3+0x12>
    2034:	a2 cf       	rjmp	.-188    	; 0x1f7a <__fp_inf>
    2036:	a7 cf       	rjmp	.-178    	; 0x1f86 <__fp_nan>
    2038:	11 24       	eor	r1, r1
    203a:	ea cf       	rjmp	.-44     	; 0x2010 <__fp_szero>

0000203c <__mulsf3x>:
    203c:	c6 df       	rcall	.-116    	; 0x1fca <__fp_split3>
    203e:	a0 f3       	brcs	.-24     	; 0x2028 <__mulsf3+0x4>

00002040 <__mulsf3_pse>:
    2040:	95 9f       	mul	r25, r21
    2042:	d1 f3       	breq	.-12     	; 0x2038 <__mulsf3+0x14>
    2044:	95 0f       	add	r25, r21
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	55 1f       	adc	r21, r21
    204a:	62 9f       	mul	r22, r18
    204c:	f0 01       	movw	r30, r0
    204e:	72 9f       	mul	r23, r18
    2050:	bb 27       	eor	r27, r27
    2052:	f0 0d       	add	r31, r0
    2054:	b1 1d       	adc	r27, r1
    2056:	63 9f       	mul	r22, r19
    2058:	aa 27       	eor	r26, r26
    205a:	f0 0d       	add	r31, r0
    205c:	b1 1d       	adc	r27, r1
    205e:	aa 1f       	adc	r26, r26
    2060:	64 9f       	mul	r22, r20
    2062:	66 27       	eor	r22, r22
    2064:	b0 0d       	add	r27, r0
    2066:	a1 1d       	adc	r26, r1
    2068:	66 1f       	adc	r22, r22
    206a:	82 9f       	mul	r24, r18
    206c:	22 27       	eor	r18, r18
    206e:	b0 0d       	add	r27, r0
    2070:	a1 1d       	adc	r26, r1
    2072:	62 1f       	adc	r22, r18
    2074:	73 9f       	mul	r23, r19
    2076:	b0 0d       	add	r27, r0
    2078:	a1 1d       	adc	r26, r1
    207a:	62 1f       	adc	r22, r18
    207c:	83 9f       	mul	r24, r19
    207e:	a0 0d       	add	r26, r0
    2080:	61 1d       	adc	r22, r1
    2082:	22 1f       	adc	r18, r18
    2084:	74 9f       	mul	r23, r20
    2086:	33 27       	eor	r19, r19
    2088:	a0 0d       	add	r26, r0
    208a:	61 1d       	adc	r22, r1
    208c:	23 1f       	adc	r18, r19
    208e:	84 9f       	mul	r24, r20
    2090:	60 0d       	add	r22, r0
    2092:	21 1d       	adc	r18, r1
    2094:	82 2f       	mov	r24, r18
    2096:	76 2f       	mov	r23, r22
    2098:	6a 2f       	mov	r22, r26
    209a:	11 24       	eor	r1, r1
    209c:	9f 57       	subi	r25, 0x7F	; 127
    209e:	50 40       	sbci	r21, 0x00	; 0
    20a0:	8a f0       	brmi	.+34     	; 0x20c4 <__mulsf3_pse+0x84>
    20a2:	e1 f0       	breq	.+56     	; 0x20dc <__mulsf3_pse+0x9c>
    20a4:	88 23       	and	r24, r24
    20a6:	4a f0       	brmi	.+18     	; 0x20ba <__mulsf3_pse+0x7a>
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	bb 1f       	adc	r27, r27
    20ae:	66 1f       	adc	r22, r22
    20b0:	77 1f       	adc	r23, r23
    20b2:	88 1f       	adc	r24, r24
    20b4:	91 50       	subi	r25, 0x01	; 1
    20b6:	50 40       	sbci	r21, 0x00	; 0
    20b8:	a9 f7       	brne	.-22     	; 0x20a4 <__mulsf3_pse+0x64>
    20ba:	9e 3f       	cpi	r25, 0xFE	; 254
    20bc:	51 05       	cpc	r21, r1
    20be:	70 f0       	brcs	.+28     	; 0x20dc <__mulsf3_pse+0x9c>
    20c0:	5c cf       	rjmp	.-328    	; 0x1f7a <__fp_inf>
    20c2:	a6 cf       	rjmp	.-180    	; 0x2010 <__fp_szero>
    20c4:	5f 3f       	cpi	r21, 0xFF	; 255
    20c6:	ec f3       	brlt	.-6      	; 0x20c2 <__mulsf3_pse+0x82>
    20c8:	98 3e       	cpi	r25, 0xE8	; 232
    20ca:	dc f3       	brlt	.-10     	; 0x20c2 <__mulsf3_pse+0x82>
    20cc:	86 95       	lsr	r24
    20ce:	77 95       	ror	r23
    20d0:	67 95       	ror	r22
    20d2:	b7 95       	ror	r27
    20d4:	f7 95       	ror	r31
    20d6:	e7 95       	ror	r30
    20d8:	9f 5f       	subi	r25, 0xFF	; 255
    20da:	c1 f7       	brne	.-16     	; 0x20cc <__mulsf3_pse+0x8c>
    20dc:	fe 2b       	or	r31, r30
    20de:	88 0f       	add	r24, r24
    20e0:	91 1d       	adc	r25, r1
    20e2:	96 95       	lsr	r25
    20e4:	87 95       	ror	r24
    20e6:	97 f9       	bld	r25, 7
    20e8:	08 95       	ret

000020ea <__divmodhi4>:
    20ea:	97 fb       	bst	r25, 7
    20ec:	09 2e       	mov	r0, r25
    20ee:	07 26       	eor	r0, r23
    20f0:	0a d0       	rcall	.+20     	; 0x2106 <__divmodhi4_neg1>
    20f2:	77 fd       	sbrc	r23, 7
    20f4:	04 d0       	rcall	.+8      	; 0x20fe <__divmodhi4_neg2>
    20f6:	2e d0       	rcall	.+92     	; 0x2154 <__udivmodhi4>
    20f8:	06 d0       	rcall	.+12     	; 0x2106 <__divmodhi4_neg1>
    20fa:	00 20       	and	r0, r0
    20fc:	1a f4       	brpl	.+6      	; 0x2104 <__divmodhi4_exit>

000020fe <__divmodhi4_neg2>:
    20fe:	70 95       	com	r23
    2100:	61 95       	neg	r22
    2102:	7f 4f       	sbci	r23, 0xFF	; 255

00002104 <__divmodhi4_exit>:
    2104:	08 95       	ret

00002106 <__divmodhi4_neg1>:
    2106:	f6 f7       	brtc	.-4      	; 0x2104 <__divmodhi4_exit>
    2108:	90 95       	com	r25
    210a:	81 95       	neg	r24
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	08 95       	ret

00002110 <__udivmodsi4>:
    2110:	a1 e2       	ldi	r26, 0x21	; 33
    2112:	1a 2e       	mov	r1, r26
    2114:	aa 1b       	sub	r26, r26
    2116:	bb 1b       	sub	r27, r27
    2118:	fd 01       	movw	r30, r26
    211a:	0d c0       	rjmp	.+26     	; 0x2136 <__udivmodsi4_ep>

0000211c <__udivmodsi4_loop>:
    211c:	aa 1f       	adc	r26, r26
    211e:	bb 1f       	adc	r27, r27
    2120:	ee 1f       	adc	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	a2 17       	cp	r26, r18
    2126:	b3 07       	cpc	r27, r19
    2128:	e4 07       	cpc	r30, r20
    212a:	f5 07       	cpc	r31, r21
    212c:	20 f0       	brcs	.+8      	; 0x2136 <__udivmodsi4_ep>
    212e:	a2 1b       	sub	r26, r18
    2130:	b3 0b       	sbc	r27, r19
    2132:	e4 0b       	sbc	r30, r20
    2134:	f5 0b       	sbc	r31, r21

00002136 <__udivmodsi4_ep>:
    2136:	66 1f       	adc	r22, r22
    2138:	77 1f       	adc	r23, r23
    213a:	88 1f       	adc	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	1a 94       	dec	r1
    2140:	69 f7       	brne	.-38     	; 0x211c <__udivmodsi4_loop>
    2142:	60 95       	com	r22
    2144:	70 95       	com	r23
    2146:	80 95       	com	r24
    2148:	90 95       	com	r25
    214a:	9b 01       	movw	r18, r22
    214c:	ac 01       	movw	r20, r24
    214e:	bd 01       	movw	r22, r26
    2150:	cf 01       	movw	r24, r30
    2152:	08 95       	ret

00002154 <__udivmodhi4>:
    2154:	aa 1b       	sub	r26, r26
    2156:	bb 1b       	sub	r27, r27
    2158:	51 e1       	ldi	r21, 0x11	; 17
    215a:	07 c0       	rjmp	.+14     	; 0x216a <__udivmodhi4_ep>

0000215c <__udivmodhi4_loop>:
    215c:	aa 1f       	adc	r26, r26
    215e:	bb 1f       	adc	r27, r27
    2160:	a6 17       	cp	r26, r22
    2162:	b7 07       	cpc	r27, r23
    2164:	10 f0       	brcs	.+4      	; 0x216a <__udivmodhi4_ep>
    2166:	a6 1b       	sub	r26, r22
    2168:	b7 0b       	sbc	r27, r23

0000216a <__udivmodhi4_ep>:
    216a:	88 1f       	adc	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	5a 95       	dec	r21
    2170:	a9 f7       	brne	.-22     	; 0x215c <__udivmodhi4_loop>
    2172:	80 95       	com	r24
    2174:	90 95       	com	r25
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	08 95       	ret

0000217c <strcpy>:
    217c:	fb 01       	movw	r30, r22
    217e:	dc 01       	movw	r26, r24
    2180:	01 90       	ld	r0, Z+
    2182:	0d 92       	st	X+, r0
    2184:	00 20       	and	r0, r0
    2186:	e1 f7       	brne	.-8      	; 0x2180 <strcpy+0x4>
    2188:	08 95       	ret

0000218a <strlen>:
    218a:	fc 01       	movw	r30, r24
    218c:	01 90       	ld	r0, Z+
    218e:	00 20       	and	r0, r0
    2190:	e9 f7       	brne	.-6      	; 0x218c <strlen+0x2>
    2192:	80 95       	com	r24
    2194:	90 95       	com	r25
    2196:	8e 0f       	add	r24, r30
    2198:	9f 1f       	adc	r25, r31
    219a:	08 95       	ret

0000219c <vsprintf>:
    219c:	ae e0       	ldi	r26, 0x0E	; 14
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e4 ed       	ldi	r30, 0xD4	; 212
    21a2:	f0 e1       	ldi	r31, 0x10	; 16
    21a4:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x1c>
    21a8:	8c 01       	movw	r16, r24
    21aa:	86 e0       	ldi	r24, 0x06	; 6
    21ac:	8c 83       	std	Y+4, r24	; 0x04
    21ae:	1a 83       	std	Y+2, r17	; 0x02
    21b0:	09 83       	std	Y+1, r16	; 0x01
    21b2:	8f ef       	ldi	r24, 0xFF	; 255
    21b4:	9f e7       	ldi	r25, 0x7F	; 127
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	ce 01       	movw	r24, r28
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <vfprintf>
    21c2:	ef 81       	ldd	r30, Y+7	; 0x07
    21c4:	f8 85       	ldd	r31, Y+8	; 0x08
    21c6:	e0 0f       	add	r30, r16
    21c8:	f1 1f       	adc	r31, r17
    21ca:	10 82       	st	Z, r1
    21cc:	2e 96       	adiw	r28, 0x0e	; 14
    21ce:	e4 e0       	ldi	r30, 0x04	; 4
    21d0:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x1c>

000021d4 <vfprintf>:
    21d4:	ac e0       	ldi	r26, 0x0C	; 12
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e0 ef       	ldi	r30, 0xF0	; 240
    21da:	f0 e1       	ldi	r31, 0x10	; 16
    21dc:	0c 94 87 13 	jmp	0x270e	; 0x270e <__prologue_saves__>
    21e0:	6c 01       	movw	r12, r24
    21e2:	1b 01       	movw	r2, r22
    21e4:	8a 01       	movw	r16, r20
    21e6:	fc 01       	movw	r30, r24
    21e8:	17 82       	std	Z+7, r1	; 0x07
    21ea:	16 82       	std	Z+6, r1	; 0x06
    21ec:	83 81       	ldd	r24, Z+3	; 0x03
    21ee:	81 ff       	sbrs	r24, 1
    21f0:	d1 c1       	rjmp	.+930    	; 0x2594 <vfprintf+0x3c0>
    21f2:	2e 01       	movw	r4, r28
    21f4:	08 94       	sec
    21f6:	41 1c       	adc	r4, r1
    21f8:	51 1c       	adc	r5, r1
    21fa:	f6 01       	movw	r30, r12
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	f1 01       	movw	r30, r2
    2200:	93 fd       	sbrc	r25, 3
    2202:	85 91       	lpm	r24, Z+
    2204:	93 ff       	sbrs	r25, 3
    2206:	81 91       	ld	r24, Z+
    2208:	1f 01       	movw	r2, r30
    220a:	88 23       	and	r24, r24
    220c:	09 f4       	brne	.+2      	; 0x2210 <vfprintf+0x3c>
    220e:	be c1       	rjmp	.+892    	; 0x258c <vfprintf+0x3b8>
    2210:	85 32       	cpi	r24, 0x25	; 37
    2212:	39 f4       	brne	.+14     	; 0x2222 <vfprintf+0x4e>
    2214:	93 fd       	sbrc	r25, 3
    2216:	85 91       	lpm	r24, Z+
    2218:	93 ff       	sbrs	r25, 3
    221a:	81 91       	ld	r24, Z+
    221c:	1f 01       	movw	r2, r30
    221e:	85 32       	cpi	r24, 0x25	; 37
    2220:	29 f4       	brne	.+10     	; 0x222c <vfprintf+0x58>
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	b6 01       	movw	r22, r12
    2226:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    222a:	e7 cf       	rjmp	.-50     	; 0x21fa <vfprintf+0x26>
    222c:	ee 24       	eor	r14, r14
    222e:	ff 24       	eor	r15, r15
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	20 32       	cpi	r18, 0x20	; 32
    2234:	b0 f4       	brcc	.+44     	; 0x2262 <vfprintf+0x8e>
    2236:	8b 32       	cpi	r24, 0x2B	; 43
    2238:	69 f0       	breq	.+26     	; 0x2254 <vfprintf+0x80>
    223a:	8c 32       	cpi	r24, 0x2C	; 44
    223c:	28 f4       	brcc	.+10     	; 0x2248 <vfprintf+0x74>
    223e:	80 32       	cpi	r24, 0x20	; 32
    2240:	51 f0       	breq	.+20     	; 0x2256 <vfprintf+0x82>
    2242:	83 32       	cpi	r24, 0x23	; 35
    2244:	71 f4       	brne	.+28     	; 0x2262 <vfprintf+0x8e>
    2246:	0b c0       	rjmp	.+22     	; 0x225e <vfprintf+0x8a>
    2248:	8d 32       	cpi	r24, 0x2D	; 45
    224a:	39 f0       	breq	.+14     	; 0x225a <vfprintf+0x86>
    224c:	80 33       	cpi	r24, 0x30	; 48
    224e:	49 f4       	brne	.+18     	; 0x2262 <vfprintf+0x8e>
    2250:	21 60       	ori	r18, 0x01	; 1
    2252:	2c c0       	rjmp	.+88     	; 0x22ac <vfprintf+0xd8>
    2254:	22 60       	ori	r18, 0x02	; 2
    2256:	24 60       	ori	r18, 0x04	; 4
    2258:	29 c0       	rjmp	.+82     	; 0x22ac <vfprintf+0xd8>
    225a:	28 60       	ori	r18, 0x08	; 8
    225c:	27 c0       	rjmp	.+78     	; 0x22ac <vfprintf+0xd8>
    225e:	20 61       	ori	r18, 0x10	; 16
    2260:	25 c0       	rjmp	.+74     	; 0x22ac <vfprintf+0xd8>
    2262:	27 fd       	sbrc	r18, 7
    2264:	2c c0       	rjmp	.+88     	; 0x22be <vfprintf+0xea>
    2266:	38 2f       	mov	r19, r24
    2268:	30 53       	subi	r19, 0x30	; 48
    226a:	3a 30       	cpi	r19, 0x0A	; 10
    226c:	98 f4       	brcc	.+38     	; 0x2294 <vfprintf+0xc0>
    226e:	26 ff       	sbrs	r18, 6
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <vfprintf+0xae>
    2272:	8e 2d       	mov	r24, r14
    2274:	88 0f       	add	r24, r24
    2276:	e8 2e       	mov	r14, r24
    2278:	ee 0c       	add	r14, r14
    227a:	ee 0c       	add	r14, r14
    227c:	e8 0e       	add	r14, r24
    227e:	e3 0e       	add	r14, r19
    2280:	15 c0       	rjmp	.+42     	; 0x22ac <vfprintf+0xd8>
    2282:	8f 2d       	mov	r24, r15
    2284:	88 0f       	add	r24, r24
    2286:	f8 2e       	mov	r15, r24
    2288:	ff 0c       	add	r15, r15
    228a:	ff 0c       	add	r15, r15
    228c:	f8 0e       	add	r15, r24
    228e:	f3 0e       	add	r15, r19
    2290:	20 62       	ori	r18, 0x20	; 32
    2292:	0c c0       	rjmp	.+24     	; 0x22ac <vfprintf+0xd8>
    2294:	8e 32       	cpi	r24, 0x2E	; 46
    2296:	21 f4       	brne	.+8      	; 0x22a0 <vfprintf+0xcc>
    2298:	26 fd       	sbrc	r18, 6
    229a:	78 c1       	rjmp	.+752    	; 0x258c <vfprintf+0x3b8>
    229c:	20 64       	ori	r18, 0x40	; 64
    229e:	06 c0       	rjmp	.+12     	; 0x22ac <vfprintf+0xd8>
    22a0:	8c 36       	cpi	r24, 0x6C	; 108
    22a2:	11 f4       	brne	.+4      	; 0x22a8 <vfprintf+0xd4>
    22a4:	20 68       	ori	r18, 0x80	; 128
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <vfprintf+0xd8>
    22a8:	88 36       	cpi	r24, 0x68	; 104
    22aa:	49 f4       	brne	.+18     	; 0x22be <vfprintf+0xea>
    22ac:	f1 01       	movw	r30, r2
    22ae:	93 fd       	sbrc	r25, 3
    22b0:	85 91       	lpm	r24, Z+
    22b2:	93 ff       	sbrs	r25, 3
    22b4:	81 91       	ld	r24, Z+
    22b6:	1f 01       	movw	r2, r30
    22b8:	88 23       	and	r24, r24
    22ba:	09 f0       	breq	.+2      	; 0x22be <vfprintf+0xea>
    22bc:	ba cf       	rjmp	.-140    	; 0x2232 <vfprintf+0x5e>
    22be:	98 2f       	mov	r25, r24
    22c0:	95 54       	subi	r25, 0x45	; 69
    22c2:	93 30       	cpi	r25, 0x03	; 3
    22c4:	18 f0       	brcs	.+6      	; 0x22cc <vfprintf+0xf8>
    22c6:	90 52       	subi	r25, 0x20	; 32
    22c8:	93 30       	cpi	r25, 0x03	; 3
    22ca:	28 f4       	brcc	.+10     	; 0x22d6 <vfprintf+0x102>
    22cc:	0c 5f       	subi	r16, 0xFC	; 252
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	ff e3       	ldi	r31, 0x3F	; 63
    22d2:	f9 83       	std	Y+1, r31	; 0x01
    22d4:	0d c0       	rjmp	.+26     	; 0x22f0 <vfprintf+0x11c>
    22d6:	83 36       	cpi	r24, 0x63	; 99
    22d8:	31 f0       	breq	.+12     	; 0x22e6 <vfprintf+0x112>
    22da:	83 37       	cpi	r24, 0x73	; 115
    22dc:	71 f0       	breq	.+28     	; 0x22fa <vfprintf+0x126>
    22de:	83 35       	cpi	r24, 0x53	; 83
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <vfprintf+0x110>
    22e2:	60 c0       	rjmp	.+192    	; 0x23a4 <vfprintf+0x1d0>
    22e4:	22 c0       	rjmp	.+68     	; 0x232a <vfprintf+0x156>
    22e6:	f8 01       	movw	r30, r16
    22e8:	80 81       	ld	r24, Z
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	0e 5f       	subi	r16, 0xFE	; 254
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	42 01       	movw	r8, r4
    22f2:	71 e0       	ldi	r23, 0x01	; 1
    22f4:	a7 2e       	mov	r10, r23
    22f6:	b1 2c       	mov	r11, r1
    22f8:	16 c0       	rjmp	.+44     	; 0x2326 <vfprintf+0x152>
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	66 2e       	mov	r6, r22
    22fe:	71 2c       	mov	r7, r1
    2300:	60 0e       	add	r6, r16
    2302:	71 1e       	adc	r7, r17
    2304:	f8 01       	movw	r30, r16
    2306:	80 80       	ld	r8, Z
    2308:	91 80       	ldd	r9, Z+1	; 0x01
    230a:	26 ff       	sbrs	r18, 6
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <vfprintf+0x140>
    230e:	6e 2d       	mov	r22, r14
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <vfprintf+0x144>
    2314:	6f ef       	ldi	r22, 0xFF	; 255
    2316:	7f ef       	ldi	r23, 0xFF	; 255
    2318:	c4 01       	movw	r24, r8
    231a:	2c 87       	std	Y+12, r18	; 0x0c
    231c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <strnlen>
    2320:	5c 01       	movw	r10, r24
    2322:	83 01       	movw	r16, r6
    2324:	2c 85       	ldd	r18, Y+12	; 0x0c
    2326:	2f 77       	andi	r18, 0x7F	; 127
    2328:	17 c0       	rjmp	.+46     	; 0x2358 <vfprintf+0x184>
    232a:	52 e0       	ldi	r21, 0x02	; 2
    232c:	65 2e       	mov	r6, r21
    232e:	71 2c       	mov	r7, r1
    2330:	60 0e       	add	r6, r16
    2332:	71 1e       	adc	r7, r17
    2334:	f8 01       	movw	r30, r16
    2336:	80 80       	ld	r8, Z
    2338:	91 80       	ldd	r9, Z+1	; 0x01
    233a:	26 ff       	sbrs	r18, 6
    233c:	03 c0       	rjmp	.+6      	; 0x2344 <vfprintf+0x170>
    233e:	6e 2d       	mov	r22, r14
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <vfprintf+0x174>
    2344:	6f ef       	ldi	r22, 0xFF	; 255
    2346:	7f ef       	ldi	r23, 0xFF	; 255
    2348:	c4 01       	movw	r24, r8
    234a:	2c 87       	std	Y+12, r18	; 0x0c
    234c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <strnlen_P>
    2350:	5c 01       	movw	r10, r24
    2352:	2c 85       	ldd	r18, Y+12	; 0x0c
    2354:	20 68       	ori	r18, 0x80	; 128
    2356:	83 01       	movw	r16, r6
    2358:	23 fd       	sbrc	r18, 3
    235a:	20 c0       	rjmp	.+64     	; 0x239c <vfprintf+0x1c8>
    235c:	08 c0       	rjmp	.+16     	; 0x236e <vfprintf+0x19a>
    235e:	80 e2       	ldi	r24, 0x20	; 32
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	b6 01       	movw	r22, r12
    2364:	2c 87       	std	Y+12, r18	; 0x0c
    2366:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    236a:	fa 94       	dec	r15
    236c:	2c 85       	ldd	r18, Y+12	; 0x0c
    236e:	8f 2d       	mov	r24, r15
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a8 16       	cp	r10, r24
    2374:	b9 06       	cpc	r11, r25
    2376:	98 f3       	brcs	.-26     	; 0x235e <vfprintf+0x18a>
    2378:	11 c0       	rjmp	.+34     	; 0x239c <vfprintf+0x1c8>
    237a:	f4 01       	movw	r30, r8
    237c:	27 fd       	sbrc	r18, 7
    237e:	85 91       	lpm	r24, Z+
    2380:	27 ff       	sbrs	r18, 7
    2382:	81 91       	ld	r24, Z+
    2384:	4f 01       	movw	r8, r30
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	b6 01       	movw	r22, r12
    238a:	2c 87       	std	Y+12, r18	; 0x0c
    238c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    2390:	2c 85       	ldd	r18, Y+12	; 0x0c
    2392:	f1 10       	cpse	r15, r1
    2394:	fa 94       	dec	r15
    2396:	08 94       	sec
    2398:	a1 08       	sbc	r10, r1
    239a:	b1 08       	sbc	r11, r1
    239c:	a1 14       	cp	r10, r1
    239e:	b1 04       	cpc	r11, r1
    23a0:	61 f7       	brne	.-40     	; 0x237a <vfprintf+0x1a6>
    23a2:	f1 c0       	rjmp	.+482    	; 0x2586 <vfprintf+0x3b2>
    23a4:	84 36       	cpi	r24, 0x64	; 100
    23a6:	11 f0       	breq	.+4      	; 0x23ac <vfprintf+0x1d8>
    23a8:	89 36       	cpi	r24, 0x69	; 105
    23aa:	49 f5       	brne	.+82     	; 0x23fe <vfprintf+0x22a>
    23ac:	27 ff       	sbrs	r18, 7
    23ae:	08 c0       	rjmp	.+16     	; 0x23c0 <vfprintf+0x1ec>
    23b0:	f8 01       	movw	r30, r16
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	0c 5f       	subi	r16, 0xFC	; 252
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	09 c0       	rjmp	.+18     	; 0x23d2 <vfprintf+0x1fe>
    23c0:	f8 01       	movw	r30, r16
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	88 27       	eor	r24, r24
    23c8:	77 fd       	sbrc	r23, 7
    23ca:	80 95       	com	r24
    23cc:	98 2f       	mov	r25, r24
    23ce:	0e 5f       	subi	r16, 0xFE	; 254
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	4f e6       	ldi	r20, 0x6F	; 111
    23d4:	b4 2e       	mov	r11, r20
    23d6:	b2 22       	and	r11, r18
    23d8:	97 ff       	sbrs	r25, 7
    23da:	09 c0       	rjmp	.+18     	; 0x23ee <vfprintf+0x21a>
    23dc:	90 95       	com	r25
    23de:	80 95       	com	r24
    23e0:	70 95       	com	r23
    23e2:	61 95       	neg	r22
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	8f 4f       	sbci	r24, 0xFF	; 255
    23e8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ea:	f0 e8       	ldi	r31, 0x80	; 128
    23ec:	bf 2a       	or	r11, r31
    23ee:	a2 01       	movw	r20, r4
    23f0:	2a e0       	ldi	r18, 0x0A	; 10
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	0e 94 29 13 	call	0x2652	; 0x2652 <__ultoa_invert>
    23f8:	78 2e       	mov	r7, r24
    23fa:	74 18       	sub	r7, r4
    23fc:	45 c0       	rjmp	.+138    	; 0x2488 <vfprintf+0x2b4>
    23fe:	85 37       	cpi	r24, 0x75	; 117
    2400:	31 f4       	brne	.+12     	; 0x240e <vfprintf+0x23a>
    2402:	3f ee       	ldi	r19, 0xEF	; 239
    2404:	b3 2e       	mov	r11, r19
    2406:	b2 22       	and	r11, r18
    2408:	2a e0       	ldi	r18, 0x0A	; 10
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	25 c0       	rjmp	.+74     	; 0x2458 <vfprintf+0x284>
    240e:	99 ef       	ldi	r25, 0xF9	; 249
    2410:	b9 2e       	mov	r11, r25
    2412:	b2 22       	and	r11, r18
    2414:	8f 36       	cpi	r24, 0x6F	; 111
    2416:	c1 f0       	breq	.+48     	; 0x2448 <vfprintf+0x274>
    2418:	80 37       	cpi	r24, 0x70	; 112
    241a:	20 f4       	brcc	.+8      	; 0x2424 <vfprintf+0x250>
    241c:	88 35       	cpi	r24, 0x58	; 88
    241e:	09 f0       	breq	.+2      	; 0x2422 <vfprintf+0x24e>
    2420:	b5 c0       	rjmp	.+362    	; 0x258c <vfprintf+0x3b8>
    2422:	0d c0       	rjmp	.+26     	; 0x243e <vfprintf+0x26a>
    2424:	80 37       	cpi	r24, 0x70	; 112
    2426:	21 f0       	breq	.+8      	; 0x2430 <vfprintf+0x25c>
    2428:	88 37       	cpi	r24, 0x78	; 120
    242a:	09 f0       	breq	.+2      	; 0x242e <vfprintf+0x25a>
    242c:	af c0       	rjmp	.+350    	; 0x258c <vfprintf+0x3b8>
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <vfprintf+0x260>
    2430:	20 e1       	ldi	r18, 0x10	; 16
    2432:	b2 2a       	or	r11, r18
    2434:	b4 fe       	sbrs	r11, 4
    2436:	0b c0       	rjmp	.+22     	; 0x244e <vfprintf+0x27a>
    2438:	84 e0       	ldi	r24, 0x04	; 4
    243a:	b8 2a       	or	r11, r24
    243c:	08 c0       	rjmp	.+16     	; 0x244e <vfprintf+0x27a>
    243e:	b4 fe       	sbrs	r11, 4
    2440:	09 c0       	rjmp	.+18     	; 0x2454 <vfprintf+0x280>
    2442:	e6 e0       	ldi	r30, 0x06	; 6
    2444:	be 2a       	or	r11, r30
    2446:	06 c0       	rjmp	.+12     	; 0x2454 <vfprintf+0x280>
    2448:	28 e0       	ldi	r18, 0x08	; 8
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	05 c0       	rjmp	.+10     	; 0x2458 <vfprintf+0x284>
    244e:	20 e1       	ldi	r18, 0x10	; 16
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <vfprintf+0x284>
    2454:	20 e1       	ldi	r18, 0x10	; 16
    2456:	32 e0       	ldi	r19, 0x02	; 2
    2458:	b7 fe       	sbrs	r11, 7
    245a:	08 c0       	rjmp	.+16     	; 0x246c <vfprintf+0x298>
    245c:	f8 01       	movw	r30, r16
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	0c 5f       	subi	r16, 0xFC	; 252
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	07 c0       	rjmp	.+14     	; 0x247a <vfprintf+0x2a6>
    246c:	f8 01       	movw	r30, r16
    246e:	60 81       	ld	r22, Z
    2470:	71 81       	ldd	r23, Z+1	; 0x01
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 5f       	subi	r16, 0xFE	; 254
    2478:	1f 4f       	sbci	r17, 0xFF	; 255
    247a:	a2 01       	movw	r20, r4
    247c:	0e 94 29 13 	call	0x2652	; 0x2652 <__ultoa_invert>
    2480:	78 2e       	mov	r7, r24
    2482:	74 18       	sub	r7, r4
    2484:	ff e7       	ldi	r31, 0x7F	; 127
    2486:	bf 22       	and	r11, r31
    2488:	b6 fe       	sbrs	r11, 6
    248a:	0b c0       	rjmp	.+22     	; 0x24a2 <vfprintf+0x2ce>
    248c:	2e ef       	ldi	r18, 0xFE	; 254
    248e:	b2 22       	and	r11, r18
    2490:	7e 14       	cp	r7, r14
    2492:	38 f4       	brcc	.+14     	; 0x24a2 <vfprintf+0x2ce>
    2494:	b4 fe       	sbrs	r11, 4
    2496:	07 c0       	rjmp	.+14     	; 0x24a6 <vfprintf+0x2d2>
    2498:	b2 fc       	sbrc	r11, 2
    249a:	05 c0       	rjmp	.+10     	; 0x24a6 <vfprintf+0x2d2>
    249c:	8f ee       	ldi	r24, 0xEF	; 239
    249e:	b8 22       	and	r11, r24
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <vfprintf+0x2d2>
    24a2:	a7 2c       	mov	r10, r7
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <vfprintf+0x2d4>
    24a6:	ae 2c       	mov	r10, r14
    24a8:	8b 2d       	mov	r24, r11
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	b4 fe       	sbrs	r11, 4
    24ae:	0d c0       	rjmp	.+26     	; 0x24ca <vfprintf+0x2f6>
    24b0:	fe 01       	movw	r30, r28
    24b2:	e7 0d       	add	r30, r7
    24b4:	f1 1d       	adc	r31, r1
    24b6:	20 81       	ld	r18, Z
    24b8:	20 33       	cpi	r18, 0x30	; 48
    24ba:	19 f4       	brne	.+6      	; 0x24c2 <vfprintf+0x2ee>
    24bc:	e9 ee       	ldi	r30, 0xE9	; 233
    24be:	be 22       	and	r11, r30
    24c0:	09 c0       	rjmp	.+18     	; 0x24d4 <vfprintf+0x300>
    24c2:	a3 94       	inc	r10
    24c4:	b2 fe       	sbrs	r11, 2
    24c6:	06 c0       	rjmp	.+12     	; 0x24d4 <vfprintf+0x300>
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <vfprintf+0x2fe>
    24ca:	86 78       	andi	r24, 0x86	; 134
    24cc:	90 70       	andi	r25, 0x00	; 0
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <vfprintf+0x300>
    24d2:	a3 94       	inc	r10
    24d4:	8b 2c       	mov	r8, r11
    24d6:	99 24       	eor	r9, r9
    24d8:	b3 fc       	sbrc	r11, 3
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <vfprintf+0x330>
    24dc:	b0 fe       	sbrs	r11, 0
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <vfprintf+0x32a>
    24e0:	af 14       	cp	r10, r15
    24e2:	28 f4       	brcc	.+10     	; 0x24ee <vfprintf+0x31a>
    24e4:	e7 2c       	mov	r14, r7
    24e6:	ef 0c       	add	r14, r15
    24e8:	ea 18       	sub	r14, r10
    24ea:	af 2c       	mov	r10, r15
    24ec:	08 c0       	rjmp	.+16     	; 0x24fe <vfprintf+0x32a>
    24ee:	e7 2c       	mov	r14, r7
    24f0:	06 c0       	rjmp	.+12     	; 0x24fe <vfprintf+0x32a>
    24f2:	80 e2       	ldi	r24, 0x20	; 32
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	b6 01       	movw	r22, r12
    24f8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    24fc:	a3 94       	inc	r10
    24fe:	af 14       	cp	r10, r15
    2500:	c0 f3       	brcs	.-16     	; 0x24f2 <vfprintf+0x31e>
    2502:	04 c0       	rjmp	.+8      	; 0x250c <vfprintf+0x338>
    2504:	af 14       	cp	r10, r15
    2506:	10 f4       	brcc	.+4      	; 0x250c <vfprintf+0x338>
    2508:	fa 18       	sub	r15, r10
    250a:	01 c0       	rjmp	.+2      	; 0x250e <vfprintf+0x33a>
    250c:	ff 24       	eor	r15, r15
    250e:	84 fe       	sbrs	r8, 4
    2510:	0f c0       	rjmp	.+30     	; 0x2530 <vfprintf+0x35c>
    2512:	80 e3       	ldi	r24, 0x30	; 48
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	b6 01       	movw	r22, r12
    2518:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    251c:	82 fe       	sbrs	r8, 2
    251e:	1f c0       	rjmp	.+62     	; 0x255e <vfprintf+0x38a>
    2520:	81 fe       	sbrs	r8, 1
    2522:	03 c0       	rjmp	.+6      	; 0x252a <vfprintf+0x356>
    2524:	88 e5       	ldi	r24, 0x58	; 88
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	10 c0       	rjmp	.+32     	; 0x254a <vfprintf+0x376>
    252a:	88 e7       	ldi	r24, 0x78	; 120
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0d c0       	rjmp	.+26     	; 0x254a <vfprintf+0x376>
    2530:	c4 01       	movw	r24, r8
    2532:	86 78       	andi	r24, 0x86	; 134
    2534:	90 70       	andi	r25, 0x00	; 0
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	91 f0       	breq	.+36     	; 0x255e <vfprintf+0x38a>
    253a:	81 fc       	sbrc	r8, 1
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <vfprintf+0x36e>
    253e:	80 e2       	ldi	r24, 0x20	; 32
    2540:	01 c0       	rjmp	.+2      	; 0x2544 <vfprintf+0x370>
    2542:	8b e2       	ldi	r24, 0x2B	; 43
    2544:	b7 fc       	sbrc	r11, 7
    2546:	8d e2       	ldi	r24, 0x2D	; 45
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	b6 01       	movw	r22, r12
    254c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    2550:	06 c0       	rjmp	.+12     	; 0x255e <vfprintf+0x38a>
    2552:	80 e3       	ldi	r24, 0x30	; 48
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	b6 01       	movw	r22, r12
    2558:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    255c:	ea 94       	dec	r14
    255e:	7e 14       	cp	r7, r14
    2560:	c0 f3       	brcs	.-16     	; 0x2552 <vfprintf+0x37e>
    2562:	7a 94       	dec	r7
    2564:	f2 01       	movw	r30, r4
    2566:	e7 0d       	add	r30, r7
    2568:	f1 1d       	adc	r31, r1
    256a:	80 81       	ld	r24, Z
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	b6 01       	movw	r22, r12
    2570:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    2574:	77 20       	and	r7, r7
    2576:	a9 f7       	brne	.-22     	; 0x2562 <vfprintf+0x38e>
    2578:	06 c0       	rjmp	.+12     	; 0x2586 <vfprintf+0x3b2>
    257a:	80 e2       	ldi	r24, 0x20	; 32
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	b6 01       	movw	r22, r12
    2580:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fputc>
    2584:	fa 94       	dec	r15
    2586:	ff 20       	and	r15, r15
    2588:	c1 f7       	brne	.-16     	; 0x257a <vfprintf+0x3a6>
    258a:	37 ce       	rjmp	.-914    	; 0x21fa <vfprintf+0x26>
    258c:	f6 01       	movw	r30, r12
    258e:	26 81       	ldd	r18, Z+6	; 0x06
    2590:	37 81       	ldd	r19, Z+7	; 0x07
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <vfprintf+0x3c4>
    2594:	2f ef       	ldi	r18, 0xFF	; 255
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	c9 01       	movw	r24, r18
    259a:	2c 96       	adiw	r28, 0x0c	; 12
    259c:	e2 e1       	ldi	r30, 0x12	; 18
    259e:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__epilogue_restores__>

000025a2 <__eerd_byte_m328p>:
    25a2:	f9 99       	sbic	0x1f, 1	; 31
    25a4:	fe cf       	rjmp	.-4      	; 0x25a2 <__eerd_byte_m328p>
    25a6:	92 bd       	out	0x22, r25	; 34
    25a8:	81 bd       	out	0x21, r24	; 33
    25aa:	f8 9a       	sbi	0x1f, 0	; 31
    25ac:	99 27       	eor	r25, r25
    25ae:	80 b5       	in	r24, 0x20	; 32
    25b0:	08 95       	ret

000025b2 <__eewr_byte_m328p>:
    25b2:	26 2f       	mov	r18, r22

000025b4 <__eewr_r18_m328p>:
    25b4:	f9 99       	sbic	0x1f, 1	; 31
    25b6:	fe cf       	rjmp	.-4      	; 0x25b4 <__eewr_r18_m328p>
    25b8:	1f ba       	out	0x1f, r1	; 31
    25ba:	92 bd       	out	0x22, r25	; 34
    25bc:	81 bd       	out	0x21, r24	; 33
    25be:	20 bd       	out	0x20, r18	; 32
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	fa 9a       	sbi	0x1f, 2	; 31
    25c6:	f9 9a       	sbi	0x1f, 1	; 31
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	01 96       	adiw	r24, 0x01	; 1
    25cc:	08 95       	ret

000025ce <strnlen_P>:
    25ce:	fc 01       	movw	r30, r24
    25d0:	05 90       	lpm	r0, Z+
    25d2:	61 50       	subi	r22, 0x01	; 1
    25d4:	70 40       	sbci	r23, 0x00	; 0
    25d6:	01 10       	cpse	r0, r1
    25d8:	d8 f7       	brcc	.-10     	; 0x25d0 <strnlen_P+0x2>
    25da:	80 95       	com	r24
    25dc:	90 95       	com	r25
    25de:	8e 0f       	add	r24, r30
    25e0:	9f 1f       	adc	r25, r31
    25e2:	08 95       	ret

000025e4 <strnlen>:
    25e4:	fc 01       	movw	r30, r24
    25e6:	61 50       	subi	r22, 0x01	; 1
    25e8:	70 40       	sbci	r23, 0x00	; 0
    25ea:	01 90       	ld	r0, Z+
    25ec:	01 10       	cpse	r0, r1
    25ee:	d8 f7       	brcc	.-10     	; 0x25e6 <strnlen+0x2>
    25f0:	80 95       	com	r24
    25f2:	90 95       	com	r25
    25f4:	8e 0f       	add	r24, r30
    25f6:	9f 1f       	adc	r25, r31
    25f8:	08 95       	ret

000025fa <fputc>:
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	8c 01       	movw	r16, r24
    2604:	eb 01       	movw	r28, r22
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	81 ff       	sbrs	r24, 1
    260a:	1b c0       	rjmp	.+54     	; 0x2642 <fputc+0x48>
    260c:	82 ff       	sbrs	r24, 2
    260e:	0d c0       	rjmp	.+26     	; 0x262a <fputc+0x30>
    2610:	2e 81       	ldd	r18, Y+6	; 0x06
    2612:	3f 81       	ldd	r19, Y+7	; 0x07
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	9d 81       	ldd	r25, Y+5	; 0x05
    2618:	28 17       	cp	r18, r24
    261a:	39 07       	cpc	r19, r25
    261c:	64 f4       	brge	.+24     	; 0x2636 <fputc+0x3c>
    261e:	e8 81       	ld	r30, Y
    2620:	f9 81       	ldd	r31, Y+1	; 0x01
    2622:	01 93       	st	Z+, r16
    2624:	f9 83       	std	Y+1, r31	; 0x01
    2626:	e8 83       	st	Y, r30
    2628:	06 c0       	rjmp	.+12     	; 0x2636 <fputc+0x3c>
    262a:	e8 85       	ldd	r30, Y+8	; 0x08
    262c:	f9 85       	ldd	r31, Y+9	; 0x09
    262e:	80 2f       	mov	r24, r16
    2630:	09 95       	icall
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	31 f4       	brne	.+12     	; 0x2642 <fputc+0x48>
    2636:	8e 81       	ldd	r24, Y+6	; 0x06
    2638:	9f 81       	ldd	r25, Y+7	; 0x07
    263a:	01 96       	adiw	r24, 0x01	; 1
    263c:	9f 83       	std	Y+7, r25	; 0x07
    263e:	8e 83       	std	Y+6, r24	; 0x06
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <fputc+0x4c>
    2642:	0f ef       	ldi	r16, 0xFF	; 255
    2644:	1f ef       	ldi	r17, 0xFF	; 255
    2646:	c8 01       	movw	r24, r16
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret

00002652 <__ultoa_invert>:
    2652:	fa 01       	movw	r30, r20
    2654:	aa 27       	eor	r26, r26
    2656:	28 30       	cpi	r18, 0x08	; 8
    2658:	51 f1       	breq	.+84     	; 0x26ae <__ultoa_invert+0x5c>
    265a:	20 31       	cpi	r18, 0x10	; 16
    265c:	81 f1       	breq	.+96     	; 0x26be <__ultoa_invert+0x6c>
    265e:	e8 94       	clt
    2660:	6f 93       	push	r22
    2662:	6e 7f       	andi	r22, 0xFE	; 254
    2664:	6e 5f       	subi	r22, 0xFE	; 254
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	8f 4f       	sbci	r24, 0xFF	; 255
    266a:	9f 4f       	sbci	r25, 0xFF	; 255
    266c:	af 4f       	sbci	r26, 0xFF	; 255
    266e:	b1 e0       	ldi	r27, 0x01	; 1
    2670:	3e d0       	rcall	.+124    	; 0x26ee <__ultoa_invert+0x9c>
    2672:	b4 e0       	ldi	r27, 0x04	; 4
    2674:	3c d0       	rcall	.+120    	; 0x26ee <__ultoa_invert+0x9c>
    2676:	67 0f       	add	r22, r23
    2678:	78 1f       	adc	r23, r24
    267a:	89 1f       	adc	r24, r25
    267c:	9a 1f       	adc	r25, r26
    267e:	a1 1d       	adc	r26, r1
    2680:	68 0f       	add	r22, r24
    2682:	79 1f       	adc	r23, r25
    2684:	8a 1f       	adc	r24, r26
    2686:	91 1d       	adc	r25, r1
    2688:	a1 1d       	adc	r26, r1
    268a:	6a 0f       	add	r22, r26
    268c:	71 1d       	adc	r23, r1
    268e:	81 1d       	adc	r24, r1
    2690:	91 1d       	adc	r25, r1
    2692:	a1 1d       	adc	r26, r1
    2694:	20 d0       	rcall	.+64     	; 0x26d6 <__ultoa_invert+0x84>
    2696:	09 f4       	brne	.+2      	; 0x269a <__ultoa_invert+0x48>
    2698:	68 94       	set
    269a:	3f 91       	pop	r19
    269c:	2a e0       	ldi	r18, 0x0A	; 10
    269e:	26 9f       	mul	r18, r22
    26a0:	11 24       	eor	r1, r1
    26a2:	30 19       	sub	r19, r0
    26a4:	30 5d       	subi	r19, 0xD0	; 208
    26a6:	31 93       	st	Z+, r19
    26a8:	de f6       	brtc	.-74     	; 0x2660 <__ultoa_invert+0xe>
    26aa:	cf 01       	movw	r24, r30
    26ac:	08 95       	ret
    26ae:	46 2f       	mov	r20, r22
    26b0:	47 70       	andi	r20, 0x07	; 7
    26b2:	40 5d       	subi	r20, 0xD0	; 208
    26b4:	41 93       	st	Z+, r20
    26b6:	b3 e0       	ldi	r27, 0x03	; 3
    26b8:	0f d0       	rcall	.+30     	; 0x26d8 <__ultoa_invert+0x86>
    26ba:	c9 f7       	brne	.-14     	; 0x26ae <__ultoa_invert+0x5c>
    26bc:	f6 cf       	rjmp	.-20     	; 0x26aa <__ultoa_invert+0x58>
    26be:	46 2f       	mov	r20, r22
    26c0:	4f 70       	andi	r20, 0x0F	; 15
    26c2:	40 5d       	subi	r20, 0xD0	; 208
    26c4:	4a 33       	cpi	r20, 0x3A	; 58
    26c6:	18 f0       	brcs	.+6      	; 0x26ce <__ultoa_invert+0x7c>
    26c8:	49 5d       	subi	r20, 0xD9	; 217
    26ca:	31 fd       	sbrc	r19, 1
    26cc:	40 52       	subi	r20, 0x20	; 32
    26ce:	41 93       	st	Z+, r20
    26d0:	02 d0       	rcall	.+4      	; 0x26d6 <__ultoa_invert+0x84>
    26d2:	a9 f7       	brne	.-22     	; 0x26be <__ultoa_invert+0x6c>
    26d4:	ea cf       	rjmp	.-44     	; 0x26aa <__ultoa_invert+0x58>
    26d6:	b4 e0       	ldi	r27, 0x04	; 4
    26d8:	a6 95       	lsr	r26
    26da:	97 95       	ror	r25
    26dc:	87 95       	ror	r24
    26de:	77 95       	ror	r23
    26e0:	67 95       	ror	r22
    26e2:	ba 95       	dec	r27
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__ultoa_invert+0x86>
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	61 05       	cpc	r22, r1
    26ea:	71 05       	cpc	r23, r1
    26ec:	08 95       	ret
    26ee:	9b 01       	movw	r18, r22
    26f0:	ac 01       	movw	r20, r24
    26f2:	0a 2e       	mov	r0, r26
    26f4:	06 94       	lsr	r0
    26f6:	57 95       	ror	r21
    26f8:	47 95       	ror	r20
    26fa:	37 95       	ror	r19
    26fc:	27 95       	ror	r18
    26fe:	ba 95       	dec	r27
    2700:	c9 f7       	brne	.-14     	; 0x26f4 <__ultoa_invert+0xa2>
    2702:	62 0f       	add	r22, r18
    2704:	73 1f       	adc	r23, r19
    2706:	84 1f       	adc	r24, r20
    2708:	95 1f       	adc	r25, r21
    270a:	a0 1d       	adc	r26, r0
    270c:	08 95       	ret

0000270e <__prologue_saves__>:
    270e:	2f 92       	push	r2
    2710:	3f 92       	push	r3
    2712:	4f 92       	push	r4
    2714:	5f 92       	push	r5
    2716:	6f 92       	push	r6
    2718:	7f 92       	push	r7
    271a:	8f 92       	push	r8
    271c:	9f 92       	push	r9
    271e:	af 92       	push	r10
    2720:	bf 92       	push	r11
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	ca 1b       	sub	r28, r26
    2738:	db 0b       	sbc	r29, r27
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	09 94       	ijmp

00002746 <__epilogue_restores__>:
    2746:	2a 88       	ldd	r2, Y+18	; 0x12
    2748:	39 88       	ldd	r3, Y+17	; 0x11
    274a:	48 88       	ldd	r4, Y+16	; 0x10
    274c:	5f 84       	ldd	r5, Y+15	; 0x0f
    274e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2750:	7d 84       	ldd	r7, Y+13	; 0x0d
    2752:	8c 84       	ldd	r8, Y+12	; 0x0c
    2754:	9b 84       	ldd	r9, Y+11	; 0x0b
    2756:	aa 84       	ldd	r10, Y+10	; 0x0a
    2758:	b9 84       	ldd	r11, Y+9	; 0x09
    275a:	c8 84       	ldd	r12, Y+8	; 0x08
    275c:	df 80       	ldd	r13, Y+7	; 0x07
    275e:	ee 80       	ldd	r14, Y+6	; 0x06
    2760:	fd 80       	ldd	r15, Y+5	; 0x05
    2762:	0c 81       	ldd	r16, Y+4	; 0x04
    2764:	1b 81       	ldd	r17, Y+3	; 0x03
    2766:	aa 81       	ldd	r26, Y+2	; 0x02
    2768:	b9 81       	ldd	r27, Y+1	; 0x01
    276a:	ce 0f       	add	r28, r30
    276c:	d1 1d       	adc	r29, r1
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	ed 01       	movw	r28, r26
    277a:	08 95       	ret

0000277c <_exit>:
    277c:	f8 94       	cli

0000277e <__stop_program>:
    277e:	ff cf       	rjmp	.-2      	; 0x277e <__stop_program>
