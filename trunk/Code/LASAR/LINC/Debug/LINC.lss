
LINC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00003090  00003124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003090  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  0000312c  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  0000312c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00003db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00003f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002ca  00000000  00000000  00004166  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000031ae  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000147c  00000000  00000000  000075de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002851  00000000  00000000  00008a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  0000b2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000638  00000000  00000000  0000b56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000013e4  00000000  00000000  0000bba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000070e  00000000  00000000  0000cf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b0  00000000  00000000  0000d696  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a8 e0       	ldi	r26, 0x08	; 8
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	aa 30       	cpi	r26, 0x0A	; 10
      a4:	b1 07       	cpc	r27, r17
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>

000000a8 <__do_copy_data>:
      a8:	11 e0       	ldi	r17, 0x01	; 1
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	e0 e9       	ldi	r30, 0x90	; 144
      b0:	f0 e3       	ldi	r31, 0x30	; 48
      b2:	00 e0       	ldi	r16, 0x00	; 0
      b4:	0b bf       	out	0x3b, r16	; 59
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
      b8:	07 90       	elpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a8 30       	cpi	r26, 0x08	; 8
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>
      c2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <main>
      c6:	0c 94 46 18 	jmp	0x308c	; 0x308c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <_auxToggleE>:

//-----------------------------------------------------------------------------------------
// FUNCTION: _auxToggleE
// PURPOSE: flush channel E
void _auxToggleE(void)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	68 97       	sbiw	r28, 0x18	; 24
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
    lcd_e_high();
      e6:	85 e3       	ldi	r24, 0x35	; 53
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	25 e3       	ldi	r18, 0x35	; 53
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	f9 01       	movw	r30, r18
      f0:	20 81       	ld	r18, Z
      f2:	20 62       	ori	r18, 0x20	; 32
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	aa e7       	ldi	r26, 0x7A	; 122
      fe:	b4 e4       	ldi	r27, 0x44	; 68
     100:	89 83       	std	Y+1, r24	; 0x01
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	ab 83       	std	Y+3, r26	; 0x03
     106:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     108:	69 81       	ldd	r22, Y+1	; 0x01
     10a:	7a 81       	ldd	r23, Y+2	; 0x02
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
     110:	2b ea       	ldi	r18, 0xAB	; 171
     112:	3a ea       	ldi	r19, 0xAA	; 170
     114:	4a ea       	ldi	r20, 0xAA	; 170
     116:	5e e3       	ldi	r21, 0x3E	; 62
     118:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     11c:	dc 01       	movw	r26, r24
     11e:	cb 01       	movw	r24, r22
     120:	8d 83       	std	Y+5, r24	; 0x05
     122:	9e 83       	std	Y+6, r25	; 0x06
     124:	af 83       	std	Y+7, r26	; 0x07
     126:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     128:	11 e0       	ldi	r17, 0x01	; 1
     12a:	6d 81       	ldd	r22, Y+5	; 0x05
     12c:	7e 81       	ldd	r23, Y+6	; 0x06
     12e:	8f 81       	ldd	r24, Y+7	; 0x07
     130:	98 85       	ldd	r25, Y+8	; 0x08
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	40 e8       	ldi	r20, 0x80	; 128
     138:	5f e3       	ldi	r21, 0x3F	; 63
     13a:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     13e:	88 23       	and	r24, r24
     140:	0c f0       	brlt	.+2      	; 0x144 <_auxToggleE+0x76>
     142:	10 e0       	ldi	r17, 0x00	; 0
     144:	11 23       	and	r17, r17
     146:	19 f0       	breq	.+6      	; 0x14e <_auxToggleE+0x80>
		__ticks = 1;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	89 87       	std	Y+9, r24	; 0x09
     14c:	a3 c0       	rjmp	.+326    	; 0x294 <_auxToggleE+0x1c6>
	else if (__tmp > 255)
     14e:	11 e0       	ldi	r17, 0x01	; 1
     150:	6d 81       	ldd	r22, Y+5	; 0x05
     152:	7e 81       	ldd	r23, Y+6	; 0x06
     154:	8f 81       	ldd	r24, Y+7	; 0x07
     156:	98 85       	ldd	r25, Y+8	; 0x08
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	4f e7       	ldi	r20, 0x7F	; 127
     15e:	53 e4       	ldi	r21, 0x43	; 67
     160:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     164:	18 16       	cp	r1, r24
     166:	0c f0       	brlt	.+2      	; 0x16a <_auxToggleE+0x9c>
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	11 23       	and	r17, r17
     16c:	09 f4       	brne	.+2      	; 0x170 <_auxToggleE+0xa2>
     16e:	89 c0       	rjmp	.+274    	; 0x282 <_auxToggleE+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     170:	69 81       	ldd	r22, Y+1	; 0x01
     172:	7a 81       	ldd	r23, Y+2	; 0x02
     174:	8b 81       	ldd	r24, Y+3	; 0x03
     176:	9c 81       	ldd	r25, Y+4	; 0x04
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	4a e7       	ldi	r20, 0x7A	; 122
     17e:	54 e4       	ldi	r21, 0x44	; 68
     180:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     184:	dc 01       	movw	r26, r24
     186:	cb 01       	movw	r24, r22
     188:	8a 87       	std	Y+10, r24	; 0x0a
     18a:	9b 87       	std	Y+11, r25	; 0x0b
     18c:	ac 87       	std	Y+12, r26	; 0x0c
     18e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     190:	6a 85       	ldd	r22, Y+10	; 0x0a
     192:	7b 85       	ldd	r23, Y+11	; 0x0b
     194:	8c 85       	ldd	r24, Y+12	; 0x0c
     196:	9d 85       	ldd	r25, Y+13	; 0x0d
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	4a e7       	ldi	r20, 0x7A	; 122
     19e:	53 e4       	ldi	r21, 0x43	; 67
     1a0:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     1a4:	dc 01       	movw	r26, r24
     1a6:	cb 01       	movw	r24, r22
     1a8:	8e 87       	std	Y+14, r24	; 0x0e
     1aa:	9f 87       	std	Y+15, r25	; 0x0f
     1ac:	a8 8b       	std	Y+16, r26	; 0x10
     1ae:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	6e 85       	ldd	r22, Y+14	; 0x0e
     1b4:	7f 85       	ldd	r23, Y+15	; 0x0f
     1b6:	88 89       	ldd	r24, Y+16	; 0x10
     1b8:	99 89       	ldd	r25, Y+17	; 0x11
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e8       	ldi	r20, 0x80	; 128
     1c0:	5f e3       	ldi	r21, 0x3F	; 63
     1c2:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     1c6:	88 23       	and	r24, r24
     1c8:	0c f0       	brlt	.+2      	; 0x1cc <_auxToggleE+0xfe>
     1ca:	10 e0       	ldi	r17, 0x00	; 0
     1cc:	11 23       	and	r17, r17
     1ce:	29 f0       	breq	.+10     	; 0x1da <_auxToggleE+0x10c>
		__ticks = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	9b 8b       	std	Y+19, r25	; 0x13
     1d6:	8a 8b       	std	Y+18, r24	; 0x12
     1d8:	46 c0       	rjmp	.+140    	; 0x266 <_auxToggleE+0x198>
	else if (__tmp > 65535)
     1da:	11 e0       	ldi	r17, 0x01	; 1
     1dc:	6e 85       	ldd	r22, Y+14	; 0x0e
     1de:	7f 85       	ldd	r23, Y+15	; 0x0f
     1e0:	88 89       	ldd	r24, Y+16	; 0x10
     1e2:	99 89       	ldd	r25, Y+17	; 0x11
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	3f ef       	ldi	r19, 0xFF	; 255
     1e8:	4f e7       	ldi	r20, 0x7F	; 127
     1ea:	57 e4       	ldi	r21, 0x47	; 71
     1ec:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     1f0:	18 16       	cp	r1, r24
     1f2:	0c f0       	brlt	.+2      	; 0x1f6 <_auxToggleE+0x128>
     1f4:	10 e0       	ldi	r17, 0x00	; 0
     1f6:	11 23       	and	r17, r17
     1f8:	61 f1       	breq	.+88     	; 0x252 <_auxToggleE+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1fa:	6a 85       	ldd	r22, Y+10	; 0x0a
     1fc:	7b 85       	ldd	r23, Y+11	; 0x0b
     1fe:	8c 85       	ldd	r24, Y+12	; 0x0c
     200:	9d 85       	ldd	r25, Y+13	; 0x0d
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e2       	ldi	r20, 0x20	; 32
     208:	51 e4       	ldi	r21, 0x41	; 65
     20a:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	bc 01       	movw	r22, r24
     214:	cd 01       	movw	r24, r26
     216:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	9b 8b       	std	Y+19, r25	; 0x13
     220:	8a 8b       	std	Y+18, r24	; 0x12
     222:	12 c0       	rjmp	.+36     	; 0x248 <_auxToggleE+0x17a>
     224:	89 e1       	ldi	r24, 0x19	; 25
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	9d 8b       	std	Y+21, r25	; 0x15
     22a:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     22c:	8c 89       	ldd	r24, Y+20	; 0x14
     22e:	9d 89       	ldd	r25, Y+21	; 0x15
     230:	8c 01       	movw	r16, r24
     232:	c8 01       	movw	r24, r16
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <_auxToggleE+0x166>
     238:	8c 01       	movw	r16, r24
     23a:	1d 8b       	std	Y+21, r17	; 0x15
     23c:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     23e:	8a 89       	ldd	r24, Y+18	; 0x12
     240:	9b 89       	ldd	r25, Y+19	; 0x13
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	9b 8b       	std	Y+19, r25	; 0x13
     246:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     248:	8a 89       	ldd	r24, Y+18	; 0x12
     24a:	9b 89       	ldd	r25, Y+19	; 0x13
     24c:	00 97       	sbiw	r24, 0x00	; 0
     24e:	51 f7       	brne	.-44     	; 0x224 <_auxToggleE+0x156>
     250:	28 c0       	rjmp	.+80     	; 0x2a2 <_auxToggleE+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     252:	6e 85       	ldd	r22, Y+14	; 0x0e
     254:	7f 85       	ldd	r23, Y+15	; 0x0f
     256:	88 89       	ldd	r24, Y+16	; 0x10
     258:	99 89       	ldd	r25, Y+17	; 0x11
     25a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     25e:	dc 01       	movw	r26, r24
     260:	cb 01       	movw	r24, r22
     262:	9b 8b       	std	Y+19, r25	; 0x13
     264:	8a 8b       	std	Y+18, r24	; 0x12
     266:	8a 89       	ldd	r24, Y+18	; 0x12
     268:	9b 89       	ldd	r25, Y+19	; 0x13
     26a:	9f 8b       	std	Y+23, r25	; 0x17
     26c:	8e 8b       	std	Y+22, r24	; 0x16
     26e:	8e 89       	ldd	r24, Y+22	; 0x16
     270:	9f 89       	ldd	r25, Y+23	; 0x17
     272:	8c 01       	movw	r16, r24
     274:	f8 01       	movw	r30, r16
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <_auxToggleE+0x1a8>
     27a:	8f 01       	movw	r16, r30
     27c:	1f 8b       	std	Y+23, r17	; 0x17
     27e:	0e 8b       	std	Y+22, r16	; 0x16
     280:	10 c0       	rjmp	.+32     	; 0x2a2 <_auxToggleE+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     282:	6d 81       	ldd	r22, Y+5	; 0x05
     284:	7e 81       	ldd	r23, Y+6	; 0x06
     286:	8f 81       	ldd	r24, Y+7	; 0x07
     288:	98 85       	ldd	r25, Y+8	; 0x08
     28a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     28e:	dc 01       	movw	r26, r24
     290:	cb 01       	movw	r24, r22
     292:	89 87       	std	Y+9, r24	; 0x09
     294:	89 85       	ldd	r24, Y+9	; 0x09
     296:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     298:	88 8d       	ldd	r24, Y+24	; 0x18
     29a:	18 2f       	mov	r17, r24
     29c:	1a 95       	dec	r17
     29e:	f1 f7       	brne	.-4      	; 0x29c <_auxToggleE+0x1ce>
     2a0:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1000);
    lcd_e_low();
     2a2:	85 e3       	ldi	r24, 0x35	; 53
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	25 e3       	ldi	r18, 0x35	; 53
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	f9 01       	movw	r30, r18
     2ac:	20 81       	ld	r18, Z
     2ae:	2f 7d       	andi	r18, 0xDF	; 223
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
}
     2b4:	68 96       	adiw	r28, 0x18	; 24
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	cf 91       	pop	r28
     2c2:	df 91       	pop	r29
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <lcd_write>:

//-----------------------------------------------------------------------------------------
// FUNCTION: lcd_write
// PURPOSE: send a character or an instruction to the LCD
void lcd_write(uint8_t data,uint8_t rs) 
{
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	6a 97       	sbiw	r28, 0x1a	; 26
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	89 8f       	std	Y+25, r24	; 0x19
     2e4:	6a 8f       	std	Y+26, r22	; 0x1a
	//check write type
    if (rs)    
     2e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     2e8:	88 23       	and	r24, r24
     2ea:	51 f0       	breq	.+20     	; 0x300 <lcd_write+0x36>
       lcd_rs_high(); //write data
     2ec:	85 e3       	ldi	r24, 0x35	; 53
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	25 e3       	ldi	r18, 0x35	; 53
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	20 61       	ori	r18, 0x10	; 16
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <lcd_write+0x48>
    else     
       lcd_rs_low();  //write instruction
     300:	85 e3       	ldi	r24, 0x35	; 53
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	25 e3       	ldi	r18, 0x35	; 53
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7e       	andi	r18, 0xEF	; 239
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
        
    // configure data pins as output 
    DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     312:	84 e3       	ldi	r24, 0x34	; 52
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	24 e3       	ldi	r18, 0x34	; 52
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	20 81       	ld	r18, Z
     31e:	21 60       	ori	r18, 0x01	; 1
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
    DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     324:	84 e3       	ldi	r24, 0x34	; 52
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	24 e3       	ldi	r18, 0x34	; 52
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	20 81       	ld	r18, Z
     330:	22 60       	ori	r18, 0x02	; 2
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
    DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     336:	84 e3       	ldi	r24, 0x34	; 52
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	24 e3       	ldi	r18, 0x34	; 52
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	24 60       	ori	r18, 0x04	; 4
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
    DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     348:	84 e3       	ldi	r24, 0x34	; 52
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	24 e3       	ldi	r18, 0x34	; 52
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	f9 01       	movw	r30, r18
     352:	20 81       	ld	r18, Z
     354:	28 60       	ori	r18, 0x08	; 8
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
    
    // output high nibble first 
    LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     35a:	85 e3       	ldi	r24, 0x35	; 53
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	25 e3       	ldi	r18, 0x35	; 53
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	f9 01       	movw	r30, r18
     364:	20 81       	ld	r18, Z
     366:	27 7f       	andi	r18, 0xF7	; 247
     368:	fc 01       	movw	r30, r24
     36a:	20 83       	st	Z, r18
    LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     36c:	85 e3       	ldi	r24, 0x35	; 53
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	25 e3       	ldi	r18, 0x35	; 53
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	f9 01       	movw	r30, r18
     376:	20 81       	ld	r18, Z
     378:	2b 7f       	andi	r18, 0xFB	; 251
     37a:	fc 01       	movw	r30, r24
     37c:	20 83       	st	Z, r18
    LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     37e:	85 e3       	ldi	r24, 0x35	; 53
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	25 e3       	ldi	r18, 0x35	; 53
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	f9 01       	movw	r30, r18
     388:	20 81       	ld	r18, Z
     38a:	2d 7f       	andi	r18, 0xFD	; 253
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     390:	85 e3       	ldi	r24, 0x35	; 53
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	25 e3       	ldi	r18, 0x35	; 53
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	2e 7f       	andi	r18, 0xFE	; 254
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     3a2:	89 8d       	ldd	r24, Y+25	; 0x19
     3a4:	88 23       	and	r24, r24
     3a6:	4c f4       	brge	.+18     	; 0x3ba <lcd_write+0xf0>
     3a8:	85 e3       	ldi	r24, 0x35	; 53
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	25 e3       	ldi	r18, 0x35	; 53
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	28 60       	ori	r18, 0x08	; 8
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     3ba:	89 8d       	ldd	r24, Y+25	; 0x19
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 74       	andi	r24, 0x40	; 64
     3c2:	90 70       	andi	r25, 0x00	; 0
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	49 f0       	breq	.+18     	; 0x3da <lcd_write+0x110>
     3c8:	85 e3       	ldi	r24, 0x35	; 53
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	25 e3       	ldi	r18, 0x35	; 53
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	24 60       	ori	r18, 0x04	; 4
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     3da:	89 8d       	ldd	r24, Y+25	; 0x19
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	80 72       	andi	r24, 0x20	; 32
     3e2:	90 70       	andi	r25, 0x00	; 0
     3e4:	00 97       	sbiw	r24, 0x00	; 0
     3e6:	49 f0       	breq	.+18     	; 0x3fa <lcd_write+0x130>
     3e8:	85 e3       	ldi	r24, 0x35	; 53
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	25 e3       	ldi	r18, 0x35	; 53
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	f9 01       	movw	r30, r18
     3f2:	20 81       	ld	r18, Z
     3f4:	22 60       	ori	r18, 0x02	; 2
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     3fa:	89 8d       	ldd	r24, Y+25	; 0x19
     3fc:	88 2f       	mov	r24, r24
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	80 71       	andi	r24, 0x10	; 16
     402:	90 70       	andi	r25, 0x00	; 0
     404:	00 97       	sbiw	r24, 0x00	; 0
     406:	49 f0       	breq	.+18     	; 0x41a <lcd_write+0x150>
     408:	85 e3       	ldi	r24, 0x35	; 53
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	25 e3       	ldi	r18, 0x35	; 53
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	21 60       	ori	r18, 0x01	; 1
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
    lcd_e_toggle();
     41a:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
    
    // output low nibble 
    LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     41e:	85 e3       	ldi	r24, 0x35	; 53
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	25 e3       	ldi	r18, 0x35	; 53
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	f9 01       	movw	r30, r18
     428:	20 81       	ld	r18, Z
     42a:	27 7f       	andi	r18, 0xF7	; 247
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
    LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     430:	85 e3       	ldi	r24, 0x35	; 53
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	25 e3       	ldi	r18, 0x35	; 53
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	f9 01       	movw	r30, r18
     43a:	20 81       	ld	r18, Z
     43c:	2b 7f       	andi	r18, 0xFB	; 251
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
    LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     442:	85 e3       	ldi	r24, 0x35	; 53
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	25 e3       	ldi	r18, 0x35	; 53
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	f9 01       	movw	r30, r18
     44c:	20 81       	ld	r18, Z
     44e:	2d 7f       	andi	r18, 0xFD	; 253
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     454:	85 e3       	ldi	r24, 0x35	; 53
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	25 e3       	ldi	r18, 0x35	; 53
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	f9 01       	movw	r30, r18
     45e:	20 81       	ld	r18, Z
     460:	2e 7f       	andi	r18, 0xFE	; 254
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     466:	89 8d       	ldd	r24, Y+25	; 0x19
     468:	88 2f       	mov	r24, r24
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	88 70       	andi	r24, 0x08	; 8
     46e:	90 70       	andi	r25, 0x00	; 0
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	49 f0       	breq	.+18     	; 0x486 <lcd_write+0x1bc>
     474:	85 e3       	ldi	r24, 0x35	; 53
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	25 e3       	ldi	r18, 0x35	; 53
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	28 60       	ori	r18, 0x08	; 8
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     486:	89 8d       	ldd	r24, Y+25	; 0x19
     488:	88 2f       	mov	r24, r24
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	84 70       	andi	r24, 0x04	; 4
     48e:	90 70       	andi	r25, 0x00	; 0
     490:	00 97       	sbiw	r24, 0x00	; 0
     492:	49 f0       	breq	.+18     	; 0x4a6 <lcd_write+0x1dc>
     494:	85 e3       	ldi	r24, 0x35	; 53
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	25 e3       	ldi	r18, 0x35	; 53
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	f9 01       	movw	r30, r18
     49e:	20 81       	ld	r18, Z
     4a0:	24 60       	ori	r18, 0x04	; 4
     4a2:	fc 01       	movw	r30, r24
     4a4:	20 83       	st	Z, r18
	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     4a6:	89 8d       	ldd	r24, Y+25	; 0x19
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	82 70       	andi	r24, 0x02	; 2
     4ae:	90 70       	andi	r25, 0x00	; 0
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	49 f0       	breq	.+18     	; 0x4c6 <lcd_write+0x1fc>
     4b4:	85 e3       	ldi	r24, 0x35	; 53
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	25 e3       	ldi	r18, 0x35	; 53
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	22 60       	ori	r18, 0x02	; 2
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     4c6:	89 8d       	ldd	r24, Y+25	; 0x19
     4c8:	88 2f       	mov	r24, r24
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	81 70       	andi	r24, 0x01	; 1
     4ce:	90 70       	andi	r25, 0x00	; 0
     4d0:	88 23       	and	r24, r24
     4d2:	49 f0       	breq	.+18     	; 0x4e6 <lcd_write+0x21c>
     4d4:	85 e3       	ldi	r24, 0x35	; 53
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	25 e3       	ldi	r18, 0x35	; 53
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	f9 01       	movw	r30, r18
     4de:	20 81       	ld	r18, Z
     4e0:	21 60       	ori	r18, 0x01	; 1
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
    lcd_e_toggle();        
     4e6:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
    
    // all data pins high (inactive) 
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     4ea:	85 e3       	ldi	r24, 0x35	; 53
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	25 e3       	ldi	r18, 0x35	; 53
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	f9 01       	movw	r30, r18
     4f4:	20 81       	ld	r18, Z
     4f6:	21 60       	ori	r18, 0x01	; 1
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     4fc:	85 e3       	ldi	r24, 0x35	; 53
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	25 e3       	ldi	r18, 0x35	; 53
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	f9 01       	movw	r30, r18
     506:	20 81       	ld	r18, Z
     508:	22 60       	ori	r18, 0x02	; 2
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
    LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     50e:	85 e3       	ldi	r24, 0x35	; 53
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	25 e3       	ldi	r18, 0x35	; 53
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	24 60       	ori	r18, 0x04	; 4
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
    LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     520:	85 e3       	ldi	r24, 0x35	; 53
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	25 e3       	ldi	r18, 0x35	; 53
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	f9 01       	movw	r30, r18
     52a:	20 81       	ld	r18, Z
     52c:	28 60       	ori	r18, 0x08	; 8
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	aa e7       	ldi	r26, 0x7A	; 122
     538:	b3 e4       	ldi	r27, 0x43	; 67
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	ab 83       	std	Y+3, r26	; 0x03
     540:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     542:	69 81       	ldd	r22, Y+1	; 0x01
     544:	7a 81       	ldd	r23, Y+2	; 0x02
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	9c 81       	ldd	r25, Y+4	; 0x04
     54a:	2b ea       	ldi	r18, 0xAB	; 171
     54c:	3a ea       	ldi	r19, 0xAA	; 170
     54e:	4a ea       	ldi	r20, 0xAA	; 170
     550:	5e e3       	ldi	r21, 0x3E	; 62
     552:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	8d 83       	std	Y+5, r24	; 0x05
     55c:	9e 83       	std	Y+6, r25	; 0x06
     55e:	af 83       	std	Y+7, r26	; 0x07
     560:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     562:	11 e0       	ldi	r17, 0x01	; 1
     564:	6d 81       	ldd	r22, Y+5	; 0x05
     566:	7e 81       	ldd	r23, Y+6	; 0x06
     568:	8f 81       	ldd	r24, Y+7	; 0x07
     56a:	98 85       	ldd	r25, Y+8	; 0x08
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 e8       	ldi	r20, 0x80	; 128
     572:	5f e3       	ldi	r21, 0x3F	; 63
     574:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     578:	88 23       	and	r24, r24
     57a:	0c f0       	brlt	.+2      	; 0x57e <lcd_write+0x2b4>
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	11 23       	and	r17, r17
     580:	19 f0       	breq	.+6      	; 0x588 <lcd_write+0x2be>
		__ticks = 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	89 87       	std	Y+9, r24	; 0x09
     586:	a3 c0       	rjmp	.+326    	; 0x6ce <lcd_write+0x404>
	else if (__tmp > 255)
     588:	11 e0       	ldi	r17, 0x01	; 1
     58a:	6d 81       	ldd	r22, Y+5	; 0x05
     58c:	7e 81       	ldd	r23, Y+6	; 0x06
     58e:	8f 81       	ldd	r24, Y+7	; 0x07
     590:	98 85       	ldd	r25, Y+8	; 0x08
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	4f e7       	ldi	r20, 0x7F	; 127
     598:	53 e4       	ldi	r21, 0x43	; 67
     59a:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     59e:	18 16       	cp	r1, r24
     5a0:	0c f0       	brlt	.+2      	; 0x5a4 <lcd_write+0x2da>
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	11 23       	and	r17, r17
     5a6:	09 f4       	brne	.+2      	; 0x5aa <lcd_write+0x2e0>
     5a8:	89 c0       	rjmp	.+274    	; 0x6bc <lcd_write+0x3f2>
	{
		_delay_ms(__us / 1000.0);
     5aa:	69 81       	ldd	r22, Y+1	; 0x01
     5ac:	7a 81       	ldd	r23, Y+2	; 0x02
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	9c 81       	ldd	r25, Y+4	; 0x04
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	4a e7       	ldi	r20, 0x7A	; 122
     5b8:	54 e4       	ldi	r21, 0x44	; 68
     5ba:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	8a 87       	std	Y+10, r24	; 0x0a
     5c4:	9b 87       	std	Y+11, r25	; 0x0b
     5c6:	ac 87       	std	Y+12, r26	; 0x0c
     5c8:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ca:	6a 85       	ldd	r22, Y+10	; 0x0a
     5cc:	7b 85       	ldd	r23, Y+11	; 0x0b
     5ce:	8c 85       	ldd	r24, Y+12	; 0x0c
     5d0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	4a e7       	ldi	r20, 0x7A	; 122
     5d8:	53 e4       	ldi	r21, 0x43	; 67
     5da:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	8e 87       	std	Y+14, r24	; 0x0e
     5e4:	9f 87       	std	Y+15, r25	; 0x0f
     5e6:	a8 8b       	std	Y+16, r26	; 0x10
     5e8:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     5ea:	11 e0       	ldi	r17, 0x01	; 1
     5ec:	6e 85       	ldd	r22, Y+14	; 0x0e
     5ee:	7f 85       	ldd	r23, Y+15	; 0x0f
     5f0:	88 89       	ldd	r24, Y+16	; 0x10
     5f2:	99 89       	ldd	r25, Y+17	; 0x11
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e8       	ldi	r20, 0x80	; 128
     5fa:	5f e3       	ldi	r21, 0x3F	; 63
     5fc:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     600:	88 23       	and	r24, r24
     602:	0c f0       	brlt	.+2      	; 0x606 <lcd_write+0x33c>
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	11 23       	and	r17, r17
     608:	29 f0       	breq	.+10     	; 0x614 <lcd_write+0x34a>
		__ticks = 1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	9b 8b       	std	Y+19, r25	; 0x13
     610:	8a 8b       	std	Y+18, r24	; 0x12
     612:	46 c0       	rjmp	.+140    	; 0x6a0 <lcd_write+0x3d6>
	else if (__tmp > 65535)
     614:	11 e0       	ldi	r17, 0x01	; 1
     616:	6e 85       	ldd	r22, Y+14	; 0x0e
     618:	7f 85       	ldd	r23, Y+15	; 0x0f
     61a:	88 89       	ldd	r24, Y+16	; 0x10
     61c:	99 89       	ldd	r25, Y+17	; 0x11
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	3f ef       	ldi	r19, 0xFF	; 255
     622:	4f e7       	ldi	r20, 0x7F	; 127
     624:	57 e4       	ldi	r21, 0x47	; 71
     626:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     62a:	18 16       	cp	r1, r24
     62c:	0c f0       	brlt	.+2      	; 0x630 <lcd_write+0x366>
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	11 23       	and	r17, r17
     632:	61 f1       	breq	.+88     	; 0x68c <lcd_write+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     634:	6a 85       	ldd	r22, Y+10	; 0x0a
     636:	7b 85       	ldd	r23, Y+11	; 0x0b
     638:	8c 85       	ldd	r24, Y+12	; 0x0c
     63a:	9d 85       	ldd	r25, Y+13	; 0x0d
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e2       	ldi	r20, 0x20	; 32
     642:	51 e4       	ldi	r21, 0x41	; 65
     644:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     654:	dc 01       	movw	r26, r24
     656:	cb 01       	movw	r24, r22
     658:	9b 8b       	std	Y+19, r25	; 0x13
     65a:	8a 8b       	std	Y+18, r24	; 0x12
     65c:	12 c0       	rjmp	.+36     	; 0x682 <lcd_write+0x3b8>
     65e:	89 e1       	ldi	r24, 0x19	; 25
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	9d 8b       	std	Y+21, r25	; 0x15
     664:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     666:	8c 89       	ldd	r24, Y+20	; 0x14
     668:	9d 89       	ldd	r25, Y+21	; 0x15
     66a:	8c 01       	movw	r16, r24
     66c:	c8 01       	movw	r24, r16
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <lcd_write+0x3a4>
     672:	8c 01       	movw	r16, r24
     674:	1d 8b       	std	Y+21, r17	; 0x15
     676:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     678:	8a 89       	ldd	r24, Y+18	; 0x12
     67a:	9b 89       	ldd	r25, Y+19	; 0x13
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	9b 8b       	std	Y+19, r25	; 0x13
     680:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     682:	8a 89       	ldd	r24, Y+18	; 0x12
     684:	9b 89       	ldd	r25, Y+19	; 0x13
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	51 f7       	brne	.-44     	; 0x65e <lcd_write+0x394>
     68a:	28 c0       	rjmp	.+80     	; 0x6dc <lcd_write+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     68c:	6e 85       	ldd	r22, Y+14	; 0x0e
     68e:	7f 85       	ldd	r23, Y+15	; 0x0f
     690:	88 89       	ldd	r24, Y+16	; 0x10
     692:	99 89       	ldd	r25, Y+17	; 0x11
     694:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	9b 8b       	std	Y+19, r25	; 0x13
     69e:	8a 8b       	std	Y+18, r24	; 0x12
     6a0:	8a 89       	ldd	r24, Y+18	; 0x12
     6a2:	9b 89       	ldd	r25, Y+19	; 0x13
     6a4:	9f 8b       	std	Y+23, r25	; 0x17
     6a6:	8e 8b       	std	Y+22, r24	; 0x16
     6a8:	8e 89       	ldd	r24, Y+22	; 0x16
     6aa:	9f 89       	ldd	r25, Y+23	; 0x17
     6ac:	8c 01       	movw	r16, r24
     6ae:	f8 01       	movw	r30, r16
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <lcd_write+0x3e6>
     6b4:	8f 01       	movw	r16, r30
     6b6:	1f 8b       	std	Y+23, r17	; 0x17
     6b8:	0e 8b       	std	Y+22, r16	; 0x16
     6ba:	10 c0       	rjmp	.+32     	; 0x6dc <lcd_write+0x412>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6bc:	6d 81       	ldd	r22, Y+5	; 0x05
     6be:	7e 81       	ldd	r23, Y+6	; 0x06
     6c0:	8f 81       	ldd	r24, Y+7	; 0x07
     6c2:	98 85       	ldd	r25, Y+8	; 0x08
     6c4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	89 87       	std	Y+9, r24	; 0x09
     6ce:	89 85       	ldd	r24, Y+9	; 0x09
     6d0:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6d2:	88 8d       	ldd	r24, Y+24	; 0x18
     6d4:	18 2f       	mov	r17, r24
     6d6:	1a 95       	dec	r17
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <lcd_write+0x40c>
     6da:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(250);
}
     6dc:	6a 96       	adiw	r28, 0x1a	; 26
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <lcd_char>:

//-----------------------------------------------------------------------------------------
// FUNCTION: lcd_char
// PURPOSE:  send a character to the LCD
void lcd_char(uint8_t data)
{
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	0f 92       	push	r0
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	89 83       	std	Y+1, r24	; 0x01
	if (data=='\n') 
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	8a 30       	cpi	r24, 0x0A	; 10
     702:	99 f4       	brne	.+38     	; 0x72a <lcd_char+0x38>
	{
		if (g_nCurrentLine >= LCD_LINES - 1)
     704:	80 91 08 01 	lds	r24, 0x0108
     708:	90 91 09 01 	lds	r25, 0x0109
     70c:	18 16       	cp	r1, r24
     70e:	19 06       	cpc	r1, r25
     710:	24 f4       	brge	.+8      	; 0x71a <lcd_char+0x28>
			lcd_setline(0);
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	0e 94 92 0c 	call	0x1924	; 0x1924 <lcd_setline>
     718:	0c c0       	rjmp	.+24     	; 0x732 <lcd_char+0x40>
		else
			lcd_setline(g_nCurrentLine+1);
     71a:	80 91 08 01 	lds	r24, 0x0108
     71e:	90 91 09 01 	lds	r25, 0x0109
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	0e 94 92 0c 	call	0x1924	; 0x1924 <lcd_setline>
     728:	04 c0       	rjmp	.+8      	; 0x732 <lcd_char+0x40>
	}
	else
	lcd_write(data,1);
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_write>
}
     732:	0f 90       	pop	r0
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	08 95       	ret

0000073a <lcd_instr>:

//-----------------------------------------------------------------------------------------
// FUNCTION: lcd_instr
// PURPOSE:  send an instruction to the LCD
void lcd_instr(uint8_t instr)
{
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	0f 92       	push	r0
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	89 83       	std	Y+1, r24	; 0x01
	lcd_write(instr,0);
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_write>
}
     74e:	0f 90       	pop	r0
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <lcd_init>:

//-----------------------------------------------------------------------------------------
// FUNCTION: lcd_init
// PURPOSE:  Initialize LCD to 4 bit I/O mode
void lcd_init()
{
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	df 93       	push	r29
     75c:	cf 93       	push	r28
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	cc 5a       	subi	r28, 0xAC	; 172
     764:	d0 40       	sbci	r29, 0x00	; 0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
    // configure all port bits as output (LCD data and control lines on different ports 
    DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     770:	84 e3       	ldi	r24, 0x34	; 52
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	24 e3       	ldi	r18, 0x34	; 52
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	f9 01       	movw	r30, r18
     77a:	20 81       	ld	r18, Z
     77c:	20 61       	ori	r18, 0x10	; 16
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
    DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     782:	84 e3       	ldi	r24, 0x34	; 52
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	24 e3       	ldi	r18, 0x34	; 52
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	20 62       	ori	r18, 0x20	; 32
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
    DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     794:	84 e3       	ldi	r24, 0x34	; 52
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	24 e3       	ldi	r18, 0x34	; 52
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	20 81       	ld	r18, Z
     7a0:	21 60       	ori	r18, 0x01	; 1
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
    DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     7a6:	84 e3       	ldi	r24, 0x34	; 52
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	24 e3       	ldi	r18, 0x34	; 52
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	20 81       	ld	r18, Z
     7b2:	22 60       	ori	r18, 0x02	; 2
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 83       	st	Z, r18
    DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     7b8:	84 e3       	ldi	r24, 0x34	; 52
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	24 e3       	ldi	r18, 0x34	; 52
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	f9 01       	movw	r30, r18
     7c2:	20 81       	ld	r18, Z
     7c4:	24 60       	ori	r18, 0x04	; 4
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
    DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     7ca:	84 e3       	ldi	r24, 0x34	; 52
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	24 e3       	ldi	r18, 0x34	; 52
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	f9 01       	movw	r30, r18
     7d4:	20 81       	ld	r18, Z
     7d6:	28 60       	ori	r18, 0x08	; 8
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a0 ef       	ldi	r26, 0xF0	; 240
     7e2:	b1 e4       	ldi	r27, 0x41	; 65
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	9a 83       	std	Y+2, r25	; 0x02
     7e8:	ab 83       	std	Y+3, r26	; 0x03
     7ea:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7ec:	69 81       	ldd	r22, Y+1	; 0x01
     7ee:	7a 81       	ldd	r23, Y+2	; 0x02
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	9c 81       	ldd	r25, Y+4	; 0x04
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	4a e7       	ldi	r20, 0x7A	; 122
     7fa:	53 e4       	ldi	r21, 0x43	; 67
     7fc:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	8d 83       	std	Y+5, r24	; 0x05
     806:	9e 83       	std	Y+6, r25	; 0x06
     808:	af 83       	std	Y+7, r26	; 0x07
     80a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     80c:	11 e0       	ldi	r17, 0x01	; 1
     80e:	6d 81       	ldd	r22, Y+5	; 0x05
     810:	7e 81       	ldd	r23, Y+6	; 0x06
     812:	8f 81       	ldd	r24, Y+7	; 0x07
     814:	98 85       	ldd	r25, Y+8	; 0x08
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     822:	88 23       	and	r24, r24
     824:	0c f0       	brlt	.+2      	; 0x828 <lcd_init+0xd2>
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	11 23       	and	r17, r17
     82a:	29 f0       	breq	.+10     	; 0x836 <lcd_init+0xe0>
		__ticks = 1;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	9a 87       	std	Y+10, r25	; 0x0a
     832:	89 87       	std	Y+9, r24	; 0x09
     834:	46 c0       	rjmp	.+140    	; 0x8c2 <lcd_init+0x16c>
	else if (__tmp > 65535)
     836:	11 e0       	ldi	r17, 0x01	; 1
     838:	6d 81       	ldd	r22, Y+5	; 0x05
     83a:	7e 81       	ldd	r23, Y+6	; 0x06
     83c:	8f 81       	ldd	r24, Y+7	; 0x07
     83e:	98 85       	ldd	r25, Y+8	; 0x08
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	3f ef       	ldi	r19, 0xFF	; 255
     844:	4f e7       	ldi	r20, 0x7F	; 127
     846:	57 e4       	ldi	r21, 0x47	; 71
     848:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     84c:	18 16       	cp	r1, r24
     84e:	0c f0       	brlt	.+2      	; 0x852 <lcd_init+0xfc>
     850:	10 e0       	ldi	r17, 0x00	; 0
     852:	11 23       	and	r17, r17
     854:	61 f1       	breq	.+88     	; 0x8ae <lcd_init+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     856:	69 81       	ldd	r22, Y+1	; 0x01
     858:	7a 81       	ldd	r23, Y+2	; 0x02
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	9c 81       	ldd	r25, Y+4	; 0x04
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e2       	ldi	r20, 0x20	; 32
     864:	51 e4       	ldi	r21, 0x41	; 65
     866:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	bc 01       	movw	r22, r24
     870:	cd 01       	movw	r24, r26
     872:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	9a 87       	std	Y+10, r25	; 0x0a
     87c:	89 87       	std	Y+9, r24	; 0x09
     87e:	12 c0       	rjmp	.+36     	; 0x8a4 <lcd_init+0x14e>
     880:	89 e1       	ldi	r24, 0x19	; 25
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	9c 87       	std	Y+12, r25	; 0x0c
     886:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     888:	8b 85       	ldd	r24, Y+11	; 0x0b
     88a:	9c 85       	ldd	r25, Y+12	; 0x0c
     88c:	8c 01       	movw	r16, r24
     88e:	c8 01       	movw	r24, r16
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <lcd_init+0x13a>
     894:	8c 01       	movw	r16, r24
     896:	1c 87       	std	Y+12, r17	; 0x0c
     898:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89a:	89 85       	ldd	r24, Y+9	; 0x09
     89c:	9a 85       	ldd	r25, Y+10	; 0x0a
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	9a 87       	std	Y+10, r25	; 0x0a
     8a2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a4:	89 85       	ldd	r24, Y+9	; 0x09
     8a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	51 f7       	brne	.-44     	; 0x880 <lcd_init+0x12a>
     8ac:	17 c0       	rjmp	.+46     	; 0x8dc <lcd_init+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ae:	6d 81       	ldd	r22, Y+5	; 0x05
     8b0:	7e 81       	ldd	r23, Y+6	; 0x06
     8b2:	8f 81       	ldd	r24, Y+7	; 0x07
     8b4:	98 85       	ldd	r25, Y+8	; 0x08
     8b6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	9a 87       	std	Y+10, r25	; 0x0a
     8c0:	89 87       	std	Y+9, r24	; 0x09
     8c2:	89 85       	ldd	r24, Y+9	; 0x09
     8c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c6:	9e 87       	std	Y+14, r25	; 0x0e
     8c8:	8d 87       	std	Y+13, r24	; 0x0d
     8ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     8cc:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ce:	8c 01       	movw	r16, r24
     8d0:	f8 01       	movw	r30, r16
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <lcd_init+0x17c>
     8d6:	8f 01       	movw	r16, r30
     8d8:	1e 87       	std	Y+14, r17	; 0x0e
     8da:	0d 87       	std	Y+13, r16	; 0x0d
    // wait 16ms or more after power-on
    _delay_ms(30);
    // initial write to lcd is 8bit 
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     8dc:	85 e3       	ldi	r24, 0x35	; 53
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	25 e3       	ldi	r18, 0x35	; 53
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	22 60       	ori	r18, 0x02	; 2
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     8ee:	85 e3       	ldi	r24, 0x35	; 53
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	25 e3       	ldi	r18, 0x35	; 53
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	f9 01       	movw	r30, r18
     8f8:	20 81       	ld	r18, Z
     8fa:	21 60       	ori	r18, 0x01	; 1
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
    lcd_e_toggle();
     900:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e4       	ldi	r25, 0x40	; 64
     908:	ac e9       	ldi	r26, 0x9C	; 156
     90a:	b5 e4       	ldi	r27, 0x45	; 69
     90c:	8f 87       	std	Y+15, r24	; 0x0f
     90e:	98 8b       	std	Y+16, r25	; 0x10
     910:	a9 8b       	std	Y+17, r26	; 0x11
     912:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     914:	6f 85       	ldd	r22, Y+15	; 0x0f
     916:	78 89       	ldd	r23, Y+16	; 0x10
     918:	89 89       	ldd	r24, Y+17	; 0x11
     91a:	9a 89       	ldd	r25, Y+18	; 0x12
     91c:	2b ea       	ldi	r18, 0xAB	; 171
     91e:	3a ea       	ldi	r19, 0xAA	; 170
     920:	4a ea       	ldi	r20, 0xAA	; 170
     922:	5e e3       	ldi	r21, 0x3E	; 62
     924:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	8b 8b       	std	Y+19, r24	; 0x13
     92e:	9c 8b       	std	Y+20, r25	; 0x14
     930:	ad 8b       	std	Y+21, r26	; 0x15
     932:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     934:	11 e0       	ldi	r17, 0x01	; 1
     936:	6b 89       	ldd	r22, Y+19	; 0x13
     938:	7c 89       	ldd	r23, Y+20	; 0x14
     93a:	8d 89       	ldd	r24, Y+21	; 0x15
     93c:	9e 89       	ldd	r25, Y+22	; 0x16
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e8       	ldi	r20, 0x80	; 128
     944:	5f e3       	ldi	r21, 0x3F	; 63
     946:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     94a:	88 23       	and	r24, r24
     94c:	0c f0       	brlt	.+2      	; 0x950 <lcd_init+0x1fa>
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	11 23       	and	r17, r17
     952:	19 f0       	breq	.+6      	; 0x95a <lcd_init+0x204>
		__ticks = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	8f 8b       	std	Y+23, r24	; 0x17
     958:	a3 c0       	rjmp	.+326    	; 0xaa0 <lcd_init+0x34a>
	else if (__tmp > 255)
     95a:	11 e0       	ldi	r17, 0x01	; 1
     95c:	6b 89       	ldd	r22, Y+19	; 0x13
     95e:	7c 89       	ldd	r23, Y+20	; 0x14
     960:	8d 89       	ldd	r24, Y+21	; 0x15
     962:	9e 89       	ldd	r25, Y+22	; 0x16
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	4f e7       	ldi	r20, 0x7F	; 127
     96a:	53 e4       	ldi	r21, 0x43	; 67
     96c:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     970:	18 16       	cp	r1, r24
     972:	0c f0       	brlt	.+2      	; 0x976 <lcd_init+0x220>
     974:	10 e0       	ldi	r17, 0x00	; 0
     976:	11 23       	and	r17, r17
     978:	09 f4       	brne	.+2      	; 0x97c <lcd_init+0x226>
     97a:	89 c0       	rjmp	.+274    	; 0xa8e <lcd_init+0x338>
	{
		_delay_ms(__us / 1000.0);
     97c:	6f 85       	ldd	r22, Y+15	; 0x0f
     97e:	78 89       	ldd	r23, Y+16	; 0x10
     980:	89 89       	ldd	r24, Y+17	; 0x11
     982:	9a 89       	ldd	r25, Y+18	; 0x12
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	4a e7       	ldi	r20, 0x7A	; 122
     98a:	54 e4       	ldi	r21, 0x44	; 68
     98c:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	88 8f       	std	Y+24, r24	; 0x18
     996:	99 8f       	std	Y+25, r25	; 0x19
     998:	aa 8f       	std	Y+26, r26	; 0x1a
     99a:	bb 8f       	std	Y+27, r27	; 0x1b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     99c:	68 8d       	ldd	r22, Y+24	; 0x18
     99e:	79 8d       	ldd	r23, Y+25	; 0x19
     9a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	4a e7       	ldi	r20, 0x7A	; 122
     9aa:	53 e4       	ldi	r21, 0x43	; 67
     9ac:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	8c 8f       	std	Y+28, r24	; 0x1c
     9b6:	9d 8f       	std	Y+29, r25	; 0x1d
     9b8:	ae 8f       	std	Y+30, r26	; 0x1e
     9ba:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     9bc:	11 e0       	ldi	r17, 0x01	; 1
     9be:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9c0:	7d 8d       	ldd	r23, Y+29	; 0x1d
     9c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e8       	ldi	r20, 0x80	; 128
     9cc:	5f e3       	ldi	r21, 0x3F	; 63
     9ce:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     9d2:	88 23       	and	r24, r24
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <lcd_init+0x282>
     9d6:	10 e0       	ldi	r17, 0x00	; 0
     9d8:	11 23       	and	r17, r17
     9da:	29 f0       	breq	.+10     	; 0x9e6 <lcd_init+0x290>
		__ticks = 1;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	99 a3       	std	Y+33, r25	; 0x21
     9e2:	88 a3       	std	Y+32, r24	; 0x20
     9e4:	46 c0       	rjmp	.+140    	; 0xa72 <lcd_init+0x31c>
	else if (__tmp > 65535)
     9e6:	11 e0       	ldi	r17, 0x01	; 1
     9e8:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9ea:	7d 8d       	ldd	r23, Y+29	; 0x1d
     9ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f e7       	ldi	r20, 0x7F	; 127
     9f6:	57 e4       	ldi	r21, 0x47	; 71
     9f8:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     9fc:	18 16       	cp	r1, r24
     9fe:	0c f0       	brlt	.+2      	; 0xa02 <lcd_init+0x2ac>
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	11 23       	and	r17, r17
     a04:	61 f1       	breq	.+88     	; 0xa5e <lcd_init+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a06:	68 8d       	ldd	r22, Y+24	; 0x18
     a08:	79 8d       	ldd	r23, Y+25	; 0x19
     a0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e2       	ldi	r20, 0x20	; 32
     a14:	51 e4       	ldi	r21, 0x41	; 65
     a16:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	bc 01       	movw	r22, r24
     a20:	cd 01       	movw	r24, r26
     a22:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	99 a3       	std	Y+33, r25	; 0x21
     a2c:	88 a3       	std	Y+32, r24	; 0x20
     a2e:	12 c0       	rjmp	.+36     	; 0xa54 <lcd_init+0x2fe>
     a30:	89 e1       	ldi	r24, 0x19	; 25
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	9b a3       	std	Y+35, r25	; 0x23
     a36:	8a a3       	std	Y+34, r24	; 0x22
     a38:	8a a1       	ldd	r24, Y+34	; 0x22
     a3a:	9b a1       	ldd	r25, Y+35	; 0x23
     a3c:	8c 01       	movw	r16, r24
     a3e:	c8 01       	movw	r24, r16
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <lcd_init+0x2ea>
     a44:	8c 01       	movw	r16, r24
     a46:	1b a3       	std	Y+35, r17	; 0x23
     a48:	0a a3       	std	Y+34, r16	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a4a:	88 a1       	ldd	r24, Y+32	; 0x20
     a4c:	99 a1       	ldd	r25, Y+33	; 0x21
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	99 a3       	std	Y+33, r25	; 0x21
     a52:	88 a3       	std	Y+32, r24	; 0x20
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a54:	88 a1       	ldd	r24, Y+32	; 0x20
     a56:	99 a1       	ldd	r25, Y+33	; 0x21
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	51 f7       	brne	.-44     	; 0xa30 <lcd_init+0x2da>
     a5c:	28 c0       	rjmp	.+80     	; 0xaae <lcd_init+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a5e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     a60:	7d 8d       	ldd	r23, Y+29	; 0x1d
     a62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a64:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a66:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	99 a3       	std	Y+33, r25	; 0x21
     a70:	88 a3       	std	Y+32, r24	; 0x20
     a72:	88 a1       	ldd	r24, Y+32	; 0x20
     a74:	99 a1       	ldd	r25, Y+33	; 0x21
     a76:	9d a3       	std	Y+37, r25	; 0x25
     a78:	8c a3       	std	Y+36, r24	; 0x24
     a7a:	8c a1       	ldd	r24, Y+36	; 0x24
     a7c:	9d a1       	ldd	r25, Y+37	; 0x25
     a7e:	8c 01       	movw	r16, r24
     a80:	f8 01       	movw	r30, r16
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <lcd_init+0x32c>
     a86:	8f 01       	movw	r16, r30
     a88:	1d a3       	std	Y+37, r17	; 0x25
     a8a:	0c a3       	std	Y+36, r16	; 0x24
     a8c:	10 c0       	rjmp	.+32     	; 0xaae <lcd_init+0x358>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a8e:	6b 89       	ldd	r22, Y+19	; 0x13
     a90:	7c 89       	ldd	r23, Y+20	; 0x14
     a92:	8d 89       	ldd	r24, Y+21	; 0x15
     a94:	9e 89       	ldd	r25, Y+22	; 0x16
     a96:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	8f 8b       	std	Y+23, r24	; 0x17
     aa0:	8f 89       	ldd	r24, Y+23	; 0x17
     aa2:	8e a3       	std	Y+38, r24	; 0x26
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     aa4:	8e a1       	ldd	r24, Y+38	; 0x26
     aa6:	18 2f       	mov	r17, r24
     aa8:	1a 95       	dec	r17
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <lcd_init+0x352>
     aac:	1e a3       	std	Y+38, r17	; 0x26
    _delay_us(5000);         // delay, busy flag can't be checked here 
    // repeat last command 
    lcd_e_toggle();      
     aae:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	a0 e8       	ldi	r26, 0x80	; 128
     ab8:	b2 e4       	ldi	r27, 0x42	; 66
     aba:	8f a3       	std	Y+39, r24	; 0x27
     abc:	98 a7       	std	Y+40, r25	; 0x28
     abe:	a9 a7       	std	Y+41, r26	; 0x29
     ac0:	ba a7       	std	Y+42, r27	; 0x2a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     ac2:	6f a1       	ldd	r22, Y+39	; 0x27
     ac4:	78 a5       	ldd	r23, Y+40	; 0x28
     ac6:	89 a5       	ldd	r24, Y+41	; 0x29
     ac8:	9a a5       	ldd	r25, Y+42	; 0x2a
     aca:	2b ea       	ldi	r18, 0xAB	; 171
     acc:	3a ea       	ldi	r19, 0xAA	; 170
     ace:	4a ea       	ldi	r20, 0xAA	; 170
     ad0:	5e e3       	ldi	r21, 0x3E	; 62
     ad2:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     ad6:	dc 01       	movw	r26, r24
     ad8:	cb 01       	movw	r24, r22
     ada:	8b a7       	std	Y+43, r24	; 0x2b
     adc:	9c a7       	std	Y+44, r25	; 0x2c
     ade:	ad a7       	std	Y+45, r26	; 0x2d
     ae0:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
     ae2:	11 e0       	ldi	r17, 0x01	; 1
     ae4:	6b a5       	ldd	r22, Y+43	; 0x2b
     ae6:	7c a5       	ldd	r23, Y+44	; 0x2c
     ae8:	8d a5       	ldd	r24, Y+45	; 0x2d
     aea:	9e a5       	ldd	r25, Y+46	; 0x2e
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	40 e8       	ldi	r20, 0x80	; 128
     af2:	5f e3       	ldi	r21, 0x3F	; 63
     af4:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     af8:	88 23       	and	r24, r24
     afa:	0c f0       	brlt	.+2      	; 0xafe <lcd_init+0x3a8>
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	11 23       	and	r17, r17
     b00:	19 f0       	breq	.+6      	; 0xb08 <lcd_init+0x3b2>
		__ticks = 1;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	8f a7       	std	Y+47, r24	; 0x2f
     b06:	a3 c0       	rjmp	.+326    	; 0xc4e <lcd_init+0x4f8>
	else if (__tmp > 255)
     b08:	11 e0       	ldi	r17, 0x01	; 1
     b0a:	6b a5       	ldd	r22, Y+43	; 0x2b
     b0c:	7c a5       	ldd	r23, Y+44	; 0x2c
     b0e:	8d a5       	ldd	r24, Y+45	; 0x2d
     b10:	9e a5       	ldd	r25, Y+46	; 0x2e
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	4f e7       	ldi	r20, 0x7F	; 127
     b18:	53 e4       	ldi	r21, 0x43	; 67
     b1a:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     b1e:	18 16       	cp	r1, r24
     b20:	0c f0       	brlt	.+2      	; 0xb24 <lcd_init+0x3ce>
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	11 23       	and	r17, r17
     b26:	09 f4       	brne	.+2      	; 0xb2a <lcd_init+0x3d4>
     b28:	89 c0       	rjmp	.+274    	; 0xc3c <lcd_init+0x4e6>
	{
		_delay_ms(__us / 1000.0);
     b2a:	6f a1       	ldd	r22, Y+39	; 0x27
     b2c:	78 a5       	ldd	r23, Y+40	; 0x28
     b2e:	89 a5       	ldd	r24, Y+41	; 0x29
     b30:	9a a5       	ldd	r25, Y+42	; 0x2a
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	4a e7       	ldi	r20, 0x7A	; 122
     b38:	54 e4       	ldi	r21, 0x44	; 68
     b3a:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	88 ab       	std	Y+48, r24	; 0x30
     b44:	99 ab       	std	Y+49, r25	; 0x31
     b46:	aa ab       	std	Y+50, r26	; 0x32
     b48:	bb ab       	std	Y+51, r27	; 0x33
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b4a:	68 a9       	ldd	r22, Y+48	; 0x30
     b4c:	79 a9       	ldd	r23, Y+49	; 0x31
     b4e:	8a a9       	ldd	r24, Y+50	; 0x32
     b50:	9b a9       	ldd	r25, Y+51	; 0x33
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	4a e7       	ldi	r20, 0x7A	; 122
     b58:	53 e4       	ldi	r21, 0x43	; 67
     b5a:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     b5e:	dc 01       	movw	r26, r24
     b60:	cb 01       	movw	r24, r22
     b62:	8c ab       	std	Y+52, r24	; 0x34
     b64:	9d ab       	std	Y+53, r25	; 0x35
     b66:	ae ab       	std	Y+54, r26	; 0x36
     b68:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     b6a:	11 e0       	ldi	r17, 0x01	; 1
     b6c:	6c a9       	ldd	r22, Y+52	; 0x34
     b6e:	7d a9       	ldd	r23, Y+53	; 0x35
     b70:	8e a9       	ldd	r24, Y+54	; 0x36
     b72:	9f a9       	ldd	r25, Y+55	; 0x37
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	0c f0       	brlt	.+2      	; 0xb86 <lcd_init+0x430>
     b84:	10 e0       	ldi	r17, 0x00	; 0
     b86:	11 23       	and	r17, r17
     b88:	29 f0       	breq	.+10     	; 0xb94 <lcd_init+0x43e>
		__ticks = 1;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	99 af       	std	Y+57, r25	; 0x39
     b90:	88 af       	std	Y+56, r24	; 0x38
     b92:	46 c0       	rjmp	.+140    	; 0xc20 <lcd_init+0x4ca>
	else if (__tmp > 65535)
     b94:	11 e0       	ldi	r17, 0x01	; 1
     b96:	6c a9       	ldd	r22, Y+52	; 0x34
     b98:	7d a9       	ldd	r23, Y+53	; 0x35
     b9a:	8e a9       	ldd	r24, Y+54	; 0x36
     b9c:	9f a9       	ldd	r25, Y+55	; 0x37
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	3f ef       	ldi	r19, 0xFF	; 255
     ba2:	4f e7       	ldi	r20, 0x7F	; 127
     ba4:	57 e4       	ldi	r21, 0x47	; 71
     ba6:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     baa:	18 16       	cp	r1, r24
     bac:	0c f0       	brlt	.+2      	; 0xbb0 <lcd_init+0x45a>
     bae:	10 e0       	ldi	r17, 0x00	; 0
     bb0:	11 23       	and	r17, r17
     bb2:	61 f1       	breq	.+88     	; 0xc0c <lcd_init+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb4:	68 a9       	ldd	r22, Y+48	; 0x30
     bb6:	79 a9       	ldd	r23, Y+49	; 0x31
     bb8:	8a a9       	ldd	r24, Y+50	; 0x32
     bba:	9b a9       	ldd	r25, Y+51	; 0x33
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e2       	ldi	r20, 0x20	; 32
     bc2:	51 e4       	ldi	r21, 0x41	; 65
     bc4:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	99 af       	std	Y+57, r25	; 0x39
     bda:	88 af       	std	Y+56, r24	; 0x38
     bdc:	12 c0       	rjmp	.+36     	; 0xc02 <lcd_init+0x4ac>
     bde:	89 e1       	ldi	r24, 0x19	; 25
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9b af       	std	Y+59, r25	; 0x3b
     be4:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     be6:	8a ad       	ldd	r24, Y+58	; 0x3a
     be8:	9b ad       	ldd	r25, Y+59	; 0x3b
     bea:	8c 01       	movw	r16, r24
     bec:	c8 01       	movw	r24, r16
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <lcd_init+0x498>
     bf2:	8c 01       	movw	r16, r24
     bf4:	1b af       	std	Y+59, r17	; 0x3b
     bf6:	0a af       	std	Y+58, r16	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf8:	88 ad       	ldd	r24, Y+56	; 0x38
     bfa:	99 ad       	ldd	r25, Y+57	; 0x39
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	99 af       	std	Y+57, r25	; 0x39
     c00:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c02:	88 ad       	ldd	r24, Y+56	; 0x38
     c04:	99 ad       	ldd	r25, Y+57	; 0x39
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	51 f7       	brne	.-44     	; 0xbde <lcd_init+0x488>
     c0a:	28 c0       	rjmp	.+80     	; 0xc5c <lcd_init+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c0c:	6c a9       	ldd	r22, Y+52	; 0x34
     c0e:	7d a9       	ldd	r23, Y+53	; 0x35
     c10:	8e a9       	ldd	r24, Y+54	; 0x36
     c12:	9f a9       	ldd	r25, Y+55	; 0x37
     c14:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	99 af       	std	Y+57, r25	; 0x39
     c1e:	88 af       	std	Y+56, r24	; 0x38
     c20:	88 ad       	ldd	r24, Y+56	; 0x38
     c22:	99 ad       	ldd	r25, Y+57	; 0x39
     c24:	9d af       	std	Y+61, r25	; 0x3d
     c26:	8c af       	std	Y+60, r24	; 0x3c
     c28:	8c ad       	ldd	r24, Y+60	; 0x3c
     c2a:	9d ad       	ldd	r25, Y+61	; 0x3d
     c2c:	8c 01       	movw	r16, r24
     c2e:	f8 01       	movw	r30, r16
     c30:	31 97       	sbiw	r30, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <lcd_init+0x4da>
     c34:	8f 01       	movw	r16, r30
     c36:	1d af       	std	Y+61, r17	; 0x3d
     c38:	0c af       	std	Y+60, r16	; 0x3c
     c3a:	10 c0       	rjmp	.+32     	; 0xc5c <lcd_init+0x506>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c3c:	6b a5       	ldd	r22, Y+43	; 0x2b
     c3e:	7c a5       	ldd	r23, Y+44	; 0x2c
     c40:	8d a5       	ldd	r24, Y+45	; 0x2d
     c42:	9e a5       	ldd	r25, Y+46	; 0x2e
     c44:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	8f a7       	std	Y+47, r24	; 0x2f
     c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c50:	8e af       	std	Y+62, r24	; 0x3e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c52:	8e ad       	ldd	r24, Y+62	; 0x3e
     c54:	18 2f       	mov	r17, r24
     c56:	1a 95       	dec	r17
     c58:	f1 f7       	brne	.-4      	; 0xc56 <lcd_init+0x500>
     c5a:	1e af       	std	Y+62, r17	; 0x3e
    _delay_us(64);           // delay, busy flag can't be checked here 
    // now configure for 4bit mode 
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     c5c:	85 e3       	ldi	r24, 0x35	; 53
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	25 e3       	ldi	r18, 0x35	; 53
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	f9 01       	movw	r30, r18
     c66:	20 81       	ld	r18, Z
     c68:	2e 7f       	andi	r18, 0xFE	; 254
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18
    lcd_e_toggle();
     c6e:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
     c72:	9e 01       	movw	r18, r28
     c74:	21 5c       	subi	r18, 0xC1	; 193
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	aa e7       	ldi	r26, 0x7A	; 122
     c7e:	b4 e4       	ldi	r27, 0x44	; 68
     c80:	f9 01       	movw	r30, r18
     c82:	80 83       	st	Z, r24
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	a2 83       	std	Z+2, r26	; 0x02
     c88:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     c8a:	8e 01       	movw	r16, r28
     c8c:	0d 5b       	subi	r16, 0xBD	; 189
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	ce 01       	movw	r24, r28
     c92:	cf 96       	adiw	r24, 0x3f	; 63
     c94:	fc 01       	movw	r30, r24
     c96:	60 81       	ld	r22, Z
     c98:	71 81       	ldd	r23, Z+1	; 0x01
     c9a:	82 81       	ldd	r24, Z+2	; 0x02
     c9c:	93 81       	ldd	r25, Z+3	; 0x03
     c9e:	2b ea       	ldi	r18, 0xAB	; 171
     ca0:	3a ea       	ldi	r19, 0xAA	; 170
     ca2:	4a ea       	ldi	r20, 0xAA	; 170
     ca4:	5e e3       	ldi	r21, 0x3E	; 62
     ca6:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	f8 01       	movw	r30, r16
     cb0:	80 83       	st	Z, r24
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	a2 83       	std	Z+2, r26	; 0x02
     cb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cb8:	ce 01       	movw	r24, r28
     cba:	8d 5b       	subi	r24, 0xBD	; 189
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	11 e0       	ldi	r17, 0x01	; 1
     cc0:	fc 01       	movw	r30, r24
     cc2:	60 81       	ld	r22, Z
     cc4:	71 81       	ldd	r23, Z+1	; 0x01
     cc6:	82 81       	ldd	r24, Z+2	; 0x02
     cc8:	93 81       	ldd	r25, Z+3	; 0x03
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	0c f0       	brlt	.+2      	; 0xcdc <lcd_init+0x586>
     cda:	10 e0       	ldi	r17, 0x00	; 0
     cdc:	11 23       	and	r17, r17
     cde:	39 f0       	breq	.+14     	; 0xcee <lcd_init+0x598>
		__ticks = 1;
     ce0:	ce 01       	movw	r24, r28
     ce2:	89 5b       	subi	r24, 0xB9	; 185
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	fc 01       	movw	r30, r24
     cea:	20 83       	st	Z, r18
     cec:	04 c1       	rjmp	.+520    	; 0xef6 <lcd_init+0x7a0>
	else if (__tmp > 255)
     cee:	ce 01       	movw	r24, r28
     cf0:	8d 5b       	subi	r24, 0xBD	; 189
     cf2:	9f 4f       	sbci	r25, 0xFF	; 255
     cf4:	11 e0       	ldi	r17, 0x01	; 1
     cf6:	fc 01       	movw	r30, r24
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	4f e7       	ldi	r20, 0x7F	; 127
     d06:	53 e4       	ldi	r21, 0x43	; 67
     d08:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     d0c:	18 16       	cp	r1, r24
     d0e:	0c f0       	brlt	.+2      	; 0xd12 <lcd_init+0x5bc>
     d10:	10 e0       	ldi	r17, 0x00	; 0
     d12:	11 23       	and	r17, r17
     d14:	09 f4       	brne	.+2      	; 0xd18 <lcd_init+0x5c2>
     d16:	de c0       	rjmp	.+444    	; 0xed4 <lcd_init+0x77e>
	{
		_delay_ms(__us / 1000.0);
     d18:	ce 01       	movw	r24, r28
     d1a:	cf 96       	adiw	r24, 0x3f	; 63
     d1c:	fc 01       	movw	r30, r24
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4a e7       	ldi	r20, 0x7A	; 122
     d2c:	54 e4       	ldi	r21, 0x44	; 68
     d2e:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	9e 01       	movw	r18, r28
     d38:	28 5b       	subi	r18, 0xB8	; 184
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	f9 01       	movw	r30, r18
     d3e:	80 83       	st	Z, r24
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	a2 83       	std	Z+2, r26	; 0x02
     d44:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     d46:	8e 01       	movw	r16, r28
     d48:	04 5b       	subi	r16, 0xB4	; 180
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	ce 01       	movw	r24, r28
     d4e:	88 5b       	subi	r24, 0xB8	; 184
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	fc 01       	movw	r30, r24
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a e7       	ldi	r20, 0x7A	; 122
     d62:	53 e4       	ldi	r21, 0x43	; 67
     d64:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	f8 01       	movw	r30, r16
     d6e:	80 83       	st	Z, r24
     d70:	91 83       	std	Z+1, r25	; 0x01
     d72:	a2 83       	std	Z+2, r26	; 0x02
     d74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d76:	ce 01       	movw	r24, r28
     d78:	84 5b       	subi	r24, 0xB4	; 180
     d7a:	9f 4f       	sbci	r25, 0xFF	; 255
     d7c:	11 e0       	ldi	r17, 0x01	; 1
     d7e:	fc 01       	movw	r30, r24
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e8       	ldi	r20, 0x80	; 128
     d8e:	5f e3       	ldi	r21, 0x3F	; 63
     d90:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     d94:	88 23       	and	r24, r24
     d96:	0c f0       	brlt	.+2      	; 0xd9a <lcd_init+0x644>
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	11 23       	and	r17, r17
     d9c:	49 f0       	breq	.+18     	; 0xdb0 <lcd_init+0x65a>
		__ticks = 1;
     d9e:	ce 01       	movw	r24, r28
     da0:	80 5b       	subi	r24, 0xB0	; 176
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	31 83       	std	Z+1, r19	; 0x01
     dac:	20 83       	st	Z, r18
     dae:	74 c0       	rjmp	.+232    	; 0xe98 <lcd_init+0x742>
	else if (__tmp > 65535)
     db0:	ce 01       	movw	r24, r28
     db2:	84 5b       	subi	r24, 0xB4	; 180
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	11 e0       	ldi	r17, 0x01	; 1
     db8:	fc 01       	movw	r30, r24
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     dce:	18 16       	cp	r1, r24
     dd0:	0c f0       	brlt	.+2      	; 0xdd4 <lcd_init+0x67e>
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	11 23       	and	r17, r17
     dd6:	09 f4       	brne	.+2      	; 0xdda <lcd_init+0x684>
     dd8:	4d c0       	rjmp	.+154    	; 0xe74 <lcd_init+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dda:	ce 01       	movw	r24, r28
     ddc:	88 5b       	subi	r24, 0xB8	; 184
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	fc 01       	movw	r30, r24
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8e 01       	movw	r16, r28
     dfc:	00 5b       	subi	r16, 0xB0	; 176
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	f8 01       	movw	r30, r16
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	27 c0       	rjmp	.+78     	; 0xe62 <lcd_init+0x70c>
     e14:	ce 01       	movw	r24, r28
     e16:	8e 5a       	subi	r24, 0xAE	; 174
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	29 e1       	ldi	r18, 0x19	; 25
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	fc 01       	movw	r30, r24
     e20:	31 83       	std	Z+1, r19	; 0x01
     e22:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e24:	ce 01       	movw	r24, r28
     e26:	8e 5a       	subi	r24, 0xAE	; 174
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	8c 01       	movw	r16, r24
     e32:	c8 01       	movw	r24, r16
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <lcd_init+0x6de>
     e38:	8c 01       	movw	r16, r24
     e3a:	ce 01       	movw	r24, r28
     e3c:	8e 5a       	subi	r24, 0xAE	; 174
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	fc 01       	movw	r30, r24
     e42:	11 83       	std	Z+1, r17	; 0x01
     e44:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e46:	ce 01       	movw	r24, r28
     e48:	80 5b       	subi	r24, 0xB0	; 176
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	9e 01       	movw	r18, r28
     e4e:	20 5b       	subi	r18, 0xB0	; 176
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	f9 01       	movw	r30, r18
     e54:	20 81       	ld	r18, Z
     e56:	31 81       	ldd	r19, Z+1	; 0x01
     e58:	21 50       	subi	r18, 0x01	; 1
     e5a:	30 40       	sbci	r19, 0x00	; 0
     e5c:	fc 01       	movw	r30, r24
     e5e:	31 83       	std	Z+1, r19	; 0x01
     e60:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	ce 01       	movw	r24, r28
     e64:	80 5b       	subi	r24, 0xB0	; 176
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	fc 01       	movw	r30, r24
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	89 f6       	brne	.-94     	; 0xe14 <lcd_init+0x6be>
     e72:	58 c0       	rjmp	.+176    	; 0xf24 <lcd_init+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e74:	8e 01       	movw	r16, r28
     e76:	00 5b       	subi	r16, 0xB0	; 176
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	ce 01       	movw	r24, r28
     e7c:	84 5b       	subi	r24, 0xB4	; 180
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	fc 01       	movw	r30, r24
     e82:	60 81       	ld	r22, Z
     e84:	71 81       	ldd	r23, Z+1	; 0x01
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	f8 01       	movw	r30, r16
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	80 83       	st	Z, r24
     e98:	ce 01       	movw	r24, r28
     e9a:	8c 5a       	subi	r24, 0xAC	; 172
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	9e 01       	movw	r18, r28
     ea0:	20 5b       	subi	r18, 0xB0	; 176
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	f9 01       	movw	r30, r18
     ea6:	20 81       	ld	r18, Z
     ea8:	31 81       	ldd	r19, Z+1	; 0x01
     eaa:	fc 01       	movw	r30, r24
     eac:	31 83       	std	Z+1, r19	; 0x01
     eae:	20 83       	st	Z, r18
     eb0:	ce 01       	movw	r24, r28
     eb2:	8c 5a       	subi	r24, 0xAC	; 172
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	fc 01       	movw	r30, r24
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	8c 01       	movw	r16, r24
     ebe:	c8 01       	movw	r24, r16
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <lcd_init+0x76a>
     ec4:	8c 01       	movw	r16, r24
     ec6:	ce 01       	movw	r24, r28
     ec8:	8c 5a       	subi	r24, 0xAC	; 172
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	fc 01       	movw	r30, r24
     ece:	11 83       	std	Z+1, r17	; 0x01
     ed0:	00 83       	st	Z, r16
     ed2:	28 c0       	rjmp	.+80     	; 0xf24 <lcd_init+0x7ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ed4:	8e 01       	movw	r16, r28
     ed6:	09 5b       	subi	r16, 0xB9	; 185
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	ce 01       	movw	r24, r28
     edc:	8d 5b       	subi	r24, 0xBD	; 189
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	fc 01       	movw	r30, r24
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	f8 01       	movw	r30, r16
     ef4:	80 83       	st	Z, r24
     ef6:	ce 01       	movw	r24, r28
     ef8:	8a 5a       	subi	r24, 0xAA	; 170
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	9e 01       	movw	r18, r28
     efe:	29 5b       	subi	r18, 0xB9	; 185
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	f9 01       	movw	r30, r18
     f04:	20 81       	ld	r18, Z
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f0a:	ce 01       	movw	r24, r28
     f0c:	8a 5a       	subi	r24, 0xAA	; 170
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	fc 01       	movw	r30, r24
     f12:	80 81       	ld	r24, Z
     f14:	18 2f       	mov	r17, r24
     f16:	1a 95       	dec	r17
     f18:	f1 f7       	brne	.-4      	; 0xf16 <lcd_init+0x7c0>
     f1a:	ce 01       	movw	r24, r28
     f1c:	8a 5a       	subi	r24, 0xAA	; 170
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	fc 01       	movw	r30, r24
     f22:	10 83       	st	Z, r17
    _delay_us(1000);           // some displays need this additional delay 
    //
	// from now the LCD only accepts 4 bit I/O 
	// start config
	lcd_clrscr();
     f24:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <lcd_clrscr>
     f28:	9e 01       	movw	r18, r28
     f2a:	29 5a       	subi	r18, 0xA9	; 169
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a0 ea       	ldi	r26, 0xA0	; 160
     f34:	b1 e4       	ldi	r27, 0x41	; 65
     f36:	f9 01       	movw	r30, r18
     f38:	80 83       	st	Z, r24
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	a2 83       	std	Z+2, r26	; 0x02
     f3e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f40:	8e 01       	movw	r16, r28
     f42:	05 5a       	subi	r16, 0xA5	; 165
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	ce 01       	movw	r24, r28
     f48:	89 5a       	subi	r24, 0xA9	; 169
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	fc 01       	movw	r30, r24
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	4a e7       	ldi	r20, 0x7A	; 122
     f5c:	53 e4       	ldi	r21, 0x43	; 67
     f5e:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	f8 01       	movw	r30, r16
     f68:	80 83       	st	Z, r24
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	a2 83       	std	Z+2, r26	; 0x02
     f6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f70:	ce 01       	movw	r24, r28
     f72:	85 5a       	subi	r24, 0xA5	; 165
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	11 e0       	ldi	r17, 0x01	; 1
     f78:	fc 01       	movw	r30, r24
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e8       	ldi	r20, 0x80	; 128
     f88:	5f e3       	ldi	r21, 0x3F	; 63
     f8a:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
     f8e:	88 23       	and	r24, r24
     f90:	0c f0       	brlt	.+2      	; 0xf94 <lcd_init+0x83e>
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	11 23       	and	r17, r17
     f96:	49 f0       	breq	.+18     	; 0xfaa <lcd_init+0x854>
		__ticks = 1;
     f98:	ce 01       	movw	r24, r28
     f9a:	81 5a       	subi	r24, 0xA1	; 161
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	fc 01       	movw	r30, r24
     fa4:	31 83       	std	Z+1, r19	; 0x01
     fa6:	20 83       	st	Z, r18
     fa8:	74 c0       	rjmp	.+232    	; 0x1092 <lcd_init+0x93c>
	else if (__tmp > 65535)
     faa:	ce 01       	movw	r24, r28
     fac:	85 5a       	subi	r24, 0xA5	; 165
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	11 e0       	ldi	r17, 0x01	; 1
     fb2:	fc 01       	movw	r30, r24
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	3f ef       	ldi	r19, 0xFF	; 255
     fc0:	4f e7       	ldi	r20, 0x7F	; 127
     fc2:	57 e4       	ldi	r21, 0x47	; 71
     fc4:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
     fc8:	18 16       	cp	r1, r24
     fca:	0c f0       	brlt	.+2      	; 0xfce <lcd_init+0x878>
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	11 23       	and	r17, r17
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <lcd_init+0x87e>
     fd2:	4d c0       	rjmp	.+154    	; 0x106e <lcd_init+0x918>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd4:	ce 01       	movw	r24, r28
     fd6:	89 5a       	subi	r24, 0xA9	; 169
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	fc 01       	movw	r30, r24
     fdc:	60 81       	ld	r22, Z
     fde:	71 81       	ldd	r23, Z+1	; 0x01
     fe0:	82 81       	ldd	r24, Z+2	; 0x02
     fe2:	93 81       	ldd	r25, Z+3	; 0x03
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e2       	ldi	r20, 0x20	; 32
     fea:	51 e4       	ldi	r21, 0x41	; 65
     fec:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8e 01       	movw	r16, r28
     ff6:	01 5a       	subi	r16, 0xA1	; 161
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	f8 01       	movw	r30, r16
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
    100c:	27 c0       	rjmp	.+78     	; 0x105c <lcd_init+0x906>
    100e:	ce 01       	movw	r24, r28
    1010:	8f 59       	subi	r24, 0x9F	; 159
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	29 e1       	ldi	r18, 0x19	; 25
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	fc 01       	movw	r30, r24
    101a:	31 83       	std	Z+1, r19	; 0x01
    101c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    101e:	ce 01       	movw	r24, r28
    1020:	8f 59       	subi	r24, 0x9F	; 159
    1022:	9f 4f       	sbci	r25, 0xFF	; 255
    1024:	fc 01       	movw	r30, r24
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	8c 01       	movw	r16, r24
    102c:	c8 01       	movw	r24, r16
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <lcd_init+0x8d8>
    1032:	8c 01       	movw	r16, r24
    1034:	ce 01       	movw	r24, r28
    1036:	8f 59       	subi	r24, 0x9F	; 159
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	fc 01       	movw	r30, r24
    103c:	11 83       	std	Z+1, r17	; 0x01
    103e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1040:	ce 01       	movw	r24, r28
    1042:	81 5a       	subi	r24, 0xA1	; 161
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	9e 01       	movw	r18, r28
    1048:	21 5a       	subi	r18, 0xA1	; 161
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	f9 01       	movw	r30, r18
    104e:	20 81       	ld	r18, Z
    1050:	31 81       	ldd	r19, Z+1	; 0x01
    1052:	21 50       	subi	r18, 0x01	; 1
    1054:	30 40       	sbci	r19, 0x00	; 0
    1056:	fc 01       	movw	r30, r24
    1058:	31 83       	std	Z+1, r19	; 0x01
    105a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105c:	ce 01       	movw	r24, r28
    105e:	81 5a       	subi	r24, 0xA1	; 161
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	fc 01       	movw	r30, r24
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	89 f6       	brne	.-94     	; 0x100e <lcd_init+0x8b8>
    106c:	2f c0       	rjmp	.+94     	; 0x10cc <lcd_init+0x976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106e:	8e 01       	movw	r16, r28
    1070:	01 5a       	subi	r16, 0xA1	; 161
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	ce 01       	movw	r24, r28
    1076:	85 5a       	subi	r24, 0xA5	; 165
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	fc 01       	movw	r30, r24
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	f8 01       	movw	r30, r16
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
    1092:	ce 01       	movw	r24, r28
    1094:	8d 59       	subi	r24, 0x9D	; 157
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	9e 01       	movw	r18, r28
    109a:	21 5a       	subi	r18, 0xA1	; 161
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	31 81       	ldd	r19, Z+1	; 0x01
    10a4:	fc 01       	movw	r30, r24
    10a6:	31 83       	std	Z+1, r19	; 0x01
    10a8:	20 83       	st	Z, r18
    10aa:	ce 01       	movw	r24, r28
    10ac:	8d 59       	subi	r24, 0x9D	; 157
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	fc 01       	movw	r30, r24
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	8c 01       	movw	r16, r24
    10b8:	c8 01       	movw	r24, r16
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <lcd_init+0x964>
    10be:	8c 01       	movw	r16, r24
    10c0:	ce 01       	movw	r24, r28
    10c2:	8d 59       	subi	r24, 0x9D	; 157
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	fc 01       	movw	r30, r24
    10c8:	11 83       	std	Z+1, r17	; 0x01
    10ca:	00 83       	st	Z, r16
	_delay_ms(20);

    lcd_instr(LCD_FUNCTION_4BIT_2LINES); // 4-bit interface, dual line,   5x7 dots 
    10cc:	88 e2       	ldi	r24, 0x28	; 40
    10ce:	0e 94 9d 03 	call	0x73a	; 0x73a <lcd_instr>
    lcd_e_toggle();
    10d2:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
    10d6:	9e 01       	movw	r18, r28
    10d8:	2b 59       	subi	r18, 0x9B	; 155
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	aa e7       	ldi	r26, 0x7A	; 122
    10e2:	b4 e4       	ldi	r27, 0x44	; 68
    10e4:	f9 01       	movw	r30, r18
    10e6:	80 83       	st	Z, r24
    10e8:	91 83       	std	Z+1, r25	; 0x01
    10ea:	a2 83       	std	Z+2, r26	; 0x02
    10ec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    10ee:	8e 01       	movw	r16, r28
    10f0:	07 59       	subi	r16, 0x97	; 151
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	ce 01       	movw	r24, r28
    10f6:	8b 59       	subi	r24, 0x9B	; 155
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	fc 01       	movw	r30, r24
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	2b ea       	ldi	r18, 0xAB	; 171
    1106:	3a ea       	ldi	r19, 0xAA	; 170
    1108:	4a ea       	ldi	r20, 0xAA	; 170
    110a:	5e e3       	ldi	r21, 0x3E	; 62
    110c:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	f8 01       	movw	r30, r16
    1116:	80 83       	st	Z, r24
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	a2 83       	std	Z+2, r26	; 0x02
    111c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    111e:	ce 01       	movw	r24, r28
    1120:	87 59       	subi	r24, 0x97	; 151
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	11 e0       	ldi	r17, 0x01	; 1
    1126:	fc 01       	movw	r30, r24
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	0c f0       	brlt	.+2      	; 0x1142 <__stack+0x43>
    1140:	10 e0       	ldi	r17, 0x00	; 0
    1142:	11 23       	and	r17, r17
    1144:	39 f0       	breq	.+14     	; 0x1154 <__stack+0x55>
		__ticks = 1;
    1146:	ce 01       	movw	r24, r28
    1148:	83 59       	subi	r24, 0x93	; 147
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	21 e0       	ldi	r18, 0x01	; 1
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
    1152:	05 c1       	rjmp	.+522    	; 0x135e <__stack+0x25f>
	else if (__tmp > 255)
    1154:	ce 01       	movw	r24, r28
    1156:	87 59       	subi	r24, 0x97	; 151
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	11 e0       	ldi	r17, 0x01	; 1
    115c:	fc 01       	movw	r30, r24
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	53 e4       	ldi	r21, 0x43	; 67
    116e:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	0c f0       	brlt	.+2      	; 0x1178 <__stack+0x79>
    1176:	10 e0       	ldi	r17, 0x00	; 0
    1178:	11 23       	and	r17, r17
    117a:	09 f4       	brne	.+2      	; 0x117e <__stack+0x7f>
    117c:	df c0       	rjmp	.+446    	; 0x133c <__stack+0x23d>
	{
		_delay_ms(__us / 1000.0);
    117e:	ce 01       	movw	r24, r28
    1180:	8b 59       	subi	r24, 0x9B	; 155
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	fc 01       	movw	r30, r24
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a e7       	ldi	r20, 0x7A	; 122
    1194:	54 e4       	ldi	r21, 0x44	; 68
    1196:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	9e 01       	movw	r18, r28
    11a0:	22 59       	subi	r18, 0x92	; 146
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	f9 01       	movw	r30, r18
    11a6:	80 83       	st	Z, r24
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	a2 83       	std	Z+2, r26	; 0x02
    11ac:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    11ae:	8e 01       	movw	r16, r28
    11b0:	0e 58       	subi	r16, 0x8E	; 142
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	ce 01       	movw	r24, r28
    11b6:	82 59       	subi	r24, 0x92	; 146
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	fc 01       	movw	r30, r24
    11bc:	60 81       	ld	r22, Z
    11be:	71 81       	ldd	r23, Z+1	; 0x01
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	93 81       	ldd	r25, Z+3	; 0x03
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	4a e7       	ldi	r20, 0x7A	; 122
    11ca:	53 e4       	ldi	r21, 0x43	; 67
    11cc:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	f8 01       	movw	r30, r16
    11d6:	80 83       	st	Z, r24
    11d8:	91 83       	std	Z+1, r25	; 0x01
    11da:	a2 83       	std	Z+2, r26	; 0x02
    11dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11de:	ce 01       	movw	r24, r28
    11e0:	8e 58       	subi	r24, 0x8E	; 142
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	11 e0       	ldi	r17, 0x01	; 1
    11e6:	fc 01       	movw	r30, r24
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	0c f0       	brlt	.+2      	; 0x1202 <__stack+0x103>
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	11 23       	and	r17, r17
    1204:	49 f0       	breq	.+18     	; 0x1218 <__stack+0x119>
		__ticks = 1;
    1206:	ce 01       	movw	r24, r28
    1208:	8a 58       	subi	r24, 0x8A	; 138
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	fc 01       	movw	r30, r24
    1212:	31 83       	std	Z+1, r19	; 0x01
    1214:	20 83       	st	Z, r18
    1216:	74 c0       	rjmp	.+232    	; 0x1300 <__stack+0x201>
	else if (__tmp > 65535)
    1218:	ce 01       	movw	r24, r28
    121a:	8e 58       	subi	r24, 0x8E	; 142
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	11 e0       	ldi	r17, 0x01	; 1
    1220:	fc 01       	movw	r30, r24
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	3f ef       	ldi	r19, 0xFF	; 255
    122e:	4f e7       	ldi	r20, 0x7F	; 127
    1230:	57 e4       	ldi	r21, 0x47	; 71
    1232:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    1236:	18 16       	cp	r1, r24
    1238:	0c f0       	brlt	.+2      	; 0x123c <__stack+0x13d>
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	11 23       	and	r17, r17
    123e:	09 f4       	brne	.+2      	; 0x1242 <__stack+0x143>
    1240:	4d c0       	rjmp	.+154    	; 0x12dc <__stack+0x1dd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	ce 01       	movw	r24, r28
    1244:	82 59       	subi	r24, 0x92	; 146
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	fc 01       	movw	r30, r24
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	8e 01       	movw	r16, r28
    1264:	0a 58       	subi	r16, 0x8A	; 138
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	27 c0       	rjmp	.+78     	; 0x12ca <__stack+0x1cb>
    127c:	ce 01       	movw	r24, r28
    127e:	88 58       	subi	r24, 0x88	; 136
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	29 e1       	ldi	r18, 0x19	; 25
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	fc 01       	movw	r30, r24
    1288:	31 83       	std	Z+1, r19	; 0x01
    128a:	20 83       	st	Z, r18
    128c:	ce 01       	movw	r24, r28
    128e:	88 58       	subi	r24, 0x88	; 136
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	fc 01       	movw	r30, r24
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	8c 01       	movw	r16, r24
    129a:	c8 01       	movw	r24, r16
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <__stack+0x19d>
    12a0:	8c 01       	movw	r16, r24
    12a2:	ce 01       	movw	r24, r28
    12a4:	88 58       	subi	r24, 0x88	; 136
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	fc 01       	movw	r30, r24
    12aa:	11 83       	std	Z+1, r17	; 0x01
    12ac:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ae:	ce 01       	movw	r24, r28
    12b0:	8a 58       	subi	r24, 0x8A	; 138
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	9e 01       	movw	r18, r28
    12b6:	2a 58       	subi	r18, 0x8A	; 138
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ba:	f9 01       	movw	r30, r18
    12bc:	20 81       	ld	r18, Z
    12be:	31 81       	ldd	r19, Z+1	; 0x01
    12c0:	21 50       	subi	r18, 0x01	; 1
    12c2:	30 40       	sbci	r19, 0x00	; 0
    12c4:	fc 01       	movw	r30, r24
    12c6:	31 83       	std	Z+1, r19	; 0x01
    12c8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	ce 01       	movw	r24, r28
    12cc:	8a 58       	subi	r24, 0x8A	; 138
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	fc 01       	movw	r30, r24
    12d2:	80 81       	ld	r24, Z
    12d4:	91 81       	ldd	r25, Z+1	; 0x01
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	89 f6       	brne	.-94     	; 0x127c <__stack+0x17d>
    12da:	58 c0       	rjmp	.+176    	; 0x138c <__stack+0x28d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	8e 01       	movw	r16, r28
    12de:	0a 58       	subi	r16, 0x8A	; 138
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	ce 01       	movw	r24, r28
    12e4:	8e 58       	subi	r24, 0x8E	; 142
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	fc 01       	movw	r30, r24
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	f8 01       	movw	r30, r16
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	ce 01       	movw	r24, r28
    1302:	86 58       	subi	r24, 0x86	; 134
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	9e 01       	movw	r18, r28
    1308:	2a 58       	subi	r18, 0x8A	; 138
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	f9 01       	movw	r30, r18
    130e:	20 81       	ld	r18, Z
    1310:	31 81       	ldd	r19, Z+1	; 0x01
    1312:	fc 01       	movw	r30, r24
    1314:	31 83       	std	Z+1, r19	; 0x01
    1316:	20 83       	st	Z, r18
    1318:	ce 01       	movw	r24, r28
    131a:	86 58       	subi	r24, 0x86	; 134
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
    1322:	91 81       	ldd	r25, Z+1	; 0x01
    1324:	8c 01       	movw	r16, r24
    1326:	c8 01       	movw	r24, r16
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <__stack+0x229>
    132c:	8c 01       	movw	r16, r24
    132e:	ce 01       	movw	r24, r28
    1330:	86 58       	subi	r24, 0x86	; 134
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	fc 01       	movw	r30, r24
    1336:	11 83       	std	Z+1, r17	; 0x01
    1338:	00 83       	st	Z, r16
    133a:	28 c0       	rjmp	.+80     	; 0x138c <__stack+0x28d>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    133c:	8e 01       	movw	r16, r28
    133e:	03 59       	subi	r16, 0x93	; 147
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
    1342:	ce 01       	movw	r24, r28
    1344:	87 59       	subi	r24, 0x97	; 151
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	fc 01       	movw	r30, r24
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	f8 01       	movw	r30, r16
    135c:	80 83       	st	Z, r24
    135e:	ce 01       	movw	r24, r28
    1360:	84 58       	subi	r24, 0x84	; 132
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	9e 01       	movw	r18, r28
    1366:	23 59       	subi	r18, 0x93	; 147
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
    136a:	f9 01       	movw	r30, r18
    136c:	20 81       	ld	r18, Z
    136e:	fc 01       	movw	r30, r24
    1370:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1372:	ce 01       	movw	r24, r28
    1374:	84 58       	subi	r24, 0x84	; 132
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	fc 01       	movw	r30, r24
    137a:	80 81       	ld	r24, Z
    137c:	18 2f       	mov	r17, r24
    137e:	1a 95       	dec	r17
    1380:	f1 f7       	brne	.-4      	; 0x137e <__stack+0x27f>
    1382:	ce 01       	movw	r24, r28
    1384:	84 58       	subi	r24, 0x84	; 132
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	fc 01       	movw	r30, r24
    138a:	10 83       	st	Z, r17
	_delay_us(1000);
    
    lcd_instr(LCD_ENTRY_INC_);//cursor move right, no shift display
    138c:	86 e0       	ldi	r24, 0x06	; 6
    138e:	0e 94 9d 03 	call	0x73a	; 0x73a <lcd_instr>
	lcd_e_toggle();
    1392:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
    1396:	9e 01       	movw	r18, r28
    1398:	23 58       	subi	r18, 0x83	; 131
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	aa e7       	ldi	r26, 0x7A	; 122
    13a2:	b4 e4       	ldi	r27, 0x44	; 68
    13a4:	f9 01       	movw	r30, r18
    13a6:	80 83       	st	Z, r24
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	a2 83       	std	Z+2, r26	; 0x02
    13ac:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    13ae:	8e 01       	movw	r16, r28
    13b0:	0f 57       	subi	r16, 0x7F	; 127
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
    13b4:	ce 01       	movw	r24, r28
    13b6:	83 58       	subi	r24, 0x83	; 131
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	fc 01       	movw	r30, r24
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	2b ea       	ldi	r18, 0xAB	; 171
    13c6:	3a ea       	ldi	r19, 0xAA	; 170
    13c8:	4a ea       	ldi	r20, 0xAA	; 170
    13ca:	5e e3       	ldi	r21, 0x3E	; 62
    13cc:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	f8 01       	movw	r30, r16
    13d6:	80 83       	st	Z, r24
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	a2 83       	std	Z+2, r26	; 0x02
    13dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13de:	ce 01       	movw	r24, r28
    13e0:	8f 57       	subi	r24, 0x7F	; 127
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	11 e0       	ldi	r17, 0x01	; 1
    13e6:	fc 01       	movw	r30, r24
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	0c f0       	brlt	.+2      	; 0x1402 <__stack+0x303>
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	11 23       	and	r17, r17
    1404:	39 f0       	breq	.+14     	; 0x1414 <__stack+0x315>
		__ticks = 1;
    1406:	ce 01       	movw	r24, r28
    1408:	8b 57       	subi	r24, 0x7B	; 123
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	21 e0       	ldi	r18, 0x01	; 1
    140e:	fc 01       	movw	r30, r24
    1410:	20 83       	st	Z, r18
    1412:	05 c1       	rjmp	.+522    	; 0x161e <__stack+0x51f>
	else if (__tmp > 255)
    1414:	ce 01       	movw	r24, r28
    1416:	8f 57       	subi	r24, 0x7F	; 127
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	11 e0       	ldi	r17, 0x01	; 1
    141c:	fc 01       	movw	r30, r24
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	4f e7       	ldi	r20, 0x7F	; 127
    142c:	53 e4       	ldi	r21, 0x43	; 67
    142e:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    1432:	18 16       	cp	r1, r24
    1434:	0c f0       	brlt	.+2      	; 0x1438 <__stack+0x339>
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	11 23       	and	r17, r17
    143a:	09 f4       	brne	.+2      	; 0x143e <__stack+0x33f>
    143c:	df c0       	rjmp	.+446    	; 0x15fc <__stack+0x4fd>
	{
		_delay_ms(__us / 1000.0);
    143e:	ce 01       	movw	r24, r28
    1440:	83 58       	subi	r24, 0x83	; 131
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	fc 01       	movw	r30, r24
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	4a e7       	ldi	r20, 0x7A	; 122
    1454:	54 e4       	ldi	r21, 0x44	; 68
    1456:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	9e 01       	movw	r18, r28
    1460:	2a 57       	subi	r18, 0x7A	; 122
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	f9 01       	movw	r30, r18
    1466:	80 83       	st	Z, r24
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	a2 83       	std	Z+2, r26	; 0x02
    146c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    146e:	8e 01       	movw	r16, r28
    1470:	06 57       	subi	r16, 0x76	; 118
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	8a 57       	subi	r24, 0x7A	; 122
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	fc 01       	movw	r30, r24
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a e7       	ldi	r20, 0x7A	; 122
    148a:	53 e4       	ldi	r21, 0x43	; 67
    148c:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	f8 01       	movw	r30, r16
    1496:	80 83       	st	Z, r24
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	a2 83       	std	Z+2, r26	; 0x02
    149c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    149e:	ce 01       	movw	r24, r28
    14a0:	86 57       	subi	r24, 0x76	; 118
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	11 e0       	ldi	r17, 0x01	; 1
    14a6:	fc 01       	movw	r30, r24
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	0c f0       	brlt	.+2      	; 0x14c2 <__stack+0x3c3>
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	11 23       	and	r17, r17
    14c4:	49 f0       	breq	.+18     	; 0x14d8 <__stack+0x3d9>
		__ticks = 1;
    14c6:	ce 01       	movw	r24, r28
    14c8:	82 57       	subi	r24, 0x72	; 114
    14ca:	9f 4f       	sbci	r25, 0xFF	; 255
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	fc 01       	movw	r30, r24
    14d2:	31 83       	std	Z+1, r19	; 0x01
    14d4:	20 83       	st	Z, r18
    14d6:	74 c0       	rjmp	.+232    	; 0x15c0 <__stack+0x4c1>
	else if (__tmp > 65535)
    14d8:	ce 01       	movw	r24, r28
    14da:	86 57       	subi	r24, 0x76	; 118
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	11 e0       	ldi	r17, 0x01	; 1
    14e0:	fc 01       	movw	r30, r24
    14e2:	60 81       	ld	r22, Z
    14e4:	71 81       	ldd	r23, Z+1	; 0x01
    14e6:	82 81       	ldd	r24, Z+2	; 0x02
    14e8:	93 81       	ldd	r25, Z+3	; 0x03
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	3f ef       	ldi	r19, 0xFF	; 255
    14ee:	4f e7       	ldi	r20, 0x7F	; 127
    14f0:	57 e4       	ldi	r21, 0x47	; 71
    14f2:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    14f6:	18 16       	cp	r1, r24
    14f8:	0c f0       	brlt	.+2      	; 0x14fc <__stack+0x3fd>
    14fa:	10 e0       	ldi	r17, 0x00	; 0
    14fc:	11 23       	and	r17, r17
    14fe:	09 f4       	brne	.+2      	; 0x1502 <__stack+0x403>
    1500:	4d c0       	rjmp	.+154    	; 0x159c <__stack+0x49d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1502:	ce 01       	movw	r24, r28
    1504:	8a 57       	subi	r24, 0x7A	; 122
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	fc 01       	movw	r30, r24
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	8e 01       	movw	r16, r28
    1524:	02 57       	subi	r16, 0x72	; 114
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	f8 01       	movw	r30, r16
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	27 c0       	rjmp	.+78     	; 0x158a <__stack+0x48b>
    153c:	ce 01       	movw	r24, r28
    153e:	80 57       	subi	r24, 0x70	; 112
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	29 e1       	ldi	r18, 0x19	; 25
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	fc 01       	movw	r30, r24
    1548:	31 83       	std	Z+1, r19	; 0x01
    154a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    154c:	ce 01       	movw	r24, r28
    154e:	80 57       	subi	r24, 0x70	; 112
    1550:	9f 4f       	sbci	r25, 0xFF	; 255
    1552:	fc 01       	movw	r30, r24
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	8c 01       	movw	r16, r24
    155a:	c8 01       	movw	r24, r16
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <__stack+0x45d>
    1560:	8c 01       	movw	r16, r24
    1562:	ce 01       	movw	r24, r28
    1564:	80 57       	subi	r24, 0x70	; 112
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	fc 01       	movw	r30, r24
    156a:	11 83       	std	Z+1, r17	; 0x01
    156c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156e:	ce 01       	movw	r24, r28
    1570:	82 57       	subi	r24, 0x72	; 114
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	9e 01       	movw	r18, r28
    1576:	22 57       	subi	r18, 0x72	; 114
    1578:	3f 4f       	sbci	r19, 0xFF	; 255
    157a:	f9 01       	movw	r30, r18
    157c:	20 81       	ld	r18, Z
    157e:	31 81       	ldd	r19, Z+1	; 0x01
    1580:	21 50       	subi	r18, 0x01	; 1
    1582:	30 40       	sbci	r19, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	31 83       	std	Z+1, r19	; 0x01
    1588:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158a:	ce 01       	movw	r24, r28
    158c:	82 57       	subi	r24, 0x72	; 114
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	fc 01       	movw	r30, r24
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	89 f6       	brne	.-94     	; 0x153c <__stack+0x43d>
    159a:	58 c0       	rjmp	.+176    	; 0x164c <__stack+0x54d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159c:	8e 01       	movw	r16, r28
    159e:	02 57       	subi	r16, 0x72	; 114
    15a0:	1f 4f       	sbci	r17, 0xFF	; 255
    15a2:	ce 01       	movw	r24, r28
    15a4:	86 57       	subi	r24, 0x76	; 118
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	fc 01       	movw	r30, r24
    15aa:	60 81       	ld	r22, Z
    15ac:	71 81       	ldd	r23, Z+1	; 0x01
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	f8 01       	movw	r30, r16
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
    15c0:	ce 01       	movw	r24, r28
    15c2:	8e 56       	subi	r24, 0x6E	; 110
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	9e 01       	movw	r18, r28
    15c8:	22 57       	subi	r18, 0x72	; 114
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	f9 01       	movw	r30, r18
    15ce:	20 81       	ld	r18, Z
    15d0:	31 81       	ldd	r19, Z+1	; 0x01
    15d2:	fc 01       	movw	r30, r24
    15d4:	31 83       	std	Z+1, r19	; 0x01
    15d6:	20 83       	st	Z, r18
    15d8:	ce 01       	movw	r24, r28
    15da:	8e 56       	subi	r24, 0x6E	; 110
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	fc 01       	movw	r30, r24
    15e0:	80 81       	ld	r24, Z
    15e2:	91 81       	ldd	r25, Z+1	; 0x01
    15e4:	8c 01       	movw	r16, r24
    15e6:	c8 01       	movw	r24, r16
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <__stack+0x4e9>
    15ec:	8c 01       	movw	r16, r24
    15ee:	ce 01       	movw	r24, r28
    15f0:	8e 56       	subi	r24, 0x6E	; 110
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	fc 01       	movw	r30, r24
    15f6:	11 83       	std	Z+1, r17	; 0x01
    15f8:	00 83       	st	Z, r16
    15fa:	28 c0       	rjmp	.+80     	; 0x164c <__stack+0x54d>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15fc:	8e 01       	movw	r16, r28
    15fe:	0b 57       	subi	r16, 0x7B	; 123
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	ce 01       	movw	r24, r28
    1604:	8f 57       	subi	r24, 0x7F	; 127
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	fc 01       	movw	r30, r24
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	f8 01       	movw	r30, r16
    161c:	80 83       	st	Z, r24
    161e:	ce 01       	movw	r24, r28
    1620:	8c 56       	subi	r24, 0x6C	; 108
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	9e 01       	movw	r18, r28
    1626:	2b 57       	subi	r18, 0x7B	; 123
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	f9 01       	movw	r30, r18
    162c:	20 81       	ld	r18, Z
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1632:	ce 01       	movw	r24, r28
    1634:	8c 56       	subi	r24, 0x6C	; 108
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	fc 01       	movw	r30, r24
    163a:	80 81       	ld	r24, Z
    163c:	18 2f       	mov	r17, r24
    163e:	1a 95       	dec	r17
    1640:	f1 f7       	brne	.-4      	; 0x163e <__stack+0x53f>
    1642:	ce 01       	movw	r24, r28
    1644:	8c 56       	subi	r24, 0x6C	; 108
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	fc 01       	movw	r30, r24
    164a:	10 83       	st	Z, r17
	_delay_us(1000);

    lcd_instr(LCD_DISP_ON_CURSOR_BLINK);// display on, cursor on, blink char      
    164c:	8f e0       	ldi	r24, 0x0F	; 15
    164e:	0e 94 9d 03 	call	0x73a	; 0x73a <lcd_instr>
	lcd_e_toggle();
    1652:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
    1656:	9e 01       	movw	r18, r28
    1658:	2b 56       	subi	r18, 0x6B	; 107
    165a:	3f 4f       	sbci	r19, 0xFF	; 255
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	aa e7       	ldi	r26, 0x7A	; 122
    1662:	b4 e4       	ldi	r27, 0x44	; 68
    1664:	f9 01       	movw	r30, r18
    1666:	80 83       	st	Z, r24
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	a2 83       	std	Z+2, r26	; 0x02
    166c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    166e:	8e 01       	movw	r16, r28
    1670:	07 56       	subi	r16, 0x67	; 103
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	ce 01       	movw	r24, r28
    1676:	8b 56       	subi	r24, 0x6B	; 107
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	fc 01       	movw	r30, r24
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	2b ea       	ldi	r18, 0xAB	; 171
    1686:	3a ea       	ldi	r19, 0xAA	; 170
    1688:	4a ea       	ldi	r20, 0xAA	; 170
    168a:	5e e3       	ldi	r21, 0x3E	; 62
    168c:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	f8 01       	movw	r30, r16
    1696:	80 83       	st	Z, r24
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	a2 83       	std	Z+2, r26	; 0x02
    169c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    169e:	ce 01       	movw	r24, r28
    16a0:	87 56       	subi	r24, 0x67	; 103
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	11 e0       	ldi	r17, 0x01	; 1
    16a6:	fc 01       	movw	r30, r24
    16a8:	60 81       	ld	r22, Z
    16aa:	71 81       	ldd	r23, Z+1	; 0x01
    16ac:	82 81       	ldd	r24, Z+2	; 0x02
    16ae:	93 81       	ldd	r25, Z+3	; 0x03
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	0c f0       	brlt	.+2      	; 0x16c2 <__stack+0x5c3>
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	11 23       	and	r17, r17
    16c4:	39 f0       	breq	.+14     	; 0x16d4 <__stack+0x5d5>
		__ticks = 1;
    16c6:	ce 01       	movw	r24, r28
    16c8:	83 56       	subi	r24, 0x63	; 99
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18
    16d2:	05 c1       	rjmp	.+522    	; 0x18de <__stack+0x7df>
	else if (__tmp > 255)
    16d4:	ce 01       	movw	r24, r28
    16d6:	87 56       	subi	r24, 0x67	; 103
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	11 e0       	ldi	r17, 0x01	; 1
    16dc:	fc 01       	movw	r30, r24
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	53 e4       	ldi	r21, 0x43	; 67
    16ee:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	0c f0       	brlt	.+2      	; 0x16f8 <__stack+0x5f9>
    16f6:	10 e0       	ldi	r17, 0x00	; 0
    16f8:	11 23       	and	r17, r17
    16fa:	09 f4       	brne	.+2      	; 0x16fe <__stack+0x5ff>
    16fc:	df c0       	rjmp	.+446    	; 0x18bc <__stack+0x7bd>
	{
		_delay_ms(__us / 1000.0);
    16fe:	ce 01       	movw	r24, r28
    1700:	8b 56       	subi	r24, 0x6B	; 107
    1702:	9f 4f       	sbci	r25, 0xFF	; 255
    1704:	fc 01       	movw	r30, r24
    1706:	60 81       	ld	r22, Z
    1708:	71 81       	ldd	r23, Z+1	; 0x01
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4a e7       	ldi	r20, 0x7A	; 122
    1714:	54 e4       	ldi	r21, 0x44	; 68
    1716:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9e 01       	movw	r18, r28
    1720:	22 56       	subi	r18, 0x62	; 98
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	f9 01       	movw	r30, r18
    1726:	80 83       	st	Z, r24
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	a2 83       	std	Z+2, r26	; 0x02
    172c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    172e:	8e 01       	movw	r16, r28
    1730:	0e 55       	subi	r16, 0x5E	; 94
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	ce 01       	movw	r24, r28
    1736:	82 56       	subi	r24, 0x62	; 98
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	fc 01       	movw	r30, r24
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a e7       	ldi	r20, 0x7A	; 122
    174a:	53 e4       	ldi	r21, 0x43	; 67
    174c:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	f8 01       	movw	r30, r16
    1756:	80 83       	st	Z, r24
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    175e:	ce 01       	movw	r24, r28
    1760:	8e 55       	subi	r24, 0x5E	; 94
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	11 e0       	ldi	r17, 0x01	; 1
    1766:	fc 01       	movw	r30, r24
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    177c:	88 23       	and	r24, r24
    177e:	0c f0       	brlt	.+2      	; 0x1782 <__stack+0x683>
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	11 23       	and	r17, r17
    1784:	49 f0       	breq	.+18     	; 0x1798 <__stack+0x699>
		__ticks = 1;
    1786:	ce 01       	movw	r24, r28
    1788:	8a 55       	subi	r24, 0x5A	; 90
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	21 e0       	ldi	r18, 0x01	; 1
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	fc 01       	movw	r30, r24
    1792:	31 83       	std	Z+1, r19	; 0x01
    1794:	20 83       	st	Z, r18
    1796:	74 c0       	rjmp	.+232    	; 0x1880 <__stack+0x781>
	else if (__tmp > 65535)
    1798:	ce 01       	movw	r24, r28
    179a:	8e 55       	subi	r24, 0x5E	; 94
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	11 e0       	ldi	r17, 0x01	; 1
    17a0:	fc 01       	movw	r30, r24
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	3f ef       	ldi	r19, 0xFF	; 255
    17ae:	4f e7       	ldi	r20, 0x7F	; 127
    17b0:	57 e4       	ldi	r21, 0x47	; 71
    17b2:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <__stack+0x6bd>
    17ba:	10 e0       	ldi	r17, 0x00	; 0
    17bc:	11 23       	and	r17, r17
    17be:	09 f4       	brne	.+2      	; 0x17c2 <__stack+0x6c3>
    17c0:	4d c0       	rjmp	.+154    	; 0x185c <__stack+0x75d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	ce 01       	movw	r24, r28
    17c4:	82 56       	subi	r24, 0x62	; 98
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	fc 01       	movw	r30, r24
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	8e 01       	movw	r16, r28
    17e4:	0a 55       	subi	r16, 0x5A	; 90
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	f8 01       	movw	r30, r16
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	27 c0       	rjmp	.+78     	; 0x184a <__stack+0x74b>
    17fc:	ce 01       	movw	r24, r28
    17fe:	88 55       	subi	r24, 0x58	; 88
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	29 e1       	ldi	r18, 0x19	; 25
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	fc 01       	movw	r30, r24
    1808:	31 83       	std	Z+1, r19	; 0x01
    180a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    180c:	ce 01       	movw	r24, r28
    180e:	88 55       	subi	r24, 0x58	; 88
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	fc 01       	movw	r30, r24
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	8c 01       	movw	r16, r24
    181a:	c8 01       	movw	r24, r16
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <__stack+0x71d>
    1820:	8c 01       	movw	r16, r24
    1822:	ce 01       	movw	r24, r28
    1824:	88 55       	subi	r24, 0x58	; 88
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	fc 01       	movw	r30, r24
    182a:	11 83       	std	Z+1, r17	; 0x01
    182c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182e:	ce 01       	movw	r24, r28
    1830:	8a 55       	subi	r24, 0x5A	; 90
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	9e 01       	movw	r18, r28
    1836:	2a 55       	subi	r18, 0x5A	; 90
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	f9 01       	movw	r30, r18
    183c:	20 81       	ld	r18, Z
    183e:	31 81       	ldd	r19, Z+1	; 0x01
    1840:	21 50       	subi	r18, 0x01	; 1
    1842:	30 40       	sbci	r19, 0x00	; 0
    1844:	fc 01       	movw	r30, r24
    1846:	31 83       	std	Z+1, r19	; 0x01
    1848:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	ce 01       	movw	r24, r28
    184c:	8a 55       	subi	r24, 0x5A	; 90
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	89 f6       	brne	.-94     	; 0x17fc <__stack+0x6fd>
    185a:	58 c0       	rjmp	.+176    	; 0x190c <__stack+0x80d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185c:	8e 01       	movw	r16, r28
    185e:	0a 55       	subi	r16, 0x5A	; 90
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	ce 01       	movw	r24, r28
    1864:	8e 55       	subi	r24, 0x5E	; 94
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	fc 01       	movw	r30, r24
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	f8 01       	movw	r30, r16
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
    1880:	ce 01       	movw	r24, r28
    1882:	86 55       	subi	r24, 0x56	; 86
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	9e 01       	movw	r18, r28
    1888:	2a 55       	subi	r18, 0x5A	; 90
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	f9 01       	movw	r30, r18
    188e:	20 81       	ld	r18, Z
    1890:	31 81       	ldd	r19, Z+1	; 0x01
    1892:	fc 01       	movw	r30, r24
    1894:	31 83       	std	Z+1, r19	; 0x01
    1896:	20 83       	st	Z, r18
    1898:	ce 01       	movw	r24, r28
    189a:	86 55       	subi	r24, 0x56	; 86
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	fc 01       	movw	r30, r24
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	8c 01       	movw	r16, r24
    18a6:	c8 01       	movw	r24, r16
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <__stack+0x7a9>
    18ac:	8c 01       	movw	r16, r24
    18ae:	ce 01       	movw	r24, r28
    18b0:	86 55       	subi	r24, 0x56	; 86
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	fc 01       	movw	r30, r24
    18b6:	11 83       	std	Z+1, r17	; 0x01
    18b8:	00 83       	st	Z, r16
    18ba:	28 c0       	rjmp	.+80     	; 0x190c <__stack+0x80d>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18bc:	8e 01       	movw	r16, r28
    18be:	03 56       	subi	r16, 0x63	; 99
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	ce 01       	movw	r24, r28
    18c4:	87 56       	subi	r24, 0x67	; 103
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	fc 01       	movw	r30, r24
    18ca:	60 81       	ld	r22, Z
    18cc:	71 81       	ldd	r23, Z+1	; 0x01
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	f8 01       	movw	r30, r16
    18dc:	80 83       	st	Z, r24
    18de:	ce 01       	movw	r24, r28
    18e0:	84 55       	subi	r24, 0x54	; 84
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	9e 01       	movw	r18, r28
    18e6:	23 56       	subi	r18, 0x63	; 99
    18e8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ea:	f9 01       	movw	r30, r18
    18ec:	20 81       	ld	r18, Z
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18f2:	ce 01       	movw	r24, r28
    18f4:	84 55       	subi	r24, 0x54	; 84
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	18 2f       	mov	r17, r24
    18fe:	1a 95       	dec	r17
    1900:	f1 f7       	brne	.-4      	; 0x18fe <__stack+0x7ff>
    1902:	ce 01       	movw	r24, r28
    1904:	84 55       	subi	r24, 0x54	; 84
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	fc 01       	movw	r30, r24
    190a:	10 83       	st	Z, r17
	_delay_us(1000);
   
    lcd_home;//set cursor to home and clear the cursor
	
}
    190c:	c4 55       	subi	r28, 0x54	; 84
    190e:	df 4f       	sbci	r29, 0xFF	; 255
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <lcd_setline>:

//-----------------------------------------------------------------------------------------
// FUNCTION: lcd_newline
// PURPOSE:  Move cursor on specified line
void lcd_setline(uint8_t line)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <lcd_setline+0x6>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	8a 83       	std	Y+2, r24	; 0x02
	
    uint8_t addressCounter = 0;
    1930:	19 82       	std	Y+1, r1	; 0x01
	switch(line)
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	91 05       	cpc	r25, r1
    193c:	79 f0       	breq	.+30     	; 0x195c <lcd_setline+0x38>
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	91 05       	cpc	r25, r1
    1942:	1c f4       	brge	.+6      	; 0x194a <lcd_setline+0x26>
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	41 f0       	breq	.+16     	; 0x1958 <lcd_setline+0x34>
    1948:	12 c0       	rjmp	.+36     	; 0x196e <lcd_setline+0x4a>
    194a:	82 30       	cpi	r24, 0x02	; 2
    194c:	91 05       	cpc	r25, r1
    194e:	49 f0       	breq	.+18     	; 0x1962 <lcd_setline+0x3e>
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	91 05       	cpc	r25, r1
    1954:	49 f0       	breq	.+18     	; 0x1968 <lcd_setline+0x44>
    1956:	0b c0       	rjmp	.+22     	; 0x196e <lcd_setline+0x4a>
	{
		case 0: addressCounter = LCD_START_LINE1; break;
    1958:	19 82       	std	Y+1, r1	; 0x01
    195a:	0b c0       	rjmp	.+22     	; 0x1972 <lcd_setline+0x4e>
		case 1: addressCounter = LCD_START_LINE2; break;
    195c:	88 e2       	ldi	r24, 0x28	; 40
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	08 c0       	rjmp	.+16     	; 0x1972 <lcd_setline+0x4e>
		case 2: addressCounter = LCD_START_LINE3; break;
    1962:	84 e1       	ldi	r24, 0x14	; 20
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <lcd_setline+0x4e>
		case 3: addressCounter = LCD_START_LINE4; break;
    1968:	84 e5       	ldi	r24, 0x54	; 84
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <lcd_setline+0x4e>
		default:addressCounter = LCD_START_LINE1; break;
    196e:	19 82       	std	Y+1, r1	; 0x01
    1970:	00 00       	nop
	}
	//_delay_ms(10);
	//lcd_string2("%x", addressCounter);
	//_delay_ms(10);
	g_nCurrentLine = line;
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	90 93 09 01 	sts	0x0109, r25
    197c:	80 93 08 01 	sts	0x0108, r24
    lcd_instr((1<<LCD_DDRAM)+addressCounter);
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	80 58       	subi	r24, 0x80	; 128
    1984:	0e 94 9d 03 	call	0x73a	; 0x73a <lcd_instr>
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <lcd_string>:

//-----------------------------------------------------------------------------------------
// FUNCTION: lcd_string
// PURPOSE:  send a null terminated string to the LCD eg. char x[10]="hello!";
void lcd_string(char *text)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <lcd_string+0x6>
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	9b 83       	std	Y+3, r25	; 0x03
    19a0:	8a 83       	std	Y+2, r24	; 0x02
	char c;
    while ( (c = *text++) )
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <lcd_string+0x18>
	{
		lcd_char(c);
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <lcd_char>
// FUNCTION: lcd_string
// PURPOSE:  send a null terminated string to the LCD eg. char x[10]="hello!";
void lcd_string(char *text)
{
	char c;
    while ( (c = *text++) )
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	fc 01       	movw	r30, r24
    19b0:	80 81       	ld	r24, Z
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	21 e0       	ldi	r18, 0x01	; 1
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	88 23       	and	r24, r24
    19ba:	09 f4       	brne	.+2      	; 0x19be <lcd_string+0x2c>
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	9b 83       	std	Y+3, r25	; 0x03
    19c6:	8a 83       	std	Y+2, r24	; 0x02
    19c8:	22 23       	and	r18, r18
    19ca:	61 f7       	brne	.-40     	; 0x19a4 <lcd_string+0x12>
	{
		lcd_char(c);
	}  
}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <lcd_string2>:

void lcd_string2(char *szFormat, ...)
{	
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	c6 50       	subi	r28, 0x06	; 6
    19e2:	d1 40       	sbci	r29, 0x01	; 1
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    char szBuffer[256]; //in this buffer we form the message
    int NUMCHARS = sizeof(szBuffer) / sizeof(szBuffer[0]);
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	91 e0       	ldi	r25, 0x01	; 1
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
    int LASTCHAR = NUMCHARS - 1;
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	8b 83       	std	Y+3, r24	; 0x03
    va_list pArgs;
    va_start(pArgs, szFormat);
    1a00:	9e 01       	movw	r18, r28
    1a02:	23 5f       	subi	r18, 0xF3	; 243
    1a04:	3e 4f       	sbci	r19, 0xFE	; 254
    1a06:	ce 01       	movw	r24, r28
    1a08:	8b 5f       	subi	r24, 0xFB	; 251
    1a0a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	31 83       	std	Z+1, r19	; 0x01
    1a10:	20 83       	st	Z, r18
    vsnprintf(szBuffer, NUMCHARS - 1, szFormat, pArgs);
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	bc 01       	movw	r22, r24
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	8b 5f       	subi	r24, 0xFB	; 251
    1a1e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a20:	fc 01       	movw	r30, r24
    1a22:	20 81       	ld	r18, Z
    1a24:	31 81       	ldd	r19, Z+1	; 0x01
    1a26:	ce 01       	movw	r24, r28
    1a28:	05 96       	adiw	r24, 0x05	; 5
    1a2a:	c5 5f       	subi	r28, 0xF5	; 245
    1a2c:	de 4f       	sbci	r29, 0xFE	; 254
    1a2e:	48 81       	ld	r20, Y
    1a30:	59 81       	ldd	r21, Y+1	; 0x01
    1a32:	cb 50       	subi	r28, 0x0B	; 11
    1a34:	d1 40       	sbci	r29, 0x01	; 1
    1a36:	0e 94 5e 15 	call	0x2abc	; 0x2abc <vsnprintf>
    va_end(pArgs);
	
	lcd_string(szBuffer);
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	05 96       	adiw	r24, 0x05	; 5
    1a3e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <lcd_string>

}
    1a42:	ca 5f       	subi	r28, 0xFA	; 250
    1a44:	de 4f       	sbci	r29, 0xFE	; 254
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <lcd_gotoxy>:
// FUNCTION: lcd_gotoxy
// PURPOSE:  Set cursor to specified position
//           Input:    x  horizontal position  (0: left most position)
//                     y  vertical position    (0: first line)
void lcd_gotoxy(uint8_t x, uint8_t y)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <lcd_gotoxy+0x6>
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_instr((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#elif LCD_LINES==2
   	switch (y) 
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <lcd_gotoxy+0x20>
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	31 f0       	breq	.+12     	; 0x1a80 <lcd_gotoxy+0x2a>
	{
		case 0:lcd_instr((1<<LCD_DDRAM)+LCD_START_LINE1+x);break;
    	case 1:lcd_instr((1<<LCD_DDRAM)+LCD_START_LINE2+x);break;
		default: break;
    1a74:	0a c0       	rjmp	.+20     	; 0x1a8a <lcd_gotoxy+0x34>
#if LCD_LINES==1
    lcd_instr((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#elif LCD_LINES==2
   	switch (y) 
	{
		case 0:lcd_instr((1<<LCD_DDRAM)+LCD_START_LINE1+x);break;
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	80 58       	subi	r24, 0x80	; 128
    1a7a:	0e 94 9d 03 	call	0x73a	; 0x73a <lcd_instr>
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <lcd_gotoxy+0x34>
    	case 1:lcd_instr((1<<LCD_DDRAM)+LCD_START_LINE2+x);break;
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	88 55       	subi	r24, 0x58	; 88
    1a84:	0e 94 9d 03 	call	0x73a	; 0x73a <lcd_instr>
    1a88:	00 00       	nop
    	case 2:lcd_instr((1<<LCD_DDRAM)+LCD_START_LINE3+x);break;
    	case 3:lcd_instr((1<<LCD_DDRAM)+LCD_START_LINE4+x);break;
		default: break;
	}
#endif
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <lcd_clrscr>:

//-----------------------------------------------------------------------------------------
// FUNCTION: lcd_clrscr
// PURPOSE:  Clear display and set cursor to home position
void lcd_clrscr(void)
{
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	68 97       	sbiw	r28, 0x18	; 24
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
	g_nCurrentLine = 0;
    1aac:	10 92 09 01 	sts	0x0109, r1
    1ab0:	10 92 08 01 	sts	0x0108, r1
   	lcd_instr(1<<LCD_CLR);
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	0e 94 9d 03 	call	0x73a	; 0x73a <lcd_instr>
	lcd_e_toggle();
    1aba:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e4       	ldi	r25, 0x40	; 64
    1ac2:	ac e1       	ldi	r26, 0x1C	; 28
    1ac4:	b6 e4       	ldi	r27, 0x46	; 70
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	ab 83       	std	Y+3, r26	; 0x03
    1acc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1ace:	69 81       	ldd	r22, Y+1	; 0x01
    1ad0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	2b ea       	ldi	r18, 0xAB	; 171
    1ad8:	3a ea       	ldi	r19, 0xAA	; 170
    1ada:	4a ea       	ldi	r20, 0xAA	; 170
    1adc:	5e e3       	ldi	r21, 0x3E	; 62
    1ade:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	af 83       	std	Y+7, r26	; 0x07
    1aec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1aee:	11 e0       	ldi	r17, 0x01	; 1
    1af0:	6d 81       	ldd	r22, Y+5	; 0x05
    1af2:	7e 81       	ldd	r23, Y+6	; 0x06
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	98 85       	ldd	r25, Y+8	; 0x08
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	0c f0       	brlt	.+2      	; 0x1b0a <lcd_clrscr+0x76>
    1b08:	10 e0       	ldi	r17, 0x00	; 0
    1b0a:	11 23       	and	r17, r17
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <lcd_clrscr+0x80>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	89 87       	std	Y+9, r24	; 0x09
    1b12:	a3 c0       	rjmp	.+326    	; 0x1c5a <lcd_clrscr+0x1c6>
	else if (__tmp > 255)
    1b14:	11 e0       	ldi	r17, 0x01	; 1
    1b16:	6d 81       	ldd	r22, Y+5	; 0x05
    1b18:	7e 81       	ldd	r23, Y+6	; 0x06
    1b1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1c:	98 85       	ldd	r25, Y+8	; 0x08
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	53 e4       	ldi	r21, 0x43	; 67
    1b26:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	0c f0       	brlt	.+2      	; 0x1b30 <lcd_clrscr+0x9c>
    1b2e:	10 e0       	ldi	r17, 0x00	; 0
    1b30:	11 23       	and	r17, r17
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <lcd_clrscr+0xa2>
    1b34:	89 c0       	rjmp	.+274    	; 0x1c48 <lcd_clrscr+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1b36:	69 81       	ldd	r22, Y+1	; 0x01
    1b38:	7a 81       	ldd	r23, Y+2	; 0x02
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a e7       	ldi	r20, 0x7A	; 122
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8a 87       	std	Y+10, r24	; 0x0a
    1b50:	9b 87       	std	Y+11, r25	; 0x0b
    1b52:	ac 87       	std	Y+12, r26	; 0x0c
    1b54:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b56:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b58:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a e7       	ldi	r20, 0x7A	; 122
    1b64:	53 e4       	ldi	r21, 0x43	; 67
    1b66:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8e 87       	std	Y+14, r24	; 0x0e
    1b70:	9f 87       	std	Y+15, r25	; 0x0f
    1b72:	a8 8b       	std	Y+16, r26	; 0x10
    1b74:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1b76:	11 e0       	ldi	r17, 0x01	; 1
    1b78:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b7a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b7c:	88 89       	ldd	r24, Y+16	; 0x10
    1b7e:	99 89       	ldd	r25, Y+17	; 0x11
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	0c f0       	brlt	.+2      	; 0x1b92 <lcd_clrscr+0xfe>
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	11 23       	and	r17, r17
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <lcd_clrscr+0x10c>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9b 8b       	std	Y+19, r25	; 0x13
    1b9c:	8a 8b       	std	Y+18, r24	; 0x12
    1b9e:	46 c0       	rjmp	.+140    	; 0x1c2c <lcd_clrscr+0x198>
	else if (__tmp > 65535)
    1ba0:	11 e0       	ldi	r17, 0x01	; 1
    1ba2:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ba4:	7f 85       	ldd	r23, Y+15	; 0x0f
    1ba6:	88 89       	ldd	r24, Y+16	; 0x10
    1ba8:	99 89       	ldd	r25, Y+17	; 0x11
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	0c f0       	brlt	.+2      	; 0x1bbc <lcd_clrscr+0x128>
    1bba:	10 e0       	ldi	r17, 0x00	; 0
    1bbc:	11 23       	and	r17, r17
    1bbe:	61 f1       	breq	.+88     	; 0x1c18 <lcd_clrscr+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bc2:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e2       	ldi	r20, 0x20	; 32
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9b 8b       	std	Y+19, r25	; 0x13
    1be6:	8a 8b       	std	Y+18, r24	; 0x12
    1be8:	12 c0       	rjmp	.+36     	; 0x1c0e <lcd_clrscr+0x17a>
    1bea:	89 e1       	ldi	r24, 0x19	; 25
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9d 8b       	std	Y+21, r25	; 0x15
    1bf0:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf2:	8c 89       	ldd	r24, Y+20	; 0x14
    1bf4:	9d 89       	ldd	r25, Y+21	; 0x15
    1bf6:	8c 01       	movw	r16, r24
    1bf8:	c8 01       	movw	r24, r16
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <lcd_clrscr+0x166>
    1bfe:	8c 01       	movw	r16, r24
    1c00:	1d 8b       	std	Y+21, r17	; 0x15
    1c02:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c04:	8a 89       	ldd	r24, Y+18	; 0x12
    1c06:	9b 89       	ldd	r25, Y+19	; 0x13
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	9b 8b       	std	Y+19, r25	; 0x13
    1c0c:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c10:	9b 89       	ldd	r25, Y+19	; 0x13
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	51 f7       	brne	.-44     	; 0x1bea <lcd_clrscr+0x156>
    1c16:	28 c0       	rjmp	.+80     	; 0x1c68 <lcd_clrscr+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c18:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c1a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1c1c:	88 89       	ldd	r24, Y+16	; 0x10
    1c1e:	99 89       	ldd	r25, Y+17	; 0x11
    1c20:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9b 8b       	std	Y+19, r25	; 0x13
    1c2a:	8a 8b       	std	Y+18, r24	; 0x12
    1c2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c2e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c30:	9f 8b       	std	Y+23, r25	; 0x17
    1c32:	8e 8b       	std	Y+22, r24	; 0x16
    1c34:	8e 89       	ldd	r24, Y+22	; 0x16
    1c36:	9f 89       	ldd	r25, Y+23	; 0x17
    1c38:	8c 01       	movw	r16, r24
    1c3a:	c8 01       	movw	r24, r16
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <lcd_clrscr+0x1a8>
    1c40:	8c 01       	movw	r16, r24
    1c42:	1f 8b       	std	Y+23, r17	; 0x17
    1c44:	0e 8b       	std	Y+22, r16	; 0x16
    1c46:	10 c0       	rjmp	.+32     	; 0x1c68 <lcd_clrscr+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c48:	6d 81       	ldd	r22, Y+5	; 0x05
    1c4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4e:	98 85       	ldd	r25, Y+8	; 0x08
    1c50:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	89 87       	std	Y+9, r24	; 0x09
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c60:	18 2f       	mov	r17, r24
    1c62:	1a 95       	dec	r17
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <lcd_clrscr+0x1ce>
    1c66:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(10000);
}
    1c68:	68 96       	adiw	r28, 0x18	; 24
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	08 95       	ret

00001c7e <lcd_home>:

//-----------------------------------------------------------------------------------------
// FUNCTION: lcd_home
// PURPOSE:  Set cursor to home position
void lcd_home(void)
{
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	68 97       	sbiw	r28, 0x18	; 24
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
	g_nCurrentLine = 0;
    1c96:	10 92 09 01 	sts	0x0109, r1
    1c9a:	10 92 08 01 	sts	0x0108, r1
    lcd_instr(1<<LCD_HOME);
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	0e 94 9d 03 	call	0x73a	; 0x73a <lcd_instr>
	lcd_e_toggle();
    1ca4:	0e 94 67 00 	call	0xce	; 0xce <_auxToggleE>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e4       	ldi	r25, 0x40	; 64
    1cac:	ac e1       	ldi	r26, 0x1C	; 28
    1cae:	b6 e4       	ldi	r27, 0x46	; 70
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	ab 83       	std	Y+3, r26	; 0x03
    1cb6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1cb8:	69 81       	ldd	r22, Y+1	; 0x01
    1cba:	7a 81       	ldd	r23, Y+2	; 0x02
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	2b ea       	ldi	r18, 0xAB	; 171
    1cc2:	3a ea       	ldi	r19, 0xAA	; 170
    1cc4:	4a ea       	ldi	r20, 0xAA	; 170
    1cc6:	5e e3       	ldi	r21, 0x3E	; 62
    1cc8:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	af 83       	std	Y+7, r26	; 0x07
    1cd6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1cd8:	11 e0       	ldi	r17, 0x01	; 1
    1cda:	6d 81       	ldd	r22, Y+5	; 0x05
    1cdc:	7e 81       	ldd	r23, Y+6	; 0x06
    1cde:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce0:	98 85       	ldd	r25, Y+8	; 0x08
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	0c f0       	brlt	.+2      	; 0x1cf4 <lcd_home+0x76>
    1cf2:	10 e0       	ldi	r17, 0x00	; 0
    1cf4:	11 23       	and	r17, r17
    1cf6:	19 f0       	breq	.+6      	; 0x1cfe <lcd_home+0x80>
		__ticks = 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	89 87       	std	Y+9, r24	; 0x09
    1cfc:	a3 c0       	rjmp	.+326    	; 0x1e44 <lcd_home+0x1c6>
	else if (__tmp > 255)
    1cfe:	11 e0       	ldi	r17, 0x01	; 1
    1d00:	6d 81       	ldd	r22, Y+5	; 0x05
    1d02:	7e 81       	ldd	r23, Y+6	; 0x06
    1d04:	8f 81       	ldd	r24, Y+7	; 0x07
    1d06:	98 85       	ldd	r25, Y+8	; 0x08
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	53 e4       	ldi	r21, 0x43	; 67
    1d10:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	0c f0       	brlt	.+2      	; 0x1d1a <lcd_home+0x9c>
    1d18:	10 e0       	ldi	r17, 0x00	; 0
    1d1a:	11 23       	and	r17, r17
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <lcd_home+0xa2>
    1d1e:	89 c0       	rjmp	.+274    	; 0x1e32 <lcd_home+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1d20:	69 81       	ldd	r22, Y+1	; 0x01
    1d22:	7a 81       	ldd	r23, Y+2	; 0x02
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a e7       	ldi	r20, 0x7A	; 122
    1d2e:	54 e4       	ldi	r21, 0x44	; 68
    1d30:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8a 87       	std	Y+10, r24	; 0x0a
    1d3a:	9b 87       	std	Y+11, r25	; 0x0b
    1d3c:	ac 87       	std	Y+12, r26	; 0x0c
    1d3e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	6a 85       	ldd	r22, Y+10	; 0x0a
    1d42:	7b 85       	ldd	r23, Y+11	; 0x0b
    1d44:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d46:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a e7       	ldi	r20, 0x7A	; 122
    1d4e:	53 e4       	ldi	r21, 0x43	; 67
    1d50:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8e 87       	std	Y+14, r24	; 0x0e
    1d5a:	9f 87       	std	Y+15, r25	; 0x0f
    1d5c:	a8 8b       	std	Y+16, r26	; 0x10
    1d5e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1d60:	11 e0       	ldi	r17, 0x01	; 1
    1d62:	6e 85       	ldd	r22, Y+14	; 0x0e
    1d64:	7f 85       	ldd	r23, Y+15	; 0x0f
    1d66:	88 89       	ldd	r24, Y+16	; 0x10
    1d68:	99 89       	ldd	r25, Y+17	; 0x11
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e8       	ldi	r20, 0x80	; 128
    1d70:	5f e3       	ldi	r21, 0x3F	; 63
    1d72:	0e 94 15 13 	call	0x262a	; 0x262a <__ltsf2>
    1d76:	88 23       	and	r24, r24
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <lcd_home+0xfe>
    1d7a:	10 e0       	ldi	r17, 0x00	; 0
    1d7c:	11 23       	and	r17, r17
    1d7e:	29 f0       	breq	.+10     	; 0x1d8a <lcd_home+0x10c>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9b 8b       	std	Y+19, r25	; 0x13
    1d86:	8a 8b       	std	Y+18, r24	; 0x12
    1d88:	46 c0       	rjmp	.+140    	; 0x1e16 <lcd_home+0x198>
	else if (__tmp > 65535)
    1d8a:	11 e0       	ldi	r17, 0x01	; 1
    1d8c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1d8e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1d90:	88 89       	ldd	r24, Y+16	; 0x10
    1d92:	99 89       	ldd	r25, Y+17	; 0x11
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 b5 12 	call	0x256a	; 0x256a <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	0c f0       	brlt	.+2      	; 0x1da6 <lcd_home+0x128>
    1da4:	10 e0       	ldi	r17, 0x00	; 0
    1da6:	11 23       	and	r17, r17
    1da8:	61 f1       	breq	.+88     	; 0x1e02 <lcd_home+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	6a 85       	ldd	r22, Y+10	; 0x0a
    1dac:	7b 85       	ldd	r23, Y+11	; 0x0b
    1dae:	8c 85       	ldd	r24, Y+12	; 0x0c
    1db0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 0d 11 	call	0x221a	; 0x221a <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9b 8b       	std	Y+19, r25	; 0x13
    1dd0:	8a 8b       	std	Y+18, r24	; 0x12
    1dd2:	12 c0       	rjmp	.+36     	; 0x1df8 <lcd_home+0x17a>
    1dd4:	89 e1       	ldi	r24, 0x19	; 25
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9d 8b       	std	Y+21, r25	; 0x15
    1dda:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ddc:	8c 89       	ldd	r24, Y+20	; 0x14
    1dde:	9d 89       	ldd	r25, Y+21	; 0x15
    1de0:	8c 01       	movw	r16, r24
    1de2:	c8 01       	movw	r24, r16
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <lcd_home+0x166>
    1de8:	8c 01       	movw	r16, r24
    1dea:	1d 8b       	std	Y+21, r17	; 0x15
    1dec:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8a 89       	ldd	r24, Y+18	; 0x12
    1df0:	9b 89       	ldd	r25, Y+19	; 0x13
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	9b 8b       	std	Y+19, r25	; 0x13
    1df6:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8a 89       	ldd	r24, Y+18	; 0x12
    1dfa:	9b 89       	ldd	r25, Y+19	; 0x13
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	51 f7       	brne	.-44     	; 0x1dd4 <lcd_home+0x156>
    1e00:	28 c0       	rjmp	.+80     	; 0x1e52 <lcd_home+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e04:	7f 85       	ldd	r23, Y+15	; 0x0f
    1e06:	88 89       	ldd	r24, Y+16	; 0x10
    1e08:	99 89       	ldd	r25, Y+17	; 0x11
    1e0a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9b 8b       	std	Y+19, r25	; 0x13
    1e14:	8a 8b       	std	Y+18, r24	; 0x12
    1e16:	8a 89       	ldd	r24, Y+18	; 0x12
    1e18:	9b 89       	ldd	r25, Y+19	; 0x13
    1e1a:	9f 8b       	std	Y+23, r25	; 0x17
    1e1c:	8e 8b       	std	Y+22, r24	; 0x16
    1e1e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e20:	9f 89       	ldd	r25, Y+23	; 0x17
    1e22:	8c 01       	movw	r16, r24
    1e24:	c8 01       	movw	r24, r16
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <lcd_home+0x1a8>
    1e2a:	8c 01       	movw	r16, r24
    1e2c:	1f 8b       	std	Y+23, r17	; 0x17
    1e2e:	0e 8b       	std	Y+22, r16	; 0x16
    1e30:	10 c0       	rjmp	.+32     	; 0x1e52 <lcd_home+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e32:	6d 81       	ldd	r22, Y+5	; 0x05
    1e34:	7e 81       	ldd	r23, Y+6	; 0x06
    1e36:	8f 81       	ldd	r24, Y+7	; 0x07
    1e38:	98 85       	ldd	r25, Y+8	; 0x08
    1e3a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	89 87       	std	Y+9, r24	; 0x09
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e48:	88 8d       	ldd	r24, Y+24	; 0x18
    1e4a:	18 2f       	mov	r17, r24
    1e4c:	1a 95       	dec	r17
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <lcd_home+0x1ce>
    1e50:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(10000);
}
    1e52:	68 96       	adiw	r28, 0x18	; 24
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	08 95       	ret

00001e68 <main>:

#include <avr/io.h>
#include "lcd.h"

int main(void)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        //TODO:: Please write your application code 
    }
    1e70:	ff cf       	rjmp	.-2      	; 0x1e70 <main+0x8>

00001e72 <__fixunssfsi>:
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	7b 01       	movw	r14, r22
    1e7c:	8c 01       	movw	r16, r24
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	5f e4       	ldi	r21, 0x4F	; 79
    1e86:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__gesf2>
    1e8a:	87 fd       	sbrc	r24, 7
    1e8c:	11 c0       	rjmp	.+34     	; 0x1eb0 <__fixunssfsi+0x3e>
    1e8e:	c8 01       	movw	r24, r16
    1e90:	b7 01       	movw	r22, r14
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	5f e4       	ldi	r21, 0x4F	; 79
    1e9a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__subsf3>
    1e9e:	0e 94 45 13 	call	0x268a	; 0x268a <__fixsfsi>
    1ea2:	9b 01       	movw	r18, r22
    1ea4:	ac 01       	movw	r20, r24
    1ea6:	20 50       	subi	r18, 0x00	; 0
    1ea8:	30 40       	sbci	r19, 0x00	; 0
    1eaa:	40 40       	sbci	r20, 0x00	; 0
    1eac:	50 48       	sbci	r21, 0x80	; 128
    1eae:	06 c0       	rjmp	.+12     	; 0x1ebc <__fixunssfsi+0x4a>
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	b7 01       	movw	r22, r14
    1eb4:	0e 94 45 13 	call	0x268a	; 0x268a <__fixsfsi>
    1eb8:	9b 01       	movw	r18, r22
    1eba:	ac 01       	movw	r20, r24
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	ca 01       	movw	r24, r20
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	08 95       	ret

00001eca <_fpadd_parts>:
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	eb e6       	ldi	r30, 0x6B	; 107
    1ed0:	ff e0       	ldi	r31, 0x0F	; 15
    1ed2:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x8>
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	ea 01       	movw	r28, r20
    1eda:	80 81       	ld	r24, Z
    1edc:	82 30       	cpi	r24, 0x02	; 2
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <_fpadd_parts+0x18>
    1ee0:	38 c1       	rjmp	.+624    	; 0x2152 <_fpadd_parts+0x288>
    1ee2:	db 01       	movw	r26, r22
    1ee4:	9c 91       	ld	r25, X
    1ee6:	92 30       	cpi	r25, 0x02	; 2
    1ee8:	08 f4       	brcc	.+2      	; 0x1eec <_fpadd_parts+0x22>
    1eea:	30 c1       	rjmp	.+608    	; 0x214c <_fpadd_parts+0x282>
    1eec:	84 30       	cpi	r24, 0x04	; 4
    1eee:	59 f4       	brne	.+22     	; 0x1f06 <_fpadd_parts+0x3c>
    1ef0:	94 30       	cpi	r25, 0x04	; 4
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <_fpadd_parts+0x2c>
    1ef4:	2e c1       	rjmp	.+604    	; 0x2152 <_fpadd_parts+0x288>
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	11 96       	adiw	r26, 0x01	; 1
    1efa:	8c 91       	ld	r24, X
    1efc:	11 97       	sbiw	r26, 0x01	; 1
    1efe:	98 17       	cp	r25, r24
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <_fpadd_parts+0x3a>
    1f02:	21 c1       	rjmp	.+578    	; 0x2146 <_fpadd_parts+0x27c>
    1f04:	26 c1       	rjmp	.+588    	; 0x2152 <_fpadd_parts+0x288>
    1f06:	94 30       	cpi	r25, 0x04	; 4
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <_fpadd_parts+0x42>
    1f0a:	20 c1       	rjmp	.+576    	; 0x214c <_fpadd_parts+0x282>
    1f0c:	92 30       	cpi	r25, 0x02	; 2
    1f0e:	b1 f4       	brne	.+44     	; 0x1f3c <_fpadd_parts+0x72>
    1f10:	82 30       	cpi	r24, 0x02	; 2
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <_fpadd_parts+0x4c>
    1f14:	1e c1       	rjmp	.+572    	; 0x2152 <_fpadd_parts+0x288>
    1f16:	ca 01       	movw	r24, r20
    1f18:	af 01       	movw	r20, r30
    1f1a:	28 e0       	ldi	r18, 0x08	; 8
    1f1c:	da 01       	movw	r26, r20
    1f1e:	0d 90       	ld	r0, X+
    1f20:	ad 01       	movw	r20, r26
    1f22:	dc 01       	movw	r26, r24
    1f24:	0d 92       	st	X+, r0
    1f26:	cd 01       	movw	r24, r26
    1f28:	21 50       	subi	r18, 0x01	; 1
    1f2a:	c1 f7       	brne	.-16     	; 0x1f1c <_fpadd_parts+0x52>
    1f2c:	db 01       	movw	r26, r22
    1f2e:	11 96       	adiw	r26, 0x01	; 1
    1f30:	8c 91       	ld	r24, X
    1f32:	11 97       	sbiw	r26, 0x01	; 1
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	89 23       	and	r24, r25
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	0a c1       	rjmp	.+532    	; 0x2150 <_fpadd_parts+0x286>
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <_fpadd_parts+0x78>
    1f40:	05 c1       	rjmp	.+522    	; 0x214c <_fpadd_parts+0x282>
    1f42:	c2 80       	ldd	r12, Z+2	; 0x02
    1f44:	d3 80       	ldd	r13, Z+3	; 0x03
    1f46:	db 01       	movw	r26, r22
    1f48:	12 96       	adiw	r26, 0x02	; 2
    1f4a:	6d 90       	ld	r6, X+
    1f4c:	7c 90       	ld	r7, X
    1f4e:	13 97       	sbiw	r26, 0x03	; 3
    1f50:	24 81       	ldd	r18, Z+4	; 0x04
    1f52:	35 81       	ldd	r19, Z+5	; 0x05
    1f54:	46 81       	ldd	r20, Z+6	; 0x06
    1f56:	57 81       	ldd	r21, Z+7	; 0x07
    1f58:	14 96       	adiw	r26, 0x04	; 4
    1f5a:	ed 90       	ld	r14, X+
    1f5c:	fd 90       	ld	r15, X+
    1f5e:	0d 91       	ld	r16, X+
    1f60:	1c 91       	ld	r17, X
    1f62:	17 97       	sbiw	r26, 0x07	; 7
    1f64:	c6 01       	movw	r24, r12
    1f66:	86 19       	sub	r24, r6
    1f68:	97 09       	sbc	r25, r7
    1f6a:	5c 01       	movw	r10, r24
    1f6c:	97 ff       	sbrs	r25, 7
    1f6e:	04 c0       	rjmp	.+8      	; 0x1f78 <_fpadd_parts+0xae>
    1f70:	aa 24       	eor	r10, r10
    1f72:	bb 24       	eor	r11, r11
    1f74:	a8 1a       	sub	r10, r24
    1f76:	b9 0a       	sbc	r11, r25
    1f78:	b0 e2       	ldi	r27, 0x20	; 32
    1f7a:	ab 16       	cp	r10, r27
    1f7c:	b1 04       	cpc	r11, r1
    1f7e:	0c f0       	brlt	.+2      	; 0x1f82 <_fpadd_parts+0xb8>
    1f80:	61 c0       	rjmp	.+194    	; 0x2044 <_fpadd_parts+0x17a>
    1f82:	18 16       	cp	r1, r24
    1f84:	19 06       	cpc	r1, r25
    1f86:	6c f5       	brge	.+90     	; 0x1fe2 <_fpadd_parts+0x118>
    1f88:	37 01       	movw	r6, r14
    1f8a:	48 01       	movw	r8, r16
    1f8c:	0a 2c       	mov	r0, r10
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <_fpadd_parts+0xce>
    1f90:	96 94       	lsr	r9
    1f92:	87 94       	ror	r8
    1f94:	77 94       	ror	r7
    1f96:	67 94       	ror	r6
    1f98:	0a 94       	dec	r0
    1f9a:	d2 f7       	brpl	.-12     	; 0x1f90 <_fpadd_parts+0xc6>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a0 e0       	ldi	r26, 0x00	; 0
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	0a 2c       	mov	r0, r10
    1fa6:	04 c0       	rjmp	.+8      	; 0x1fb0 <_fpadd_parts+0xe6>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	aa 1f       	adc	r26, r26
    1fae:	bb 1f       	adc	r27, r27
    1fb0:	0a 94       	dec	r0
    1fb2:	d2 f7       	brpl	.-12     	; 0x1fa8 <_fpadd_parts+0xde>
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	a1 09       	sbc	r26, r1
    1fb8:	b1 09       	sbc	r27, r1
    1fba:	8e 21       	and	r24, r14
    1fbc:	9f 21       	and	r25, r15
    1fbe:	a0 23       	and	r26, r16
    1fc0:	b1 23       	and	r27, r17
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	87 01       	movw	r16, r14
    1fc8:	e3 94       	inc	r14
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	a1 05       	cpc	r26, r1
    1fce:	b1 05       	cpc	r27, r1
    1fd0:	19 f4       	brne	.+6      	; 0x1fd8 <_fpadd_parts+0x10e>
    1fd2:	ee 24       	eor	r14, r14
    1fd4:	ff 24       	eor	r15, r15
    1fd6:	87 01       	movw	r16, r14
    1fd8:	e6 28       	or	r14, r6
    1fda:	f7 28       	or	r15, r7
    1fdc:	08 29       	or	r16, r8
    1fde:	19 29       	or	r17, r9
    1fe0:	3c c0       	rjmp	.+120    	; 0x205a <_fpadd_parts+0x190>
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	d1 f1       	breq	.+116    	; 0x205a <_fpadd_parts+0x190>
    1fe6:	ca 0c       	add	r12, r10
    1fe8:	db 1c       	adc	r13, r11
    1fea:	39 01       	movw	r6, r18
    1fec:	4a 01       	movw	r8, r20
    1fee:	0a 2c       	mov	r0, r10
    1ff0:	04 c0       	rjmp	.+8      	; 0x1ffa <_fpadd_parts+0x130>
    1ff2:	96 94       	lsr	r9
    1ff4:	87 94       	ror	r8
    1ff6:	77 94       	ror	r7
    1ff8:	67 94       	ror	r6
    1ffa:	0a 94       	dec	r0
    1ffc:	d2 f7       	brpl	.-12     	; 0x1ff2 <_fpadd_parts+0x128>
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e0       	ldi	r26, 0x00	; 0
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	0a 2c       	mov	r0, r10
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <_fpadd_parts+0x148>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	aa 1f       	adc	r26, r26
    2010:	bb 1f       	adc	r27, r27
    2012:	0a 94       	dec	r0
    2014:	d2 f7       	brpl	.-12     	; 0x200a <_fpadd_parts+0x140>
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	a1 09       	sbc	r26, r1
    201a:	b1 09       	sbc	r27, r1
    201c:	82 23       	and	r24, r18
    201e:	93 23       	and	r25, r19
    2020:	a4 23       	and	r26, r20
    2022:	b5 23       	and	r27, r21
    2024:	21 e0       	ldi	r18, 0x01	; 1
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	a1 05       	cpc	r26, r1
    2030:	b1 05       	cpc	r27, r1
    2032:	19 f4       	brne	.+6      	; 0x203a <_fpadd_parts+0x170>
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	a9 01       	movw	r20, r18
    203a:	26 29       	or	r18, r6
    203c:	37 29       	or	r19, r7
    203e:	48 29       	or	r20, r8
    2040:	59 29       	or	r21, r9
    2042:	0b c0       	rjmp	.+22     	; 0x205a <_fpadd_parts+0x190>
    2044:	6c 14       	cp	r6, r12
    2046:	7d 04       	cpc	r7, r13
    2048:	24 f4       	brge	.+8      	; 0x2052 <_fpadd_parts+0x188>
    204a:	ee 24       	eor	r14, r14
    204c:	ff 24       	eor	r15, r15
    204e:	87 01       	movw	r16, r14
    2050:	04 c0       	rjmp	.+8      	; 0x205a <_fpadd_parts+0x190>
    2052:	63 01       	movw	r12, r6
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	a9 01       	movw	r20, r18
    205a:	81 81       	ldd	r24, Z+1	; 0x01
    205c:	fb 01       	movw	r30, r22
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	89 17       	cp	r24, r25
    2062:	09 f4       	brne	.+2      	; 0x2066 <_fpadd_parts+0x19c>
    2064:	45 c0       	rjmp	.+138    	; 0x20f0 <_fpadd_parts+0x226>
    2066:	88 23       	and	r24, r24
    2068:	49 f0       	breq	.+18     	; 0x207c <_fpadd_parts+0x1b2>
    206a:	d8 01       	movw	r26, r16
    206c:	c7 01       	movw	r24, r14
    206e:	82 1b       	sub	r24, r18
    2070:	93 0b       	sbc	r25, r19
    2072:	a4 0b       	sbc	r26, r20
    2074:	b5 0b       	sbc	r27, r21
    2076:	9c 01       	movw	r18, r24
    2078:	ad 01       	movw	r20, r26
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <_fpadd_parts+0x1ba>
    207c:	2e 19       	sub	r18, r14
    207e:	3f 09       	sbc	r19, r15
    2080:	40 0b       	sbc	r20, r16
    2082:	51 0b       	sbc	r21, r17
    2084:	57 fd       	sbrc	r21, 7
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <_fpadd_parts+0x1c6>
    2088:	19 82       	std	Y+1, r1	; 0x01
    208a:	db 82       	std	Y+3, r13	; 0x03
    208c:	ca 82       	std	Y+2, r12	; 0x02
    208e:	0b c0       	rjmp	.+22     	; 0x20a6 <_fpadd_parts+0x1dc>
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	db 82       	std	Y+3, r13	; 0x03
    2096:	ca 82       	std	Y+2, r12	; 0x02
    2098:	50 95       	com	r21
    209a:	40 95       	com	r20
    209c:	30 95       	com	r19
    209e:	21 95       	neg	r18
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	4f 4f       	sbci	r20, 0xFF	; 255
    20a4:	5f 4f       	sbci	r21, 0xFF	; 255
    20a6:	2c 83       	std	Y+4, r18	; 0x04
    20a8:	3d 83       	std	Y+5, r19	; 0x05
    20aa:	4e 83       	std	Y+6, r20	; 0x06
    20ac:	5f 83       	std	Y+7, r21	; 0x07
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <_fpadd_parts+0x200>
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	aa 1f       	adc	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	8c 83       	std	Y+4, r24	; 0x04
    20ba:	9d 83       	std	Y+5, r25	; 0x05
    20bc:	ae 83       	std	Y+6, r26	; 0x06
    20be:	bf 83       	std	Y+7, r27	; 0x07
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9b 83       	std	Y+3, r25	; 0x03
    20c8:	8a 83       	std	Y+2, r24	; 0x02
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	ae 81       	ldd	r26, Y+6	; 0x06
    20d0:	bf 81       	ldd	r27, Y+7	; 0x07
    20d2:	9c 01       	movw	r18, r24
    20d4:	ad 01       	movw	r20, r26
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	30 40       	sbci	r19, 0x00	; 0
    20da:	40 40       	sbci	r20, 0x00	; 0
    20dc:	50 40       	sbci	r21, 0x00	; 0
    20de:	2f 3f       	cpi	r18, 0xFF	; 255
    20e0:	ef ef       	ldi	r30, 0xFF	; 255
    20e2:	3e 07       	cpc	r19, r30
    20e4:	ef ef       	ldi	r30, 0xFF	; 255
    20e6:	4e 07       	cpc	r20, r30
    20e8:	ef e3       	ldi	r30, 0x3F	; 63
    20ea:	5e 07       	cpc	r21, r30
    20ec:	08 f3       	brcs	.-62     	; 0x20b0 <_fpadd_parts+0x1e6>
    20ee:	0b c0       	rjmp	.+22     	; 0x2106 <_fpadd_parts+0x23c>
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	db 82       	std	Y+3, r13	; 0x03
    20f4:	ca 82       	std	Y+2, r12	; 0x02
    20f6:	2e 0d       	add	r18, r14
    20f8:	3f 1d       	adc	r19, r15
    20fa:	40 1f       	adc	r20, r16
    20fc:	51 1f       	adc	r21, r17
    20fe:	2c 83       	std	Y+4, r18	; 0x04
    2100:	3d 83       	std	Y+5, r19	; 0x05
    2102:	4e 83       	std	Y+6, r20	; 0x06
    2104:	5f 83       	std	Y+7, r21	; 0x07
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	88 83       	st	Y, r24
    210a:	2c 81       	ldd	r18, Y+4	; 0x04
    210c:	3d 81       	ldd	r19, Y+5	; 0x05
    210e:	4e 81       	ldd	r20, Y+6	; 0x06
    2110:	5f 81       	ldd	r21, Y+7	; 0x07
    2112:	57 ff       	sbrs	r21, 7
    2114:	1d c0       	rjmp	.+58     	; 0x2150 <_fpadd_parts+0x286>
    2116:	da 01       	movw	r26, r20
    2118:	c9 01       	movw	r24, r18
    211a:	81 70       	andi	r24, 0x01	; 1
    211c:	90 70       	andi	r25, 0x00	; 0
    211e:	a0 70       	andi	r26, 0x00	; 0
    2120:	b0 70       	andi	r27, 0x00	; 0
    2122:	56 95       	lsr	r21
    2124:	47 95       	ror	r20
    2126:	37 95       	ror	r19
    2128:	27 95       	ror	r18
    212a:	82 2b       	or	r24, r18
    212c:	93 2b       	or	r25, r19
    212e:	a4 2b       	or	r26, r20
    2130:	b5 2b       	or	r27, r21
    2132:	8c 83       	std	Y+4, r24	; 0x04
    2134:	9d 83       	std	Y+5, r25	; 0x05
    2136:	ae 83       	std	Y+6, r26	; 0x06
    2138:	bf 83       	std	Y+7, r27	; 0x07
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	9b 81       	ldd	r25, Y+3	; 0x03
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <_fpadd_parts+0x286>
    2146:	e0 e0       	ldi	r30, 0x00	; 0
    2148:	f1 e0       	ldi	r31, 0x01	; 1
    214a:	03 c0       	rjmp	.+6      	; 0x2152 <_fpadd_parts+0x288>
    214c:	fb 01       	movw	r30, r22
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <_fpadd_parts+0x288>
    2150:	fe 01       	movw	r30, r28
    2152:	cf 01       	movw	r24, r30
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	ee e0       	ldi	r30, 0x0E	; 14
    215a:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x8>

0000215e <__addsf3>:
    215e:	a0 e2       	ldi	r26, 0x20	; 32
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e5 eb       	ldi	r30, 0xB5	; 181
    2164:	f0 e1       	ldi	r31, 0x10	; 16
    2166:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__prologue_saves__+0x18>
    216a:	69 83       	std	Y+1, r22	; 0x01
    216c:	7a 83       	std	Y+2, r23	; 0x02
    216e:	8b 83       	std	Y+3, r24	; 0x03
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	2d 83       	std	Y+5, r18	; 0x05
    2174:	3e 83       	std	Y+6, r19	; 0x06
    2176:	4f 83       	std	Y+7, r20	; 0x07
    2178:	58 87       	std	Y+8, r21	; 0x08
    217a:	89 e0       	ldi	r24, 0x09	; 9
    217c:	e8 2e       	mov	r14, r24
    217e:	f1 2c       	mov	r15, r1
    2180:	ec 0e       	add	r14, r28
    2182:	fd 1e       	adc	r15, r29
    2184:	ce 01       	movw	r24, r28
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	b7 01       	movw	r22, r14
    218a:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    218e:	8e 01       	movw	r16, r28
    2190:	0f 5e       	subi	r16, 0xEF	; 239
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	ce 01       	movw	r24, r28
    2196:	05 96       	adiw	r24, 0x05	; 5
    2198:	b8 01       	movw	r22, r16
    219a:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    219e:	c7 01       	movw	r24, r14
    21a0:	b8 01       	movw	r22, r16
    21a2:	ae 01       	movw	r20, r28
    21a4:	47 5e       	subi	r20, 0xE7	; 231
    21a6:	5f 4f       	sbci	r21, 0xFF	; 255
    21a8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_fpadd_parts>
    21ac:	0e 94 97 13 	call	0x272e	; 0x272e <__pack_f>
    21b0:	a0 96       	adiw	r28, 0x20	; 32
    21b2:	e6 e0       	ldi	r30, 0x06	; 6
    21b4:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__epilogue_restores__+0x18>

000021b8 <__subsf3>:
    21b8:	a0 e2       	ldi	r26, 0x20	; 32
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e2 ee       	ldi	r30, 0xE2	; 226
    21be:	f0 e1       	ldi	r31, 0x10	; 16
    21c0:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__prologue_saves__+0x18>
    21c4:	69 83       	std	Y+1, r22	; 0x01
    21c6:	7a 83       	std	Y+2, r23	; 0x02
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	2d 83       	std	Y+5, r18	; 0x05
    21ce:	3e 83       	std	Y+6, r19	; 0x06
    21d0:	4f 83       	std	Y+7, r20	; 0x07
    21d2:	58 87       	std	Y+8, r21	; 0x08
    21d4:	8e 01       	movw	r16, r28
    21d6:	07 5f       	subi	r16, 0xF7	; 247
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	b8 01       	movw	r22, r16
    21e0:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    21e4:	91 e1       	ldi	r25, 0x11	; 17
    21e6:	e9 2e       	mov	r14, r25
    21e8:	f1 2c       	mov	r15, r1
    21ea:	ec 0e       	add	r14, r28
    21ec:	fd 1e       	adc	r15, r29
    21ee:	ce 01       	movw	r24, r28
    21f0:	05 96       	adiw	r24, 0x05	; 5
    21f2:	b7 01       	movw	r22, r14
    21f4:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    21f8:	8a 89       	ldd	r24, Y+18	; 0x12
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	89 27       	eor	r24, r25
    21fe:	8a 8b       	std	Y+18, r24	; 0x12
    2200:	c8 01       	movw	r24, r16
    2202:	b7 01       	movw	r22, r14
    2204:	ae 01       	movw	r20, r28
    2206:	47 5e       	subi	r20, 0xE7	; 231
    2208:	5f 4f       	sbci	r21, 0xFF	; 255
    220a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_fpadd_parts>
    220e:	0e 94 97 13 	call	0x272e	; 0x272e <__pack_f>
    2212:	a0 96       	adiw	r28, 0x20	; 32
    2214:	e6 e0       	ldi	r30, 0x06	; 6
    2216:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__epilogue_restores__+0x18>

0000221a <__mulsf3>:
    221a:	a0 e2       	ldi	r26, 0x20	; 32
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e1       	ldi	r30, 0x13	; 19
    2220:	f1 e1       	ldi	r31, 0x11	; 17
    2222:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__prologue_saves__>
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	7a 83       	std	Y+2, r23	; 0x02
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	2d 83       	std	Y+5, r18	; 0x05
    2230:	3e 83       	std	Y+6, r19	; 0x06
    2232:	4f 83       	std	Y+7, r20	; 0x07
    2234:	58 87       	std	Y+8, r21	; 0x08
    2236:	ce 01       	movw	r24, r28
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	be 01       	movw	r22, r28
    223c:	67 5f       	subi	r22, 0xF7	; 247
    223e:	7f 4f       	sbci	r23, 0xFF	; 255
    2240:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    2244:	ce 01       	movw	r24, r28
    2246:	05 96       	adiw	r24, 0x05	; 5
    2248:	be 01       	movw	r22, r28
    224a:	6f 5e       	subi	r22, 0xEF	; 239
    224c:	7f 4f       	sbci	r23, 0xFF	; 255
    224e:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    2252:	99 85       	ldd	r25, Y+9	; 0x09
    2254:	92 30       	cpi	r25, 0x02	; 2
    2256:	78 f0       	brcs	.+30     	; 0x2276 <__mulsf3+0x5c>
    2258:	89 89       	ldd	r24, Y+17	; 0x11
    225a:	82 30       	cpi	r24, 0x02	; 2
    225c:	c0 f0       	brcs	.+48     	; 0x228e <__mulsf3+0x74>
    225e:	94 30       	cpi	r25, 0x04	; 4
    2260:	19 f4       	brne	.+6      	; 0x2268 <__mulsf3+0x4e>
    2262:	82 30       	cpi	r24, 0x02	; 2
    2264:	41 f4       	brne	.+16     	; 0x2276 <__mulsf3+0x5c>
    2266:	cb c0       	rjmp	.+406    	; 0x23fe <__mulsf3+0x1e4>
    2268:	84 30       	cpi	r24, 0x04	; 4
    226a:	19 f4       	brne	.+6      	; 0x2272 <__mulsf3+0x58>
    226c:	92 30       	cpi	r25, 0x02	; 2
    226e:	79 f4       	brne	.+30     	; 0x228e <__mulsf3+0x74>
    2270:	c6 c0       	rjmp	.+396    	; 0x23fe <__mulsf3+0x1e4>
    2272:	92 30       	cpi	r25, 0x02	; 2
    2274:	51 f4       	brne	.+20     	; 0x228a <__mulsf3+0x70>
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	2a 85       	ldd	r18, Y+10	; 0x0a
    227a:	9a 89       	ldd	r25, Y+18	; 0x12
    227c:	29 17       	cp	r18, r25
    227e:	09 f4       	brne	.+2      	; 0x2282 <__mulsf3+0x68>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	8a 87       	std	Y+10, r24	; 0x0a
    2284:	ce 01       	movw	r24, r28
    2286:	09 96       	adiw	r24, 0x09	; 9
    2288:	bc c0       	rjmp	.+376    	; 0x2402 <__mulsf3+0x1e8>
    228a:	82 30       	cpi	r24, 0x02	; 2
    228c:	51 f4       	brne	.+20     	; 0x22a2 <__mulsf3+0x88>
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	2a 85       	ldd	r18, Y+10	; 0x0a
    2292:	9a 89       	ldd	r25, Y+18	; 0x12
    2294:	29 17       	cp	r18, r25
    2296:	09 f4       	brne	.+2      	; 0x229a <__mulsf3+0x80>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	8a 8b       	std	Y+18, r24	; 0x12
    229c:	ce 01       	movw	r24, r28
    229e:	41 96       	adiw	r24, 0x11	; 17
    22a0:	b0 c0       	rjmp	.+352    	; 0x2402 <__mulsf3+0x1e8>
    22a2:	6d 84       	ldd	r6, Y+13	; 0x0d
    22a4:	7e 84       	ldd	r7, Y+14	; 0x0e
    22a6:	8f 84       	ldd	r8, Y+15	; 0x0f
    22a8:	98 88       	ldd	r9, Y+16	; 0x10
    22aa:	ed 88       	ldd	r14, Y+21	; 0x15
    22ac:	fe 88       	ldd	r15, Y+22	; 0x16
    22ae:	0f 89       	ldd	r16, Y+23	; 0x17
    22b0:	18 8d       	ldd	r17, Y+24	; 0x18
    22b2:	e0 e2       	ldi	r30, 0x20	; 32
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	dc 01       	movw	r26, r24
    22bc:	aa 24       	eor	r10, r10
    22be:	bb 24       	eor	r11, r11
    22c0:	65 01       	movw	r12, r10
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	a9 01       	movw	r20, r18
    22c8:	b3 01       	movw	r22, r6
    22ca:	61 70       	andi	r22, 0x01	; 1
    22cc:	70 70       	andi	r23, 0x00	; 0
    22ce:	61 15       	cp	r22, r1
    22d0:	71 05       	cpc	r23, r1
    22d2:	d1 f0       	breq	.+52     	; 0x2308 <__mulsf3+0xee>
    22d4:	2e 0d       	add	r18, r14
    22d6:	3f 1d       	adc	r19, r15
    22d8:	40 1f       	adc	r20, r16
    22da:	51 1f       	adc	r21, r17
    22dc:	15 01       	movw	r2, r10
    22de:	26 01       	movw	r4, r12
    22e0:	28 0e       	add	r2, r24
    22e2:	39 1e       	adc	r3, r25
    22e4:	4a 1e       	adc	r4, r26
    22e6:	5b 1e       	adc	r5, r27
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a0 e0       	ldi	r26, 0x00	; 0
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	2e 15       	cp	r18, r14
    22f2:	3f 05       	cpc	r19, r15
    22f4:	40 07       	cpc	r20, r16
    22f6:	51 07       	cpc	r21, r17
    22f8:	18 f0       	brcs	.+6      	; 0x2300 <__mulsf3+0xe6>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	dc 01       	movw	r26, r24
    2300:	82 0d       	add	r24, r2
    2302:	93 1d       	adc	r25, r3
    2304:	a4 1d       	adc	r26, r4
    2306:	b5 1d       	adc	r27, r5
    2308:	aa 0c       	add	r10, r10
    230a:	bb 1c       	adc	r11, r11
    230c:	cc 1c       	adc	r12, r12
    230e:	dd 1c       	adc	r13, r13
    2310:	17 ff       	sbrs	r17, 7
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <__mulsf3+0x10c>
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	26 2e       	mov	r2, r22
    2318:	31 2c       	mov	r3, r1
    231a:	41 2c       	mov	r4, r1
    231c:	51 2c       	mov	r5, r1
    231e:	a2 28       	or	r10, r2
    2320:	b3 28       	or	r11, r3
    2322:	c4 28       	or	r12, r4
    2324:	d5 28       	or	r13, r5
    2326:	31 97       	sbiw	r30, 0x01	; 1
    2328:	49 f0       	breq	.+18     	; 0x233c <__mulsf3+0x122>
    232a:	ee 0c       	add	r14, r14
    232c:	ff 1c       	adc	r15, r15
    232e:	00 1f       	adc	r16, r16
    2330:	11 1f       	adc	r17, r17
    2332:	96 94       	lsr	r9
    2334:	87 94       	ror	r8
    2336:	77 94       	ror	r7
    2338:	67 94       	ror	r6
    233a:	c6 cf       	rjmp	.-116    	; 0x22c8 <__mulsf3+0xae>
    233c:	6b 89       	ldd	r22, Y+19	; 0x13
    233e:	7c 89       	ldd	r23, Y+20	; 0x14
    2340:	eb 85       	ldd	r30, Y+11	; 0x0b
    2342:	fc 85       	ldd	r31, Y+12	; 0x0c
    2344:	6e 0f       	add	r22, r30
    2346:	7f 1f       	adc	r23, r31
    2348:	6e 5f       	subi	r22, 0xFE	; 254
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	7c 8f       	std	Y+28, r23	; 0x1c
    234e:	6b 8f       	std	Y+27, r22	; 0x1b
    2350:	61 e0       	ldi	r22, 0x01	; 1
    2352:	ea 85       	ldd	r30, Y+10	; 0x0a
    2354:	7a 89       	ldd	r23, Y+18	; 0x12
    2356:	e7 17       	cp	r30, r23
    2358:	09 f4       	brne	.+2      	; 0x235c <__mulsf3+0x142>
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	6a 8f       	std	Y+26, r22	; 0x1a
    235e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2360:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2362:	10 c0       	rjmp	.+32     	; 0x2384 <__mulsf3+0x16a>
    2364:	fc 01       	movw	r30, r24
    2366:	e1 70       	andi	r30, 0x01	; 1
    2368:	f0 70       	andi	r31, 0x00	; 0
    236a:	30 97       	sbiw	r30, 0x00	; 0
    236c:	29 f0       	breq	.+10     	; 0x2378 <__mulsf3+0x15e>
    236e:	56 95       	lsr	r21
    2370:	47 95       	ror	r20
    2372:	37 95       	ror	r19
    2374:	27 95       	ror	r18
    2376:	50 68       	ori	r21, 0x80	; 128
    2378:	b6 95       	lsr	r27
    237a:	a7 95       	ror	r26
    237c:	97 95       	ror	r25
    237e:	87 95       	ror	r24
    2380:	6f 5f       	subi	r22, 0xFF	; 255
    2382:	7f 4f       	sbci	r23, 0xFF	; 255
    2384:	b7 fd       	sbrc	r27, 7
    2386:	ee cf       	rjmp	.-36     	; 0x2364 <__mulsf3+0x14a>
    2388:	0c c0       	rjmp	.+24     	; 0x23a2 <__mulsf3+0x188>
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	aa 1f       	adc	r26, r26
    2390:	bb 1f       	adc	r27, r27
    2392:	57 fd       	sbrc	r21, 7
    2394:	81 60       	ori	r24, 0x01	; 1
    2396:	22 0f       	add	r18, r18
    2398:	33 1f       	adc	r19, r19
    239a:	44 1f       	adc	r20, r20
    239c:	55 1f       	adc	r21, r21
    239e:	61 50       	subi	r22, 0x01	; 1
    23a0:	70 40       	sbci	r23, 0x00	; 0
    23a2:	80 30       	cpi	r24, 0x00	; 0
    23a4:	e0 e0       	ldi	r30, 0x00	; 0
    23a6:	9e 07       	cpc	r25, r30
    23a8:	e0 e0       	ldi	r30, 0x00	; 0
    23aa:	ae 07       	cpc	r26, r30
    23ac:	e0 e4       	ldi	r30, 0x40	; 64
    23ae:	be 07       	cpc	r27, r30
    23b0:	60 f3       	brcs	.-40     	; 0x238a <__mulsf3+0x170>
    23b2:	6b 8f       	std	Y+27, r22	; 0x1b
    23b4:	7c 8f       	std	Y+28, r23	; 0x1c
    23b6:	6f e7       	ldi	r22, 0x7F	; 127
    23b8:	e6 2e       	mov	r14, r22
    23ba:	f1 2c       	mov	r15, r1
    23bc:	01 2d       	mov	r16, r1
    23be:	11 2d       	mov	r17, r1
    23c0:	e8 22       	and	r14, r24
    23c2:	f9 22       	and	r15, r25
    23c4:	0a 23       	and	r16, r26
    23c6:	1b 23       	and	r17, r27
    23c8:	60 e4       	ldi	r22, 0x40	; 64
    23ca:	e6 16       	cp	r14, r22
    23cc:	f1 04       	cpc	r15, r1
    23ce:	01 05       	cpc	r16, r1
    23d0:	11 05       	cpc	r17, r1
    23d2:	61 f4       	brne	.+24     	; 0x23ec <__mulsf3+0x1d2>
    23d4:	87 fd       	sbrc	r24, 7
    23d6:	0a c0       	rjmp	.+20     	; 0x23ec <__mulsf3+0x1d2>
    23d8:	21 15       	cp	r18, r1
    23da:	31 05       	cpc	r19, r1
    23dc:	41 05       	cpc	r20, r1
    23de:	51 05       	cpc	r21, r1
    23e0:	29 f0       	breq	.+10     	; 0x23ec <__mulsf3+0x1d2>
    23e2:	80 5c       	subi	r24, 0xC0	; 192
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	af 4f       	sbci	r26, 0xFF	; 255
    23e8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ea:	80 78       	andi	r24, 0x80	; 128
    23ec:	8d 8f       	std	Y+29, r24	; 0x1d
    23ee:	9e 8f       	std	Y+30, r25	; 0x1e
    23f0:	af 8f       	std	Y+31, r26	; 0x1f
    23f2:	b8 a3       	std	Y+32, r27	; 0x20
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	89 8f       	std	Y+25, r24	; 0x19
    23f8:	ce 01       	movw	r24, r28
    23fa:	49 96       	adiw	r24, 0x19	; 25
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <__mulsf3+0x1e8>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	0e 94 97 13 	call	0x272e	; 0x272e <__pack_f>
    2406:	a0 96       	adiw	r28, 0x20	; 32
    2408:	e2 e1       	ldi	r30, 0x12	; 18
    240a:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__epilogue_restores__>

0000240e <__divsf3>:
    240e:	a8 e1       	ldi	r26, 0x18	; 24
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	ed e0       	ldi	r30, 0x0D	; 13
    2414:	f2 e1       	ldi	r31, 0x12	; 18
    2416:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__+0x10>
    241a:	69 83       	std	Y+1, r22	; 0x01
    241c:	7a 83       	std	Y+2, r23	; 0x02
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	2d 83       	std	Y+5, r18	; 0x05
    2424:	3e 83       	std	Y+6, r19	; 0x06
    2426:	4f 83       	std	Y+7, r20	; 0x07
    2428:	58 87       	std	Y+8, r21	; 0x08
    242a:	8e 01       	movw	r16, r28
    242c:	07 5f       	subi	r16, 0xF7	; 247
    242e:	1f 4f       	sbci	r17, 0xFF	; 255
    2430:	ce 01       	movw	r24, r28
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	b8 01       	movw	r22, r16
    2436:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    243a:	81 e1       	ldi	r24, 0x11	; 17
    243c:	e8 2e       	mov	r14, r24
    243e:	f1 2c       	mov	r15, r1
    2440:	ec 0e       	add	r14, r28
    2442:	fd 1e       	adc	r15, r29
    2444:	ce 01       	movw	r24, r28
    2446:	05 96       	adiw	r24, 0x05	; 5
    2448:	b7 01       	movw	r22, r14
    244a:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    244e:	99 85       	ldd	r25, Y+9	; 0x09
    2450:	92 30       	cpi	r25, 0x02	; 2
    2452:	08 f4       	brcc	.+2      	; 0x2456 <__divsf3+0x48>
    2454:	83 c0       	rjmp	.+262    	; 0x255c <__divsf3+0x14e>
    2456:	89 89       	ldd	r24, Y+17	; 0x11
    2458:	82 30       	cpi	r24, 0x02	; 2
    245a:	08 f4       	brcc	.+2      	; 0x245e <__divsf3+0x50>
    245c:	7b c0       	rjmp	.+246    	; 0x2554 <__divsf3+0x146>
    245e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2460:	3a 89       	ldd	r19, Y+18	; 0x12
    2462:	23 27       	eor	r18, r19
    2464:	2a 87       	std	Y+10, r18	; 0x0a
    2466:	94 30       	cpi	r25, 0x04	; 4
    2468:	11 f0       	breq	.+4      	; 0x246e <__divsf3+0x60>
    246a:	92 30       	cpi	r25, 0x02	; 2
    246c:	21 f4       	brne	.+8      	; 0x2476 <__divsf3+0x68>
    246e:	98 17       	cp	r25, r24
    2470:	09 f0       	breq	.+2      	; 0x2474 <__divsf3+0x66>
    2472:	6c c0       	rjmp	.+216    	; 0x254c <__divsf3+0x13e>
    2474:	71 c0       	rjmp	.+226    	; 0x2558 <__divsf3+0x14a>
    2476:	84 30       	cpi	r24, 0x04	; 4
    2478:	39 f4       	brne	.+14     	; 0x2488 <__divsf3+0x7a>
    247a:	1d 86       	std	Y+13, r1	; 0x0d
    247c:	1e 86       	std	Y+14, r1	; 0x0e
    247e:	1f 86       	std	Y+15, r1	; 0x0f
    2480:	18 8a       	std	Y+16, r1	; 0x10
    2482:	1c 86       	std	Y+12, r1	; 0x0c
    2484:	1b 86       	std	Y+11, r1	; 0x0b
    2486:	6a c0       	rjmp	.+212    	; 0x255c <__divsf3+0x14e>
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	19 f4       	brne	.+6      	; 0x2492 <__divsf3+0x84>
    248c:	84 e0       	ldi	r24, 0x04	; 4
    248e:	89 87       	std	Y+9, r24	; 0x09
    2490:	65 c0       	rjmp	.+202    	; 0x255c <__divsf3+0x14e>
    2492:	8b 85       	ldd	r24, Y+11	; 0x0b
    2494:	9c 85       	ldd	r25, Y+12	; 0x0c
    2496:	2b 89       	ldd	r18, Y+19	; 0x13
    2498:	3c 89       	ldd	r19, Y+20	; 0x14
    249a:	82 1b       	sub	r24, r18
    249c:	93 0b       	sbc	r25, r19
    249e:	9c 87       	std	Y+12, r25	; 0x0c
    24a0:	8b 87       	std	Y+11, r24	; 0x0b
    24a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    24a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    24a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    24a8:	58 89       	ldd	r21, Y+16	; 0x10
    24aa:	ed 88       	ldd	r14, Y+21	; 0x15
    24ac:	fe 88       	ldd	r15, Y+22	; 0x16
    24ae:	0f 89       	ldd	r16, Y+23	; 0x17
    24b0:	18 8d       	ldd	r17, Y+24	; 0x18
    24b2:	2e 15       	cp	r18, r14
    24b4:	3f 05       	cpc	r19, r15
    24b6:	40 07       	cpc	r20, r16
    24b8:	51 07       	cpc	r21, r17
    24ba:	38 f4       	brcc	.+14     	; 0x24ca <__divsf3+0xbc>
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	44 1f       	adc	r20, r20
    24c2:	55 1f       	adc	r21, r21
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	9c 87       	std	Y+12, r25	; 0x0c
    24c8:	8b 87       	std	Y+11, r24	; 0x0b
    24ca:	6f e1       	ldi	r22, 0x1F	; 31
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	a1 2c       	mov	r10, r1
    24d0:	b1 2c       	mov	r11, r1
    24d2:	c1 2c       	mov	r12, r1
    24d4:	a0 e4       	ldi	r26, 0x40	; 64
    24d6:	da 2e       	mov	r13, r26
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	dc 01       	movw	r26, r24
    24de:	2e 15       	cp	r18, r14
    24e0:	3f 05       	cpc	r19, r15
    24e2:	40 07       	cpc	r20, r16
    24e4:	51 07       	cpc	r21, r17
    24e6:	40 f0       	brcs	.+16     	; 0x24f8 <__divsf3+0xea>
    24e8:	8a 29       	or	r24, r10
    24ea:	9b 29       	or	r25, r11
    24ec:	ac 29       	or	r26, r12
    24ee:	bd 29       	or	r27, r13
    24f0:	2e 19       	sub	r18, r14
    24f2:	3f 09       	sbc	r19, r15
    24f4:	40 0b       	sbc	r20, r16
    24f6:	51 0b       	sbc	r21, r17
    24f8:	d6 94       	lsr	r13
    24fa:	c7 94       	ror	r12
    24fc:	b7 94       	ror	r11
    24fe:	a7 94       	ror	r10
    2500:	22 0f       	add	r18, r18
    2502:	33 1f       	adc	r19, r19
    2504:	44 1f       	adc	r20, r20
    2506:	55 1f       	adc	r21, r21
    2508:	61 50       	subi	r22, 0x01	; 1
    250a:	70 40       	sbci	r23, 0x00	; 0
    250c:	41 f7       	brne	.-48     	; 0x24de <__divsf3+0xd0>
    250e:	6f e7       	ldi	r22, 0x7F	; 127
    2510:	e6 2e       	mov	r14, r22
    2512:	f1 2c       	mov	r15, r1
    2514:	01 2d       	mov	r16, r1
    2516:	11 2d       	mov	r17, r1
    2518:	e8 22       	and	r14, r24
    251a:	f9 22       	and	r15, r25
    251c:	0a 23       	and	r16, r26
    251e:	1b 23       	and	r17, r27
    2520:	60 e4       	ldi	r22, 0x40	; 64
    2522:	e6 16       	cp	r14, r22
    2524:	f1 04       	cpc	r15, r1
    2526:	01 05       	cpc	r16, r1
    2528:	11 05       	cpc	r17, r1
    252a:	61 f4       	brne	.+24     	; 0x2544 <__divsf3+0x136>
    252c:	87 fd       	sbrc	r24, 7
    252e:	0a c0       	rjmp	.+20     	; 0x2544 <__divsf3+0x136>
    2530:	21 15       	cp	r18, r1
    2532:	31 05       	cpc	r19, r1
    2534:	41 05       	cpc	r20, r1
    2536:	51 05       	cpc	r21, r1
    2538:	29 f0       	breq	.+10     	; 0x2544 <__divsf3+0x136>
    253a:	80 5c       	subi	r24, 0xC0	; 192
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	af 4f       	sbci	r26, 0xFF	; 255
    2540:	bf 4f       	sbci	r27, 0xFF	; 255
    2542:	80 78       	andi	r24, 0x80	; 128
    2544:	8d 87       	std	Y+13, r24	; 0x0d
    2546:	9e 87       	std	Y+14, r25	; 0x0e
    2548:	af 87       	std	Y+15, r26	; 0x0f
    254a:	b8 8b       	std	Y+16, r27	; 0x10
    254c:	8e 01       	movw	r16, r28
    254e:	07 5f       	subi	r16, 0xF7	; 247
    2550:	1f 4f       	sbci	r17, 0xFF	; 255
    2552:	04 c0       	rjmp	.+8      	; 0x255c <__divsf3+0x14e>
    2554:	87 01       	movw	r16, r14
    2556:	02 c0       	rjmp	.+4      	; 0x255c <__divsf3+0x14e>
    2558:	00 e0       	ldi	r16, 0x00	; 0
    255a:	11 e0       	ldi	r17, 0x01	; 1
    255c:	c8 01       	movw	r24, r16
    255e:	0e 94 97 13 	call	0x272e	; 0x272e <__pack_f>
    2562:	68 96       	adiw	r28, 0x18	; 24
    2564:	ea e0       	ldi	r30, 0x0A	; 10
    2566:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__+0x10>

0000256a <__gtsf2>:
    256a:	a8 e1       	ldi	r26, 0x18	; 24
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	eb eb       	ldi	r30, 0xBB	; 187
    2570:	f2 e1       	ldi	r31, 0x12	; 18
    2572:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__prologue_saves__+0x18>
    2576:	69 83       	std	Y+1, r22	; 0x01
    2578:	7a 83       	std	Y+2, r23	; 0x02
    257a:	8b 83       	std	Y+3, r24	; 0x03
    257c:	9c 83       	std	Y+4, r25	; 0x04
    257e:	2d 83       	std	Y+5, r18	; 0x05
    2580:	3e 83       	std	Y+6, r19	; 0x06
    2582:	4f 83       	std	Y+7, r20	; 0x07
    2584:	58 87       	std	Y+8, r21	; 0x08
    2586:	8e 01       	movw	r16, r28
    2588:	07 5f       	subi	r16, 0xF7	; 247
    258a:	1f 4f       	sbci	r17, 0xFF	; 255
    258c:	ce 01       	movw	r24, r28
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	b8 01       	movw	r22, r16
    2592:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    2596:	81 e1       	ldi	r24, 0x11	; 17
    2598:	e8 2e       	mov	r14, r24
    259a:	f1 2c       	mov	r15, r1
    259c:	ec 0e       	add	r14, r28
    259e:	fd 1e       	adc	r15, r29
    25a0:	ce 01       	movw	r24, r28
    25a2:	05 96       	adiw	r24, 0x05	; 5
    25a4:	b7 01       	movw	r22, r14
    25a6:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	40 f0       	brcs	.+16     	; 0x25c0 <__gtsf2+0x56>
    25b0:	89 89       	ldd	r24, Y+17	; 0x11
    25b2:	82 30       	cpi	r24, 0x02	; 2
    25b4:	28 f0       	brcs	.+10     	; 0x25c0 <__gtsf2+0x56>
    25b6:	c8 01       	movw	r24, r16
    25b8:	b7 01       	movw	r22, r14
    25ba:	0e 94 ce 14 	call	0x299c	; 0x299c <__fpcmp_parts_f>
    25be:	01 c0       	rjmp	.+2      	; 0x25c2 <__gtsf2+0x58>
    25c0:	8f ef       	ldi	r24, 0xFF	; 255
    25c2:	68 96       	adiw	r28, 0x18	; 24
    25c4:	e6 e0       	ldi	r30, 0x06	; 6
    25c6:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__epilogue_restores__+0x18>

000025ca <__gesf2>:
    25ca:	a8 e1       	ldi	r26, 0x18	; 24
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	eb ee       	ldi	r30, 0xEB	; 235
    25d0:	f2 e1       	ldi	r31, 0x12	; 18
    25d2:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__prologue_saves__+0x18>
    25d6:	69 83       	std	Y+1, r22	; 0x01
    25d8:	7a 83       	std	Y+2, r23	; 0x02
    25da:	8b 83       	std	Y+3, r24	; 0x03
    25dc:	9c 83       	std	Y+4, r25	; 0x04
    25de:	2d 83       	std	Y+5, r18	; 0x05
    25e0:	3e 83       	std	Y+6, r19	; 0x06
    25e2:	4f 83       	std	Y+7, r20	; 0x07
    25e4:	58 87       	std	Y+8, r21	; 0x08
    25e6:	8e 01       	movw	r16, r28
    25e8:	07 5f       	subi	r16, 0xF7	; 247
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	ce 01       	movw	r24, r28
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	b8 01       	movw	r22, r16
    25f2:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    25f6:	81 e1       	ldi	r24, 0x11	; 17
    25f8:	e8 2e       	mov	r14, r24
    25fa:	f1 2c       	mov	r15, r1
    25fc:	ec 0e       	add	r14, r28
    25fe:	fd 1e       	adc	r15, r29
    2600:	ce 01       	movw	r24, r28
    2602:	05 96       	adiw	r24, 0x05	; 5
    2604:	b7 01       	movw	r22, r14
    2606:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    260a:	89 85       	ldd	r24, Y+9	; 0x09
    260c:	82 30       	cpi	r24, 0x02	; 2
    260e:	40 f0       	brcs	.+16     	; 0x2620 <__gesf2+0x56>
    2610:	89 89       	ldd	r24, Y+17	; 0x11
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	28 f0       	brcs	.+10     	; 0x2620 <__gesf2+0x56>
    2616:	c8 01       	movw	r24, r16
    2618:	b7 01       	movw	r22, r14
    261a:	0e 94 ce 14 	call	0x299c	; 0x299c <__fpcmp_parts_f>
    261e:	01 c0       	rjmp	.+2      	; 0x2622 <__gesf2+0x58>
    2620:	8f ef       	ldi	r24, 0xFF	; 255
    2622:	68 96       	adiw	r28, 0x18	; 24
    2624:	e6 e0       	ldi	r30, 0x06	; 6
    2626:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__epilogue_restores__+0x18>

0000262a <__ltsf2>:
    262a:	a8 e1       	ldi	r26, 0x18	; 24
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	eb e1       	ldi	r30, 0x1B	; 27
    2630:	f3 e1       	ldi	r31, 0x13	; 19
    2632:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__prologue_saves__+0x18>
    2636:	69 83       	std	Y+1, r22	; 0x01
    2638:	7a 83       	std	Y+2, r23	; 0x02
    263a:	8b 83       	std	Y+3, r24	; 0x03
    263c:	9c 83       	std	Y+4, r25	; 0x04
    263e:	2d 83       	std	Y+5, r18	; 0x05
    2640:	3e 83       	std	Y+6, r19	; 0x06
    2642:	4f 83       	std	Y+7, r20	; 0x07
    2644:	58 87       	std	Y+8, r21	; 0x08
    2646:	8e 01       	movw	r16, r28
    2648:	07 5f       	subi	r16, 0xF7	; 247
    264a:	1f 4f       	sbci	r17, 0xFF	; 255
    264c:	ce 01       	movw	r24, r28
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	b8 01       	movw	r22, r16
    2652:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    2656:	81 e1       	ldi	r24, 0x11	; 17
    2658:	e8 2e       	mov	r14, r24
    265a:	f1 2c       	mov	r15, r1
    265c:	ec 0e       	add	r14, r28
    265e:	fd 1e       	adc	r15, r29
    2660:	ce 01       	movw	r24, r28
    2662:	05 96       	adiw	r24, 0x05	; 5
    2664:	b7 01       	movw	r22, r14
    2666:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    266a:	89 85       	ldd	r24, Y+9	; 0x09
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	40 f0       	brcs	.+16     	; 0x2680 <__ltsf2+0x56>
    2670:	89 89       	ldd	r24, Y+17	; 0x11
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	28 f0       	brcs	.+10     	; 0x2680 <__ltsf2+0x56>
    2676:	c8 01       	movw	r24, r16
    2678:	b7 01       	movw	r22, r14
    267a:	0e 94 ce 14 	call	0x299c	; 0x299c <__fpcmp_parts_f>
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <__ltsf2+0x58>
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	68 96       	adiw	r28, 0x18	; 24
    2684:	e6 e0       	ldi	r30, 0x06	; 6
    2686:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__epilogue_restores__+0x18>

0000268a <__fixsfsi>:
    268a:	ac e0       	ldi	r26, 0x0C	; 12
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	eb e4       	ldi	r30, 0x4B	; 75
    2690:	f3 e1       	ldi	r31, 0x13	; 19
    2692:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__prologue_saves__+0x20>
    2696:	69 83       	std	Y+1, r22	; 0x01
    2698:	7a 83       	std	Y+2, r23	; 0x02
    269a:	8b 83       	std	Y+3, r24	; 0x03
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	ce 01       	movw	r24, r28
    26a0:	01 96       	adiw	r24, 0x01	; 1
    26a2:	be 01       	movw	r22, r28
    26a4:	6b 5f       	subi	r22, 0xFB	; 251
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	0e 94 65 14 	call	0x28ca	; 0x28ca <__unpack_f>
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	81 f1       	breq	.+96     	; 0x2712 <__fixsfsi+0x88>
    26b2:	82 30       	cpi	r24, 0x02	; 2
    26b4:	70 f1       	brcs	.+92     	; 0x2712 <__fixsfsi+0x88>
    26b6:	84 30       	cpi	r24, 0x04	; 4
    26b8:	21 f4       	brne	.+8      	; 0x26c2 <__fixsfsi+0x38>
    26ba:	8e 81       	ldd	r24, Y+6	; 0x06
    26bc:	88 23       	and	r24, r24
    26be:	69 f1       	breq	.+90     	; 0x271a <__fixsfsi+0x90>
    26c0:	0a c0       	rjmp	.+20     	; 0x26d6 <__fixsfsi+0x4c>
    26c2:	2f 81       	ldd	r18, Y+7	; 0x07
    26c4:	38 85       	ldd	r19, Y+8	; 0x08
    26c6:	37 fd       	sbrc	r19, 7
    26c8:	24 c0       	rjmp	.+72     	; 0x2712 <__fixsfsi+0x88>
    26ca:	6e 81       	ldd	r22, Y+6	; 0x06
    26cc:	2f 31       	cpi	r18, 0x1F	; 31
    26ce:	31 05       	cpc	r19, r1
    26d0:	3c f0       	brlt	.+14     	; 0x26e0 <__fixsfsi+0x56>
    26d2:	66 23       	and	r22, r22
    26d4:	11 f1       	breq	.+68     	; 0x271a <__fixsfsi+0x90>
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	50 e8       	ldi	r21, 0x80	; 128
    26de:	21 c0       	rjmp	.+66     	; 0x2722 <__fixsfsi+0x98>
    26e0:	8e e1       	ldi	r24, 0x1E	; 30
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	82 1b       	sub	r24, r18
    26e6:	93 0b       	sbc	r25, r19
    26e8:	29 85       	ldd	r18, Y+9	; 0x09
    26ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    26ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    26ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <__fixsfsi+0x70>
    26f2:	56 95       	lsr	r21
    26f4:	47 95       	ror	r20
    26f6:	37 95       	ror	r19
    26f8:	27 95       	ror	r18
    26fa:	8a 95       	dec	r24
    26fc:	d2 f7       	brpl	.-12     	; 0x26f2 <__fixsfsi+0x68>
    26fe:	66 23       	and	r22, r22
    2700:	81 f0       	breq	.+32     	; 0x2722 <__fixsfsi+0x98>
    2702:	50 95       	com	r21
    2704:	40 95       	com	r20
    2706:	30 95       	com	r19
    2708:	21 95       	neg	r18
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	4f 4f       	sbci	r20, 0xFF	; 255
    270e:	5f 4f       	sbci	r21, 0xFF	; 255
    2710:	08 c0       	rjmp	.+16     	; 0x2722 <__fixsfsi+0x98>
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	a9 01       	movw	r20, r18
    2718:	04 c0       	rjmp	.+8      	; 0x2722 <__fixsfsi+0x98>
    271a:	2f ef       	ldi	r18, 0xFF	; 255
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f ef       	ldi	r20, 0xFF	; 255
    2720:	5f e7       	ldi	r21, 0x7F	; 127
    2722:	b9 01       	movw	r22, r18
    2724:	ca 01       	movw	r24, r20
    2726:	2c 96       	adiw	r28, 0x0c	; 12
    2728:	e2 e0       	ldi	r30, 0x02	; 2
    272a:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__epilogue_restores__+0x20>

0000272e <__pack_f>:
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	fc 01       	movw	r30, r24
    273c:	24 81       	ldd	r18, Z+4	; 0x04
    273e:	35 81       	ldd	r19, Z+5	; 0x05
    2740:	46 81       	ldd	r20, Z+6	; 0x06
    2742:	57 81       	ldd	r21, Z+7	; 0x07
    2744:	61 81       	ldd	r22, Z+1	; 0x01
    2746:	80 81       	ld	r24, Z
    2748:	82 30       	cpi	r24, 0x02	; 2
    274a:	20 f4       	brcc	.+8      	; 0x2754 <__pack_f+0x26>
    274c:	40 61       	ori	r20, 0x10	; 16
    274e:	ef ef       	ldi	r30, 0xFF	; 255
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	a3 c0       	rjmp	.+326    	; 0x289a <__pack_f+0x16c>
    2754:	84 30       	cpi	r24, 0x04	; 4
    2756:	09 f4       	brne	.+2      	; 0x275a <__pack_f+0x2c>
    2758:	9b c0       	rjmp	.+310    	; 0x2890 <__pack_f+0x162>
    275a:	82 30       	cpi	r24, 0x02	; 2
    275c:	09 f4       	brne	.+2      	; 0x2760 <__pack_f+0x32>
    275e:	92 c0       	rjmp	.+292    	; 0x2884 <__pack_f+0x156>
    2760:	21 15       	cp	r18, r1
    2762:	31 05       	cpc	r19, r1
    2764:	41 05       	cpc	r20, r1
    2766:	51 05       	cpc	r21, r1
    2768:	09 f4       	brne	.+2      	; 0x276c <__pack_f+0x3e>
    276a:	8f c0       	rjmp	.+286    	; 0x288a <__pack_f+0x15c>
    276c:	02 80       	ldd	r0, Z+2	; 0x02
    276e:	f3 81       	ldd	r31, Z+3	; 0x03
    2770:	e0 2d       	mov	r30, r0
    2772:	8f ef       	ldi	r24, 0xFF	; 255
    2774:	e2 38       	cpi	r30, 0x82	; 130
    2776:	f8 07       	cpc	r31, r24
    2778:	0c f0       	brlt	.+2      	; 0x277c <__pack_f+0x4e>
    277a:	5a c0       	rjmp	.+180    	; 0x2830 <__pack_f+0x102>
    277c:	c2 e8       	ldi	r28, 0x82	; 130
    277e:	df ef       	ldi	r29, 0xFF	; 255
    2780:	ce 1b       	sub	r28, r30
    2782:	df 0b       	sbc	r29, r31
    2784:	ca 31       	cpi	r28, 0x1A	; 26
    2786:	d1 05       	cpc	r29, r1
    2788:	6c f5       	brge	.+90     	; 0x27e4 <__pack_f+0xb6>
    278a:	79 01       	movw	r14, r18
    278c:	8a 01       	movw	r16, r20
    278e:	0c 2e       	mov	r0, r28
    2790:	04 c0       	rjmp	.+8      	; 0x279a <__pack_f+0x6c>
    2792:	16 95       	lsr	r17
    2794:	07 95       	ror	r16
    2796:	f7 94       	ror	r15
    2798:	e7 94       	ror	r14
    279a:	0a 94       	dec	r0
    279c:	d2 f7       	brpl	.-12     	; 0x2792 <__pack_f+0x64>
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a0 e0       	ldi	r26, 0x00	; 0
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	0c 2e       	mov	r0, r28
    27a8:	04 c0       	rjmp	.+8      	; 0x27b2 <__pack_f+0x84>
    27aa:	88 0f       	add	r24, r24
    27ac:	99 1f       	adc	r25, r25
    27ae:	aa 1f       	adc	r26, r26
    27b0:	bb 1f       	adc	r27, r27
    27b2:	0a 94       	dec	r0
    27b4:	d2 f7       	brpl	.-12     	; 0x27aa <__pack_f+0x7c>
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	a1 09       	sbc	r26, r1
    27ba:	b1 09       	sbc	r27, r1
    27bc:	82 23       	and	r24, r18
    27be:	93 23       	and	r25, r19
    27c0:	a4 23       	and	r26, r20
    27c2:	b5 23       	and	r27, r21
    27c4:	21 e0       	ldi	r18, 0x01	; 1
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	50 e0       	ldi	r21, 0x00	; 0
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	a1 05       	cpc	r26, r1
    27d0:	b1 05       	cpc	r27, r1
    27d2:	19 f4       	brne	.+6      	; 0x27da <__pack_f+0xac>
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	a9 01       	movw	r20, r18
    27da:	2e 29       	or	r18, r14
    27dc:	3f 29       	or	r19, r15
    27de:	40 2b       	or	r20, r16
    27e0:	51 2b       	or	r21, r17
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <__pack_f+0xbc>
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	a9 01       	movw	r20, r18
    27ea:	da 01       	movw	r26, r20
    27ec:	c9 01       	movw	r24, r18
    27ee:	8f 77       	andi	r24, 0x7F	; 127
    27f0:	90 70       	andi	r25, 0x00	; 0
    27f2:	a0 70       	andi	r26, 0x00	; 0
    27f4:	b0 70       	andi	r27, 0x00	; 0
    27f6:	80 34       	cpi	r24, 0x40	; 64
    27f8:	91 05       	cpc	r25, r1
    27fa:	a1 05       	cpc	r26, r1
    27fc:	b1 05       	cpc	r27, r1
    27fe:	39 f4       	brne	.+14     	; 0x280e <__pack_f+0xe0>
    2800:	27 ff       	sbrs	r18, 7
    2802:	09 c0       	rjmp	.+18     	; 0x2816 <__pack_f+0xe8>
    2804:	20 5c       	subi	r18, 0xC0	; 192
    2806:	3f 4f       	sbci	r19, 0xFF	; 255
    2808:	4f 4f       	sbci	r20, 0xFF	; 255
    280a:	5f 4f       	sbci	r21, 0xFF	; 255
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <__pack_f+0xe8>
    280e:	21 5c       	subi	r18, 0xC1	; 193
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	4f 4f       	sbci	r20, 0xFF	; 255
    2814:	5f 4f       	sbci	r21, 0xFF	; 255
    2816:	e1 e0       	ldi	r30, 0x01	; 1
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	20 30       	cpi	r18, 0x00	; 0
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	38 07       	cpc	r19, r24
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	48 07       	cpc	r20, r24
    2824:	80 e4       	ldi	r24, 0x40	; 64
    2826:	58 07       	cpc	r21, r24
    2828:	28 f5       	brcc	.+74     	; 0x2874 <__pack_f+0x146>
    282a:	e0 e0       	ldi	r30, 0x00	; 0
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	22 c0       	rjmp	.+68     	; 0x2874 <__pack_f+0x146>
    2830:	e0 38       	cpi	r30, 0x80	; 128
    2832:	f1 05       	cpc	r31, r1
    2834:	6c f5       	brge	.+90     	; 0x2890 <__pack_f+0x162>
    2836:	e1 58       	subi	r30, 0x81	; 129
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	da 01       	movw	r26, r20
    283c:	c9 01       	movw	r24, r18
    283e:	8f 77       	andi	r24, 0x7F	; 127
    2840:	90 70       	andi	r25, 0x00	; 0
    2842:	a0 70       	andi	r26, 0x00	; 0
    2844:	b0 70       	andi	r27, 0x00	; 0
    2846:	80 34       	cpi	r24, 0x40	; 64
    2848:	91 05       	cpc	r25, r1
    284a:	a1 05       	cpc	r26, r1
    284c:	b1 05       	cpc	r27, r1
    284e:	39 f4       	brne	.+14     	; 0x285e <__pack_f+0x130>
    2850:	27 ff       	sbrs	r18, 7
    2852:	09 c0       	rjmp	.+18     	; 0x2866 <__pack_f+0x138>
    2854:	20 5c       	subi	r18, 0xC0	; 192
    2856:	3f 4f       	sbci	r19, 0xFF	; 255
    2858:	4f 4f       	sbci	r20, 0xFF	; 255
    285a:	5f 4f       	sbci	r21, 0xFF	; 255
    285c:	04 c0       	rjmp	.+8      	; 0x2866 <__pack_f+0x138>
    285e:	21 5c       	subi	r18, 0xC1	; 193
    2860:	3f 4f       	sbci	r19, 0xFF	; 255
    2862:	4f 4f       	sbci	r20, 0xFF	; 255
    2864:	5f 4f       	sbci	r21, 0xFF	; 255
    2866:	57 ff       	sbrs	r21, 7
    2868:	05 c0       	rjmp	.+10     	; 0x2874 <__pack_f+0x146>
    286a:	56 95       	lsr	r21
    286c:	47 95       	ror	r20
    286e:	37 95       	ror	r19
    2870:	27 95       	ror	r18
    2872:	31 96       	adiw	r30, 0x01	; 1
    2874:	87 e0       	ldi	r24, 0x07	; 7
    2876:	56 95       	lsr	r21
    2878:	47 95       	ror	r20
    287a:	37 95       	ror	r19
    287c:	27 95       	ror	r18
    287e:	8a 95       	dec	r24
    2880:	d1 f7       	brne	.-12     	; 0x2876 <__pack_f+0x148>
    2882:	0b c0       	rjmp	.+22     	; 0x289a <__pack_f+0x16c>
    2884:	e0 e0       	ldi	r30, 0x00	; 0
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	05 c0       	rjmp	.+10     	; 0x2894 <__pack_f+0x166>
    288a:	e0 e0       	ldi	r30, 0x00	; 0
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	05 c0       	rjmp	.+10     	; 0x289a <__pack_f+0x16c>
    2890:	ef ef       	ldi	r30, 0xFF	; 255
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	a9 01       	movw	r20, r18
    289a:	8e 2f       	mov	r24, r30
    289c:	87 95       	ror	r24
    289e:	88 27       	eor	r24, r24
    28a0:	87 95       	ror	r24
    28a2:	94 2f       	mov	r25, r20
    28a4:	9f 77       	andi	r25, 0x7F	; 127
    28a6:	67 95       	ror	r22
    28a8:	66 27       	eor	r22, r22
    28aa:	67 95       	ror	r22
    28ac:	e6 95       	lsr	r30
    28ae:	e2 2e       	mov	r14, r18
    28b0:	a9 2f       	mov	r26, r25
    28b2:	a8 2b       	or	r26, r24
    28b4:	fe 2f       	mov	r31, r30
    28b6:	f6 2b       	or	r31, r22
    28b8:	62 2f       	mov	r22, r18
    28ba:	73 2f       	mov	r23, r19
    28bc:	8a 2f       	mov	r24, r26
    28be:	9f 2f       	mov	r25, r31
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	e6 e0       	ldi	r30, 0x06	; 6
    28c6:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__epilogue_restores__+0x18>

000028ca <__unpack_f>:
    28ca:	dc 01       	movw	r26, r24
    28cc:	fb 01       	movw	r30, r22
    28ce:	2c 91       	ld	r18, X
    28d0:	11 96       	adiw	r26, 0x01	; 1
    28d2:	3c 91       	ld	r19, X
    28d4:	11 97       	sbiw	r26, 0x01	; 1
    28d6:	12 96       	adiw	r26, 0x02	; 2
    28d8:	8c 91       	ld	r24, X
    28da:	12 97       	sbiw	r26, 0x02	; 2
    28dc:	48 2f       	mov	r20, r24
    28de:	4f 77       	andi	r20, 0x7F	; 127
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	98 2f       	mov	r25, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	99 27       	eor	r25, r25
    28e8:	99 1f       	adc	r25, r25
    28ea:	13 96       	adiw	r26, 0x03	; 3
    28ec:	6c 91       	ld	r22, X
    28ee:	13 97       	sbiw	r26, 0x03	; 3
    28f0:	86 2f       	mov	r24, r22
    28f2:	88 0f       	add	r24, r24
    28f4:	89 2b       	or	r24, r25
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	66 1f       	adc	r22, r22
    28fa:	66 27       	eor	r22, r22
    28fc:	66 1f       	adc	r22, r22
    28fe:	61 83       	std	Z+1, r22	; 0x01
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	39 f5       	brne	.+78     	; 0x2952 <__unpack_f+0x88>
    2904:	21 15       	cp	r18, r1
    2906:	31 05       	cpc	r19, r1
    2908:	41 05       	cpc	r20, r1
    290a:	51 05       	cpc	r21, r1
    290c:	11 f4       	brne	.+4      	; 0x2912 <__unpack_f+0x48>
    290e:	82 e0       	ldi	r24, 0x02	; 2
    2910:	29 c0       	rjmp	.+82     	; 0x2964 <__unpack_f+0x9a>
    2912:	82 e8       	ldi	r24, 0x82	; 130
    2914:	9f ef       	ldi	r25, 0xFF	; 255
    2916:	93 83       	std	Z+3, r25	; 0x03
    2918:	82 83       	std	Z+2, r24	; 0x02
    291a:	67 e0       	ldi	r22, 0x07	; 7
    291c:	22 0f       	add	r18, r18
    291e:	33 1f       	adc	r19, r19
    2920:	44 1f       	adc	r20, r20
    2922:	55 1f       	adc	r21, r21
    2924:	6a 95       	dec	r22
    2926:	d1 f7       	brne	.-12     	; 0x291c <__unpack_f+0x52>
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	80 83       	st	Z, r24
    292c:	09 c0       	rjmp	.+18     	; 0x2940 <__unpack_f+0x76>
    292e:	22 0f       	add	r18, r18
    2930:	33 1f       	adc	r19, r19
    2932:	44 1f       	adc	r20, r20
    2934:	55 1f       	adc	r21, r21
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	93 83       	std	Z+3, r25	; 0x03
    293e:	82 83       	std	Z+2, r24	; 0x02
    2940:	20 30       	cpi	r18, 0x00	; 0
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	38 07       	cpc	r19, r24
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	48 07       	cpc	r20, r24
    294a:	80 e4       	ldi	r24, 0x40	; 64
    294c:	58 07       	cpc	r21, r24
    294e:	78 f3       	brcs	.-34     	; 0x292e <__unpack_f+0x64>
    2950:	20 c0       	rjmp	.+64     	; 0x2992 <__unpack_f+0xc8>
    2952:	8f 3f       	cpi	r24, 0xFF	; 255
    2954:	91 05       	cpc	r25, r1
    2956:	79 f4       	brne	.+30     	; 0x2976 <__unpack_f+0xac>
    2958:	21 15       	cp	r18, r1
    295a:	31 05       	cpc	r19, r1
    295c:	41 05       	cpc	r20, r1
    295e:	51 05       	cpc	r21, r1
    2960:	19 f4       	brne	.+6      	; 0x2968 <__unpack_f+0x9e>
    2962:	84 e0       	ldi	r24, 0x04	; 4
    2964:	80 83       	st	Z, r24
    2966:	08 95       	ret
    2968:	44 ff       	sbrs	r20, 4
    296a:	03 c0       	rjmp	.+6      	; 0x2972 <__unpack_f+0xa8>
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	80 83       	st	Z, r24
    2970:	10 c0       	rjmp	.+32     	; 0x2992 <__unpack_f+0xc8>
    2972:	10 82       	st	Z, r1
    2974:	0e c0       	rjmp	.+28     	; 0x2992 <__unpack_f+0xc8>
    2976:	8f 57       	subi	r24, 0x7F	; 127
    2978:	90 40       	sbci	r25, 0x00	; 0
    297a:	93 83       	std	Z+3, r25	; 0x03
    297c:	82 83       	std	Z+2, r24	; 0x02
    297e:	83 e0       	ldi	r24, 0x03	; 3
    2980:	80 83       	st	Z, r24
    2982:	87 e0       	ldi	r24, 0x07	; 7
    2984:	22 0f       	add	r18, r18
    2986:	33 1f       	adc	r19, r19
    2988:	44 1f       	adc	r20, r20
    298a:	55 1f       	adc	r21, r21
    298c:	8a 95       	dec	r24
    298e:	d1 f7       	brne	.-12     	; 0x2984 <__unpack_f+0xba>
    2990:	50 64       	ori	r21, 0x40	; 64
    2992:	24 83       	std	Z+4, r18	; 0x04
    2994:	35 83       	std	Z+5, r19	; 0x05
    2996:	46 83       	std	Z+6, r20	; 0x06
    2998:	57 83       	std	Z+7, r21	; 0x07
    299a:	08 95       	ret

0000299c <__fpcmp_parts_f>:
    299c:	fc 01       	movw	r30, r24
    299e:	db 01       	movw	r26, r22
    29a0:	90 81       	ld	r25, Z
    29a2:	92 30       	cpi	r25, 0x02	; 2
    29a4:	08 f4       	brcc	.+2      	; 0x29a8 <__fpcmp_parts_f+0xc>
    29a6:	49 c0       	rjmp	.+146    	; 0x2a3a <__fpcmp_parts_f+0x9e>
    29a8:	8c 91       	ld	r24, X
    29aa:	82 30       	cpi	r24, 0x02	; 2
    29ac:	08 f4       	brcc	.+2      	; 0x29b0 <__fpcmp_parts_f+0x14>
    29ae:	45 c0       	rjmp	.+138    	; 0x2a3a <__fpcmp_parts_f+0x9e>
    29b0:	94 30       	cpi	r25, 0x04	; 4
    29b2:	51 f4       	brne	.+20     	; 0x29c8 <__fpcmp_parts_f+0x2c>
    29b4:	61 81       	ldd	r22, Z+1	; 0x01
    29b6:	84 30       	cpi	r24, 0x04	; 4
    29b8:	b1 f5       	brne	.+108    	; 0x2a26 <__fpcmp_parts_f+0x8a>
    29ba:	11 96       	adiw	r26, 0x01	; 1
    29bc:	2c 91       	ld	r18, X
    29be:	11 97       	sbiw	r26, 0x01	; 1
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	26 1b       	sub	r18, r22
    29c4:	31 09       	sbc	r19, r1
    29c6:	41 c0       	rjmp	.+130    	; 0x2a4a <__fpcmp_parts_f+0xae>
    29c8:	84 30       	cpi	r24, 0x04	; 4
    29ca:	21 f0       	breq	.+8      	; 0x29d4 <__fpcmp_parts_f+0x38>
    29cc:	92 30       	cpi	r25, 0x02	; 2
    29ce:	41 f4       	brne	.+16     	; 0x29e0 <__fpcmp_parts_f+0x44>
    29d0:	82 30       	cpi	r24, 0x02	; 2
    29d2:	b1 f1       	breq	.+108    	; 0x2a40 <__fpcmp_parts_f+0xa4>
    29d4:	11 96       	adiw	r26, 0x01	; 1
    29d6:	8c 91       	ld	r24, X
    29d8:	11 97       	sbiw	r26, 0x01	; 1
    29da:	88 23       	and	r24, r24
    29dc:	a1 f1       	breq	.+104    	; 0x2a46 <__fpcmp_parts_f+0xaa>
    29de:	2d c0       	rjmp	.+90     	; 0x2a3a <__fpcmp_parts_f+0x9e>
    29e0:	61 81       	ldd	r22, Z+1	; 0x01
    29e2:	82 30       	cpi	r24, 0x02	; 2
    29e4:	01 f1       	breq	.+64     	; 0x2a26 <__fpcmp_parts_f+0x8a>
    29e6:	11 96       	adiw	r26, 0x01	; 1
    29e8:	8c 91       	ld	r24, X
    29ea:	11 97       	sbiw	r26, 0x01	; 1
    29ec:	68 17       	cp	r22, r24
    29ee:	d9 f4       	brne	.+54     	; 0x2a26 <__fpcmp_parts_f+0x8a>
    29f0:	22 81       	ldd	r18, Z+2	; 0x02
    29f2:	33 81       	ldd	r19, Z+3	; 0x03
    29f4:	12 96       	adiw	r26, 0x02	; 2
    29f6:	8d 91       	ld	r24, X+
    29f8:	9c 91       	ld	r25, X
    29fa:	13 97       	sbiw	r26, 0x03	; 3
    29fc:	82 17       	cp	r24, r18
    29fe:	93 07       	cpc	r25, r19
    2a00:	94 f0       	brlt	.+36     	; 0x2a26 <__fpcmp_parts_f+0x8a>
    2a02:	28 17       	cp	r18, r24
    2a04:	39 07       	cpc	r19, r25
    2a06:	bc f0       	brlt	.+46     	; 0x2a36 <__fpcmp_parts_f+0x9a>
    2a08:	24 81       	ldd	r18, Z+4	; 0x04
    2a0a:	35 81       	ldd	r19, Z+5	; 0x05
    2a0c:	46 81       	ldd	r20, Z+6	; 0x06
    2a0e:	57 81       	ldd	r21, Z+7	; 0x07
    2a10:	14 96       	adiw	r26, 0x04	; 4
    2a12:	8d 91       	ld	r24, X+
    2a14:	9d 91       	ld	r25, X+
    2a16:	0d 90       	ld	r0, X+
    2a18:	bc 91       	ld	r27, X
    2a1a:	a0 2d       	mov	r26, r0
    2a1c:	82 17       	cp	r24, r18
    2a1e:	93 07       	cpc	r25, r19
    2a20:	a4 07       	cpc	r26, r20
    2a22:	b5 07       	cpc	r27, r21
    2a24:	18 f4       	brcc	.+6      	; 0x2a2c <__fpcmp_parts_f+0x90>
    2a26:	66 23       	and	r22, r22
    2a28:	41 f0       	breq	.+16     	; 0x2a3a <__fpcmp_parts_f+0x9e>
    2a2a:	0d c0       	rjmp	.+26     	; 0x2a46 <__fpcmp_parts_f+0xaa>
    2a2c:	28 17       	cp	r18, r24
    2a2e:	39 07       	cpc	r19, r25
    2a30:	4a 07       	cpc	r20, r26
    2a32:	5b 07       	cpc	r21, r27
    2a34:	28 f4       	brcc	.+10     	; 0x2a40 <__fpcmp_parts_f+0xa4>
    2a36:	66 23       	and	r22, r22
    2a38:	31 f0       	breq	.+12     	; 0x2a46 <__fpcmp_parts_f+0xaa>
    2a3a:	21 e0       	ldi	r18, 0x01	; 1
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	05 c0       	rjmp	.+10     	; 0x2a4a <__fpcmp_parts_f+0xae>
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <__fpcmp_parts_f+0xae>
    2a46:	2f ef       	ldi	r18, 0xFF	; 255
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	c9 01       	movw	r24, r18
    2a4c:	08 95       	ret

00002a4e <__prologue_saves__>:
    2a4e:	2f 92       	push	r2
    2a50:	3f 92       	push	r3
    2a52:	4f 92       	push	r4
    2a54:	5f 92       	push	r5
    2a56:	6f 92       	push	r6
    2a58:	7f 92       	push	r7
    2a5a:	8f 92       	push	r8
    2a5c:	9f 92       	push	r9
    2a5e:	af 92       	push	r10
    2a60:	bf 92       	push	r11
    2a62:	cf 92       	push	r12
    2a64:	df 92       	push	r13
    2a66:	ef 92       	push	r14
    2a68:	ff 92       	push	r15
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	ca 1b       	sub	r28, r26
    2a78:	db 0b       	sbc	r29, r27
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	09 94       	ijmp

00002a86 <__epilogue_restores__>:
    2a86:	2a 88       	ldd	r2, Y+18	; 0x12
    2a88:	39 88       	ldd	r3, Y+17	; 0x11
    2a8a:	48 88       	ldd	r4, Y+16	; 0x10
    2a8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a90:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a92:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a94:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a96:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a98:	b9 84       	ldd	r11, Y+9	; 0x09
    2a9a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a9c:	df 80       	ldd	r13, Y+7	; 0x07
    2a9e:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa0:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa2:	0c 81       	ldd	r16, Y+4	; 0x04
    2aa4:	1b 81       	ldd	r17, Y+3	; 0x03
    2aa6:	aa 81       	ldd	r26, Y+2	; 0x02
    2aa8:	b9 81       	ldd	r27, Y+1	; 0x01
    2aaa:	ce 0f       	add	r28, r30
    2aac:	d1 1d       	adc	r29, r1
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	ed 01       	movw	r28, r26
    2aba:	08 95       	ret

00002abc <vsnprintf>:
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	2e 97       	sbiw	r28, 0x0e	; 14
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	8c 01       	movw	r16, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	ba 01       	movw	r22, r20
    2ada:	46 e0       	ldi	r20, 0x06	; 6
    2adc:	4c 83       	std	Y+4, r20	; 0x04
    2ade:	1a 83       	std	Y+2, r17	; 0x02
    2ae0:	09 83       	std	Y+1, r16	; 0x01
    2ae2:	97 ff       	sbrs	r25, 7
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <vsnprintf+0x2e>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e8       	ldi	r25, 0x80	; 128
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	ce 01       	movw	r24, r28
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	a9 01       	movw	r20, r18
    2af6:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <vfprintf>
    2afa:	4d 81       	ldd	r20, Y+5	; 0x05
    2afc:	5e 81       	ldd	r21, Y+6	; 0x06
    2afe:	57 fd       	sbrc	r21, 7
    2b00:	0a c0       	rjmp	.+20     	; 0x2b16 <vsnprintf+0x5a>
    2b02:	2f 81       	ldd	r18, Y+7	; 0x07
    2b04:	38 85       	ldd	r19, Y+8	; 0x08
    2b06:	42 17       	cp	r20, r18
    2b08:	53 07       	cpc	r21, r19
    2b0a:	0c f4       	brge	.+2      	; 0x2b0e <vsnprintf+0x52>
    2b0c:	9a 01       	movw	r18, r20
    2b0e:	02 0f       	add	r16, r18
    2b10:	13 1f       	adc	r17, r19
    2b12:	f8 01       	movw	r30, r16
    2b14:	10 82       	st	Z, r1
    2b16:	2e 96       	adiw	r28, 0x0e	; 14
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <vfprintf>:
    2b2c:	2f 92       	push	r2
    2b2e:	3f 92       	push	r3
    2b30:	4f 92       	push	r4
    2b32:	5f 92       	push	r5
    2b34:	6f 92       	push	r6
    2b36:	7f 92       	push	r7
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	2c 97       	sbiw	r28, 0x0c	; 12
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	6c 01       	movw	r12, r24
    2b62:	1b 01       	movw	r2, r22
    2b64:	8a 01       	movw	r16, r20
    2b66:	fc 01       	movw	r30, r24
    2b68:	17 82       	std	Z+7, r1	; 0x07
    2b6a:	16 82       	std	Z+6, r1	; 0x06
    2b6c:	83 81       	ldd	r24, Z+3	; 0x03
    2b6e:	81 ff       	sbrs	r24, 1
    2b70:	d1 c1       	rjmp	.+930    	; 0x2f14 <vfprintf+0x3e8>
    2b72:	2e 01       	movw	r4, r28
    2b74:	08 94       	sec
    2b76:	41 1c       	adc	r4, r1
    2b78:	51 1c       	adc	r5, r1
    2b7a:	f6 01       	movw	r30, r12
    2b7c:	93 81       	ldd	r25, Z+3	; 0x03
    2b7e:	f1 01       	movw	r30, r2
    2b80:	93 fd       	sbrc	r25, 3
    2b82:	85 91       	lpm	r24, Z+
    2b84:	93 ff       	sbrs	r25, 3
    2b86:	81 91       	ld	r24, Z+
    2b88:	1f 01       	movw	r2, r30
    2b8a:	88 23       	and	r24, r24
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <vfprintf+0x64>
    2b8e:	be c1       	rjmp	.+892    	; 0x2f0c <vfprintf+0x3e0>
    2b90:	85 32       	cpi	r24, 0x25	; 37
    2b92:	39 f4       	brne	.+14     	; 0x2ba2 <vfprintf+0x76>
    2b94:	93 fd       	sbrc	r25, 3
    2b96:	85 91       	lpm	r24, Z+
    2b98:	93 ff       	sbrs	r25, 3
    2b9a:	81 91       	ld	r24, Z+
    2b9c:	1f 01       	movw	r2, r30
    2b9e:	85 32       	cpi	r24, 0x25	; 37
    2ba0:	29 f4       	brne	.+10     	; 0x2bac <vfprintf+0x80>
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	b6 01       	movw	r22, r12
    2ba6:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2baa:	e7 cf       	rjmp	.-50     	; 0x2b7a <vfprintf+0x4e>
    2bac:	ee 24       	eor	r14, r14
    2bae:	ff 24       	eor	r15, r15
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	20 32       	cpi	r18, 0x20	; 32
    2bb4:	b0 f4       	brcc	.+44     	; 0x2be2 <vfprintf+0xb6>
    2bb6:	8b 32       	cpi	r24, 0x2B	; 43
    2bb8:	69 f0       	breq	.+26     	; 0x2bd4 <vfprintf+0xa8>
    2bba:	8c 32       	cpi	r24, 0x2C	; 44
    2bbc:	28 f4       	brcc	.+10     	; 0x2bc8 <vfprintf+0x9c>
    2bbe:	80 32       	cpi	r24, 0x20	; 32
    2bc0:	51 f0       	breq	.+20     	; 0x2bd6 <vfprintf+0xaa>
    2bc2:	83 32       	cpi	r24, 0x23	; 35
    2bc4:	71 f4       	brne	.+28     	; 0x2be2 <vfprintf+0xb6>
    2bc6:	0b c0       	rjmp	.+22     	; 0x2bde <vfprintf+0xb2>
    2bc8:	8d 32       	cpi	r24, 0x2D	; 45
    2bca:	39 f0       	breq	.+14     	; 0x2bda <vfprintf+0xae>
    2bcc:	80 33       	cpi	r24, 0x30	; 48
    2bce:	49 f4       	brne	.+18     	; 0x2be2 <vfprintf+0xb6>
    2bd0:	21 60       	ori	r18, 0x01	; 1
    2bd2:	2c c0       	rjmp	.+88     	; 0x2c2c <vfprintf+0x100>
    2bd4:	22 60       	ori	r18, 0x02	; 2
    2bd6:	24 60       	ori	r18, 0x04	; 4
    2bd8:	29 c0       	rjmp	.+82     	; 0x2c2c <vfprintf+0x100>
    2bda:	28 60       	ori	r18, 0x08	; 8
    2bdc:	27 c0       	rjmp	.+78     	; 0x2c2c <vfprintf+0x100>
    2bde:	20 61       	ori	r18, 0x10	; 16
    2be0:	25 c0       	rjmp	.+74     	; 0x2c2c <vfprintf+0x100>
    2be2:	27 fd       	sbrc	r18, 7
    2be4:	2c c0       	rjmp	.+88     	; 0x2c3e <vfprintf+0x112>
    2be6:	38 2f       	mov	r19, r24
    2be8:	30 53       	subi	r19, 0x30	; 48
    2bea:	3a 30       	cpi	r19, 0x0A	; 10
    2bec:	98 f4       	brcc	.+38     	; 0x2c14 <vfprintf+0xe8>
    2bee:	26 ff       	sbrs	r18, 6
    2bf0:	08 c0       	rjmp	.+16     	; 0x2c02 <vfprintf+0xd6>
    2bf2:	8e 2d       	mov	r24, r14
    2bf4:	88 0f       	add	r24, r24
    2bf6:	e8 2e       	mov	r14, r24
    2bf8:	ee 0c       	add	r14, r14
    2bfa:	ee 0c       	add	r14, r14
    2bfc:	e8 0e       	add	r14, r24
    2bfe:	e3 0e       	add	r14, r19
    2c00:	15 c0       	rjmp	.+42     	; 0x2c2c <vfprintf+0x100>
    2c02:	8f 2d       	mov	r24, r15
    2c04:	88 0f       	add	r24, r24
    2c06:	f8 2e       	mov	r15, r24
    2c08:	ff 0c       	add	r15, r15
    2c0a:	ff 0c       	add	r15, r15
    2c0c:	f8 0e       	add	r15, r24
    2c0e:	f3 0e       	add	r15, r19
    2c10:	20 62       	ori	r18, 0x20	; 32
    2c12:	0c c0       	rjmp	.+24     	; 0x2c2c <vfprintf+0x100>
    2c14:	8e 32       	cpi	r24, 0x2E	; 46
    2c16:	21 f4       	brne	.+8      	; 0x2c20 <vfprintf+0xf4>
    2c18:	26 fd       	sbrc	r18, 6
    2c1a:	78 c1       	rjmp	.+752    	; 0x2f0c <vfprintf+0x3e0>
    2c1c:	20 64       	ori	r18, 0x40	; 64
    2c1e:	06 c0       	rjmp	.+12     	; 0x2c2c <vfprintf+0x100>
    2c20:	8c 36       	cpi	r24, 0x6C	; 108
    2c22:	11 f4       	brne	.+4      	; 0x2c28 <vfprintf+0xfc>
    2c24:	20 68       	ori	r18, 0x80	; 128
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <vfprintf+0x100>
    2c28:	88 36       	cpi	r24, 0x68	; 104
    2c2a:	49 f4       	brne	.+18     	; 0x2c3e <vfprintf+0x112>
    2c2c:	f1 01       	movw	r30, r2
    2c2e:	93 fd       	sbrc	r25, 3
    2c30:	85 91       	lpm	r24, Z+
    2c32:	93 ff       	sbrs	r25, 3
    2c34:	81 91       	ld	r24, Z+
    2c36:	1f 01       	movw	r2, r30
    2c38:	88 23       	and	r24, r24
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <vfprintf+0x112>
    2c3c:	ba cf       	rjmp	.-140    	; 0x2bb2 <vfprintf+0x86>
    2c3e:	98 2f       	mov	r25, r24
    2c40:	95 54       	subi	r25, 0x45	; 69
    2c42:	93 30       	cpi	r25, 0x03	; 3
    2c44:	18 f0       	brcs	.+6      	; 0x2c4c <vfprintf+0x120>
    2c46:	90 52       	subi	r25, 0x20	; 32
    2c48:	93 30       	cpi	r25, 0x03	; 3
    2c4a:	28 f4       	brcc	.+10     	; 0x2c56 <vfprintf+0x12a>
    2c4c:	0c 5f       	subi	r16, 0xFC	; 252
    2c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c50:	ff e3       	ldi	r31, 0x3F	; 63
    2c52:	f9 83       	std	Y+1, r31	; 0x01
    2c54:	0d c0       	rjmp	.+26     	; 0x2c70 <vfprintf+0x144>
    2c56:	83 36       	cpi	r24, 0x63	; 99
    2c58:	31 f0       	breq	.+12     	; 0x2c66 <vfprintf+0x13a>
    2c5a:	83 37       	cpi	r24, 0x73	; 115
    2c5c:	71 f0       	breq	.+28     	; 0x2c7a <vfprintf+0x14e>
    2c5e:	83 35       	cpi	r24, 0x53	; 83
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <vfprintf+0x138>
    2c62:	60 c0       	rjmp	.+192    	; 0x2d24 <vfprintf+0x1f8>
    2c64:	22 c0       	rjmp	.+68     	; 0x2caa <vfprintf+0x17e>
    2c66:	f8 01       	movw	r30, r16
    2c68:	80 81       	ld	r24, Z
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	0e 5f       	subi	r16, 0xFE	; 254
    2c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c70:	42 01       	movw	r8, r4
    2c72:	71 e0       	ldi	r23, 0x01	; 1
    2c74:	a7 2e       	mov	r10, r23
    2c76:	b1 2c       	mov	r11, r1
    2c78:	16 c0       	rjmp	.+44     	; 0x2ca6 <vfprintf+0x17a>
    2c7a:	62 e0       	ldi	r22, 0x02	; 2
    2c7c:	66 2e       	mov	r6, r22
    2c7e:	71 2c       	mov	r7, r1
    2c80:	60 0e       	add	r6, r16
    2c82:	71 1e       	adc	r7, r17
    2c84:	f8 01       	movw	r30, r16
    2c86:	80 80       	ld	r8, Z
    2c88:	91 80       	ldd	r9, Z+1	; 0x01
    2c8a:	26 ff       	sbrs	r18, 6
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <vfprintf+0x168>
    2c8e:	6e 2d       	mov	r22, r14
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <vfprintf+0x16c>
    2c94:	6f ef       	ldi	r22, 0xFF	; 255
    2c96:	7f ef       	ldi	r23, 0xFF	; 255
    2c98:	c4 01       	movw	r24, r8
    2c9a:	2c 87       	std	Y+12, r18	; 0x0c
    2c9c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <strnlen>
    2ca0:	5c 01       	movw	r10, r24
    2ca2:	83 01       	movw	r16, r6
    2ca4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ca6:	2f 77       	andi	r18, 0x7F	; 127
    2ca8:	17 c0       	rjmp	.+46     	; 0x2cd8 <vfprintf+0x1ac>
    2caa:	52 e0       	ldi	r21, 0x02	; 2
    2cac:	65 2e       	mov	r6, r21
    2cae:	71 2c       	mov	r7, r1
    2cb0:	60 0e       	add	r6, r16
    2cb2:	71 1e       	adc	r7, r17
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	80 80       	ld	r8, Z
    2cb8:	91 80       	ldd	r9, Z+1	; 0x01
    2cba:	26 ff       	sbrs	r18, 6
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <vfprintf+0x198>
    2cbe:	6e 2d       	mov	r22, r14
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <vfprintf+0x19c>
    2cc4:	6f ef       	ldi	r22, 0xFF	; 255
    2cc6:	7f ef       	ldi	r23, 0xFF	; 255
    2cc8:	c4 01       	movw	r24, r8
    2cca:	2c 87       	std	Y+12, r18	; 0x0c
    2ccc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <strnlen_P>
    2cd0:	5c 01       	movw	r10, r24
    2cd2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cd4:	20 68       	ori	r18, 0x80	; 128
    2cd6:	83 01       	movw	r16, r6
    2cd8:	23 fd       	sbrc	r18, 3
    2cda:	20 c0       	rjmp	.+64     	; 0x2d1c <vfprintf+0x1f0>
    2cdc:	08 c0       	rjmp	.+16     	; 0x2cee <vfprintf+0x1c2>
    2cde:	80 e2       	ldi	r24, 0x20	; 32
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	b6 01       	movw	r22, r12
    2ce4:	2c 87       	std	Y+12, r18	; 0x0c
    2ce6:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2cea:	fa 94       	dec	r15
    2cec:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cee:	8f 2d       	mov	r24, r15
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a8 16       	cp	r10, r24
    2cf4:	b9 06       	cpc	r11, r25
    2cf6:	98 f3       	brcs	.-26     	; 0x2cde <vfprintf+0x1b2>
    2cf8:	11 c0       	rjmp	.+34     	; 0x2d1c <vfprintf+0x1f0>
    2cfa:	f4 01       	movw	r30, r8
    2cfc:	27 fd       	sbrc	r18, 7
    2cfe:	85 91       	lpm	r24, Z+
    2d00:	27 ff       	sbrs	r18, 7
    2d02:	81 91       	ld	r24, Z+
    2d04:	4f 01       	movw	r8, r30
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	b6 01       	movw	r22, r12
    2d0a:	2c 87       	std	Y+12, r18	; 0x0c
    2d0c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2d10:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d12:	f1 10       	cpse	r15, r1
    2d14:	fa 94       	dec	r15
    2d16:	08 94       	sec
    2d18:	a1 08       	sbc	r10, r1
    2d1a:	b1 08       	sbc	r11, r1
    2d1c:	a1 14       	cp	r10, r1
    2d1e:	b1 04       	cpc	r11, r1
    2d20:	61 f7       	brne	.-40     	; 0x2cfa <vfprintf+0x1ce>
    2d22:	f1 c0       	rjmp	.+482    	; 0x2f06 <vfprintf+0x3da>
    2d24:	84 36       	cpi	r24, 0x64	; 100
    2d26:	11 f0       	breq	.+4      	; 0x2d2c <vfprintf+0x200>
    2d28:	89 36       	cpi	r24, 0x69	; 105
    2d2a:	49 f5       	brne	.+82     	; 0x2d7e <vfprintf+0x252>
    2d2c:	27 ff       	sbrs	r18, 7
    2d2e:	08 c0       	rjmp	.+16     	; 0x2d40 <vfprintf+0x214>
    2d30:	f8 01       	movw	r30, r16
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	93 81       	ldd	r25, Z+3	; 0x03
    2d3a:	0c 5f       	subi	r16, 0xFC	; 252
    2d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3e:	09 c0       	rjmp	.+18     	; 0x2d52 <vfprintf+0x226>
    2d40:	f8 01       	movw	r30, r16
    2d42:	60 81       	ld	r22, Z
    2d44:	71 81       	ldd	r23, Z+1	; 0x01
    2d46:	88 27       	eor	r24, r24
    2d48:	77 fd       	sbrc	r23, 7
    2d4a:	80 95       	com	r24
    2d4c:	98 2f       	mov	r25, r24
    2d4e:	0e 5f       	subi	r16, 0xFE	; 254
    2d50:	1f 4f       	sbci	r17, 0xFF	; 255
    2d52:	4f e6       	ldi	r20, 0x6F	; 111
    2d54:	b4 2e       	mov	r11, r20
    2d56:	b2 22       	and	r11, r18
    2d58:	97 ff       	sbrs	r25, 7
    2d5a:	09 c0       	rjmp	.+18     	; 0x2d6e <vfprintf+0x242>
    2d5c:	90 95       	com	r25
    2d5e:	80 95       	com	r24
    2d60:	70 95       	com	r23
    2d62:	61 95       	neg	r22
    2d64:	7f 4f       	sbci	r23, 0xFF	; 255
    2d66:	8f 4f       	sbci	r24, 0xFF	; 255
    2d68:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6a:	f0 e8       	ldi	r31, 0x80	; 128
    2d6c:	bf 2a       	or	r11, r31
    2d6e:	a2 01       	movw	r20, r4
    2d70:	2a e0       	ldi	r18, 0x0A	; 10
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__ultoa_invert>
    2d78:	78 2e       	mov	r7, r24
    2d7a:	74 18       	sub	r7, r4
    2d7c:	45 c0       	rjmp	.+138    	; 0x2e08 <vfprintf+0x2dc>
    2d7e:	85 37       	cpi	r24, 0x75	; 117
    2d80:	31 f4       	brne	.+12     	; 0x2d8e <vfprintf+0x262>
    2d82:	3f ee       	ldi	r19, 0xEF	; 239
    2d84:	b3 2e       	mov	r11, r19
    2d86:	b2 22       	and	r11, r18
    2d88:	2a e0       	ldi	r18, 0x0A	; 10
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	25 c0       	rjmp	.+74     	; 0x2dd8 <vfprintf+0x2ac>
    2d8e:	99 ef       	ldi	r25, 0xF9	; 249
    2d90:	b9 2e       	mov	r11, r25
    2d92:	b2 22       	and	r11, r18
    2d94:	8f 36       	cpi	r24, 0x6F	; 111
    2d96:	c1 f0       	breq	.+48     	; 0x2dc8 <vfprintf+0x29c>
    2d98:	80 37       	cpi	r24, 0x70	; 112
    2d9a:	20 f4       	brcc	.+8      	; 0x2da4 <vfprintf+0x278>
    2d9c:	88 35       	cpi	r24, 0x58	; 88
    2d9e:	09 f0       	breq	.+2      	; 0x2da2 <vfprintf+0x276>
    2da0:	b5 c0       	rjmp	.+362    	; 0x2f0c <vfprintf+0x3e0>
    2da2:	0d c0       	rjmp	.+26     	; 0x2dbe <vfprintf+0x292>
    2da4:	80 37       	cpi	r24, 0x70	; 112
    2da6:	21 f0       	breq	.+8      	; 0x2db0 <vfprintf+0x284>
    2da8:	88 37       	cpi	r24, 0x78	; 120
    2daa:	09 f0       	breq	.+2      	; 0x2dae <vfprintf+0x282>
    2dac:	af c0       	rjmp	.+350    	; 0x2f0c <vfprintf+0x3e0>
    2dae:	02 c0       	rjmp	.+4      	; 0x2db4 <vfprintf+0x288>
    2db0:	20 e1       	ldi	r18, 0x10	; 16
    2db2:	b2 2a       	or	r11, r18
    2db4:	b4 fe       	sbrs	r11, 4
    2db6:	0b c0       	rjmp	.+22     	; 0x2dce <vfprintf+0x2a2>
    2db8:	84 e0       	ldi	r24, 0x04	; 4
    2dba:	b8 2a       	or	r11, r24
    2dbc:	08 c0       	rjmp	.+16     	; 0x2dce <vfprintf+0x2a2>
    2dbe:	b4 fe       	sbrs	r11, 4
    2dc0:	09 c0       	rjmp	.+18     	; 0x2dd4 <vfprintf+0x2a8>
    2dc2:	e6 e0       	ldi	r30, 0x06	; 6
    2dc4:	be 2a       	or	r11, r30
    2dc6:	06 c0       	rjmp	.+12     	; 0x2dd4 <vfprintf+0x2a8>
    2dc8:	28 e0       	ldi	r18, 0x08	; 8
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	05 c0       	rjmp	.+10     	; 0x2dd8 <vfprintf+0x2ac>
    2dce:	20 e1       	ldi	r18, 0x10	; 16
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <vfprintf+0x2ac>
    2dd4:	20 e1       	ldi	r18, 0x10	; 16
    2dd6:	32 e0       	ldi	r19, 0x02	; 2
    2dd8:	b7 fe       	sbrs	r11, 7
    2dda:	08 c0       	rjmp	.+16     	; 0x2dec <vfprintf+0x2c0>
    2ddc:	f8 01       	movw	r30, r16
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	0c 5f       	subi	r16, 0xFC	; 252
    2de8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dea:	07 c0       	rjmp	.+14     	; 0x2dfa <vfprintf+0x2ce>
    2dec:	f8 01       	movw	r30, r16
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	0e 5f       	subi	r16, 0xFE	; 254
    2df8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfa:	a2 01       	movw	r20, r4
    2dfc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__ultoa_invert>
    2e00:	78 2e       	mov	r7, r24
    2e02:	74 18       	sub	r7, r4
    2e04:	ff e7       	ldi	r31, 0x7F	; 127
    2e06:	bf 22       	and	r11, r31
    2e08:	b6 fe       	sbrs	r11, 6
    2e0a:	0b c0       	rjmp	.+22     	; 0x2e22 <vfprintf+0x2f6>
    2e0c:	2e ef       	ldi	r18, 0xFE	; 254
    2e0e:	b2 22       	and	r11, r18
    2e10:	7e 14       	cp	r7, r14
    2e12:	38 f4       	brcc	.+14     	; 0x2e22 <vfprintf+0x2f6>
    2e14:	b4 fe       	sbrs	r11, 4
    2e16:	07 c0       	rjmp	.+14     	; 0x2e26 <vfprintf+0x2fa>
    2e18:	b2 fc       	sbrc	r11, 2
    2e1a:	05 c0       	rjmp	.+10     	; 0x2e26 <vfprintf+0x2fa>
    2e1c:	8f ee       	ldi	r24, 0xEF	; 239
    2e1e:	b8 22       	and	r11, r24
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <vfprintf+0x2fa>
    2e22:	a7 2c       	mov	r10, r7
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <vfprintf+0x2fc>
    2e26:	ae 2c       	mov	r10, r14
    2e28:	8b 2d       	mov	r24, r11
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	b4 fe       	sbrs	r11, 4
    2e2e:	0d c0       	rjmp	.+26     	; 0x2e4a <vfprintf+0x31e>
    2e30:	fe 01       	movw	r30, r28
    2e32:	e7 0d       	add	r30, r7
    2e34:	f1 1d       	adc	r31, r1
    2e36:	20 81       	ld	r18, Z
    2e38:	20 33       	cpi	r18, 0x30	; 48
    2e3a:	19 f4       	brne	.+6      	; 0x2e42 <vfprintf+0x316>
    2e3c:	e9 ee       	ldi	r30, 0xE9	; 233
    2e3e:	be 22       	and	r11, r30
    2e40:	09 c0       	rjmp	.+18     	; 0x2e54 <vfprintf+0x328>
    2e42:	a3 94       	inc	r10
    2e44:	b2 fe       	sbrs	r11, 2
    2e46:	06 c0       	rjmp	.+12     	; 0x2e54 <vfprintf+0x328>
    2e48:	04 c0       	rjmp	.+8      	; 0x2e52 <vfprintf+0x326>
    2e4a:	86 78       	andi	r24, 0x86	; 134
    2e4c:	90 70       	andi	r25, 0x00	; 0
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <vfprintf+0x328>
    2e52:	a3 94       	inc	r10
    2e54:	8b 2c       	mov	r8, r11
    2e56:	99 24       	eor	r9, r9
    2e58:	b3 fc       	sbrc	r11, 3
    2e5a:	14 c0       	rjmp	.+40     	; 0x2e84 <vfprintf+0x358>
    2e5c:	b0 fe       	sbrs	r11, 0
    2e5e:	0f c0       	rjmp	.+30     	; 0x2e7e <vfprintf+0x352>
    2e60:	af 14       	cp	r10, r15
    2e62:	28 f4       	brcc	.+10     	; 0x2e6e <vfprintf+0x342>
    2e64:	e7 2c       	mov	r14, r7
    2e66:	ef 0c       	add	r14, r15
    2e68:	ea 18       	sub	r14, r10
    2e6a:	af 2c       	mov	r10, r15
    2e6c:	08 c0       	rjmp	.+16     	; 0x2e7e <vfprintf+0x352>
    2e6e:	e7 2c       	mov	r14, r7
    2e70:	06 c0       	rjmp	.+12     	; 0x2e7e <vfprintf+0x352>
    2e72:	80 e2       	ldi	r24, 0x20	; 32
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	b6 01       	movw	r22, r12
    2e78:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2e7c:	a3 94       	inc	r10
    2e7e:	af 14       	cp	r10, r15
    2e80:	c0 f3       	brcs	.-16     	; 0x2e72 <vfprintf+0x346>
    2e82:	04 c0       	rjmp	.+8      	; 0x2e8c <vfprintf+0x360>
    2e84:	af 14       	cp	r10, r15
    2e86:	10 f4       	brcc	.+4      	; 0x2e8c <vfprintf+0x360>
    2e88:	fa 18       	sub	r15, r10
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <vfprintf+0x362>
    2e8c:	ff 24       	eor	r15, r15
    2e8e:	84 fe       	sbrs	r8, 4
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <vfprintf+0x384>
    2e92:	80 e3       	ldi	r24, 0x30	; 48
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	b6 01       	movw	r22, r12
    2e98:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2e9c:	82 fe       	sbrs	r8, 2
    2e9e:	1f c0       	rjmp	.+62     	; 0x2ede <vfprintf+0x3b2>
    2ea0:	81 fe       	sbrs	r8, 1
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <vfprintf+0x37e>
    2ea4:	88 e5       	ldi	r24, 0x58	; 88
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	10 c0       	rjmp	.+32     	; 0x2eca <vfprintf+0x39e>
    2eaa:	88 e7       	ldi	r24, 0x78	; 120
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0d c0       	rjmp	.+26     	; 0x2eca <vfprintf+0x39e>
    2eb0:	c4 01       	movw	r24, r8
    2eb2:	86 78       	andi	r24, 0x86	; 134
    2eb4:	90 70       	andi	r25, 0x00	; 0
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	91 f0       	breq	.+36     	; 0x2ede <vfprintf+0x3b2>
    2eba:	81 fc       	sbrc	r8, 1
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <vfprintf+0x396>
    2ebe:	80 e2       	ldi	r24, 0x20	; 32
    2ec0:	01 c0       	rjmp	.+2      	; 0x2ec4 <vfprintf+0x398>
    2ec2:	8b e2       	ldi	r24, 0x2B	; 43
    2ec4:	b7 fc       	sbrc	r11, 7
    2ec6:	8d e2       	ldi	r24, 0x2D	; 45
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	b6 01       	movw	r22, r12
    2ecc:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2ed0:	06 c0       	rjmp	.+12     	; 0x2ede <vfprintf+0x3b2>
    2ed2:	80 e3       	ldi	r24, 0x30	; 48
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	b6 01       	movw	r22, r12
    2ed8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2edc:	ea 94       	dec	r14
    2ede:	7e 14       	cp	r7, r14
    2ee0:	c0 f3       	brcs	.-16     	; 0x2ed2 <vfprintf+0x3a6>
    2ee2:	7a 94       	dec	r7
    2ee4:	f2 01       	movw	r30, r4
    2ee6:	e7 0d       	add	r30, r7
    2ee8:	f1 1d       	adc	r31, r1
    2eea:	80 81       	ld	r24, Z
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	b6 01       	movw	r22, r12
    2ef0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2ef4:	77 20       	and	r7, r7
    2ef6:	a9 f7       	brne	.-22     	; 0x2ee2 <vfprintf+0x3b6>
    2ef8:	06 c0       	rjmp	.+12     	; 0x2f06 <vfprintf+0x3da>
    2efa:	80 e2       	ldi	r24, 0x20	; 32
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	b6 01       	movw	r22, r12
    2f00:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <fputc>
    2f04:	fa 94       	dec	r15
    2f06:	ff 20       	and	r15, r15
    2f08:	c1 f7       	brne	.-16     	; 0x2efa <vfprintf+0x3ce>
    2f0a:	37 ce       	rjmp	.-914    	; 0x2b7a <vfprintf+0x4e>
    2f0c:	f6 01       	movw	r30, r12
    2f0e:	26 81       	ldd	r18, Z+6	; 0x06
    2f10:	37 81       	ldd	r19, Z+7	; 0x07
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <vfprintf+0x3ec>
    2f14:	2f ef       	ldi	r18, 0xFF	; 255
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	c9 01       	movw	r24, r18
    2f1a:	2c 96       	adiw	r28, 0x0c	; 12
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	bf 90       	pop	r11
    2f38:	af 90       	pop	r10
    2f3a:	9f 90       	pop	r9
    2f3c:	8f 90       	pop	r8
    2f3e:	7f 90       	pop	r7
    2f40:	6f 90       	pop	r6
    2f42:	5f 90       	pop	r5
    2f44:	4f 90       	pop	r4
    2f46:	3f 90       	pop	r3
    2f48:	2f 90       	pop	r2
    2f4a:	08 95       	ret

00002f4c <strnlen_P>:
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	05 90       	lpm	r0, Z+
    2f50:	61 50       	subi	r22, 0x01	; 1
    2f52:	70 40       	sbci	r23, 0x00	; 0
    2f54:	01 10       	cpse	r0, r1
    2f56:	d8 f7       	brcc	.-10     	; 0x2f4e <strnlen_P+0x2>
    2f58:	80 95       	com	r24
    2f5a:	90 95       	com	r25
    2f5c:	8e 0f       	add	r24, r30
    2f5e:	9f 1f       	adc	r25, r31
    2f60:	08 95       	ret

00002f62 <strnlen>:
    2f62:	fc 01       	movw	r30, r24
    2f64:	61 50       	subi	r22, 0x01	; 1
    2f66:	70 40       	sbci	r23, 0x00	; 0
    2f68:	01 90       	ld	r0, Z+
    2f6a:	01 10       	cpse	r0, r1
    2f6c:	d8 f7       	brcc	.-10     	; 0x2f64 <strnlen+0x2>
    2f6e:	80 95       	com	r24
    2f70:	90 95       	com	r25
    2f72:	8e 0f       	add	r24, r30
    2f74:	9f 1f       	adc	r25, r31
    2f76:	08 95       	ret

00002f78 <fputc>:
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	8c 01       	movw	r16, r24
    2f82:	eb 01       	movw	r28, r22
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	81 ff       	sbrs	r24, 1
    2f88:	1b c0       	rjmp	.+54     	; 0x2fc0 <fputc+0x48>
    2f8a:	82 ff       	sbrs	r24, 2
    2f8c:	0d c0       	rjmp	.+26     	; 0x2fa8 <fputc+0x30>
    2f8e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f90:	3f 81       	ldd	r19, Y+7	; 0x07
    2f92:	8c 81       	ldd	r24, Y+4	; 0x04
    2f94:	9d 81       	ldd	r25, Y+5	; 0x05
    2f96:	28 17       	cp	r18, r24
    2f98:	39 07       	cpc	r19, r25
    2f9a:	64 f4       	brge	.+24     	; 0x2fb4 <fputc+0x3c>
    2f9c:	e8 81       	ld	r30, Y
    2f9e:	f9 81       	ldd	r31, Y+1	; 0x01
    2fa0:	01 93       	st	Z+, r16
    2fa2:	f9 83       	std	Y+1, r31	; 0x01
    2fa4:	e8 83       	st	Y, r30
    2fa6:	06 c0       	rjmp	.+12     	; 0x2fb4 <fputc+0x3c>
    2fa8:	e8 85       	ldd	r30, Y+8	; 0x08
    2faa:	f9 85       	ldd	r31, Y+9	; 0x09
    2fac:	80 2f       	mov	r24, r16
    2fae:	09 95       	icall
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	31 f4       	brne	.+12     	; 0x2fc0 <fputc+0x48>
    2fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb8:	01 96       	adiw	r24, 0x01	; 1
    2fba:	9f 83       	std	Y+7, r25	; 0x07
    2fbc:	8e 83       	std	Y+6, r24	; 0x06
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <fputc+0x4c>
    2fc0:	0f ef       	ldi	r16, 0xFF	; 255
    2fc2:	1f ef       	ldi	r17, 0xFF	; 255
    2fc4:	c8 01       	movw	r24, r16
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	08 95       	ret

00002fd0 <__ultoa_invert>:
    2fd0:	fa 01       	movw	r30, r20
    2fd2:	aa 27       	eor	r26, r26
    2fd4:	28 30       	cpi	r18, 0x08	; 8
    2fd6:	51 f1       	breq	.+84     	; 0x302c <__ultoa_invert+0x5c>
    2fd8:	20 31       	cpi	r18, 0x10	; 16
    2fda:	81 f1       	breq	.+96     	; 0x303c <__ultoa_invert+0x6c>
    2fdc:	e8 94       	clt
    2fde:	6f 93       	push	r22
    2fe0:	6e 7f       	andi	r22, 0xFE	; 254
    2fe2:	6e 5f       	subi	r22, 0xFE	; 254
    2fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	af 4f       	sbci	r26, 0xFF	; 255
    2fec:	b1 e0       	ldi	r27, 0x01	; 1
    2fee:	3e d0       	rcall	.+124    	; 0x306c <__ultoa_invert+0x9c>
    2ff0:	b4 e0       	ldi	r27, 0x04	; 4
    2ff2:	3c d0       	rcall	.+120    	; 0x306c <__ultoa_invert+0x9c>
    2ff4:	67 0f       	add	r22, r23
    2ff6:	78 1f       	adc	r23, r24
    2ff8:	89 1f       	adc	r24, r25
    2ffa:	9a 1f       	adc	r25, r26
    2ffc:	a1 1d       	adc	r26, r1
    2ffe:	68 0f       	add	r22, r24
    3000:	79 1f       	adc	r23, r25
    3002:	8a 1f       	adc	r24, r26
    3004:	91 1d       	adc	r25, r1
    3006:	a1 1d       	adc	r26, r1
    3008:	6a 0f       	add	r22, r26
    300a:	71 1d       	adc	r23, r1
    300c:	81 1d       	adc	r24, r1
    300e:	91 1d       	adc	r25, r1
    3010:	a1 1d       	adc	r26, r1
    3012:	20 d0       	rcall	.+64     	; 0x3054 <__ultoa_invert+0x84>
    3014:	09 f4       	brne	.+2      	; 0x3018 <__ultoa_invert+0x48>
    3016:	68 94       	set
    3018:	3f 91       	pop	r19
    301a:	2a e0       	ldi	r18, 0x0A	; 10
    301c:	26 9f       	mul	r18, r22
    301e:	11 24       	eor	r1, r1
    3020:	30 19       	sub	r19, r0
    3022:	30 5d       	subi	r19, 0xD0	; 208
    3024:	31 93       	st	Z+, r19
    3026:	de f6       	brtc	.-74     	; 0x2fde <__ultoa_invert+0xe>
    3028:	cf 01       	movw	r24, r30
    302a:	08 95       	ret
    302c:	46 2f       	mov	r20, r22
    302e:	47 70       	andi	r20, 0x07	; 7
    3030:	40 5d       	subi	r20, 0xD0	; 208
    3032:	41 93       	st	Z+, r20
    3034:	b3 e0       	ldi	r27, 0x03	; 3
    3036:	0f d0       	rcall	.+30     	; 0x3056 <__ultoa_invert+0x86>
    3038:	c9 f7       	brne	.-14     	; 0x302c <__ultoa_invert+0x5c>
    303a:	f6 cf       	rjmp	.-20     	; 0x3028 <__ultoa_invert+0x58>
    303c:	46 2f       	mov	r20, r22
    303e:	4f 70       	andi	r20, 0x0F	; 15
    3040:	40 5d       	subi	r20, 0xD0	; 208
    3042:	4a 33       	cpi	r20, 0x3A	; 58
    3044:	18 f0       	brcs	.+6      	; 0x304c <__ultoa_invert+0x7c>
    3046:	49 5d       	subi	r20, 0xD9	; 217
    3048:	31 fd       	sbrc	r19, 1
    304a:	40 52       	subi	r20, 0x20	; 32
    304c:	41 93       	st	Z+, r20
    304e:	02 d0       	rcall	.+4      	; 0x3054 <__ultoa_invert+0x84>
    3050:	a9 f7       	brne	.-22     	; 0x303c <__ultoa_invert+0x6c>
    3052:	ea cf       	rjmp	.-44     	; 0x3028 <__ultoa_invert+0x58>
    3054:	b4 e0       	ldi	r27, 0x04	; 4
    3056:	a6 95       	lsr	r26
    3058:	97 95       	ror	r25
    305a:	87 95       	ror	r24
    305c:	77 95       	ror	r23
    305e:	67 95       	ror	r22
    3060:	ba 95       	dec	r27
    3062:	c9 f7       	brne	.-14     	; 0x3056 <__ultoa_invert+0x86>
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	61 05       	cpc	r22, r1
    3068:	71 05       	cpc	r23, r1
    306a:	08 95       	ret
    306c:	9b 01       	movw	r18, r22
    306e:	ac 01       	movw	r20, r24
    3070:	0a 2e       	mov	r0, r26
    3072:	06 94       	lsr	r0
    3074:	57 95       	ror	r21
    3076:	47 95       	ror	r20
    3078:	37 95       	ror	r19
    307a:	27 95       	ror	r18
    307c:	ba 95       	dec	r27
    307e:	c9 f7       	brne	.-14     	; 0x3072 <__ultoa_invert+0xa2>
    3080:	62 0f       	add	r22, r18
    3082:	73 1f       	adc	r23, r19
    3084:	84 1f       	adc	r24, r20
    3086:	95 1f       	adc	r25, r21
    3088:	a0 1d       	adc	r26, r0
    308a:	08 95       	ret

0000308c <_exit>:
    308c:	f8 94       	cli

0000308e <__stop_program>:
    308e:	ff cf       	rjmp	.-2      	; 0x308e <__stop_program>
