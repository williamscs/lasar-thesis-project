
Satellite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000013b2  00001446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080011a  0080011a  00001460  2**0
                  ALLOC
  3 .stab         00001d34  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000767  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000038fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  0000397b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000098d  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000040c  00000000  00000000  000044fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c0e  00000000  00000000  00004909  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00005518  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000297  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000092  00000000  00000000  0000593f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 eb       	ldi	r30, 0xB2	; 178
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 33       	cpi	r26, 0x30	; 48
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 91 04 	call	0x922	; 0x922 <main>
      9e:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__vector_default>

000000a6 <RTC_init>:
#include <util/delay.h>
#include <string.h>
#include "SPI\spi.h"

void RTC_init()
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	2e 97       	sbiw	r28, 0x0e	; 14
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
	  // start the SPI library:
	  setup_spi(SPI_MODE_1, SPI_MSB, SPI_NO_INTERRUPT, SPI_MSTR_CLK16);
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	60 e0       	ldi	r22, 0x00	; 0
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	40 e0       	ldi	r20, 0x00	; 0
      c6:	50 e0       	ldi	r21, 0x00	; 0
      c8:	21 e0       	ldi	r18, 0x01	; 1
      ca:	0e 94 ac 03 	call	0x758	; 0x758 <setup_spi>
	  //set control register 
	  PORTD &= ~(1 << PORTD5);  
      ce:	8b e2       	ldi	r24, 0x2B	; 43
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	2b e2       	ldi	r18, 0x2B	; 43
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	f9 01       	movw	r30, r18
      d8:	20 81       	ld	r18, Z
      da:	2f 7d       	andi	r18, 0xDF	; 223
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
	  send_spi(0x8E);
      e0:	8e e8       	ldi	r24, 0x8E	; 142
      e2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <send_spi>
	  send_spi(0x60);
      e6:	80 e6       	ldi	r24, 0x60	; 96
      e8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <send_spi>
	  //0b01100000
	  
	  PORTD |= (1 << PORTD5);
      ec:	8b e2       	ldi	r24, 0x2B	; 43
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	2b e2       	ldi	r18, 0x2B	; 43
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	20 62       	ori	r18, 0x20	; 32
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	a0 e2       	ldi	r26, 0x20	; 32
     104:	b1 e4       	ldi	r27, 0x41	; 65
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	9a 83       	std	Y+2, r25	; 0x02
     10a:	ab 83       	std	Y+3, r26	; 0x03
     10c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     10e:	69 81       	ldd	r22, Y+1	; 0x01
     110:	7a 81       	ldd	r23, Y+2	; 0x02
     112:	8b 81       	ldd	r24, Y+3	; 0x03
     114:	9c 81       	ldd	r25, Y+4	; 0x04
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	4a e7       	ldi	r20, 0x7A	; 122
     11c:	55 e4       	ldi	r21, 0x45	; 69
     11e:	0e 94 0e 09 	call	0x121c	; 0x121c <__mulsf3>
     122:	dc 01       	movw	r26, r24
     124:	cb 01       	movw	r24, r22
     126:	8d 83       	std	Y+5, r24	; 0x05
     128:	9e 83       	std	Y+6, r25	; 0x06
     12a:	af 83       	std	Y+7, r26	; 0x07
     12c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     12e:	11 e0       	ldi	r17, 0x01	; 1
     130:	6d 81       	ldd	r22, Y+5	; 0x05
     132:	7e 81       	ldd	r23, Y+6	; 0x06
     134:	8f 81       	ldd	r24, Y+7	; 0x07
     136:	98 85       	ldd	r25, Y+8	; 0x08
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e8       	ldi	r20, 0x80	; 128
     13e:	5f e3       	ldi	r21, 0x3F	; 63
     140:	0e 94 fd 07 	call	0xffa	; 0xffa <__cmpsf2>
     144:	88 23       	and	r24, r24
     146:	0c f0       	brlt	.+2      	; 0x14a <RTC_init+0xa4>
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	11 23       	and	r17, r17
     14c:	29 f0       	breq	.+10     	; 0x158 <RTC_init+0xb2>
		__ticks = 1;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	9a 87       	std	Y+10, r25	; 0x0a
     154:	89 87       	std	Y+9, r24	; 0x09
     156:	46 c0       	rjmp	.+140    	; 0x1e4 <RTC_init+0x13e>
	else if (__tmp > 65535)
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	6d 81       	ldd	r22, Y+5	; 0x05
     15c:	7e 81       	ldd	r23, Y+6	; 0x06
     15e:	8f 81       	ldd	r24, Y+7	; 0x07
     160:	98 85       	ldd	r25, Y+8	; 0x08
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	3f ef       	ldi	r19, 0xFF	; 255
     166:	4f e7       	ldi	r20, 0x7F	; 127
     168:	57 e4       	ldi	r21, 0x47	; 71
     16a:	0e 94 0a 09 	call	0x1214	; 0x1214 <__gesf2>
     16e:	18 16       	cp	r1, r24
     170:	0c f0       	brlt	.+2      	; 0x174 <RTC_init+0xce>
     172:	10 e0       	ldi	r17, 0x00	; 0
     174:	11 23       	and	r17, r17
     176:	61 f1       	breq	.+88     	; 0x1d0 <RTC_init+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     178:	69 81       	ldd	r22, Y+1	; 0x01
     17a:	7a 81       	ldd	r23, Y+2	; 0x02
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	40 e2       	ldi	r20, 0x20	; 32
     186:	51 e4       	ldi	r21, 0x41	; 65
     188:	0e 94 0e 09 	call	0x121c	; 0x121c <__mulsf3>
     18c:	dc 01       	movw	r26, r24
     18e:	cb 01       	movw	r24, r22
     190:	bc 01       	movw	r22, r24
     192:	cd 01       	movw	r24, r26
     194:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fixunssfsi>
     198:	dc 01       	movw	r26, r24
     19a:	cb 01       	movw	r24, r22
     19c:	9a 87       	std	Y+10, r25	; 0x0a
     19e:	89 87       	std	Y+9, r24	; 0x09
     1a0:	12 c0       	rjmp	.+36     	; 0x1c6 <RTC_init+0x120>
     1a2:	80 e9       	ldi	r24, 0x90	; 144
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	9c 87       	std	Y+12, r25	; 0x0c
     1a8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ac:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ae:	8c 01       	movw	r16, r24
     1b0:	c8 01       	movw	r24, r16
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <RTC_init+0x10c>
     1b6:	8c 01       	movw	r16, r24
     1b8:	1c 87       	std	Y+12, r17	; 0x0c
     1ba:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1bc:	89 85       	ldd	r24, Y+9	; 0x09
     1be:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	9a 87       	std	Y+10, r25	; 0x0a
     1c4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1c6:	89 85       	ldd	r24, Y+9	; 0x09
     1c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ca:	00 97       	sbiw	r24, 0x00	; 0
     1cc:	51 f7       	brne	.-44     	; 0x1a2 <RTC_init+0xfc>
     1ce:	17 c0       	rjmp	.+46     	; 0x1fe <RTC_init+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1d0:	6d 81       	ldd	r22, Y+5	; 0x05
     1d2:	7e 81       	ldd	r23, Y+6	; 0x06
     1d4:	8f 81       	ldd	r24, Y+7	; 0x07
     1d6:	98 85       	ldd	r25, Y+8	; 0x08
     1d8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fixunssfsi>
     1dc:	dc 01       	movw	r26, r24
     1de:	cb 01       	movw	r24, r22
     1e0:	9a 87       	std	Y+10, r25	; 0x0a
     1e2:	89 87       	std	Y+9, r24	; 0x09
     1e4:	89 85       	ldd	r24, Y+9	; 0x09
     1e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1e8:	9e 87       	std	Y+14, r25	; 0x0e
     1ea:	8d 87       	std	Y+13, r24	; 0x0d
     1ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f0:	8c 01       	movw	r16, r24
     1f2:	f8 01       	movw	r30, r16
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <RTC_init+0x14e>
     1f8:	8f 01       	movw	r16, r30
     1fa:	1e 87       	std	Y+14, r17	; 0x0e
     1fc:	0d 87       	std	Y+13, r16	; 0x0d
	  _delay_ms(10);
}
     1fe:	2e 96       	adiw	r28, 0x0e	; 14
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	cf 91       	pop	r28
     20c:	df 91       	pop	r29
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	08 95       	ret

00000214 <SetTimeDate>:

void SetTimeDate(int d, int mo, int y, int h, int mi, int s)
{ 
     214:	ef 92       	push	r14
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	a0 97       	sbiw	r28, 0x20	; 32
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	9e 8b       	std	Y+22, r25	; 0x16
     232:	8d 8b       	std	Y+21, r24	; 0x15
     234:	78 8f       	std	Y+24, r23	; 0x18
     236:	6f 8b       	std	Y+23, r22	; 0x17
     238:	5a 8f       	std	Y+26, r21	; 0x1a
     23a:	49 8f       	std	Y+25, r20	; 0x19
     23c:	3c 8f       	std	Y+28, r19	; 0x1c
     23e:	2b 8f       	std	Y+27, r18	; 0x1b
     240:	1e 8f       	std	Y+30, r17	; 0x1e
     242:	0d 8f       	std	Y+29, r16	; 0x1d
     244:	f8 a2       	std	Y+32, r15	; 0x20
     246:	ef 8e       	std	Y+31, r14	; 0x1f
	int TimeDate [7]={s,mi,h,0,d,mo,y};
     248:	8f 8d       	ldd	r24, Y+31	; 0x1f
     24a:	98 a1       	ldd	r25, Y+32	; 0x20
     24c:	98 87       	std	Y+8, r25	; 0x08
     24e:	8f 83       	std	Y+7, r24	; 0x07
     250:	8d 8d       	ldd	r24, Y+29	; 0x1d
     252:	9e 8d       	ldd	r25, Y+30	; 0x1e
     254:	9a 87       	std	Y+10, r25	; 0x0a
     256:	89 87       	std	Y+9, r24	; 0x09
     258:	8b 8d       	ldd	r24, Y+27	; 0x1b
     25a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     25c:	9c 87       	std	Y+12, r25	; 0x0c
     25e:	8b 87       	std	Y+11, r24	; 0x0b
     260:	1e 86       	std	Y+14, r1	; 0x0e
     262:	1d 86       	std	Y+13, r1	; 0x0d
     264:	8d 89       	ldd	r24, Y+21	; 0x15
     266:	9e 89       	ldd	r25, Y+22	; 0x16
     268:	98 8b       	std	Y+16, r25	; 0x10
     26a:	8f 87       	std	Y+15, r24	; 0x0f
     26c:	8f 89       	ldd	r24, Y+23	; 0x17
     26e:	98 8d       	ldd	r25, Y+24	; 0x18
     270:	9a 8b       	std	Y+18, r25	; 0x12
     272:	89 8b       	std	Y+17, r24	; 0x11
     274:	89 8d       	ldd	r24, Y+25	; 0x19
     276:	9a 8d       	ldd	r25, Y+26	; 0x1a
     278:	9c 8b       	std	Y+20, r25	; 0x14
     27a:	8b 8b       	std	Y+19, r24	; 0x13
	for(int i=0; i<=6;i++)
     27c:	1a 82       	std	Y+2, r1	; 0x02
     27e:	19 82       	std	Y+1, r1	; 0x01
     280:	9a c0       	rjmp	.+308    	; 0x3b6 <SetTimeDate+0x1a2>
	{
		if(i==3)
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	83 30       	cpi	r24, 0x03	; 3
     288:	91 05       	cpc	r25, r1
     28a:	29 f4       	brne	.+10     	; 0x296 <SetTimeDate+0x82>
			i++;
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	9a 81       	ldd	r25, Y+2	; 0x02
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
		
		int b= TimeDate[i]/10;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	9e 01       	movw	r18, r28
     2a0:	2f 5f       	subi	r18, 0xFF	; 255
     2a2:	3f 4f       	sbci	r19, 0xFF	; 255
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
     2a8:	06 96       	adiw	r24, 0x06	; 6
     2aa:	fc 01       	movw	r30, r24
     2ac:	80 81       	ld	r24, Z
     2ae:	91 81       	ldd	r25, Z+1	; 0x01
     2b0:	2a e0       	ldi	r18, 0x0A	; 10
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	b9 01       	movw	r22, r18
     2b6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__divmodhi4>
     2ba:	9b 01       	movw	r18, r22
     2bc:	3c 83       	std	Y+4, r19	; 0x04
     2be:	2b 83       	std	Y+3, r18	; 0x03
		int a= TimeDate[i]-b*10;
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	9e 01       	movw	r18, r28
     2ca:	2f 5f       	subi	r18, 0xFF	; 255
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
     2ce:	82 0f       	add	r24, r18
     2d0:	93 1f       	adc	r25, r19
     2d2:	06 96       	adiw	r24, 0x06	; 6
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 81       	ld	r18, Z
     2d8:	31 81       	ldd	r19, Z+1	; 0x01
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	9c 81       	ldd	r25, Y+4	; 0x04
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	ac 01       	movw	r20, r24
     2e4:	44 0f       	add	r20, r20
     2e6:	55 1f       	adc	r21, r21
     2e8:	44 0f       	add	r20, r20
     2ea:	55 1f       	adc	r21, r21
     2ec:	84 0f       	add	r24, r20
     2ee:	95 1f       	adc	r25, r21
     2f0:	90 95       	com	r25
     2f2:	81 95       	neg	r24
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	82 0f       	add	r24, r18
     2f8:	93 1f       	adc	r25, r19
     2fa:	9e 83       	std	Y+6, r25	; 0x06
     2fc:	8d 83       	std	Y+5, r24	; 0x05
		
		if(i==2)
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	9a 81       	ldd	r25, Y+2	; 0x02
     302:	82 30       	cpi	r24, 0x02	; 2
     304:	91 05       	cpc	r25, r1
     306:	99 f4       	brne	.+38     	; 0x32e <SetTimeDate+0x11a>
		{
			if (b==2)
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	91 05       	cpc	r25, r1
     310:	29 f4       	brne	.+10     	; 0x31c <SetTimeDate+0x108>
				b=0b00000010;
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	9c 83       	std	Y+4, r25	; 0x04
     318:	8b 83       	std	Y+3, r24	; 0x03
     31a:	09 c0       	rjmp	.+18     	; 0x32e <SetTimeDate+0x11a>
			else if (b==1)
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	9c 81       	ldd	r25, Y+4	; 0x04
     320:	81 30       	cpi	r24, 0x01	; 1
     322:	91 05       	cpc	r25, r1
     324:	21 f4       	brne	.+8      	; 0x32e <SetTimeDate+0x11a>
				b=0b00000001;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	9c 83       	std	Y+4, r25	; 0x04
     32c:	8b 83       	std	Y+3, r24	; 0x03
		}	
		TimeDate[i]= a+(b<<4);
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	9c 01       	movw	r18, r24
     334:	22 95       	swap	r18
     336:	32 95       	swap	r19
     338:	30 7f       	andi	r19, 0xF0	; 240
     33a:	32 27       	eor	r19, r18
     33c:	20 7f       	andi	r18, 0xF0	; 240
     33e:	32 27       	eor	r19, r18
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	9e 81       	ldd	r25, Y+6	; 0x06
     344:	28 0f       	add	r18, r24
     346:	39 1f       	adc	r19, r25
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	ae 01       	movw	r20, r28
     352:	4f 5f       	subi	r20, 0xFF	; 255
     354:	5f 4f       	sbci	r21, 0xFF	; 255
     356:	84 0f       	add	r24, r20
     358:	95 1f       	adc	r25, r21
     35a:	06 96       	adiw	r24, 0x06	; 6
     35c:	fc 01       	movw	r30, r24
     35e:	31 83       	std	Z+1, r19	; 0x01
     360:	20 83       	st	Z, r18
		
		PORTD &= ~(1 << PORTD5);
     362:	8b e2       	ldi	r24, 0x2B	; 43
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2b e2       	ldi	r18, 0x2B	; 43
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	f9 01       	movw	r30, r18
     36c:	20 81       	ld	r18, Z
     36e:	2f 7d       	andi	r18, 0xDF	; 223
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
		send_spi(i+0x80);
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	80 58       	subi	r24, 0x80	; 128
     378:	0e 94 64 04 	call	0x8c8	; 0x8c8 <send_spi>
		send_spi((uint8_t)TimeDate[i]);
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	9a 81       	ldd	r25, Y+2	; 0x02
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	9e 01       	movw	r18, r28
     386:	2f 5f       	subi	r18, 0xFF	; 255
     388:	3f 4f       	sbci	r19, 0xFF	; 255
     38a:	82 0f       	add	r24, r18
     38c:	93 1f       	adc	r25, r19
     38e:	06 96       	adiw	r24, 0x06	; 6
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	91 81       	ldd	r25, Z+1	; 0x01
     396:	0e 94 64 04 	call	0x8c8	; 0x8c8 <send_spi>
		PORTD |= (1 << PORTD5);
     39a:	8b e2       	ldi	r24, 0x2B	; 43
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	2b e2       	ldi	r18, 0x2B	; 43
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	20 62       	ori	r18, 0x20	; 32
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
}

void SetTimeDate(int d, int mo, int y, int h, int mi, int s)
{ 
	int TimeDate [7]={s,mi,h,0,d,mo,y};
	for(int i=0; i<=6;i++)
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	9a 83       	std	Y+2, r25	; 0x02
     3b4:	89 83       	std	Y+1, r24	; 0x01
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ba:	87 30       	cpi	r24, 0x07	; 7
     3bc:	91 05       	cpc	r25, r1
     3be:	0c f4       	brge	.+2      	; 0x3c2 <SetTimeDate+0x1ae>
     3c0:	60 cf       	rjmp	.-320    	; 0x282 <SetTimeDate+0x6e>
		PORTD &= ~(1 << PORTD5);
		send_spi(i+0x80);
		send_spi((uint8_t)TimeDate[i]);
		PORTD |= (1 << PORTD5);
	}
}
     3c2:	a0 96       	adiw	r28, 0x20	; 32
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	cf 91       	pop	r28
     3d0:	df 91       	pop	r29
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	08 95       	ret

000003dc <ReadTimeDate>:

char* ReadTimeDate()
{
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	6f 97       	sbiw	r28, 0x1f	; 31
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
	char * temp = "";
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	9e 83       	std	Y+6, r25	; 0x06
     3f6:	8d 83       	std	Y+5, r24	; 0x05
	int TimeDate [7]; //second,minute,hour,null,day,month,year
	//int TimeDate[7] = {1,2,3,4,5,6,7};
	for(int i=0; i<=6;i++)
     3f8:	1a 82       	std	Y+2, r1	; 0x02
     3fa:	19 82       	std	Y+1, r1	; 0x01
     3fc:	21 c1       	rjmp	.+578    	; 0x640 <ReadTimeDate+0x264>
	{
		if(i==3)
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	91 05       	cpc	r25, r1
     406:	29 f4       	brne	.+10     	; 0x412 <ReadTimeDate+0x36>
			i++;
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	9a 83       	std	Y+2, r25	; 0x02
     410:	89 83       	std	Y+1, r24	; 0x01
		PORTD &= ~(1 << PORTD5);
     412:	8b e2       	ldi	r24, 0x2B	; 43
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	2b e2       	ldi	r18, 0x2B	; 43
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	f9 01       	movw	r30, r18
     41c:	20 81       	ld	r18, Z
     41e:	2f 7d       	andi	r18, 0xDF	; 223
     420:	fc 01       	movw	r30, r24
     422:	20 83       	st	Z, r18
		send_spi(i+0x00); 
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	0e 94 64 04 	call	0x8c8	; 0x8c8 <send_spi>
		uint8_t n = send_spi(0x00);
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <send_spi>
     430:	8f 83       	std	Y+7, r24	; 0x07
		PORTD |= (1 << PORTD5);
     432:	8b e2       	ldi	r24, 0x2B	; 43
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	2b e2       	ldi	r18, 0x2B	; 43
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	f9 01       	movw	r30, r18
     43c:	20 81       	ld	r18, Z
     43e:	20 62       	ori	r18, 0x20	; 32
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
		int a=n & 0b00001111;    
     444:	8f 81       	ldd	r24, Y+7	; 0x07
     446:	88 2f       	mov	r24, r24
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	8f 70       	andi	r24, 0x0F	; 15
     44c:	90 70       	andi	r25, 0x00	; 0
     44e:	99 87       	std	Y+9, r25	; 0x09
     450:	88 87       	std	Y+8, r24	; 0x08
		if(i==2)
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	9a 81       	ldd	r25, Y+2	; 0x02
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	91 05       	cpc	r25, r1
     45a:	b1 f5       	brne	.+108    	; 0x4c8 <ReadTimeDate+0xec>
		{	
			int b=(n & 0b00110000)>>4; //24 hour mode
     45c:	8f 81       	ldd	r24, Y+7	; 0x07
     45e:	88 2f       	mov	r24, r24
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	80 73       	andi	r24, 0x30	; 48
     464:	90 70       	andi	r25, 0x00	; 0
     466:	95 95       	asr	r25
     468:	87 95       	ror	r24
     46a:	95 95       	asr	r25
     46c:	87 95       	ror	r24
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	95 95       	asr	r25
     474:	87 95       	ror	r24
     476:	9c 83       	std	Y+4, r25	; 0x04
     478:	8b 83       	std	Y+3, r24	; 0x03
			if(b==0b00000010)
     47a:	8b 81       	ldd	r24, Y+3	; 0x03
     47c:	9c 81       	ldd	r25, Y+4	; 0x04
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	91 05       	cpc	r25, r1
     482:	29 f4       	brne	.+10     	; 0x48e <ReadTimeDate+0xb2>
				b=20;        
     484:	84 e1       	ldi	r24, 0x14	; 20
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	9c 83       	std	Y+4, r25	; 0x04
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	09 c0       	rjmp	.+18     	; 0x4a0 <ReadTimeDate+0xc4>
			else if(b==0b00000001)
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	9c 81       	ldd	r25, Y+4	; 0x04
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	91 05       	cpc	r25, r1
     496:	21 f4       	brne	.+8      	; 0x4a0 <ReadTimeDate+0xc4>
				b=10;
     498:	8a e0       	ldi	r24, 0x0A	; 10
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9c 83       	std	Y+4, r25	; 0x04
     49e:	8b 83       	std	Y+3, r24	; 0x03
			TimeDate[i]=a+b;
     4a0:	28 85       	ldd	r18, Y+8	; 0x08
     4a2:	39 85       	ldd	r19, Y+9	; 0x09
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	9c 81       	ldd	r25, Y+4	; 0x04
     4a8:	28 0f       	add	r18, r24
     4aa:	39 1f       	adc	r19, r25
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	ae 01       	movw	r20, r28
     4b6:	4f 5f       	subi	r20, 0xFF	; 255
     4b8:	5f 4f       	sbci	r21, 0xFF	; 255
     4ba:	84 0f       	add	r24, r20
     4bc:	95 1f       	adc	r25, r21
     4be:	41 96       	adiw	r24, 0x11	; 17
     4c0:	fc 01       	movw	r30, r24
     4c2:	31 83       	std	Z+1, r19	; 0x01
     4c4:	20 83       	st	Z, r18
     4c6:	b7 c0       	rjmp	.+366    	; 0x636 <ReadTimeDate+0x25a>
		}
		else if(i==4)
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	91 05       	cpc	r25, r1
     4d0:	61 f5       	brne	.+88     	; 0x52a <ReadTimeDate+0x14e>
		{
			int b=(n & 0b00110000)>>4;
     4d2:	8f 81       	ldd	r24, Y+7	; 0x07
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	80 73       	andi	r24, 0x30	; 48
     4da:	90 70       	andi	r25, 0x00	; 0
     4dc:	95 95       	asr	r25
     4de:	87 95       	ror	r24
     4e0:	95 95       	asr	r25
     4e2:	87 95       	ror	r24
     4e4:	95 95       	asr	r25
     4e6:	87 95       	ror	r24
     4e8:	95 95       	asr	r25
     4ea:	87 95       	ror	r24
     4ec:	9b 87       	std	Y+11, r25	; 0x0b
     4ee:	8a 87       	std	Y+10, r24	; 0x0a
			TimeDate[i]=a+b*10;
     4f0:	8a 85       	ldd	r24, Y+10	; 0x0a
     4f2:	9b 85       	ldd	r25, Y+11	; 0x0b
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	9c 01       	movw	r18, r24
     4fa:	22 0f       	add	r18, r18
     4fc:	33 1f       	adc	r19, r19
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	28 0f       	add	r18, r24
     504:	39 1f       	adc	r19, r25
     506:	88 85       	ldd	r24, Y+8	; 0x08
     508:	99 85       	ldd	r25, Y+9	; 0x09
     50a:	28 0f       	add	r18, r24
     50c:	39 1f       	adc	r19, r25
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	ae 01       	movw	r20, r28
     518:	4f 5f       	subi	r20, 0xFF	; 255
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	84 0f       	add	r24, r20
     51e:	95 1f       	adc	r25, r21
     520:	41 96       	adiw	r24, 0x11	; 17
     522:	fc 01       	movw	r30, r24
     524:	31 83       	std	Z+1, r19	; 0x01
     526:	20 83       	st	Z, r18
     528:	86 c0       	rjmp	.+268    	; 0x636 <ReadTimeDate+0x25a>
		}
		else if(i==5)
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	85 30       	cpi	r24, 0x05	; 5
     530:	91 05       	cpc	r25, r1
     532:	61 f5       	brne	.+88     	; 0x58c <ReadTimeDate+0x1b0>
		{
			int b=(n & 0b00010000)>>4;
     534:	8f 81       	ldd	r24, Y+7	; 0x07
     536:	88 2f       	mov	r24, r24
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	80 71       	andi	r24, 0x10	; 16
     53c:	90 70       	andi	r25, 0x00	; 0
     53e:	95 95       	asr	r25
     540:	87 95       	ror	r24
     542:	95 95       	asr	r25
     544:	87 95       	ror	r24
     546:	95 95       	asr	r25
     548:	87 95       	ror	r24
     54a:	95 95       	asr	r25
     54c:	87 95       	ror	r24
     54e:	9d 87       	std	Y+13, r25	; 0x0d
     550:	8c 87       	std	Y+12, r24	; 0x0c
			TimeDate[i]=a+b*10;
     552:	8c 85       	ldd	r24, Y+12	; 0x0c
     554:	9d 85       	ldd	r25, Y+13	; 0x0d
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	9c 01       	movw	r18, r24
     55c:	22 0f       	add	r18, r18
     55e:	33 1f       	adc	r19, r19
     560:	22 0f       	add	r18, r18
     562:	33 1f       	adc	r19, r19
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	88 85       	ldd	r24, Y+8	; 0x08
     56a:	99 85       	ldd	r25, Y+9	; 0x09
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	9a 81       	ldd	r25, Y+2	; 0x02
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	ae 01       	movw	r20, r28
     57a:	4f 5f       	subi	r20, 0xFF	; 255
     57c:	5f 4f       	sbci	r21, 0xFF	; 255
     57e:	84 0f       	add	r24, r20
     580:	95 1f       	adc	r25, r21
     582:	41 96       	adiw	r24, 0x11	; 17
     584:	fc 01       	movw	r30, r24
     586:	31 83       	std	Z+1, r19	; 0x01
     588:	20 83       	st	Z, r18
     58a:	55 c0       	rjmp	.+170    	; 0x636 <ReadTimeDate+0x25a>
		}
		else if(i==6)
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	86 30       	cpi	r24, 0x06	; 6
     592:	91 05       	cpc	r25, r1
     594:	29 f5       	brne	.+74     	; 0x5e0 <ReadTimeDate+0x204>
		{
			int b=(n & 0b11110000)>>4;
     596:	8f 81       	ldd	r24, Y+7	; 0x07
     598:	82 95       	swap	r24
     59a:	8f 70       	andi	r24, 0x0F	; 15
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	90 70       	andi	r25, 0x00	; 0
     5a2:	9f 87       	std	Y+15, r25	; 0x0f
     5a4:	8e 87       	std	Y+14, r24	; 0x0e
			TimeDate[i]=a+b*10;
     5a6:	8e 85       	ldd	r24, Y+14	; 0x0e
     5a8:	9f 85       	ldd	r25, Y+15	; 0x0f
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	9c 01       	movw	r18, r24
     5b0:	22 0f       	add	r18, r18
     5b2:	33 1f       	adc	r19, r19
     5b4:	22 0f       	add	r18, r18
     5b6:	33 1f       	adc	r19, r19
     5b8:	28 0f       	add	r18, r24
     5ba:	39 1f       	adc	r19, r25
     5bc:	88 85       	ldd	r24, Y+8	; 0x08
     5be:	99 85       	ldd	r25, Y+9	; 0x09
     5c0:	28 0f       	add	r18, r24
     5c2:	39 1f       	adc	r19, r25
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	9a 81       	ldd	r25, Y+2	; 0x02
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	ae 01       	movw	r20, r28
     5ce:	4f 5f       	subi	r20, 0xFF	; 255
     5d0:	5f 4f       	sbci	r21, 0xFF	; 255
     5d2:	84 0f       	add	r24, r20
     5d4:	95 1f       	adc	r25, r21
     5d6:	41 96       	adiw	r24, 0x11	; 17
     5d8:	fc 01       	movw	r30, r24
     5da:	31 83       	std	Z+1, r19	; 0x01
     5dc:	20 83       	st	Z, r18
     5de:	2b c0       	rjmp	.+86     	; 0x636 <ReadTimeDate+0x25a>
		}
		else
		{	
			int b=(n & 0b01110000)>>4;
     5e0:	8f 81       	ldd	r24, Y+7	; 0x07
     5e2:	88 2f       	mov	r24, r24
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	80 77       	andi	r24, 0x70	; 112
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	95 95       	asr	r25
     5ec:	87 95       	ror	r24
     5ee:	95 95       	asr	r25
     5f0:	87 95       	ror	r24
     5f2:	95 95       	asr	r25
     5f4:	87 95       	ror	r24
     5f6:	95 95       	asr	r25
     5f8:	87 95       	ror	r24
     5fa:	99 8b       	std	Y+17, r25	; 0x11
     5fc:	88 8b       	std	Y+16, r24	; 0x10
			TimeDate[i]=a+b*10;	
     5fe:	88 89       	ldd	r24, Y+16	; 0x10
     600:	99 89       	ldd	r25, Y+17	; 0x11
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	9c 01       	movw	r18, r24
     608:	22 0f       	add	r18, r18
     60a:	33 1f       	adc	r19, r19
     60c:	22 0f       	add	r18, r18
     60e:	33 1f       	adc	r19, r19
     610:	28 0f       	add	r18, r24
     612:	39 1f       	adc	r19, r25
     614:	88 85       	ldd	r24, Y+8	; 0x08
     616:	99 85       	ldd	r25, Y+9	; 0x09
     618:	28 0f       	add	r18, r24
     61a:	39 1f       	adc	r19, r25
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	ae 01       	movw	r20, r28
     626:	4f 5f       	subi	r20, 0xFF	; 255
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	84 0f       	add	r24, r20
     62c:	95 1f       	adc	r25, r21
     62e:	41 96       	adiw	r24, 0x11	; 17
     630:	fc 01       	movw	r30, r24
     632:	31 83       	std	Z+1, r19	; 0x01
     634:	20 83       	st	Z, r18
char* ReadTimeDate()
{
	char * temp = "";
	int TimeDate [7]; //second,minute,hour,null,day,month,year
	//int TimeDate[7] = {1,2,3,4,5,6,7};
	for(int i=0; i<=6;i++)
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	9a 83       	std	Y+2, r25	; 0x02
     63e:	89 83       	std	Y+1, r24	; 0x01
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	9a 81       	ldd	r25, Y+2	; 0x02
     644:	87 30       	cpi	r24, 0x07	; 7
     646:	91 05       	cpc	r25, r1
     648:	0c f4       	brge	.+2      	; 0x64c <ReadTimeDate+0x270>
     64a:	d9 ce       	rjmp	.-590    	; 0x3fe <ReadTimeDate+0x22>
		{	
			int b=(n & 0b01110000)>>4;
			TimeDate[i]=a+b*10;	
		}
	}
	strcat(temp, (const char*)TimeDate[4]);
     64c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     64e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     650:	9c 01       	movw	r18, r24
     652:	8d 81       	ldd	r24, Y+5	; 0x05
     654:	9e 81       	ldd	r25, Y+6	; 0x06
     656:	b9 01       	movw	r22, r18
     658:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcat>
	strcat(temp, "/");
     65c:	8d 81       	ldd	r24, Y+5	; 0x05
     65e:	9e 81       	ldd	r25, Y+6	; 0x06
     660:	0e 94 ce 09 	call	0x139c	; 0x139c <strlen>
     664:	2d 81       	ldd	r18, Y+5	; 0x05
     666:	3e 81       	ldd	r19, Y+6	; 0x06
     668:	82 0f       	add	r24, r18
     66a:	93 1f       	adc	r25, r19
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	31 e0       	ldi	r19, 0x01	; 1
     670:	b9 01       	movw	r22, r18
     672:	42 e0       	ldi	r20, 0x02	; 2
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	0e 94 ba 09 	call	0x1374	; 0x1374 <memcpy>
	strcat(temp, (const char*)TimeDate[5]);
     67a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     67c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     67e:	9c 01       	movw	r18, r24
     680:	8d 81       	ldd	r24, Y+5	; 0x05
     682:	9e 81       	ldd	r25, Y+6	; 0x06
     684:	b9 01       	movw	r22, r18
     686:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcat>
	strcat(temp, "/");
     68a:	8d 81       	ldd	r24, Y+5	; 0x05
     68c:	9e 81       	ldd	r25, Y+6	; 0x06
     68e:	0e 94 ce 09 	call	0x139c	; 0x139c <strlen>
     692:	2d 81       	ldd	r18, Y+5	; 0x05
     694:	3e 81       	ldd	r19, Y+6	; 0x06
     696:	82 0f       	add	r24, r18
     698:	93 1f       	adc	r25, r19
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	31 e0       	ldi	r19, 0x01	; 1
     69e:	b9 01       	movw	r22, r18
     6a0:	42 e0       	ldi	r20, 0x02	; 2
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	0e 94 ba 09 	call	0x1374	; 0x1374 <memcpy>
	strcat(temp, (const char*)TimeDate[6]);
     6a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6ac:	9c 01       	movw	r18, r24
     6ae:	8d 81       	ldd	r24, Y+5	; 0x05
     6b0:	9e 81       	ldd	r25, Y+6	; 0x06
     6b2:	b9 01       	movw	r22, r18
     6b4:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcat>
	strcat(temp, "     ");
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	9e 81       	ldd	r25, Y+6	; 0x06
     6bc:	0e 94 ce 09 	call	0x139c	; 0x139c <strlen>
     6c0:	2d 81       	ldd	r18, Y+5	; 0x05
     6c2:	3e 81       	ldd	r19, Y+6	; 0x06
     6c4:	82 0f       	add	r24, r18
     6c6:	93 1f       	adc	r25, r19
     6c8:	23 e0       	ldi	r18, 0x03	; 3
     6ca:	31 e0       	ldi	r19, 0x01	; 1
     6cc:	b9 01       	movw	r22, r18
     6ce:	46 e0       	ldi	r20, 0x06	; 6
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	0e 94 ba 09 	call	0x1374	; 0x1374 <memcpy>
	strcat(temp, (const char*)TimeDate[4]);
     6d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6da:	9c 01       	movw	r18, r24
     6dc:	8d 81       	ldd	r24, Y+5	; 0x05
     6de:	9e 81       	ldd	r25, Y+6	; 0x06
     6e0:	b9 01       	movw	r22, r18
     6e2:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcat>
	strcat(temp, ":");
     6e6:	8d 81       	ldd	r24, Y+5	; 0x05
     6e8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ea:	0e 94 ce 09 	call	0x139c	; 0x139c <strlen>
     6ee:	2d 81       	ldd	r18, Y+5	; 0x05
     6f0:	3e 81       	ldd	r19, Y+6	; 0x06
     6f2:	82 0f       	add	r24, r18
     6f4:	93 1f       	adc	r25, r19
     6f6:	29 e0       	ldi	r18, 0x09	; 9
     6f8:	31 e0       	ldi	r19, 0x01	; 1
     6fa:	b9 01       	movw	r22, r18
     6fc:	42 e0       	ldi	r20, 0x02	; 2
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	0e 94 ba 09 	call	0x1374	; 0x1374 <memcpy>
	strcat(temp, (const char*)TimeDate[1]);
     704:	8c 89       	ldd	r24, Y+20	; 0x14
     706:	9d 89       	ldd	r25, Y+21	; 0x15
     708:	9c 01       	movw	r18, r24
     70a:	8d 81       	ldd	r24, Y+5	; 0x05
     70c:	9e 81       	ldd	r25, Y+6	; 0x06
     70e:	b9 01       	movw	r22, r18
     710:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcat>
	strcat(temp, ":");
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	9e 81       	ldd	r25, Y+6	; 0x06
     718:	0e 94 ce 09 	call	0x139c	; 0x139c <strlen>
     71c:	2d 81       	ldd	r18, Y+5	; 0x05
     71e:	3e 81       	ldd	r19, Y+6	; 0x06
     720:	82 0f       	add	r24, r18
     722:	93 1f       	adc	r25, r19
     724:	29 e0       	ldi	r18, 0x09	; 9
     726:	31 e0       	ldi	r19, 0x01	; 1
     728:	b9 01       	movw	r22, r18
     72a:	42 e0       	ldi	r20, 0x02	; 2
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	0e 94 ba 09 	call	0x1374	; 0x1374 <memcpy>
	strcat(temp, (const char*)TimeDate[0]);
     732:	8a 89       	ldd	r24, Y+18	; 0x12
     734:	9b 89       	ldd	r25, Y+19	; 0x13
     736:	9c 01       	movw	r18, r24
     738:	8d 81       	ldd	r24, Y+5	; 0x05
     73a:	9e 81       	ldd	r25, Y+6	; 0x06
     73c:	b9 01       	movw	r22, r18
     73e:	0e 94 c3 09 	call	0x1386	; 0x1386 <strcat>
	
	return temp;
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	9e 81       	ldd	r25, Y+6	; 0x06
}
     746:	6f 96       	adiw	r28, 0x1f	; 31
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	cf 91       	pop	r28
     754:	df 91       	pop	r29
     756:	08 95       	ret

00000758 <setup_spi>:
#ifdef __ARDUINO__
#include <wiring.h>
#endif

void setup_spi(uint8_t mode, int dord, int interrupt, uint8_t clock)
{
     758:	df 93       	push	r29
     75a:	cf 93       	push	r28
     75c:	00 d0       	rcall	.+0      	; 0x75e <setup_spi+0x6>
     75e:	00 d0       	rcall	.+0      	; 0x760 <setup_spi+0x8>
     760:	00 d0       	rcall	.+0      	; 0x762 <setup_spi+0xa>
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	89 83       	std	Y+1, r24	; 0x01
     768:	7b 83       	std	Y+3, r23	; 0x03
     76a:	6a 83       	std	Y+2, r22	; 0x02
     76c:	5d 83       	std	Y+5, r21	; 0x05
     76e:	4c 83       	std	Y+4, r20	; 0x04
     770:	2e 83       	std	Y+6, r18	; 0x06
  // specify pin directions for SPI pins on port B
	if (clock == SPI_SLAVE) // if slave SS and SCK is input
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	80 3f       	cpi	r24, 0xF0	; 240
     776:	29 f5       	brne	.+74     	; 0x7c2 <setup_spi+0x6a>
	{ 
		DDRB &= ~(1<<SPI_MOSI_PIN); // input
     778:	84 e2       	ldi	r24, 0x24	; 36
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	24 e2       	ldi	r18, 0x24	; 36
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	27 7f       	andi	r18, 0xF7	; 247
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
		DDRB |= (1<<SPI_MISO_PIN); // output
     78a:	84 e2       	ldi	r24, 0x24	; 36
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	24 e2       	ldi	r18, 0x24	; 36
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	f9 01       	movw	r30, r18
     794:	20 81       	ld	r18, Z
     796:	20 61       	ori	r18, 0x10	; 16
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
		DDRD &= ~(1<<SPI_SS_PIN); // input
     79c:	8a e2       	ldi	r24, 0x2A	; 42
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	2a e2       	ldi	r18, 0x2A	; 42
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	2f 7d       	andi	r18, 0xDF	; 223
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
		DDRB &= ~(1<<SPI_SCK_PIN);// input
     7ae:	84 e2       	ldi	r24, 0x24	; 36
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	24 e2       	ldi	r18, 0x24	; 36
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	2f 7d       	andi	r18, 0xDF	; 223
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
     7c0:	24 c0       	rjmp	.+72     	; 0x80a <setup_spi+0xb2>
	} 
	else 
	{
		DDRB |= (1<<SPI_MOSI_PIN); // output
     7c2:	84 e2       	ldi	r24, 0x24	; 36
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	24 e2       	ldi	r18, 0x24	; 36
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	20 81       	ld	r18, Z
     7ce:	28 60       	ori	r18, 0x08	; 8
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
		DDRB &= ~(1<<SPI_MISO_PIN); // input
     7d4:	84 e2       	ldi	r24, 0x24	; 36
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	24 e2       	ldi	r18, 0x24	; 36
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	20 81       	ld	r18, Z
     7e0:	2f 7e       	andi	r18, 0xEF	; 239
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
		DDRB |= (1<<SPI_SCK_PIN);// output
     7e6:	84 e2       	ldi	r24, 0x24	; 36
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	24 e2       	ldi	r18, 0x24	; 36
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	20 81       	ld	r18, Z
     7f2:	20 62       	ori	r18, 0x20	; 32
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
		DDRD |= (1<<SPI_SS_PIN);// output
     7f8:	8a e2       	ldi	r24, 0x2A	; 42
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	2a e2       	ldi	r18, 0x2A	; 42
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	f9 01       	movw	r30, r18
     802:	20 81       	ld	r18, Z
     804:	20 62       	ori	r18, 0x20	; 32
     806:	fc 01       	movw	r30, r24
     808:	20 83       	st	Z, r18
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     80a:	8c e4       	ldi	r24, 0x4C	; 76
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	2c 81       	ldd	r18, Y+4	; 0x04
     810:	3d 81       	ldd	r19, Y+5	; 0x05
     812:	21 15       	cp	r18, r1
     814:	31 05       	cpc	r19, r1
     816:	11 f0       	breq	.+4      	; 0x81c <setup_spi+0xc4>
     818:	40 ec       	ldi	r20, 0xC0	; 192
     81a:	01 c0       	rjmp	.+2      	; 0x81e <setup_spi+0xc6>
     81c:	40 e4       	ldi	r20, 0x40	; 64
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
     81e:	2a 81       	ldd	r18, Y+2	; 0x02
     820:	3b 81       	ldd	r19, Y+3	; 0x03
     822:	22 0f       	add	r18, r18
     824:	33 1f       	adc	r19, r19
     826:	22 95       	swap	r18
     828:	32 95       	swap	r19
     82a:	30 7f       	andi	r19, 0xF0	; 240
     82c:	32 27       	eor	r19, r18
     82e:	20 7f       	andi	r18, 0xF0	; 240
     830:	32 27       	eor	r19, r18
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     832:	34 2f       	mov	r19, r20
     834:	32 2b       	or	r19, r18
     836:	2e 81       	ldd	r18, Y+6	; 0x06
     838:	20 3f       	cpi	r18, 0xF0	; 240
     83a:	11 f0       	breq	.+4      	; 0x840 <setup_spi+0xe8>
     83c:	20 e1       	ldi	r18, 0x10	; 16
     83e:	01 c0       	rjmp	.+2      	; 0x842 <setup_spi+0xea>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	43 2f       	mov	r20, r19
     844:	42 2b       	or	r20, r18
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
     846:	29 81       	ldd	r18, Y+1	; 0x01
     848:	22 2f       	mov	r18, r18
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	22 70       	andi	r18, 0x02	; 2
     84e:	30 70       	andi	r19, 0x00	; 0
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     850:	21 15       	cp	r18, r1
     852:	31 05       	cpc	r19, r1
     854:	11 f0       	breq	.+4      	; 0x85a <setup_spi+0x102>
     856:	28 e0       	ldi	r18, 0x08	; 8
     858:	01 c0       	rjmp	.+2      	; 0x85c <setup_spi+0x104>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	42 2b       	or	r20, r18
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
		| (((mode & 0x01)) << CPHA) // clock timing mode CPHA
     85e:	29 81       	ldd	r18, Y+1	; 0x01
     860:	22 2f       	mov	r18, r18
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	21 70       	andi	r18, 0x01	; 1
     866:	30 70       	andi	r19, 0x00	; 0
     868:	22 0f       	add	r18, r18
     86a:	33 1f       	adc	r19, r19
     86c:	22 0f       	add	r18, r18
     86e:	33 1f       	adc	r19, r19
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     870:	34 2f       	mov	r19, r20
     872:	32 2b       	or	r19, r18
     874:	2e 81       	ldd	r18, Y+6	; 0x06
     876:	22 70       	andi	r18, 0x02	; 2
     878:	32 2b       	or	r19, r18
     87a:	2e 81       	ldd	r18, Y+6	; 0x06
     87c:	21 70       	andi	r18, 0x01	; 1
     87e:	23 2b       	or	r18, r19
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
		| (((mode & 0x01)) << CPHA) // clock timing mode CPHA
		| (((clock & 0x02) == 2) << SPR1) // cpu clock divisor SPR1
		| ((clock & 0x01) << SPR0); // cpu clock divisor SPR0
	SPSR = (((clock & 0x04) == 4) << SPI2X); // clock divisor SPI2X
     884:	8d e4       	ldi	r24, 0x4D	; 77
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	2e 81       	ldd	r18, Y+6	; 0x06
     88a:	22 2f       	mov	r18, r18
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	24 70       	andi	r18, 0x04	; 4
     890:	30 70       	andi	r19, 0x00	; 0
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	21 15       	cp	r18, r1
     896:	31 05       	cpc	r19, r1
     898:	09 f4       	brne	.+2      	; 0x89c <setup_spi+0x144>
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	fc 01       	movw	r30, r24
     89e:	40 83       	st	Z, r20
}
     8a0:	26 96       	adiw	r28, 0x06	; 6
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	08 95       	ret

000008b2 <disable_spi>:

void disable_spi()
{
     8b2:	df 93       	push	r29
     8b4:	cf 93       	push	r28
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
  SPCR = 0;
     8ba:	8c e4       	ldi	r24, 0x4C	; 76
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	fc 01       	movw	r30, r24
     8c0:	10 82       	st	Z, r1
}
     8c2:	cf 91       	pop	r28
     8c4:	df 91       	pop	r29
     8c6:	08 95       	ret

000008c8 <send_spi>:

uint8_t send_spi(uint8_t out)
{
     8c8:	df 93       	push	r29
     8ca:	cf 93       	push	r28
     8cc:	0f 92       	push	r0
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	89 83       	std	Y+1, r24	; 0x01
  SPDR = out;
     8d4:	8e e4       	ldi	r24, 0x4E	; 78
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	29 81       	ldd	r18, Y+1	; 0x01
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
  while (!(SPSR & (1<<SPIF)));
     8de:	00 00       	nop
     8e0:	8d e4       	ldi	r24, 0x4D	; 77
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	fc 01       	movw	r30, r24
     8e6:	80 81       	ld	r24, Z
     8e8:	88 23       	and	r24, r24
     8ea:	d4 f7       	brge	.-12     	; 0x8e0 <send_spi+0x18>
  return SPDR;
     8ec:	8e e4       	ldi	r24, 0x4E	; 78
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	80 81       	ld	r24, Z
}
     8f4:	0f 90       	pop	r0
     8f6:	cf 91       	pop	r28
     8f8:	df 91       	pop	r29
     8fa:	08 95       	ret

000008fc <received_from_spi>:

uint8_t received_from_spi(uint8_t data)
{
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	0f 92       	push	r0
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	89 83       	std	Y+1, r24	; 0x01
  SPDR = data;
     908:	8e e4       	ldi	r24, 0x4E	; 78
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	29 81       	ldd	r18, Y+1	; 0x01
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
  return SPDR;
     912:	8e e4       	ldi	r24, 0x4E	; 78
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
}
     91a:	0f 90       	pop	r0
     91c:	cf 91       	pop	r28
     91e:	df 91       	pop	r29
     920:	08 95       	ret

00000922 <main>:
volatile unsigned int Freq = 0;		   //Store the Frequency
char buffer[12];


int main(void)
{
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	00 d0       	rcall	.+0      	; 0x928 <main+0x6>
     928:	00 d0       	rcall	.+0      	; 0x92a <main+0x8>
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
    DDRD = (1 << PORTD5);
     92e:	8a e2       	ldi	r24, 0x2A	; 42
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	20 e2       	ldi	r18, 0x20	; 32
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
	DDRC |= (1 << PORTC0);
     938:	87 e2       	ldi	r24, 0x27	; 39
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	27 e2       	ldi	r18, 0x27	; 39
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	20 81       	ld	r18, Z
     944:	21 60       	ori	r18, 0x01	; 1
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
	PORTD |= (1 << PORTD5);
     94a:	8b e2       	ldi	r24, 0x2B	; 43
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	2b e2       	ldi	r18, 0x2B	; 43
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	20 62       	ori	r18, 0x20	; 32
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
    PORTB &= ~(1 << PORTB0);
     95c:	85 e2       	ldi	r24, 0x25	; 37
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	25 e2       	ldi	r18, 0x25	; 37
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	2e 7f       	andi	r18, 0xFE	; 254
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
    //PORTD &= (1 << PORTD6);
        
    //initTimer(65);
    //initInterrupts();
    dim = 10;
     96e:	8a e0       	ldi	r24, 0x0A	; 10
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 93 0d 01 	sts	0x010D, r25
     976:	80 93 0c 01 	sts	0x010C, r24
	//USART_Init(MYUBRR);
    //RTC_init();
	//SPI_init();
	//SetTimeDate(3,20,2012,18,00,50);
    // turn on interrupts
	PORTD |= (1 << PORTD6);
     97a:	8b e2       	ldi	r24, 0x2B	; 43
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	2b e2       	ldi	r18, 0x2B	; 43
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	f9 01       	movw	r30, r18
     984:	20 81       	ld	r18, Z
     986:	20 64       	ori	r18, 0x40	; 64
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
	//PORTC |= (1 << PORTC0);
	//_delay_ms(1000);
        
    while(1)
    {
        for( int j = 1; j < 115; ++j )
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	9a 83       	std	Y+2, r25	; 0x02
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	0b c0       	rjmp	.+22     	; 0x9ac <main+0x8a>
        {
            dim = j;
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	9a 81       	ldd	r25, Y+2	; 0x02
     99a:	90 93 0d 01 	sts	0x010D, r25
     99e:	80 93 0c 01 	sts	0x010C, r24
	//PORTC |= (1 << PORTC0);
	//_delay_ms(1000);
        
    while(1)
    {
        for( int j = 1; j < 115; ++j )
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	9a 81       	ldd	r25, Y+2	; 0x02
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	89 83       	std	Y+1, r24	; 0x01
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	83 37       	cpi	r24, 0x73	; 115
     9b2:	91 05       	cpc	r25, r1
     9b4:	84 f3       	brlt	.-32     	; 0x996 <main+0x74>
        {
            dim = j;
            //_delay_ms(40);
        }
        for( int j = 115; j > 1; --j)
     9b6:	83 e7       	ldi	r24, 0x73	; 115
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	9c 83       	std	Y+4, r25	; 0x04
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	0b c0       	rjmp	.+22     	; 0x9d6 <main+0xb4>
        {
            //PORTC &= ~(1 << PORTC0);
            dim = j;
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	90 93 0d 01 	sts	0x010D, r25
     9c8:	80 93 0c 01 	sts	0x010C, r24
        for( int j = 1; j < 115; ++j )
        {
            dim = j;
            //_delay_ms(40);
        }
        for( int j = 115; j > 1; --j)
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	9c 81       	ldd	r25, Y+4	; 0x04
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	9c 83       	std	Y+4, r25	; 0x04
     9d4:	8b 83       	std	Y+3, r24	; 0x03
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	9c 81       	ldd	r25, Y+4	; 0x04
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	91 05       	cpc	r25, r1
     9de:	84 f7       	brge	.-32     	; 0x9c0 <main+0x9e>
            //PORTC &= ~(1 << PORTC0);
            dim = j;
            //_delay_ms(40);
        }
		
		print("Hello");
     9e0:	8f e0       	ldi	r24, 0x0F	; 15
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 cc 07 	call	0xf98	; 0xf98 <print>
		//_delay_ms(1000);
		//SPI_Transmit('5');
		//_delay_ms(3000);
		print("Done");
     9e8:	85 e1       	ldi	r24, 0x15	; 21
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 cc 07 	call	0xf98	; 0xf98 <print>
    }                               
     9f0:	cd cf       	rjmp	.-102    	; 0x98c <main+0x6a>

000009f2 <initTimer>:
/*
 * Function Name:
 * Author: Chris Williams
 */
void initTimer( int dutycycle )
{
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <initTimer+0x6>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = 130; //cap of Timer0
     a00:	87 e4       	ldi	r24, 0x47	; 71
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	22 e8       	ldi	r18, 0x82	; 130
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
	OCR0B = dutycycle;  
     a0a:	88 e4       	ldi	r24, 0x48	; 72
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	29 81       	ldd	r18, Y+1	; 0x01
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
        
	 DDRD |= (1 << PORTD6);         
     a14:	8a e2       	ldi	r24, 0x2A	; 42
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	2a e2       	ldi	r18, 0x2A	; 42
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	f9 01       	movw	r30, r18
     a1e:	20 81       	ld	r18, Z
     a20:	20 64       	ori	r18, 0x40	; 64
     a22:	fc 01       	movw	r30, r24
     a24:	20 83       	st	Z, r18
        
        TCCR0A |= (1 << COM0A1);
     a26:	84 e4       	ldi	r24, 0x44	; 68
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	24 e4       	ldi	r18, 0x44	; 68
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	f9 01       	movw	r30, r18
     a30:	20 81       	ld	r18, Z
     a32:	20 68       	ori	r18, 0x80	; 128
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
    // set non-inverting mode

    TCCR0A |= (1 << WGM01);
     a38:	84 e4       	ldi	r24, 0x44	; 68
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	24 e4       	ldi	r18, 0x44	; 68
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	f9 01       	movw	r30, r18
     a42:	20 81       	ld	r18, Z
     a44:	22 60       	ori	r18, 0x02	; 2
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
    // set CTC (Clear Timer on Compare) Mode

    TCCR0B |= (1 << CS01);
     a4a:	85 e4       	ldi	r24, 0x45	; 69
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	25 e4       	ldi	r18, 0x45	; 69
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	f9 01       	movw	r30, r18
     a54:	20 81       	ld	r18, Z
     a56:	22 60       	ori	r18, 0x02	; 2
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
    // set prescaler to 8 and starts PWM
        
        TIMSK0 = (1 << OCIE0A) | (1 << TOIE0);
     a5c:	8e e6       	ldi	r24, 0x6E	; 110
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	23 e0       	ldi	r18, 0x03	; 3
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
    // set prescaler to 8 and starts PWM
        
        TIMSK0 = (1 << OCIE0B);
        //Enable COMPA
        */
}
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <initInterrupts>:


void initInterrupts()
{
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
        PORTD |= (1 << PORTD2);
     a78:	8b e2       	ldi	r24, 0x2B	; 43
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	2b e2       	ldi	r18, 0x2B	; 43
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	f9 01       	movw	r30, r18
     a82:	20 81       	ld	r18, Z
     a84:	24 60       	ori	r18, 0x04	; 4
     a86:	fc 01       	movw	r30, r24
     a88:	20 83       	st	Z, r18
        EICRA = 0b00000010;
     a8a:	89 e6       	ldi	r24, 0x69	; 105
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	22 e0       	ldi	r18, 0x02	; 2
     a90:	fc 01       	movw	r30, r24
     a92:	20 83       	st	Z, r18
        EIMSK |= (1 << INT0);
     a94:	8d e3       	ldi	r24, 0x3D	; 61
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	2d e3       	ldi	r18, 0x3D	; 61
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	f9 01       	movw	r30, r18
     a9e:	20 81       	ld	r18, Z
     aa0:	21 60       	ori	r18, 0x01	; 1
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 83       	st	Z, r18
		
		//Enables PC[23:16] and PC[7:0]
		PCICR = (1 << PCIE2) | (1 << PCIE0);
     aa6:	88 e6       	ldi	r24, 0x68	; 104
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	25 e0       	ldi	r18, 0x05	; 5
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
		PCMSK2 = (1 << PCINT20);
     ab0:	8d e6       	ldi	r24, 0x6D	; 109
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	20 e1       	ldi	r18, 0x10	; 16
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
		PCMSK0 = (1 << PCINT0);
     aba:	8b e6       	ldi	r24, 0x6B	; 107
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
}
     ac4:	cf 91       	pop	r28
     ac6:	df 91       	pop	r29
     ac8:	08 95       	ret

00000aca <getTime>:

void getTime(uint8_t * hours, uint8_t * minutes, uint8_t * seconds)
{
     aca:	df 93       	push	r29
     acc:	cf 93       	push	r28
     ace:	00 d0       	rcall	.+0      	; 0xad0 <getTime+0x6>
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <getTime+0x8>
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <getTime+0xa>
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	9a 83       	std	Y+2, r25	; 0x02
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	7c 83       	std	Y+4, r23	; 0x04
     ade:	6b 83       	std	Y+3, r22	; 0x03
     ae0:	5e 83       	std	Y+6, r21	; 0x06
     ae2:	4d 83       	std	Y+5, r20	; 0x05
	
}
     ae4:	26 96       	adiw	r28, 0x06	; 6
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	cf 91       	pop	r28
     af2:	df 91       	pop	r29
     af4:	08 95       	ret

00000af6 <__vector_18>:
/*
 * INTERRUPT SERVICE ROUTINES
 */

ISR(USART_RX_vect)
{
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
        /* Wait for data to be received */
        while ( !(UCSR0A  & (1 << RXC0)) )
     b10:	00 00       	nop
     b12:	80 ec       	ldi	r24, 0xC0	; 192
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	fc 01       	movw	r30, r24
     b18:	80 81       	ld	r24, Z
     b1a:	88 23       	and	r24, r24
     b1c:	d4 f7       	brge	.-12     	; 0xb12 <__vector_18+0x1c>
        ;
        /* Get and return received data from buffer */
        //dim = UDR0;
        rxflag = 1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 1d 01 	sts	0x011D, r24
}
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	9f 91       	pop	r25
     b2e:	8f 91       	pop	r24
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_14>:
 
 
//OLD: 2/15/2012
//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect)
{
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	2f 93       	push	r18
     b4a:	3f 93       	push	r19
     b4c:	4f 93       	push	r20
     b4e:	5f 93       	push	r21
     b50:	6f 93       	push	r22
     b52:	7f 93       	push	r23
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	af 93       	push	r26
     b5a:	bf 93       	push	r27
     b5c:	ef 93       	push	r30
     b5e:	ff 93       	push	r31
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	68 97       	sbiw	r28, 0x18	; 24
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	cd bf       	out	0x3d, r28	; 61
	
	PORTC |= (1 << PORTC0);
     b6e:	88 e2       	ldi	r24, 0x28	; 40
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	28 e2       	ldi	r18, 0x28	; 40
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	f9 01       	movw	r30, r18
     b78:	20 81       	ld	r18, Z
     b7a:	21 60       	ori	r18, 0x01	; 1
     b7c:	fc 01       	movw	r30, r24
     b7e:	20 83       	st	Z, r18
    if( zerocross == 1) 
     b80:	80 91 0e 01 	lds	r24, 0x010E
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	09 f0       	breq	.+2      	; 0xb8a <__vector_14+0x50>
     b88:	03 c1       	rjmp	.+518    	; 0xd90 <__vector_14+0x256>
    {
        if( count >= dim )
     b8a:	20 91 1b 01 	lds	r18, 0x011B
     b8e:	30 91 1c 01 	lds	r19, 0x011C
     b92:	80 91 0c 01 	lds	r24, 0x010C
     b96:	90 91 0d 01 	lds	r25, 0x010D
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <__vector_14+0x68>
     ba0:	ee c0       	rjmp	.+476    	; 0xd7e <__vector_14+0x244>
        {
            PORTD |= (1 << PORTD6);
     ba2:	8b e2       	ldi	r24, 0x2B	; 43
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	2b e2       	ldi	r18, 0x2B	; 43
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	f9 01       	movw	r30, r18
     bac:	20 81       	ld	r18, Z
     bae:	20 64       	ori	r18, 0x40	; 64
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 ea       	ldi	r26, 0xA0	; 160
     bba:	b0 e4       	ldi	r27, 0x40	; 64
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	ab 83       	std	Y+3, r26	; 0x03
     bc2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     bc4:	69 81       	ldd	r22, Y+1	; 0x01
     bc6:	7a 81       	ldd	r23, Y+2	; 0x02
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	2b ea       	ldi	r18, 0xAB	; 171
     bce:	3a ea       	ldi	r19, 0xAA	; 170
     bd0:	4a ea       	ldi	r20, 0xAA	; 170
     bd2:	50 e4       	ldi	r21, 0x40	; 64
     bd4:	0e 94 0e 09 	call	0x121c	; 0x121c <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	9e 83       	std	Y+6, r25	; 0x06
     be0:	af 83       	std	Y+7, r26	; 0x07
     be2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     be4:	11 e0       	ldi	r17, 0x01	; 1
     be6:	6d 81       	ldd	r22, Y+5	; 0x05
     be8:	7e 81       	ldd	r23, Y+6	; 0x06
     bea:	8f 81       	ldd	r24, Y+7	; 0x07
     bec:	98 85       	ldd	r25, Y+8	; 0x08
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e8       	ldi	r20, 0x80	; 128
     bf4:	5f e3       	ldi	r21, 0x3F	; 63
     bf6:	0e 94 fd 07 	call	0xffa	; 0xffa <__cmpsf2>
     bfa:	88 23       	and	r24, r24
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__vector_14+0xc6>
     bfe:	10 e0       	ldi	r17, 0x00	; 0
     c00:	11 23       	and	r17, r17
     c02:	19 f0       	breq	.+6      	; 0xc0a <__vector_14+0xd0>
		__ticks = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	89 87       	std	Y+9, r24	; 0x09
     c08:	a3 c0       	rjmp	.+326    	; 0xd50 <__vector_14+0x216>
	else if (__tmp > 255)
     c0a:	11 e0       	ldi	r17, 0x01	; 1
     c0c:	6d 81       	ldd	r22, Y+5	; 0x05
     c0e:	7e 81       	ldd	r23, Y+6	; 0x06
     c10:	8f 81       	ldd	r24, Y+7	; 0x07
     c12:	98 85       	ldd	r25, Y+8	; 0x08
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	4f e7       	ldi	r20, 0x7F	; 127
     c1a:	53 e4       	ldi	r21, 0x43	; 67
     c1c:	0e 94 0a 09 	call	0x1214	; 0x1214 <__gesf2>
     c20:	18 16       	cp	r1, r24
     c22:	0c f0       	brlt	.+2      	; 0xc26 <__vector_14+0xec>
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	11 23       	and	r17, r17
     c28:	09 f4       	brne	.+2      	; 0xc2c <__vector_14+0xf2>
     c2a:	89 c0       	rjmp	.+274    	; 0xd3e <__vector_14+0x204>
	{
		_delay_ms(__us / 1000.0);
     c2c:	69 81       	ldd	r22, Y+1	; 0x01
     c2e:	7a 81       	ldd	r23, Y+2	; 0x02
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a e7       	ldi	r20, 0x7A	; 122
     c3a:	54 e4       	ldi	r21, 0x44	; 68
     c3c:	0e 94 01 08 	call	0x1002	; 0x1002 <__divsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	8a 87       	std	Y+10, r24	; 0x0a
     c46:	9b 87       	std	Y+11, r25	; 0x0b
     c48:	ac 87       	std	Y+12, r26	; 0x0c
     c4a:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     c4c:	6a 85       	ldd	r22, Y+10	; 0x0a
     c4e:	7b 85       	ldd	r23, Y+11	; 0x0b
     c50:	8c 85       	ldd	r24, Y+12	; 0x0c
     c52:	9d 85       	ldd	r25, Y+13	; 0x0d
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	4a e7       	ldi	r20, 0x7A	; 122
     c5a:	55 e4       	ldi	r21, 0x45	; 69
     c5c:	0e 94 0e 09 	call	0x121c	; 0x121c <__mulsf3>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	8e 87       	std	Y+14, r24	; 0x0e
     c66:	9f 87       	std	Y+15, r25	; 0x0f
     c68:	a8 8b       	std	Y+16, r26	; 0x10
     c6a:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     c6c:	11 e0       	ldi	r17, 0x01	; 1
     c6e:	6e 85       	ldd	r22, Y+14	; 0x0e
     c70:	7f 85       	ldd	r23, Y+15	; 0x0f
     c72:	88 89       	ldd	r24, Y+16	; 0x10
     c74:	99 89       	ldd	r25, Y+17	; 0x11
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 fd 07 	call	0xffa	; 0xffa <__cmpsf2>
     c82:	88 23       	and	r24, r24
     c84:	0c f0       	brlt	.+2      	; 0xc88 <__vector_14+0x14e>
     c86:	10 e0       	ldi	r17, 0x00	; 0
     c88:	11 23       	and	r17, r17
     c8a:	29 f0       	breq	.+10     	; 0xc96 <__vector_14+0x15c>
		__ticks = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9b 8b       	std	Y+19, r25	; 0x13
     c92:	8a 8b       	std	Y+18, r24	; 0x12
     c94:	46 c0       	rjmp	.+140    	; 0xd22 <__vector_14+0x1e8>
	else if (__tmp > 65535)
     c96:	11 e0       	ldi	r17, 0x01	; 1
     c98:	6e 85       	ldd	r22, Y+14	; 0x0e
     c9a:	7f 85       	ldd	r23, Y+15	; 0x0f
     c9c:	88 89       	ldd	r24, Y+16	; 0x10
     c9e:	99 89       	ldd	r25, Y+17	; 0x11
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	3f ef       	ldi	r19, 0xFF	; 255
     ca4:	4f e7       	ldi	r20, 0x7F	; 127
     ca6:	57 e4       	ldi	r21, 0x47	; 71
     ca8:	0e 94 0a 09 	call	0x1214	; 0x1214 <__gesf2>
     cac:	18 16       	cp	r1, r24
     cae:	0c f0       	brlt	.+2      	; 0xcb2 <__vector_14+0x178>
     cb0:	10 e0       	ldi	r17, 0x00	; 0
     cb2:	11 23       	and	r17, r17
     cb4:	61 f1       	breq	.+88     	; 0xd0e <__vector_14+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb6:	6a 85       	ldd	r22, Y+10	; 0x0a
     cb8:	7b 85       	ldd	r23, Y+11	; 0x0b
     cba:	8c 85       	ldd	r24, Y+12	; 0x0c
     cbc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e2       	ldi	r20, 0x20	; 32
     cc4:	51 e4       	ldi	r21, 0x41	; 65
     cc6:	0e 94 0e 09 	call	0x121c	; 0x121c <__mulsf3>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	bc 01       	movw	r22, r24
     cd0:	cd 01       	movw	r24, r26
     cd2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fixunssfsi>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	9b 8b       	std	Y+19, r25	; 0x13
     cdc:	8a 8b       	std	Y+18, r24	; 0x12
     cde:	12 c0       	rjmp	.+36     	; 0xd04 <__vector_14+0x1ca>
     ce0:	80 e9       	ldi	r24, 0x90	; 144
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	9d 8b       	std	Y+21, r25	; 0x15
     ce6:	8c 8b       	std	Y+20, r24	; 0x14
     ce8:	8c 89       	ldd	r24, Y+20	; 0x14
     cea:	9d 89       	ldd	r25, Y+21	; 0x15
     cec:	8c 01       	movw	r16, r24
     cee:	c8 01       	movw	r24, r16
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <__vector_14+0x1b6>
     cf4:	8c 01       	movw	r16, r24
     cf6:	1d 8b       	std	Y+21, r17	; 0x15
     cf8:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfa:	8a 89       	ldd	r24, Y+18	; 0x12
     cfc:	9b 89       	ldd	r25, Y+19	; 0x13
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	9b 8b       	std	Y+19, r25	; 0x13
     d02:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d04:	8a 89       	ldd	r24, Y+18	; 0x12
     d06:	9b 89       	ldd	r25, Y+19	; 0x13
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	51 f7       	brne	.-44     	; 0xce0 <__vector_14+0x1a6>
     d0c:	28 c0       	rjmp	.+80     	; 0xd5e <__vector_14+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0e:	6e 85       	ldd	r22, Y+14	; 0x0e
     d10:	7f 85       	ldd	r23, Y+15	; 0x0f
     d12:	88 89       	ldd	r24, Y+16	; 0x10
     d14:	99 89       	ldd	r25, Y+17	; 0x11
     d16:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	9b 8b       	std	Y+19, r25	; 0x13
     d20:	8a 8b       	std	Y+18, r24	; 0x12
     d22:	8a 89       	ldd	r24, Y+18	; 0x12
     d24:	9b 89       	ldd	r25, Y+19	; 0x13
     d26:	9f 8b       	std	Y+23, r25	; 0x17
     d28:	8e 8b       	std	Y+22, r24	; 0x16
     d2a:	8e 89       	ldd	r24, Y+22	; 0x16
     d2c:	9f 89       	ldd	r25, Y+23	; 0x17
     d2e:	8c 01       	movw	r16, r24
     d30:	f8 01       	movw	r30, r16
     d32:	31 97       	sbiw	r30, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <__vector_14+0x1f8>
     d36:	8f 01       	movw	r16, r30
     d38:	1f 8b       	std	Y+23, r17	; 0x17
     d3a:	0e 8b       	std	Y+22, r16	; 0x16
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__vector_14+0x224>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d3e:	6d 81       	ldd	r22, Y+5	; 0x05
     d40:	7e 81       	ldd	r23, Y+6	; 0x06
     d42:	8f 81       	ldd	r24, Y+7	; 0x07
     d44:	98 85       	ldd	r25, Y+8	; 0x08
     d46:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fixunssfsi>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	89 87       	std	Y+9, r24	; 0x09
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d54:	88 8d       	ldd	r24, Y+24	; 0x18
     d56:	18 2f       	mov	r17, r24
     d58:	1a 95       	dec	r17
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <__vector_14+0x21e>
     d5c:	18 8f       	std	Y+24, r17	; 0x18
            //PORTB |= (1 << PORTB0);
            _delay_us( 5 );
            PORTD &= ~(1 << PORTD6);
     d5e:	8b e2       	ldi	r24, 0x2B	; 43
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	2b e2       	ldi	r18, 0x2B	; 43
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	f9 01       	movw	r30, r18
     d68:	20 81       	ld	r18, Z
     d6a:	2f 7b       	andi	r18, 0xBF	; 191
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 83       	st	Z, r18
            //PORTB &= ~(1 << PORTB0);
            count = 0;
     d70:	10 92 1c 01 	sts	0x011C, r1
     d74:	10 92 1b 01 	sts	0x011B, r1
            zerocross = 0;
     d78:	10 92 0e 01 	sts	0x010E, r1
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <__vector_14+0x256>
        }
        else
        {      
            count = count + 1;
     d7e:	80 91 1b 01 	lds	r24, 0x011B
     d82:	90 91 1c 01 	lds	r25, 0x011C
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	90 93 1c 01 	sts	0x011C, r25
     d8c:	80 93 1b 01 	sts	0x011B, r24
        }
    }
}
     d90:	68 96       	adiw	r28, 0x18	; 24
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
    Freq = NumChanges/1000;	
     dea:	80 91 1e 01 	lds	r24, 0x011E
     dee:	90 91 1f 01 	lds	r25, 0x011F
     df2:	a0 91 20 01 	lds	r26, 0x0120
     df6:	b0 91 21 01 	lds	r27, 0x0121
     dfa:	28 ee       	ldi	r18, 0xE8	; 232
     dfc:	33 e0       	ldi	r19, 0x03	; 3
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 84 09 	call	0x1308	; 0x1308 <__udivmodsi4>
     e0a:	da 01       	movw	r26, r20
     e0c:	c9 01       	movw	r24, r18
     e0e:	90 93 23 01 	sts	0x0123, r25
     e12:	80 93 22 01 	sts	0x0122, r24
	NumChanges = 0;
     e16:	10 92 1e 01 	sts	0x011E, r1
     e1a:	10 92 1f 01 	sts	0x011F, r1
     e1e:	10 92 20 01 	sts	0x0120, r1
     e22:	10 92 21 01 	sts	0x0121, r1
	if(!active)
     e26:	80 91 0b 01 	lds	r24, 0x010B
     e2a:	88 23       	and	r24, r24
     e2c:	29 f4       	brne	.+10     	; 0xe38 <__vector_11+0x78>
		tInactive++;
     e2e:	80 91 1a 01 	lds	r24, 0x011A
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	80 93 1a 01 	sts	0x011A, r24
}
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	ff 91       	pop	r31
     e3e:	ef 91       	pop	r30
     e40:	bf 91       	pop	r27
     e42:	af 91       	pop	r26
     e44:	9f 91       	pop	r25
     e46:	8f 91       	pop	r24
     e48:	7f 91       	pop	r23
     e4a:	6f 91       	pop	r22
     e4c:	5f 91       	pop	r21
     e4e:	4f 91       	pop	r20
     e50:	3f 91       	pop	r19
     e52:	2f 91       	pop	r18
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <__vector_3>:


//PIR Sensor
ISR(PCINT0_vect)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
	if( !(PINB & (1 << PORTB0)) )
     e78:	83 e2       	ldi	r24, 0x23	; 35
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	81 70       	andi	r24, 0x01	; 1
     e86:	90 70       	andi	r25, 0x00	; 0
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	21 f4       	brne	.+8      	; 0xe94 <__vector_3+0x36>
	{
		active = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 0b 01 	sts	0x010B, r24
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <__vector_3+0x3e>
	}
	else
	{
		active = 0;
     e94:	10 92 0b 01 	sts	0x010B, r1
		tInactive = 0;
     e98:	10 92 1a 01 	sts	0x011A, r1
	}
	
}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_1>:

ISR(INT0_vect)
{
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	8f 93       	push	r24
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
        zerocross = 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	80 93 0e 01 	sts	0x010E, r24
}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	8f 91       	pop	r24
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <__vector_default>:

     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <USART_Init>:
#include<avr/io.h>
#include <string.h> 
#include"USART.h"

void USART_Init( unsigned int ubrr)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <USART_Init+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
	DDRD |= (1 << PORTD1) | (1 << PORTD0);
     f0a:	8a e2       	ldi	r24, 0x2A	; 42
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	2a e2       	ldi	r18, 0x2A	; 42
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	23 60       	ori	r18, 0x03	; 3
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
    UBRR0H = (ubrr >> 8);
     f1c:	85 ec       	ldi	r24, 0xC5	; 197
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	3a 81       	ldd	r19, Y+2	; 0x02
     f24:	23 2f       	mov	r18, r19
     f26:	33 27       	eor	r19, r19
     f28:	fc 01       	movw	r30, r24
     f2a:	20 83       	st	Z, r18
    UBRR0L = ubrr;
     f2c:	84 ec       	ldi	r24, 0xC4	; 196
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	29 81       	ldd	r18, Y+1	; 0x01
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
    
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);      // Enable receiver and transmitter and interrupt receive
     f36:	81 ec       	ldi	r24, 0xC1	; 193
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	28 e9       	ldi	r18, 0x98	; 152
     f3c:	fc 01       	movw	r30, r24
     f3e:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
     f40:	82 ec       	ldi	r24, 0xC2	; 194
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	26 e0       	ldi	r18, 0x06	; 6
     f46:	fc 01       	movw	r30, r24
     f48:	20 83       	st	Z, r18
}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	0f 92       	push	r0
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for empty transmit buffer */
    while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
     f60:	00 00       	nop
     f62:	80 ec       	ldi	r24, 0xC0	; 192
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	fc 01       	movw	r30, r24
     f68:	80 81       	ld	r24, Z
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	80 72       	andi	r24, 0x20	; 32
     f70:	90 70       	andi	r25, 0x00	; 0
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	b1 f3       	breq	.-20     	; 0xf62 <USART_Transmit+0xe>

	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     f76:	86 ec       	ldi	r24, 0xC6	; 198
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	fc 01       	movw	r30, r24
     f7e:	20 83       	st	Z, r18
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <USART_Receive>:


unsigned char USART_Receive( void )
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	return '\0';
     f90:	80 e0       	ldi	r24, 0x00	; 0
}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <print>:


void print(char * input)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <print+0x6>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <print+0x8>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <print+0xa>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9e 83       	std	Y+6, r25	; 0x06
     fa8:	8d 83       	std	Y+5, r24	; 0x05
	int length = strlen(input);
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	0e 94 ce 09 	call	0x139c	; 0x139c <strlen>
     fb2:	9c 83       	std	Y+4, r25	; 0x04
     fb4:	8b 83       	std	Y+3, r24	; 0x03
	
	for(int i = 0; i < length; ++i)
     fb6:	1a 82       	std	Y+2, r1	; 0x02
     fb8:	19 82       	std	Y+1, r1	; 0x01
     fba:	0f c0       	rjmp	.+30     	; 0xfda <print+0x42>
	{
		USART_Transmit(input[i]);
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	2d 81       	ldd	r18, Y+5	; 0x05
     fc2:	3e 81       	ldd	r19, Y+6	; 0x06
     fc4:	82 0f       	add	r24, r18
     fc6:	93 1f       	adc	r25, r19
     fc8:	fc 01       	movw	r30, r24
     fca:	80 81       	ld	r24, Z
     fcc:	0e 94 aa 07 	call	0xf54	; 0xf54 <USART_Transmit>

void print(char * input)
{
	int length = strlen(input);
	
	for(int i = 0; i < length; ++i)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	29 81       	ldd	r18, Y+1	; 0x01
     fdc:	3a 81       	ldd	r19, Y+2	; 0x02
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	28 17       	cp	r18, r24
     fe4:	39 07       	cpc	r19, r25
     fe6:	54 f3       	brlt	.-44     	; 0xfbc <print+0x24>
	{
		USART_Transmit(input[i]);
	}
	
}
     fe8:	26 96       	adiw	r28, 0x06	; 6
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <__cmpsf2>:
     ffa:	97 d0       	rcall	.+302    	; 0x112a <__fp_cmp>
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <__cmpsf2+0x6>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	08 95       	ret

00001002 <__divsf3>:
    1002:	0c d0       	rcall	.+24     	; 0x101c <__divsf3x>
    1004:	cd c0       	rjmp	.+410    	; 0x11a0 <__fp_round>
    1006:	c5 d0       	rcall	.+394    	; 0x1192 <__fp_pscB>
    1008:	40 f0       	brcs	.+16     	; 0x101a <__divsf3+0x18>
    100a:	bc d0       	rcall	.+376    	; 0x1184 <__fp_pscA>
    100c:	30 f0       	brcs	.+12     	; 0x101a <__divsf3+0x18>
    100e:	21 f4       	brne	.+8      	; 0x1018 <__divsf3+0x16>
    1010:	5f 3f       	cpi	r21, 0xFF	; 255
    1012:	19 f0       	breq	.+6      	; 0x101a <__divsf3+0x18>
    1014:	ae c0       	rjmp	.+348    	; 0x1172 <__fp_inf>
    1016:	51 11       	cpse	r21, r1
    1018:	f7 c0       	rjmp	.+494    	; 0x1208 <__fp_szero>
    101a:	b1 c0       	rjmp	.+354    	; 0x117e <__fp_nan>

0000101c <__divsf3x>:
    101c:	d2 d0       	rcall	.+420    	; 0x11c2 <__fp_split3>
    101e:	98 f3       	brcs	.-26     	; 0x1006 <__divsf3+0x4>

00001020 <__divsf3_pse>:
    1020:	99 23       	and	r25, r25
    1022:	c9 f3       	breq	.-14     	; 0x1016 <__divsf3+0x14>
    1024:	55 23       	and	r21, r21
    1026:	b1 f3       	breq	.-20     	; 0x1014 <__divsf3+0x12>
    1028:	95 1b       	sub	r25, r21
    102a:	55 0b       	sbc	r21, r21
    102c:	bb 27       	eor	r27, r27
    102e:	aa 27       	eor	r26, r26
    1030:	62 17       	cp	r22, r18
    1032:	73 07       	cpc	r23, r19
    1034:	84 07       	cpc	r24, r20
    1036:	38 f0       	brcs	.+14     	; 0x1046 <__divsf3_pse+0x26>
    1038:	9f 5f       	subi	r25, 0xFF	; 255
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	22 0f       	add	r18, r18
    103e:	33 1f       	adc	r19, r19
    1040:	44 1f       	adc	r20, r20
    1042:	aa 1f       	adc	r26, r26
    1044:	a9 f3       	breq	.-22     	; 0x1030 <__divsf3_pse+0x10>
    1046:	33 d0       	rcall	.+102    	; 0x10ae <__divsf3_pse+0x8e>
    1048:	0e 2e       	mov	r0, r30
    104a:	3a f0       	brmi	.+14     	; 0x105a <__divsf3_pse+0x3a>
    104c:	e0 e8       	ldi	r30, 0x80	; 128
    104e:	30 d0       	rcall	.+96     	; 0x10b0 <__divsf3_pse+0x90>
    1050:	91 50       	subi	r25, 0x01	; 1
    1052:	50 40       	sbci	r21, 0x00	; 0
    1054:	e6 95       	lsr	r30
    1056:	00 1c       	adc	r0, r0
    1058:	ca f7       	brpl	.-14     	; 0x104c <__divsf3_pse+0x2c>
    105a:	29 d0       	rcall	.+82     	; 0x10ae <__divsf3_pse+0x8e>
    105c:	fe 2f       	mov	r31, r30
    105e:	27 d0       	rcall	.+78     	; 0x10ae <__divsf3_pse+0x8e>
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	bb 1f       	adc	r27, r27
    1068:	26 17       	cp	r18, r22
    106a:	37 07       	cpc	r19, r23
    106c:	48 07       	cpc	r20, r24
    106e:	ab 07       	cpc	r26, r27
    1070:	b0 e8       	ldi	r27, 0x80	; 128
    1072:	09 f0       	breq	.+2      	; 0x1076 <__divsf3_pse+0x56>
    1074:	bb 0b       	sbc	r27, r27
    1076:	80 2d       	mov	r24, r0
    1078:	bf 01       	movw	r22, r30
    107a:	ff 27       	eor	r31, r31
    107c:	93 58       	subi	r25, 0x83	; 131
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	2a f0       	brmi	.+10     	; 0x108c <__divsf3_pse+0x6c>
    1082:	9e 3f       	cpi	r25, 0xFE	; 254
    1084:	51 05       	cpc	r21, r1
    1086:	68 f0       	brcs	.+26     	; 0x10a2 <__divsf3_pse+0x82>
    1088:	74 c0       	rjmp	.+232    	; 0x1172 <__fp_inf>
    108a:	be c0       	rjmp	.+380    	; 0x1208 <__fp_szero>
    108c:	5f 3f       	cpi	r21, 0xFF	; 255
    108e:	ec f3       	brlt	.-6      	; 0x108a <__divsf3_pse+0x6a>
    1090:	98 3e       	cpi	r25, 0xE8	; 232
    1092:	dc f3       	brlt	.-10     	; 0x108a <__divsf3_pse+0x6a>
    1094:	86 95       	lsr	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	c9 f7       	brne	.-14     	; 0x1094 <__divsf3_pse+0x74>
    10a2:	88 0f       	add	r24, r24
    10a4:	91 1d       	adc	r25, r1
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	97 f9       	bld	r25, 7
    10ac:	08 95       	ret
    10ae:	e1 e0       	ldi	r30, 0x01	; 1
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	bb 1f       	adc	r27, r27
    10b8:	62 17       	cp	r22, r18
    10ba:	73 07       	cpc	r23, r19
    10bc:	84 07       	cpc	r24, r20
    10be:	ba 07       	cpc	r27, r26
    10c0:	20 f0       	brcs	.+8      	; 0x10ca <__divsf3_pse+0xaa>
    10c2:	62 1b       	sub	r22, r18
    10c4:	73 0b       	sbc	r23, r19
    10c6:	84 0b       	sbc	r24, r20
    10c8:	ba 0b       	sbc	r27, r26
    10ca:	ee 1f       	adc	r30, r30
    10cc:	88 f7       	brcc	.-30     	; 0x10b0 <__divsf3_pse+0x90>
    10ce:	e0 95       	com	r30
    10d0:	08 95       	ret

000010d2 <__fixunssfsi>:
    10d2:	7f d0       	rcall	.+254    	; 0x11d2 <__fp_splitA>
    10d4:	88 f0       	brcs	.+34     	; 0x10f8 <__fixunssfsi+0x26>
    10d6:	9f 57       	subi	r25, 0x7F	; 127
    10d8:	90 f0       	brcs	.+36     	; 0x10fe <__fixunssfsi+0x2c>
    10da:	b9 2f       	mov	r27, r25
    10dc:	99 27       	eor	r25, r25
    10de:	b7 51       	subi	r27, 0x17	; 23
    10e0:	a0 f0       	brcs	.+40     	; 0x110a <__fixunssfsi+0x38>
    10e2:	d1 f0       	breq	.+52     	; 0x1118 <__fixunssfsi+0x46>
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	1a f0       	brmi	.+6      	; 0x10f4 <__fixunssfsi+0x22>
    10ee:	ba 95       	dec	r27
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <__fixunssfsi+0x12>
    10f2:	12 c0       	rjmp	.+36     	; 0x1118 <__fixunssfsi+0x46>
    10f4:	b1 30       	cpi	r27, 0x01	; 1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <__fixunssfsi+0x46>
    10f8:	86 d0       	rcall	.+268    	; 0x1206 <__fp_zero>
    10fa:	b1 e0       	ldi	r27, 0x01	; 1
    10fc:	08 95       	ret
    10fe:	83 c0       	rjmp	.+262    	; 0x1206 <__fp_zero>
    1100:	67 2f       	mov	r22, r23
    1102:	78 2f       	mov	r23, r24
    1104:	88 27       	eor	r24, r24
    1106:	b8 5f       	subi	r27, 0xF8	; 248
    1108:	39 f0       	breq	.+14     	; 0x1118 <__fixunssfsi+0x46>
    110a:	b9 3f       	cpi	r27, 0xF9	; 249
    110c:	cc f3       	brlt	.-14     	; 0x1100 <__fixunssfsi+0x2e>
    110e:	86 95       	lsr	r24
    1110:	77 95       	ror	r23
    1112:	67 95       	ror	r22
    1114:	b3 95       	inc	r27
    1116:	d9 f7       	brne	.-10     	; 0x110e <__fixunssfsi+0x3c>
    1118:	3e f4       	brtc	.+14     	; 0x1128 <__fixunssfsi+0x56>
    111a:	90 95       	com	r25
    111c:	80 95       	com	r24
    111e:	70 95       	com	r23
    1120:	61 95       	neg	r22
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	08 95       	ret

0000112a <__fp_cmp>:
    112a:	99 0f       	add	r25, r25
    112c:	00 08       	sbc	r0, r0
    112e:	55 0f       	add	r21, r21
    1130:	aa 0b       	sbc	r26, r26
    1132:	e0 e8       	ldi	r30, 0x80	; 128
    1134:	fe ef       	ldi	r31, 0xFE	; 254
    1136:	16 16       	cp	r1, r22
    1138:	17 06       	cpc	r1, r23
    113a:	e8 07       	cpc	r30, r24
    113c:	f9 07       	cpc	r31, r25
    113e:	c0 f0       	brcs	.+48     	; 0x1170 <__fp_cmp+0x46>
    1140:	12 16       	cp	r1, r18
    1142:	13 06       	cpc	r1, r19
    1144:	e4 07       	cpc	r30, r20
    1146:	f5 07       	cpc	r31, r21
    1148:	98 f0       	brcs	.+38     	; 0x1170 <__fp_cmp+0x46>
    114a:	62 1b       	sub	r22, r18
    114c:	73 0b       	sbc	r23, r19
    114e:	84 0b       	sbc	r24, r20
    1150:	95 0b       	sbc	r25, r21
    1152:	39 f4       	brne	.+14     	; 0x1162 <__fp_cmp+0x38>
    1154:	0a 26       	eor	r0, r26
    1156:	61 f0       	breq	.+24     	; 0x1170 <__fp_cmp+0x46>
    1158:	23 2b       	or	r18, r19
    115a:	24 2b       	or	r18, r20
    115c:	25 2b       	or	r18, r21
    115e:	21 f4       	brne	.+8      	; 0x1168 <__fp_cmp+0x3e>
    1160:	08 95       	ret
    1162:	0a 26       	eor	r0, r26
    1164:	09 f4       	brne	.+2      	; 0x1168 <__fp_cmp+0x3e>
    1166:	a1 40       	sbci	r26, 0x01	; 1
    1168:	a6 95       	lsr	r26
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	81 1d       	adc	r24, r1
    116e:	81 1d       	adc	r24, r1
    1170:	08 95       	ret

00001172 <__fp_inf>:
    1172:	97 f9       	bld	r25, 7
    1174:	9f 67       	ori	r25, 0x7F	; 127
    1176:	80 e8       	ldi	r24, 0x80	; 128
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	08 95       	ret

0000117e <__fp_nan>:
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	80 ec       	ldi	r24, 0xC0	; 192
    1182:	08 95       	ret

00001184 <__fp_pscA>:
    1184:	00 24       	eor	r0, r0
    1186:	0a 94       	dec	r0
    1188:	16 16       	cp	r1, r22
    118a:	17 06       	cpc	r1, r23
    118c:	18 06       	cpc	r1, r24
    118e:	09 06       	cpc	r0, r25
    1190:	08 95       	ret

00001192 <__fp_pscB>:
    1192:	00 24       	eor	r0, r0
    1194:	0a 94       	dec	r0
    1196:	12 16       	cp	r1, r18
    1198:	13 06       	cpc	r1, r19
    119a:	14 06       	cpc	r1, r20
    119c:	05 06       	cpc	r0, r21
    119e:	08 95       	ret

000011a0 <__fp_round>:
    11a0:	09 2e       	mov	r0, r25
    11a2:	03 94       	inc	r0
    11a4:	00 0c       	add	r0, r0
    11a6:	11 f4       	brne	.+4      	; 0x11ac <__fp_round+0xc>
    11a8:	88 23       	and	r24, r24
    11aa:	52 f0       	brmi	.+20     	; 0x11c0 <__fp_round+0x20>
    11ac:	bb 0f       	add	r27, r27
    11ae:	40 f4       	brcc	.+16     	; 0x11c0 <__fp_round+0x20>
    11b0:	bf 2b       	or	r27, r31
    11b2:	11 f4       	brne	.+4      	; 0x11b8 <__fp_round+0x18>
    11b4:	60 ff       	sbrs	r22, 0
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <__fp_round+0x20>
    11b8:	6f 5f       	subi	r22, 0xFF	; 255
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	8f 4f       	sbci	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	08 95       	ret

000011c2 <__fp_split3>:
    11c2:	57 fd       	sbrc	r21, 7
    11c4:	90 58       	subi	r25, 0x80	; 128
    11c6:	44 0f       	add	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	59 f0       	breq	.+22     	; 0x11e2 <__fp_splitA+0x10>
    11cc:	5f 3f       	cpi	r21, 0xFF	; 255
    11ce:	71 f0       	breq	.+28     	; 0x11ec <__fp_splitA+0x1a>
    11d0:	47 95       	ror	r20

000011d2 <__fp_splitA>:
    11d2:	88 0f       	add	r24, r24
    11d4:	97 fb       	bst	r25, 7
    11d6:	99 1f       	adc	r25, r25
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <__fp_splitA+0x20>
    11da:	9f 3f       	cpi	r25, 0xFF	; 255
    11dc:	79 f0       	breq	.+30     	; 0x11fc <__fp_splitA+0x2a>
    11de:	87 95       	ror	r24
    11e0:	08 95       	ret
    11e2:	12 16       	cp	r1, r18
    11e4:	13 06       	cpc	r1, r19
    11e6:	14 06       	cpc	r1, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	f2 cf       	rjmp	.-28     	; 0x11d0 <__fp_split3+0xe>
    11ec:	46 95       	lsr	r20
    11ee:	f1 df       	rcall	.-30     	; 0x11d2 <__fp_splitA>
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <__fp_splitA+0x30>
    11f2:	16 16       	cp	r1, r22
    11f4:	17 06       	cpc	r1, r23
    11f6:	18 06       	cpc	r1, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	f1 cf       	rjmp	.-30     	; 0x11de <__fp_splitA+0xc>
    11fc:	86 95       	lsr	r24
    11fe:	71 05       	cpc	r23, r1
    1200:	61 05       	cpc	r22, r1
    1202:	08 94       	sec
    1204:	08 95       	ret

00001206 <__fp_zero>:
    1206:	e8 94       	clt

00001208 <__fp_szero>:
    1208:	bb 27       	eor	r27, r27
    120a:	66 27       	eor	r22, r22
    120c:	77 27       	eor	r23, r23
    120e:	cb 01       	movw	r24, r22
    1210:	97 f9       	bld	r25, 7
    1212:	08 95       	ret

00001214 <__gesf2>:
    1214:	8a df       	rcall	.-236    	; 0x112a <__fp_cmp>
    1216:	08 f4       	brcc	.+2      	; 0x121a <__gesf2+0x6>
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	08 95       	ret

0000121c <__mulsf3>:
    121c:	0b d0       	rcall	.+22     	; 0x1234 <__mulsf3x>
    121e:	c0 cf       	rjmp	.-128    	; 0x11a0 <__fp_round>
    1220:	b1 df       	rcall	.-158    	; 0x1184 <__fp_pscA>
    1222:	28 f0       	brcs	.+10     	; 0x122e <__mulsf3+0x12>
    1224:	b6 df       	rcall	.-148    	; 0x1192 <__fp_pscB>
    1226:	18 f0       	brcs	.+6      	; 0x122e <__mulsf3+0x12>
    1228:	95 23       	and	r25, r21
    122a:	09 f0       	breq	.+2      	; 0x122e <__mulsf3+0x12>
    122c:	a2 cf       	rjmp	.-188    	; 0x1172 <__fp_inf>
    122e:	a7 cf       	rjmp	.-178    	; 0x117e <__fp_nan>
    1230:	11 24       	eor	r1, r1
    1232:	ea cf       	rjmp	.-44     	; 0x1208 <__fp_szero>

00001234 <__mulsf3x>:
    1234:	c6 df       	rcall	.-116    	; 0x11c2 <__fp_split3>
    1236:	a0 f3       	brcs	.-24     	; 0x1220 <__mulsf3+0x4>

00001238 <__mulsf3_pse>:
    1238:	95 9f       	mul	r25, r21
    123a:	d1 f3       	breq	.-12     	; 0x1230 <__mulsf3+0x14>
    123c:	95 0f       	add	r25, r21
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	55 1f       	adc	r21, r21
    1242:	62 9f       	mul	r22, r18
    1244:	f0 01       	movw	r30, r0
    1246:	72 9f       	mul	r23, r18
    1248:	bb 27       	eor	r27, r27
    124a:	f0 0d       	add	r31, r0
    124c:	b1 1d       	adc	r27, r1
    124e:	63 9f       	mul	r22, r19
    1250:	aa 27       	eor	r26, r26
    1252:	f0 0d       	add	r31, r0
    1254:	b1 1d       	adc	r27, r1
    1256:	aa 1f       	adc	r26, r26
    1258:	64 9f       	mul	r22, r20
    125a:	66 27       	eor	r22, r22
    125c:	b0 0d       	add	r27, r0
    125e:	a1 1d       	adc	r26, r1
    1260:	66 1f       	adc	r22, r22
    1262:	82 9f       	mul	r24, r18
    1264:	22 27       	eor	r18, r18
    1266:	b0 0d       	add	r27, r0
    1268:	a1 1d       	adc	r26, r1
    126a:	62 1f       	adc	r22, r18
    126c:	73 9f       	mul	r23, r19
    126e:	b0 0d       	add	r27, r0
    1270:	a1 1d       	adc	r26, r1
    1272:	62 1f       	adc	r22, r18
    1274:	83 9f       	mul	r24, r19
    1276:	a0 0d       	add	r26, r0
    1278:	61 1d       	adc	r22, r1
    127a:	22 1f       	adc	r18, r18
    127c:	74 9f       	mul	r23, r20
    127e:	33 27       	eor	r19, r19
    1280:	a0 0d       	add	r26, r0
    1282:	61 1d       	adc	r22, r1
    1284:	23 1f       	adc	r18, r19
    1286:	84 9f       	mul	r24, r20
    1288:	60 0d       	add	r22, r0
    128a:	21 1d       	adc	r18, r1
    128c:	82 2f       	mov	r24, r18
    128e:	76 2f       	mov	r23, r22
    1290:	6a 2f       	mov	r22, r26
    1292:	11 24       	eor	r1, r1
    1294:	9f 57       	subi	r25, 0x7F	; 127
    1296:	50 40       	sbci	r21, 0x00	; 0
    1298:	8a f0       	brmi	.+34     	; 0x12bc <__mulsf3_pse+0x84>
    129a:	e1 f0       	breq	.+56     	; 0x12d4 <__mulsf3_pse+0x9c>
    129c:	88 23       	and	r24, r24
    129e:	4a f0       	brmi	.+18     	; 0x12b2 <__mulsf3_pse+0x7a>
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	bb 1f       	adc	r27, r27
    12a6:	66 1f       	adc	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	91 50       	subi	r25, 0x01	; 1
    12ae:	50 40       	sbci	r21, 0x00	; 0
    12b0:	a9 f7       	brne	.-22     	; 0x129c <__mulsf3_pse+0x64>
    12b2:	9e 3f       	cpi	r25, 0xFE	; 254
    12b4:	51 05       	cpc	r21, r1
    12b6:	70 f0       	brcs	.+28     	; 0x12d4 <__mulsf3_pse+0x9c>
    12b8:	5c cf       	rjmp	.-328    	; 0x1172 <__fp_inf>
    12ba:	a6 cf       	rjmp	.-180    	; 0x1208 <__fp_szero>
    12bc:	5f 3f       	cpi	r21, 0xFF	; 255
    12be:	ec f3       	brlt	.-6      	; 0x12ba <__mulsf3_pse+0x82>
    12c0:	98 3e       	cpi	r25, 0xE8	; 232
    12c2:	dc f3       	brlt	.-10     	; 0x12ba <__mulsf3_pse+0x82>
    12c4:	86 95       	lsr	r24
    12c6:	77 95       	ror	r23
    12c8:	67 95       	ror	r22
    12ca:	b7 95       	ror	r27
    12cc:	f7 95       	ror	r31
    12ce:	e7 95       	ror	r30
    12d0:	9f 5f       	subi	r25, 0xFF	; 255
    12d2:	c1 f7       	brne	.-16     	; 0x12c4 <__mulsf3_pse+0x8c>
    12d4:	fe 2b       	or	r31, r30
    12d6:	88 0f       	add	r24, r24
    12d8:	91 1d       	adc	r25, r1
    12da:	96 95       	lsr	r25
    12dc:	87 95       	ror	r24
    12de:	97 f9       	bld	r25, 7
    12e0:	08 95       	ret

000012e2 <__divmodhi4>:
    12e2:	97 fb       	bst	r25, 7
    12e4:	09 2e       	mov	r0, r25
    12e6:	07 26       	eor	r0, r23
    12e8:	0a d0       	rcall	.+20     	; 0x12fe <__divmodhi4_neg1>
    12ea:	77 fd       	sbrc	r23, 7
    12ec:	04 d0       	rcall	.+8      	; 0x12f6 <__divmodhi4_neg2>
    12ee:	2e d0       	rcall	.+92     	; 0x134c <__udivmodhi4>
    12f0:	06 d0       	rcall	.+12     	; 0x12fe <__divmodhi4_neg1>
    12f2:	00 20       	and	r0, r0
    12f4:	1a f4       	brpl	.+6      	; 0x12fc <__divmodhi4_exit>

000012f6 <__divmodhi4_neg2>:
    12f6:	70 95       	com	r23
    12f8:	61 95       	neg	r22
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255

000012fc <__divmodhi4_exit>:
    12fc:	08 95       	ret

000012fe <__divmodhi4_neg1>:
    12fe:	f6 f7       	brtc	.-4      	; 0x12fc <__divmodhi4_exit>
    1300:	90 95       	com	r25
    1302:	81 95       	neg	r24
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	08 95       	ret

00001308 <__udivmodsi4>:
    1308:	a1 e2       	ldi	r26, 0x21	; 33
    130a:	1a 2e       	mov	r1, r26
    130c:	aa 1b       	sub	r26, r26
    130e:	bb 1b       	sub	r27, r27
    1310:	fd 01       	movw	r30, r26
    1312:	0d c0       	rjmp	.+26     	; 0x132e <__udivmodsi4_ep>

00001314 <__udivmodsi4_loop>:
    1314:	aa 1f       	adc	r26, r26
    1316:	bb 1f       	adc	r27, r27
    1318:	ee 1f       	adc	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	a2 17       	cp	r26, r18
    131e:	b3 07       	cpc	r27, r19
    1320:	e4 07       	cpc	r30, r20
    1322:	f5 07       	cpc	r31, r21
    1324:	20 f0       	brcs	.+8      	; 0x132e <__udivmodsi4_ep>
    1326:	a2 1b       	sub	r26, r18
    1328:	b3 0b       	sbc	r27, r19
    132a:	e4 0b       	sbc	r30, r20
    132c:	f5 0b       	sbc	r31, r21

0000132e <__udivmodsi4_ep>:
    132e:	66 1f       	adc	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	1a 94       	dec	r1
    1338:	69 f7       	brne	.-38     	; 0x1314 <__udivmodsi4_loop>
    133a:	60 95       	com	r22
    133c:	70 95       	com	r23
    133e:	80 95       	com	r24
    1340:	90 95       	com	r25
    1342:	9b 01       	movw	r18, r22
    1344:	ac 01       	movw	r20, r24
    1346:	bd 01       	movw	r22, r26
    1348:	cf 01       	movw	r24, r30
    134a:	08 95       	ret

0000134c <__udivmodhi4>:
    134c:	aa 1b       	sub	r26, r26
    134e:	bb 1b       	sub	r27, r27
    1350:	51 e1       	ldi	r21, 0x11	; 17
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <__udivmodhi4_ep>

00001354 <__udivmodhi4_loop>:
    1354:	aa 1f       	adc	r26, r26
    1356:	bb 1f       	adc	r27, r27
    1358:	a6 17       	cp	r26, r22
    135a:	b7 07       	cpc	r27, r23
    135c:	10 f0       	brcs	.+4      	; 0x1362 <__udivmodhi4_ep>
    135e:	a6 1b       	sub	r26, r22
    1360:	b7 0b       	sbc	r27, r23

00001362 <__udivmodhi4_ep>:
    1362:	88 1f       	adc	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	5a 95       	dec	r21
    1368:	a9 f7       	brne	.-22     	; 0x1354 <__udivmodhi4_loop>
    136a:	80 95       	com	r24
    136c:	90 95       	com	r25
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	08 95       	ret

00001374 <memcpy>:
    1374:	fb 01       	movw	r30, r22
    1376:	dc 01       	movw	r26, r24
    1378:	02 c0       	rjmp	.+4      	; 0x137e <memcpy+0xa>
    137a:	01 90       	ld	r0, Z+
    137c:	0d 92       	st	X+, r0
    137e:	41 50       	subi	r20, 0x01	; 1
    1380:	50 40       	sbci	r21, 0x00	; 0
    1382:	d8 f7       	brcc	.-10     	; 0x137a <memcpy+0x6>
    1384:	08 95       	ret

00001386 <strcat>:
    1386:	fb 01       	movw	r30, r22
    1388:	dc 01       	movw	r26, r24
    138a:	0d 90       	ld	r0, X+
    138c:	00 20       	and	r0, r0
    138e:	e9 f7       	brne	.-6      	; 0x138a <strcat+0x4>
    1390:	11 97       	sbiw	r26, 0x01	; 1
    1392:	01 90       	ld	r0, Z+
    1394:	0d 92       	st	X+, r0
    1396:	00 20       	and	r0, r0
    1398:	e1 f7       	brne	.-8      	; 0x1392 <strcat+0xc>
    139a:	08 95       	ret

0000139c <strlen>:
    139c:	fc 01       	movw	r30, r24
    139e:	01 90       	ld	r0, Z+
    13a0:	00 20       	and	r0, r0
    13a2:	e9 f7       	brne	.-6      	; 0x139e <strlen+0x2>
    13a4:	80 95       	com	r24
    13a6:	90 95       	com	r25
    13a8:	8e 0f       	add	r24, r30
    13aa:	9f 1f       	adc	r25, r31
    13ac:	08 95       	ret

000013ae <_exit>:
    13ae:	f8 94       	cli

000013b0 <__stop_program>:
    13b0:	ff cf       	rjmp	.-2      	; 0x13b0 <__stop_program>
