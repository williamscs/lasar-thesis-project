
Satellite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001354  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001354  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800112  00800112  0000141a  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  0000141a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001c14  00000000  00000000  00001420  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000006a3  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  000036d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001b0  00000000  00000000  00003717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000999  00000000  00000000  000038c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000291  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000009e8  00000000  00000000  000044f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000160  00000000  00000000  00004edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000026d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000056  00000000  00000000  000052a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e5       	ldi	r30, 0x54	; 84
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 31       	cpi	r26, 0x1E	; 30
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile uint32_t freqCounter = 0;
volatile uint32_t frequency = 0;


int main(void)
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	a5 97       	sbiw	r28, 0x25	; 37
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
	//Local Variables
	uint8_t hours = 0;
      be:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t minutes = 0;
      c0:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t seconds = 0;
      c2:	1f 82       	std	Y+7, r1	; 0x07
	
	DDRB &= ~(1 << PORTB0);
      c4:	84 e2       	ldi	r24, 0x24	; 36
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	24 e2       	ldi	r18, 0x24	; 36
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	f9 01       	movw	r30, r18
      ce:	20 81       	ld	r18, Z
      d0:	2e 7f       	andi	r18, 0xFE	; 254
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
	DDRC = 0xFF;
      d6:	87 e2       	ldi	r24, 0x27	; 39
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2f ef       	ldi	r18, 0xFF	; 255
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
    DDRD |= (1 << PORTD6); 
      e0:	8a e2       	ldi	r24, 0x2A	; 42
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2a e2       	ldi	r18, 0x2A	; 42
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	20 64       	ori	r18, 0x40	; 64
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
	//DDRB = 0;
	//_delay_ms(1000);
	
	initTimer(65);
      f2:	81 e4       	ldi	r24, 0x41	; 65
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <initTimer>
	//initInterrupts();
	//initServo(SERVO_PERIOD);
	USART_Init(MYUBRR);
      fa:	87 e6       	ldi	r24, 0x67	; 103
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 dd 07 	call	0xfba	; 0xfba <USART_Init>
	dim = 100;
     102:	84 e6       	ldi	r24, 0x64	; 100
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 01 01 	sts	0x0101, r25
     10a:	80 93 00 01 	sts	0x0100, r24
	char * str;
	// turn on interrupts
	sei();
     10e:	78 94       	sei
		//PORTC &= ~(1 << PORTC0);
		//_delay_ms(20);
		//OCR1A = 16;
		//PORTC &= ~(1 << PORTC0);
		////_delay_ms(1000);
		str = "test";
     110:	83 e0       	ldi	r24, 0x03	; 3
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	99 87       	std	Y+9, r25	; 0x09
     116:	88 87       	std	Y+8, r24	; 0x08
		USART_Transmit('1');
     118:	81 e3       	ldi	r24, 0x31	; 49
     11a:	0e 94 09 08 	call	0x1012	; 0x1012 <USART_Transmit>
		print(str);
     11e:	2e ea       	ldi	r18, 0xAE	; 174
     120:	34 e0       	ldi	r19, 0x04	; 4
     122:	88 85       	ldd	r24, Y+8	; 0x08
     124:	99 85       	ldd	r25, Y+9	; 0x09
     126:	f9 01       	movw	r30, r18
     128:	09 95       	icall
		//PORTD = (1 << PORTD6);
		for( int j = 10; j < 90; ++j )
     12a:	8a e0       	ldi	r24, 0x0A	; 10
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	9a 83       	std	Y+2, r25	; 0x02
     130:	89 83       	std	Y+1, r24	; 0x01
     132:	90 c0       	rjmp	.+288    	; 0x254 <main+0x1ae>
		{
			//PORTD |= (1 << PORTD3);
			dim = j;
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	9a 81       	ldd	r25, Y+2	; 0x02
     138:	90 93 01 01 	sts	0x0101, r25
     13c:	80 93 00 01 	sts	0x0100, r24
			PORTC = j;
     140:	88 e2       	ldi	r24, 0x28	; 40
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	29 81       	ldd	r18, Y+1	; 0x01
     146:	fc 01       	movw	r30, r24
     148:	20 83       	st	Z, r18
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a8 ec       	ldi	r26, 0xC8	; 200
     150:	b2 e4       	ldi	r27, 0x42	; 66
     152:	8a 87       	std	Y+10, r24	; 0x0a
     154:	9b 87       	std	Y+11, r25	; 0x0b
     156:	ac 87       	std	Y+12, r26	; 0x0c
     158:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     15a:	6a 85       	ldd	r22, Y+10	; 0x0a
     15c:	7b 85       	ldd	r23, Y+11	; 0x0b
     15e:	8c 85       	ldd	r24, Y+12	; 0x0c
     160:	9d 85       	ldd	r25, Y+13	; 0x0d
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	4a e7       	ldi	r20, 0x7A	; 122
     168:	55 e4       	ldi	r21, 0x45	; 69
     16a:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     16e:	dc 01       	movw	r26, r24
     170:	cb 01       	movw	r24, r22
     172:	8e 87       	std	Y+14, r24	; 0x0e
     174:	9f 87       	std	Y+15, r25	; 0x0f
     176:	a8 8b       	std	Y+16, r26	; 0x10
     178:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	6e 85       	ldd	r22, Y+14	; 0x0e
     17e:	7f 85       	ldd	r23, Y+15	; 0x0f
     180:	88 89       	ldd	r24, Y+16	; 0x10
     182:	99 89       	ldd	r25, Y+17	; 0x11
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	40 e8       	ldi	r20, 0x80	; 128
     18a:	5f e3       	ldi	r21, 0x3F	; 63
     18c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     190:	88 23       	and	r24, r24
     192:	0c f0       	brlt	.+2      	; 0x196 <main+0xf0>
     194:	10 e0       	ldi	r17, 0x00	; 0
     196:	11 23       	and	r17, r17
     198:	29 f0       	breq	.+10     	; 0x1a4 <main+0xfe>
		__ticks = 1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	9b 8b       	std	Y+19, r25	; 0x13
     1a0:	8a 8b       	std	Y+18, r24	; 0x12
     1a2:	46 c0       	rjmp	.+140    	; 0x230 <main+0x18a>
	else if (__tmp > 65535)
     1a4:	11 e0       	ldi	r17, 0x01	; 1
     1a6:	6e 85       	ldd	r22, Y+14	; 0x0e
     1a8:	7f 85       	ldd	r23, Y+15	; 0x0f
     1aa:	88 89       	ldd	r24, Y+16	; 0x10
     1ac:	99 89       	ldd	r25, Y+17	; 0x11
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	3f ef       	ldi	r19, 0xFF	; 255
     1b2:	4f e7       	ldi	r20, 0x7F	; 127
     1b4:	57 e4       	ldi	r21, 0x47	; 71
     1b6:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     1ba:	18 16       	cp	r1, r24
     1bc:	0c f0       	brlt	.+2      	; 0x1c0 <main+0x11a>
     1be:	10 e0       	ldi	r17, 0x00	; 0
     1c0:	11 23       	and	r17, r17
     1c2:	61 f1       	breq	.+88     	; 0x21c <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1c4:	6a 85       	ldd	r22, Y+10	; 0x0a
     1c6:	7b 85       	ldd	r23, Y+11	; 0x0b
     1c8:	8c 85       	ldd	r24, Y+12	; 0x0c
     1ca:	9d 85       	ldd	r25, Y+13	; 0x0d
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	40 e2       	ldi	r20, 0x20	; 32
     1d2:	51 e4       	ldi	r21, 0x41	; 65
     1d4:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     1d8:	dc 01       	movw	r26, r24
     1da:	cb 01       	movw	r24, r22
     1dc:	bc 01       	movw	r22, r24
     1de:	cd 01       	movw	r24, r26
     1e0:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	9b 8b       	std	Y+19, r25	; 0x13
     1ea:	8a 8b       	std	Y+18, r24	; 0x12
     1ec:	12 c0       	rjmp	.+36     	; 0x212 <main+0x16c>
     1ee:	80 e9       	ldi	r24, 0x90	; 144
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	9d 8b       	std	Y+21, r25	; 0x15
     1f4:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f6:	8c 89       	ldd	r24, Y+20	; 0x14
     1f8:	9d 89       	ldd	r25, Y+21	; 0x15
     1fa:	8c 01       	movw	r16, r24
     1fc:	c8 01       	movw	r24, r16
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x158>
     202:	8c 01       	movw	r16, r24
     204:	1d 8b       	std	Y+21, r17	; 0x15
     206:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     208:	8a 89       	ldd	r24, Y+18	; 0x12
     20a:	9b 89       	ldd	r25, Y+19	; 0x13
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	9b 8b       	std	Y+19, r25	; 0x13
     210:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     212:	8a 89       	ldd	r24, Y+18	; 0x12
     214:	9b 89       	ldd	r25, Y+19	; 0x13
     216:	00 97       	sbiw	r24, 0x00	; 0
     218:	51 f7       	brne	.-44     	; 0x1ee <main+0x148>
     21a:	17 c0       	rjmp	.+46     	; 0x24a <main+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     21c:	6e 85       	ldd	r22, Y+14	; 0x0e
     21e:	7f 85       	ldd	r23, Y+15	; 0x0f
     220:	88 89       	ldd	r24, Y+16	; 0x10
     222:	99 89       	ldd	r25, Y+17	; 0x11
     224:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
     22c:	9b 8b       	std	Y+19, r25	; 0x13
     22e:	8a 8b       	std	Y+18, r24	; 0x12
     230:	8a 89       	ldd	r24, Y+18	; 0x12
     232:	9b 89       	ldd	r25, Y+19	; 0x13
     234:	9f 8b       	std	Y+23, r25	; 0x17
     236:	8e 8b       	std	Y+22, r24	; 0x16
     238:	8e 89       	ldd	r24, Y+22	; 0x16
     23a:	9f 89       	ldd	r25, Y+23	; 0x17
     23c:	8c 01       	movw	r16, r24
     23e:	f8 01       	movw	r30, r16
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <main+0x19a>
     244:	8f 01       	movw	r16, r30
     246:	1f 8b       	std	Y+23, r17	; 0x17
     248:	0e 8b       	std	Y+22, r16	; 0x16
		////_delay_ms(1000);
		str = "test";
		USART_Transmit('1');
		print(str);
		//PORTD = (1 << PORTD6);
		for( int j = 10; j < 90; ++j )
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	89 83       	std	Y+1, r24	; 0x01
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	8a 35       	cpi	r24, 0x5A	; 90
     25a:	91 05       	cpc	r25, r1
     25c:	0c f4       	brge	.+2      	; 0x260 <main+0x1ba>
     25e:	6a cf       	rjmp	.-300    	; 0x134 <main+0x8e>
			PORTC = j;
			
			
			_delay_ms(100);
		}
		for( int j = 90; j > 10; --j)
     260:	8a e5       	ldi	r24, 0x5A	; 90
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	9c 83       	std	Y+4, r25	; 0x04
     266:	8b 83       	std	Y+3, r24	; 0x03
     268:	94 c0       	rjmp	.+296    	; 0x392 <main+0x2ec>
		{
			//PORTD &= ~(1 << PORTD3);
			dim = j;
     26a:	8b 81       	ldd	r24, Y+3	; 0x03
     26c:	9c 81       	ldd	r25, Y+4	; 0x04
     26e:	90 93 01 01 	sts	0x0101, r25
     272:	80 93 00 01 	sts	0x0100, r24
			PORTC = j;
     276:	88 e2       	ldi	r24, 0x28	; 40
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	2b 81       	ldd	r18, Y+3	; 0x03
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
			openWindow(SERVO_REV);
     280:	80 e1       	ldi	r24, 0x10	; 16
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 5e 02 	call	0x4bc	; 0x4bc <openWindow>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	a0 ea       	ldi	r26, 0xA0	; 160
     28e:	b1 e4       	ldi	r27, 0x41	; 65
     290:	88 8f       	std	Y+24, r24	; 0x18
     292:	99 8f       	std	Y+25, r25	; 0x19
     294:	aa 8f       	std	Y+26, r26	; 0x1a
     296:	bb 8f       	std	Y+27, r27	; 0x1b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     298:	68 8d       	ldd	r22, Y+24	; 0x18
     29a:	79 8d       	ldd	r23, Y+25	; 0x19
     29c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     29e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	4a e7       	ldi	r20, 0x7A	; 122
     2a6:	55 e4       	ldi	r21, 0x45	; 69
     2a8:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     2ac:	dc 01       	movw	r26, r24
     2ae:	cb 01       	movw	r24, r22
     2b0:	8c 8f       	std	Y+28, r24	; 0x1c
     2b2:	9d 8f       	std	Y+29, r25	; 0x1d
     2b4:	ae 8f       	std	Y+30, r26	; 0x1e
     2b6:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     2b8:	11 e0       	ldi	r17, 0x01	; 1
     2ba:	6c 8d       	ldd	r22, Y+28	; 0x1c
     2bc:	7d 8d       	ldd	r23, Y+29	; 0x1d
     2be:	8e 8d       	ldd	r24, Y+30	; 0x1e
     2c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e8       	ldi	r20, 0x80	; 128
     2c8:	5f e3       	ldi	r21, 0x3F	; 63
     2ca:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     2ce:	88 23       	and	r24, r24
     2d0:	0c f0       	brlt	.+2      	; 0x2d4 <main+0x22e>
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	11 23       	and	r17, r17
     2d6:	29 f0       	breq	.+10     	; 0x2e2 <main+0x23c>
		__ticks = 1;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	99 a3       	std	Y+33, r25	; 0x21
     2de:	88 a3       	std	Y+32, r24	; 0x20
     2e0:	46 c0       	rjmp	.+140    	; 0x36e <main+0x2c8>
	else if (__tmp > 65535)
     2e2:	11 e0       	ldi	r17, 0x01	; 1
     2e4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     2e6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     2e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     2ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	3f ef       	ldi	r19, 0xFF	; 255
     2f0:	4f e7       	ldi	r20, 0x7F	; 127
     2f2:	57 e4       	ldi	r21, 0x47	; 71
     2f4:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     2f8:	18 16       	cp	r1, r24
     2fa:	0c f0       	brlt	.+2      	; 0x2fe <main+0x258>
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	11 23       	and	r17, r17
     300:	61 f1       	breq	.+88     	; 0x35a <main+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     302:	68 8d       	ldd	r22, Y+24	; 0x18
     304:	79 8d       	ldd	r23, Y+25	; 0x19
     306:	8a 8d       	ldd	r24, Y+26	; 0x1a
     308:	9b 8d       	ldd	r25, Y+27	; 0x1b
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e2       	ldi	r20, 0x20	; 32
     310:	51 e4       	ldi	r21, 0x41	; 65
     312:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	bc 01       	movw	r22, r24
     31c:	cd 01       	movw	r24, r26
     31e:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	99 a3       	std	Y+33, r25	; 0x21
     328:	88 a3       	std	Y+32, r24	; 0x20
     32a:	12 c0       	rjmp	.+36     	; 0x350 <main+0x2aa>
     32c:	80 e9       	ldi	r24, 0x90	; 144
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	9b a3       	std	Y+35, r25	; 0x23
     332:	8a a3       	std	Y+34, r24	; 0x22
     334:	8a a1       	ldd	r24, Y+34	; 0x22
     336:	9b a1       	ldd	r25, Y+35	; 0x23
     338:	8c 01       	movw	r16, r24
     33a:	c8 01       	movw	r24, r16
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x296>
     340:	8c 01       	movw	r16, r24
     342:	1b a3       	std	Y+35, r17	; 0x23
     344:	0a a3       	std	Y+34, r16	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     346:	88 a1       	ldd	r24, Y+32	; 0x20
     348:	99 a1       	ldd	r25, Y+33	; 0x21
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	99 a3       	std	Y+33, r25	; 0x21
     34e:	88 a3       	std	Y+32, r24	; 0x20
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     350:	88 a1       	ldd	r24, Y+32	; 0x20
     352:	99 a1       	ldd	r25, Y+33	; 0x21
     354:	00 97       	sbiw	r24, 0x00	; 0
     356:	51 f7       	brne	.-44     	; 0x32c <main+0x286>
     358:	17 c0       	rjmp	.+46     	; 0x388 <main+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     35a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     35c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     35e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     360:	9f 8d       	ldd	r25, Y+31	; 0x1f
     362:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	99 a3       	std	Y+33, r25	; 0x21
     36c:	88 a3       	std	Y+32, r24	; 0x20
     36e:	88 a1       	ldd	r24, Y+32	; 0x20
     370:	99 a1       	ldd	r25, Y+33	; 0x21
     372:	9d a3       	std	Y+37, r25	; 0x25
     374:	8c a3       	std	Y+36, r24	; 0x24
     376:	8c a1       	ldd	r24, Y+36	; 0x24
     378:	9d a1       	ldd	r25, Y+37	; 0x25
     37a:	8c 01       	movw	r16, r24
     37c:	f8 01       	movw	r30, r16
     37e:	31 97       	sbiw	r30, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <main+0x2d8>
     382:	8f 01       	movw	r16, r30
     384:	1d a3       	std	Y+37, r17	; 0x25
     386:	0c a3       	std	Y+36, r16	; 0x24
			PORTC = j;
			
			
			_delay_ms(100);
		}
		for( int j = 90; j > 10; --j)
     388:	8b 81       	ldd	r24, Y+3	; 0x03
     38a:	9c 81       	ldd	r25, Y+4	; 0x04
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	9c 83       	std	Y+4, r25	; 0x04
     390:	8b 83       	std	Y+3, r24	; 0x03
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	8b 30       	cpi	r24, 0x0B	; 11
     398:	91 05       	cpc	r25, r1
     39a:	0c f0       	brlt	.+2      	; 0x39e <main+0x2f8>
     39c:	66 cf       	rjmp	.-308    	; 0x26a <main+0x1c4>
			openWindow(SERVO_REV);
			_delay_ms(20);
		}
		
		
	}	
     39e:	b8 ce       	rjmp	.-656    	; 0x110 <main+0x6a>

000003a0 <initTimer>:
/*
 * Function Name: initTimer
 * Author: Chris Williams
 */
void initTimer( int dutycycle )
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <initTimer+0x6>
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	9a 83       	std	Y+2, r25	; 0x02
     3ac:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = 130; //cap of Timer0
     3ae:	87 e4       	ldi	r24, 0x47	; 71
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	22 e8       	ldi	r18, 0x82	; 130
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
	OCR0B = dutycycle;
     3b8:	88 e4       	ldi	r24, 0x48	; 72
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
	 
	
	TCCR0A |= (1 << COM0A1) | (1 << WGM01);
     3c2:	84 e4       	ldi	r24, 0x44	; 68
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	24 e4       	ldi	r18, 0x44	; 68
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	f9 01       	movw	r30, r18
     3cc:	20 81       	ld	r18, Z
     3ce:	22 68       	ori	r18, 0x82	; 130
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
	// set non-inverting mode 
	// set CTC (Clear Timer on Compare) Mode

    TCCR0B |= (1 << CS01);    // set prescaler to 8 and starts PWM
     3d4:	85 e4       	ldi	r24, 0x45	; 69
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	25 e4       	ldi	r18, 0x45	; 69
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	22 60       	ori	r18, 0x02	; 2
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
	
	TIMSK0 = (1 << OCIE0A) | (1 << TOIE0);	//Enable OVF
     3e6:	8e e6       	ldi	r24, 0x6E	; 110
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	23 e0       	ldi	r18, 0x03	; 3
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
    // set prescaler to 8 and starts PWM
	
	TIMSK0 = (1 << OCIE0B);
	//Enable COMPA
	*/
}
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	cf 91       	pop	r28
     3f6:	df 91       	pop	r29
     3f8:	08 95       	ret

000003fa <initInterrupts>:


void initInterrupts()
{
     3fa:	df 93       	push	r29
     3fc:	cf 93       	push	r28
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
	//Falling edge triggers interrupt for INT0 or INT1
	EICRA |= (1 << ISC11) | (1 << ISC01);
     402:	89 e6       	ldi	r24, 0x69	; 105
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	29 e6       	ldi	r18, 0x69	; 105
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	f9 01       	movw	r30, r18
     40c:	20 81       	ld	r18, Z
     40e:	2a 60       	ori	r18, 0x0A	; 10
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
	//Enable INT0 and INT1
	EIMSK |= (1 << INT1) | (1 << INT0);
     414:	8d e3       	ldi	r24, 0x3D	; 61
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	2d e3       	ldi	r18, 0x3D	; 61
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	f9 01       	movw	r30, r18
     41e:	20 81       	ld	r18, Z
     420:	23 60       	ori	r18, 0x03	; 3
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
	
	//Enables PC[23:16] and PC[7:0]
	PCICR = (1 << PCIE2) | (1 << PCIE0);
     426:	88 e6       	ldi	r24, 0x68	; 104
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	25 e0       	ldi	r18, 0x05	; 5
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
	PCMSK2 = (1 << PCINT20);
     430:	8d e6       	ldi	r24, 0x6D	; 109
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	20 e1       	ldi	r18, 0x10	; 16
     436:	fc 01       	movw	r30, r24
     438:	20 83       	st	Z, r18
	PCMSK0 = (1 << PCINT0);
     43a:	8b e6       	ldi	r24, 0x6B	; 107
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
}	
     444:	cf 91       	pop	r28
     446:	df 91       	pop	r29
     448:	08 95       	ret

0000044a <setCycle>:


void setCycle(int dutycycle)
{
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	00 d0       	rcall	.+0      	; 0x450 <setCycle+0x6>
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	9a 83       	std	Y+2, r25	; 0x02
     456:	89 83       	std	Y+1, r24	; 0x01
	cli();
     458:	f8 94       	cli
	OCR0A = dutycycle;
     45a:	87 e4       	ldi	r24, 0x47	; 71
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	29 81       	ldd	r18, Y+1	; 0x01
     460:	fc 01       	movw	r30, r24
     462:	20 83       	st	Z, r18
	sei();
     464:	78 94       	sei
	return;
}
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	cf 91       	pop	r28
     46c:	df 91       	pop	r29
     46e:	08 95       	ret

00000470 <initServo>:

void initServo(const int period_64us) 
{
     470:	df 93       	push	r29
     472:	cf 93       	push	r28
     474:	00 d0       	rcall	.+0      	; 0x476 <initServo+0x6>
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= (1 << PORTB1);
     47e:	84 e2       	ldi	r24, 0x24	; 36
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	24 e2       	ldi	r18, 0x24	; 36
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	f9 01       	movw	r30, r18
     488:	20 81       	ld	r18, Z
     48a:	22 60       	ori	r18, 0x02	; 2
     48c:	fc 01       	movw	r30, r24
     48e:	20 83       	st	Z, r18
	//initialize TMR1 (PWM)
	// clear on compare, fast PWM, TOP=ICR1 (WGM13/WGM12 in TCCR1B)
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
     490:	80 e8       	ldi	r24, 0x80	; 128
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	22 e8       	ldi	r18, 0x82	; 130
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	// prescaler 1024 (and WGM12 and WGM13)
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10) | (1 << CS12); 
     49a:	81 e8       	ldi	r24, 0x81	; 129
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	2d e1       	ldi	r18, 0x1D	; 29
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
	ICR1 = period_64us;
     4a4:	86 e8       	ldi	r24, 0x86	; 134
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	29 81       	ldd	r18, Y+1	; 0x01
     4aa:	3a 81       	ldd	r19, Y+2	; 0x02
     4ac:	fc 01       	movw	r30, r24
     4ae:	31 83       	std	Z+1, r19	; 0x01
     4b0:	20 83       	st	Z, r18
} 
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	cf 91       	pop	r28
     4b8:	df 91       	pop	r29
     4ba:	08 95       	ret

000004bc <openWindow>:
 

void openWindow( int time) 
{
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	60 97       	sbiw	r28, 0x10	; 16
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	98 8b       	std	Y+16, r25	; 0x10
     4d6:	8f 87       	std	Y+15, r24	; 0x0f
	TCCR1B |= (1 << CS10) | (1 << CS12);
     4d8:	81 e8       	ldi	r24, 0x81	; 129
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	21 e8       	ldi	r18, 0x81	; 129
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	25 60       	ori	r18, 0x05	; 5
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
	OCR1A = SERVO_FWD;
     4ea:	88 e8       	ldi	r24, 0x88	; 136
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	2f e1       	ldi	r18, 0x1F	; 31
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	fc 01       	movw	r30, r24
     4f4:	31 83       	std	Z+1, r19	; 0x01
     4f6:	20 83       	st	Z, r18
	delay_ms(time);
     4f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     4fa:	98 89       	ldd	r25, Y+16	; 0x10
     4fc:	0e 94 ca 03 	call	0x794	; 0x794 <delay_ms>
	TCCR1B &= 0xF8;
     500:	81 e8       	ldi	r24, 0x81	; 129
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	21 e8       	ldi	r18, 0x81	; 129
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	f9 01       	movw	r30, r18
     50a:	20 81       	ld	r18, Z
     50c:	28 7f       	andi	r18, 0xF8	; 248
     50e:	fc 01       	movw	r30, r24
     510:	20 83       	st	Z, r18
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	a0 e2       	ldi	r26, 0x20	; 32
     518:	b1 e4       	ldi	r27, 0x41	; 65
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	9a 83       	std	Y+2, r25	; 0x02
     51e:	ab 83       	std	Y+3, r26	; 0x03
     520:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     522:	69 81       	ldd	r22, Y+1	; 0x01
     524:	7a 81       	ldd	r23, Y+2	; 0x02
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	4a e7       	ldi	r20, 0x7A	; 122
     530:	55 e4       	ldi	r21, 0x45	; 69
     532:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     536:	dc 01       	movw	r26, r24
     538:	cb 01       	movw	r24, r22
     53a:	8d 83       	std	Y+5, r24	; 0x05
     53c:	9e 83       	std	Y+6, r25	; 0x06
     53e:	af 83       	std	Y+7, r26	; 0x07
     540:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     542:	11 e0       	ldi	r17, 0x01	; 1
     544:	6d 81       	ldd	r22, Y+5	; 0x05
     546:	7e 81       	ldd	r23, Y+6	; 0x06
     548:	8f 81       	ldd	r24, Y+7	; 0x07
     54a:	98 85       	ldd	r25, Y+8	; 0x08
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	5f e3       	ldi	r21, 0x3F	; 63
     554:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     558:	88 23       	and	r24, r24
     55a:	0c f0       	brlt	.+2      	; 0x55e <openWindow+0xa2>
     55c:	10 e0       	ldi	r17, 0x00	; 0
     55e:	11 23       	and	r17, r17
     560:	29 f0       	breq	.+10     	; 0x56c <openWindow+0xb0>
		__ticks = 1;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9a 87       	std	Y+10, r25	; 0x0a
     568:	89 87       	std	Y+9, r24	; 0x09
     56a:	46 c0       	rjmp	.+140    	; 0x5f8 <openWindow+0x13c>
	else if (__tmp > 65535)
     56c:	11 e0       	ldi	r17, 0x01	; 1
     56e:	6d 81       	ldd	r22, Y+5	; 0x05
     570:	7e 81       	ldd	r23, Y+6	; 0x06
     572:	8f 81       	ldd	r24, Y+7	; 0x07
     574:	98 85       	ldd	r25, Y+8	; 0x08
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	3f ef       	ldi	r19, 0xFF	; 255
     57a:	4f e7       	ldi	r20, 0x7F	; 127
     57c:	57 e4       	ldi	r21, 0x47	; 71
     57e:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     582:	18 16       	cp	r1, r24
     584:	0c f0       	brlt	.+2      	; 0x588 <openWindow+0xcc>
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	11 23       	and	r17, r17
     58a:	61 f1       	breq	.+88     	; 0x5e4 <openWindow+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     58c:	69 81       	ldd	r22, Y+1	; 0x01
     58e:	7a 81       	ldd	r23, Y+2	; 0x02
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	9c 81       	ldd	r25, Y+4	; 0x04
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e2       	ldi	r20, 0x20	; 32
     59a:	51 e4       	ldi	r21, 0x41	; 65
     59c:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	bc 01       	movw	r22, r24
     5a6:	cd 01       	movw	r24, r26
     5a8:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	9a 87       	std	Y+10, r25	; 0x0a
     5b2:	89 87       	std	Y+9, r24	; 0x09
     5b4:	12 c0       	rjmp	.+36     	; 0x5da <openWindow+0x11e>
     5b6:	80 e9       	ldi	r24, 0x90	; 144
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	9c 87       	std	Y+12, r25	; 0x0c
     5bc:	8b 87       	std	Y+11, r24	; 0x0b
     5be:	8b 85       	ldd	r24, Y+11	; 0x0b
     5c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5c2:	8c 01       	movw	r16, r24
     5c4:	c8 01       	movw	r24, r16
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <openWindow+0x10a>
     5ca:	8c 01       	movw	r16, r24
     5cc:	1c 87       	std	Y+12, r17	; 0x0c
     5ce:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d0:	89 85       	ldd	r24, Y+9	; 0x09
     5d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	9a 87       	std	Y+10, r25	; 0x0a
     5d8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5da:	89 85       	ldd	r24, Y+9	; 0x09
     5dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	51 f7       	brne	.-44     	; 0x5b6 <openWindow+0xfa>
     5e2:	17 c0       	rjmp	.+46     	; 0x612 <openWindow+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e4:	6d 81       	ldd	r22, Y+5	; 0x05
     5e6:	7e 81       	ldd	r23, Y+6	; 0x06
     5e8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ea:	98 85       	ldd	r25, Y+8	; 0x08
     5ec:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	9a 87       	std	Y+10, r25	; 0x0a
     5f6:	89 87       	std	Y+9, r24	; 0x09
     5f8:	89 85       	ldd	r24, Y+9	; 0x09
     5fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fc:	9e 87       	std	Y+14, r25	; 0x0e
     5fe:	8d 87       	std	Y+13, r24	; 0x0d
     600:	8d 85       	ldd	r24, Y+13	; 0x0d
     602:	9e 85       	ldd	r25, Y+14	; 0x0e
     604:	8c 01       	movw	r16, r24
     606:	f8 01       	movw	r30, r16
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <openWindow+0x14c>
     60c:	8f 01       	movw	r16, r30
     60e:	1e 87       	std	Y+14, r17	; 0x0e
     610:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
}
     612:	60 96       	adiw	r28, 0x10	; 16
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	cf 91       	pop	r28
     620:	df 91       	pop	r29
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <closeWindow>:

void closeWindow(int time) 
{
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	60 97       	sbiw	r28, 0x10	; 16
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	98 8b       	std	Y+16, r25	; 0x10
     642:	8f 87       	std	Y+15, r24	; 0x0f
	TCCR1B |= (1 << CS10) | (1 << CS12);
     644:	81 e8       	ldi	r24, 0x81	; 129
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	21 e8       	ldi	r18, 0x81	; 129
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	25 60       	ori	r18, 0x05	; 5
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18
	OCR1A = SERVO_REV;
     656:	88 e8       	ldi	r24, 0x88	; 136
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	20 e1       	ldi	r18, 0x10	; 16
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	31 83       	std	Z+1, r19	; 0x01
     662:	20 83       	st	Z, r18
	delay_ms(time);
     664:	8f 85       	ldd	r24, Y+15	; 0x0f
     666:	98 89       	ldd	r25, Y+16	; 0x10
     668:	0e 94 ca 03 	call	0x794	; 0x794 <delay_ms>
	TCCR1B &= 0xF8;
     66c:	81 e8       	ldi	r24, 0x81	; 129
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	21 e8       	ldi	r18, 0x81	; 129
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	28 7f       	andi	r18, 0xF8	; 248
     67a:	fc 01       	movw	r30, r24
     67c:	20 83       	st	Z, r18
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	a0 e2       	ldi	r26, 0x20	; 32
     684:	b1 e4       	ldi	r27, 0x41	; 65
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	ab 83       	std	Y+3, r26	; 0x03
     68c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     68e:	69 81       	ldd	r22, Y+1	; 0x01
     690:	7a 81       	ldd	r23, Y+2	; 0x02
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4a e7       	ldi	r20, 0x7A	; 122
     69c:	55 e4       	ldi	r21, 0x45	; 69
     69e:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	8d 83       	std	Y+5, r24	; 0x05
     6a8:	9e 83       	std	Y+6, r25	; 0x06
     6aa:	af 83       	std	Y+7, r26	; 0x07
     6ac:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6ae:	11 e0       	ldi	r17, 0x01	; 1
     6b0:	6d 81       	ldd	r22, Y+5	; 0x05
     6b2:	7e 81       	ldd	r23, Y+6	; 0x06
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	98 85       	ldd	r25, Y+8	; 0x08
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e8       	ldi	r20, 0x80	; 128
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     6c4:	88 23       	and	r24, r24
     6c6:	0c f0       	brlt	.+2      	; 0x6ca <closeWindow+0xa2>
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	11 23       	and	r17, r17
     6cc:	29 f0       	breq	.+10     	; 0x6d8 <closeWindow+0xb0>
		__ticks = 1;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	9a 87       	std	Y+10, r25	; 0x0a
     6d4:	89 87       	std	Y+9, r24	; 0x09
     6d6:	46 c0       	rjmp	.+140    	; 0x764 <closeWindow+0x13c>
	else if (__tmp > 65535)
     6d8:	11 e0       	ldi	r17, 0x01	; 1
     6da:	6d 81       	ldd	r22, Y+5	; 0x05
     6dc:	7e 81       	ldd	r23, Y+6	; 0x06
     6de:	8f 81       	ldd	r24, Y+7	; 0x07
     6e0:	98 85       	ldd	r25, Y+8	; 0x08
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	3f ef       	ldi	r19, 0xFF	; 255
     6e6:	4f e7       	ldi	r20, 0x7F	; 127
     6e8:	57 e4       	ldi	r21, 0x47	; 71
     6ea:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	0c f0       	brlt	.+2      	; 0x6f4 <closeWindow+0xcc>
     6f2:	10 e0       	ldi	r17, 0x00	; 0
     6f4:	11 23       	and	r17, r17
     6f6:	61 f1       	breq	.+88     	; 0x750 <closeWindow+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f8:	69 81       	ldd	r22, Y+1	; 0x01
     6fa:	7a 81       	ldd	r23, Y+2	; 0x02
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	9c 81       	ldd	r25, Y+4	; 0x04
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e2       	ldi	r20, 0x20	; 32
     706:	51 e4       	ldi	r21, 0x41	; 65
     708:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	bc 01       	movw	r22, r24
     712:	cd 01       	movw	r24, r26
     714:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	9a 87       	std	Y+10, r25	; 0x0a
     71e:	89 87       	std	Y+9, r24	; 0x09
     720:	12 c0       	rjmp	.+36     	; 0x746 <closeWindow+0x11e>
     722:	80 e9       	ldi	r24, 0x90	; 144
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	9c 87       	std	Y+12, r25	; 0x0c
     728:	8b 87       	std	Y+11, r24	; 0x0b
     72a:	8b 85       	ldd	r24, Y+11	; 0x0b
     72c:	9c 85       	ldd	r25, Y+12	; 0x0c
     72e:	8c 01       	movw	r16, r24
     730:	c8 01       	movw	r24, r16
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <closeWindow+0x10a>
     736:	8c 01       	movw	r16, r24
     738:	1c 87       	std	Y+12, r17	; 0x0c
     73a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     73c:	89 85       	ldd	r24, Y+9	; 0x09
     73e:	9a 85       	ldd	r25, Y+10	; 0x0a
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	9a 87       	std	Y+10, r25	; 0x0a
     744:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	9a 85       	ldd	r25, Y+10	; 0x0a
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	51 f7       	brne	.-44     	; 0x722 <closeWindow+0xfa>
     74e:	17 c0       	rjmp	.+46     	; 0x77e <closeWindow+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     750:	6d 81       	ldd	r22, Y+5	; 0x05
     752:	7e 81       	ldd	r23, Y+6	; 0x06
     754:	8f 81       	ldd	r24, Y+7	; 0x07
     756:	98 85       	ldd	r25, Y+8	; 0x08
     758:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     75c:	dc 01       	movw	r26, r24
     75e:	cb 01       	movw	r24, r22
     760:	9a 87       	std	Y+10, r25	; 0x0a
     762:	89 87       	std	Y+9, r24	; 0x09
     764:	89 85       	ldd	r24, Y+9	; 0x09
     766:	9a 85       	ldd	r25, Y+10	; 0x0a
     768:	9e 87       	std	Y+14, r25	; 0x0e
     76a:	8d 87       	std	Y+13, r24	; 0x0d
     76c:	8d 85       	ldd	r24, Y+13	; 0x0d
     76e:	9e 85       	ldd	r25, Y+14	; 0x0e
     770:	8c 01       	movw	r16, r24
     772:	f8 01       	movw	r30, r16
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <closeWindow+0x14c>
     778:	8f 01       	movw	r16, r30
     77a:	1e 87       	std	Y+14, r17	; 0x0e
     77c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
}
     77e:	60 96       	adiw	r28, 0x10	; 16
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <delay_ms>:

void static inline delay_ms(uint16_t this)
{ 
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	60 97       	sbiw	r28, 0x10	; 16
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	98 8b       	std	Y+16, r25	; 0x10
     7ae:	8f 87       	std	Y+15, r24	; 0x0f
	while(this--)
     7b0:	80 c0       	rjmp	.+256    	; 0x8b2 <delay_ms+0x11e>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a0 e8       	ldi	r26, 0x80	; 128
     7b8:	bf e3       	ldi	r27, 0x3F	; 63
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	ab 83       	std	Y+3, r26	; 0x03
     7c0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c2:	69 81       	ldd	r22, Y+1	; 0x01
     7c4:	7a 81       	ldd	r23, Y+2	; 0x02
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	4a e7       	ldi	r20, 0x7A	; 122
     7d0:	55 e4       	ldi	r21, 0x45	; 69
     7d2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	8d 83       	std	Y+5, r24	; 0x05
     7dc:	9e 83       	std	Y+6, r25	; 0x06
     7de:	af 83       	std	Y+7, r26	; 0x07
     7e0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7e2:	11 e0       	ldi	r17, 0x01	; 1
     7e4:	6d 81       	ldd	r22, Y+5	; 0x05
     7e6:	7e 81       	ldd	r23, Y+6	; 0x06
     7e8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ea:	98 85       	ldd	r25, Y+8	; 0x08
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e8       	ldi	r20, 0x80	; 128
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     7f8:	88 23       	and	r24, r24
     7fa:	0c f0       	brlt	.+2      	; 0x7fe <delay_ms+0x6a>
     7fc:	10 e0       	ldi	r17, 0x00	; 0
     7fe:	11 23       	and	r17, r17
     800:	29 f0       	breq	.+10     	; 0x80c <delay_ms+0x78>
		__ticks = 1;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	9a 87       	std	Y+10, r25	; 0x0a
     808:	89 87       	std	Y+9, r24	; 0x09
     80a:	46 c0       	rjmp	.+140    	; 0x898 <delay_ms+0x104>
	else if (__tmp > 65535)
     80c:	11 e0       	ldi	r17, 0x01	; 1
     80e:	6d 81       	ldd	r22, Y+5	; 0x05
     810:	7e 81       	ldd	r23, Y+6	; 0x06
     812:	8f 81       	ldd	r24, Y+7	; 0x07
     814:	98 85       	ldd	r25, Y+8	; 0x08
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	4f e7       	ldi	r20, 0x7F	; 127
     81c:	57 e4       	ldi	r21, 0x47	; 71
     81e:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     822:	18 16       	cp	r1, r24
     824:	0c f0       	brlt	.+2      	; 0x828 <delay_ms+0x94>
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	11 23       	and	r17, r17
     82a:	61 f1       	breq	.+88     	; 0x884 <delay_ms+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     82c:	69 81       	ldd	r22, Y+1	; 0x01
     82e:	7a 81       	ldd	r23, Y+2	; 0x02
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e2       	ldi	r20, 0x20	; 32
     83a:	51 e4       	ldi	r21, 0x41	; 65
     83c:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     840:	dc 01       	movw	r26, r24
     842:	cb 01       	movw	r24, r22
     844:	bc 01       	movw	r22, r24
     846:	cd 01       	movw	r24, r26
     848:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	9a 87       	std	Y+10, r25	; 0x0a
     852:	89 87       	std	Y+9, r24	; 0x09
     854:	12 c0       	rjmp	.+36     	; 0x87a <delay_ms+0xe6>
     856:	80 e9       	ldi	r24, 0x90	; 144
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	9c 87       	std	Y+12, r25	; 0x0c
     85c:	8b 87       	std	Y+11, r24	; 0x0b
     85e:	8b 85       	ldd	r24, Y+11	; 0x0b
     860:	9c 85       	ldd	r25, Y+12	; 0x0c
     862:	8c 01       	movw	r16, r24
     864:	c8 01       	movw	r24, r16
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <delay_ms+0xd2>
     86a:	8c 01       	movw	r16, r24
     86c:	1c 87       	std	Y+12, r17	; 0x0c
     86e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     870:	89 85       	ldd	r24, Y+9	; 0x09
     872:	9a 85       	ldd	r25, Y+10	; 0x0a
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	9a 87       	std	Y+10, r25	; 0x0a
     878:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	9a 85       	ldd	r25, Y+10	; 0x0a
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	51 f7       	brne	.-44     	; 0x856 <delay_ms+0xc2>
     882:	17 c0       	rjmp	.+46     	; 0x8b2 <delay_ms+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     884:	6d 81       	ldd	r22, Y+5	; 0x05
     886:	7e 81       	ldd	r23, Y+6	; 0x06
     888:	8f 81       	ldd	r24, Y+7	; 0x07
     88a:	98 85       	ldd	r25, Y+8	; 0x08
     88c:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	9a 87       	std	Y+10, r25	; 0x0a
     896:	89 87       	std	Y+9, r24	; 0x09
     898:	89 85       	ldd	r24, Y+9	; 0x09
     89a:	9a 85       	ldd	r25, Y+10	; 0x0a
     89c:	9e 87       	std	Y+14, r25	; 0x0e
     89e:	8d 87       	std	Y+13, r24	; 0x0d
     8a0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     8a4:	8c 01       	movw	r16, r24
     8a6:	c8 01       	movw	r24, r16
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <delay_ms+0x114>
     8ac:	8c 01       	movw	r16, r24
     8ae:	1e 87       	std	Y+14, r17	; 0x0e
     8b0:	0d 87       	std	Y+13, r16	; 0x0d
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     8b6:	98 89       	ldd	r25, Y+16	; 0x10
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	09 f4       	brne	.+2      	; 0x8be <delay_ms+0x12a>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c0:	98 89       	ldd	r25, Y+16	; 0x10
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	98 8b       	std	Y+16, r25	; 0x10
     8c6:	8f 87       	std	Y+15, r24	; 0x0f
     8c8:	22 23       	and	r18, r18
     8ca:	09 f0       	breq	.+2      	; 0x8ce <delay_ms+0x13a>
     8cc:	72 cf       	rjmp	.-284    	; 0x7b2 <delay_ms+0x1e>
	{ 
	_delay_ms(1);
	} 
}
     8ce:	60 96       	adiw	r28, 0x10	; 16
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	cf 91       	pop	r28
     8dc:	df 91       	pop	r29
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <SPI_init>:

void SPI_init(void)
{ 
     8e4:	df 93       	push	r29
     8e6:	cf 93       	push	r28
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62

  //DDRB = ((1<<DDB2)|(1<<DDB1)|(1<<DDB0)); //spi pins on port b MOSI SCK,SS outputs 

  SPCR = ((1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL)|(1<<CPHA));  // SPI enable, Master, f/16 
     8ec:	8c e4       	ldi	r24, 0x4C	; 76
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	2d e5       	ldi	r18, 0x5D	; 93
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18

} 
     8f6:	cf 91       	pop	r28
     8f8:	df 91       	pop	r29
     8fa:	08 95       	ret

000008fc <SPI_Transmit>:

char SPI_Transmit(char cData)
{
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	0f 92       	push	r0
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	89 83       	std	Y+1, r24	; 0x01
   SPDR = cData; 
     908:	8e e4       	ldi	r24, 0x4E	; 78
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	29 81       	ldd	r18, Y+1	; 0x01
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
   while(!(SPSR & (1<<SPIF))) 
     912:	00 00       	nop
     914:	8d e4       	ldi	r24, 0x4D	; 77
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	fc 01       	movw	r30, r24
     91a:	80 81       	ld	r24, Z
     91c:	88 23       	and	r24, r24
     91e:	d4 f7       	brge	.-12     	; 0x914 <__stack+0x15>
      ; 
   return SPDR; 
     920:	8e e4       	ldi	r24, 0x4E	; 78
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	fc 01       	movw	r30, r24
     926:	80 81       	ld	r24, Z
}
     928:	0f 90       	pop	r0
     92a:	cf 91       	pop	r28
     92c:	df 91       	pop	r29
     92e:	08 95       	ret

00000930 <getTime>:

void getTime(uint8_t * hours, uint8_t * minutes, uint8_t * seconds)
{
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	00 d0       	rcall	.+0      	; 0x936 <getTime+0x6>
     936:	00 d0       	rcall	.+0      	; 0x938 <getTime+0x8>
     938:	00 d0       	rcall	.+0      	; 0x93a <getTime+0xa>
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	9a 83       	std	Y+2, r25	; 0x02
     940:	89 83       	std	Y+1, r24	; 0x01
     942:	7c 83       	std	Y+4, r23	; 0x04
     944:	6b 83       	std	Y+3, r22	; 0x03
     946:	5e 83       	std	Y+6, r21	; 0x06
     948:	4d 83       	std	Y+5, r20	; 0x05
	
}
     94a:	26 96       	adiw	r28, 0x06	; 6
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	08 95       	ret

0000095c <print>:

void print(char * input)
{
     95c:	df 93       	push	r29
     95e:	cf 93       	push	r28
     960:	00 d0       	rcall	.+0      	; 0x962 <print+0x6>
     962:	00 d0       	rcall	.+0      	; 0x964 <print+0x8>
     964:	00 d0       	rcall	.+0      	; 0x966 <print+0xa>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	9e 83       	std	Y+6, r25	; 0x06
     96c:	8d 83       	std	Y+5, r24	; 0x05
	int length = strlen(input);
     96e:	8d 81       	ldd	r24, Y+5	; 0x05
     970:	9e 81       	ldd	r25, Y+6	; 0x06
     972:	0e 94 9f 09 	call	0x133e	; 0x133e <strlen>
     976:	9c 83       	std	Y+4, r25	; 0x04
     978:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i < length; ++i)
     97a:	1a 82       	std	Y+2, r1	; 0x02
     97c:	19 82       	std	Y+1, r1	; 0x01
     97e:	0f c0       	rjmp	.+30     	; 0x99e <print+0x42>
	{
		USART_Transmit(input[i]);
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	2d 81       	ldd	r18, Y+5	; 0x05
     986:	3e 81       	ldd	r19, Y+6	; 0x06
     988:	82 0f       	add	r24, r18
     98a:	93 1f       	adc	r25, r19
     98c:	fc 01       	movw	r30, r24
     98e:	80 81       	ld	r24, Z
     990:	0e 94 09 08 	call	0x1012	; 0x1012 <USART_Transmit>
}

void print(char * input)
{
	int length = strlen(input);
	for(int i = 0; i < length; ++i)
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	29 81       	ldd	r18, Y+1	; 0x01
     9a0:	3a 81       	ldd	r19, Y+2	; 0x02
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	28 17       	cp	r18, r24
     9a8:	39 07       	cpc	r19, r25
     9aa:	54 f3       	brlt	.-44     	; 0x980 <print+0x24>
	{
		USART_Transmit(input[i]);
	}
	
}
     9ac:	26 96       	adiw	r28, 0x06	; 6
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	cf 91       	pop	r28
     9ba:	df 91       	pop	r29
     9bc:	08 95       	ret

000009be <__vector_14>:
 */

//OLD: 2/15/2012
//ISR(TIMER0_OVF_vect)
ISR(TIMER0_COMPA_vect)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	68 97       	sbiw	r28, 0x18	; 24
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	cd bf       	out	0x3d, r28	; 61
	if( zerocross == 1) 
     9f2:	80 91 02 01 	lds	r24, 0x0102
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	09 f0       	breq	.+2      	; 0x9fc <__vector_14+0x3e>
     9fa:	07 c1       	rjmp	.+526    	; 0xc0a <__vector_14+0x24c>
	{
		if( count >= dim )
     9fc:	20 91 12 01 	lds	r18, 0x0112
     a00:	30 91 13 01 	lds	r19, 0x0113
     a04:	80 91 00 01 	lds	r24, 0x0100
     a08:	90 91 01 01 	lds	r25, 0x0101
     a0c:	28 17       	cp	r18, r24
     a0e:	39 07       	cpc	r19, r25
     a10:	08 f4       	brcc	.+2      	; 0xa14 <__vector_14+0x56>
     a12:	ee c0       	rjmp	.+476    	; 0xbf0 <__vector_14+0x232>
		{
			PORTD |= (1 << PORTD6);
     a14:	8b e2       	ldi	r24, 0x2B	; 43
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	2b e2       	ldi	r18, 0x2B	; 43
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	f9 01       	movw	r30, r18
     a1e:	20 81       	ld	r18, Z
     a20:	20 64       	ori	r18, 0x40	; 64
     a22:	fc 01       	movw	r30, r24
     a24:	20 83       	st	Z, r18
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	a0 ea       	ldi	r26, 0xA0	; 160
     a2c:	b0 e4       	ldi	r27, 0x40	; 64
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	9a 83       	std	Y+2, r25	; 0x02
     a32:	ab 83       	std	Y+3, r26	; 0x03
     a34:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     a36:	69 81       	ldd	r22, Y+1	; 0x01
     a38:	7a 81       	ldd	r23, Y+2	; 0x02
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	2b ea       	ldi	r18, 0xAB	; 171
     a40:	3a ea       	ldi	r19, 0xAA	; 170
     a42:	4a ea       	ldi	r20, 0xAA	; 170
     a44:	50 e4       	ldi	r21, 0x40	; 64
     a46:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	8d 83       	std	Y+5, r24	; 0x05
     a50:	9e 83       	std	Y+6, r25	; 0x06
     a52:	af 83       	std	Y+7, r26	; 0x07
     a54:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a56:	11 e0       	ldi	r17, 0x01	; 1
     a58:	6d 81       	ldd	r22, Y+5	; 0x05
     a5a:	7e 81       	ldd	r23, Y+6	; 0x06
     a5c:	8f 81       	ldd	r24, Y+7	; 0x07
     a5e:	98 85       	ldd	r25, Y+8	; 0x08
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e8       	ldi	r20, 0x80	; 128
     a66:	5f e3       	ldi	r21, 0x3F	; 63
     a68:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     a6c:	88 23       	and	r24, r24
     a6e:	0c f0       	brlt	.+2      	; 0xa72 <__vector_14+0xb4>
     a70:	10 e0       	ldi	r17, 0x00	; 0
     a72:	11 23       	and	r17, r17
     a74:	19 f0       	breq	.+6      	; 0xa7c <__vector_14+0xbe>
		__ticks = 1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	89 87       	std	Y+9, r24	; 0x09
     a7a:	a3 c0       	rjmp	.+326    	; 0xbc2 <__vector_14+0x204>
	else if (__tmp > 255)
     a7c:	11 e0       	ldi	r17, 0x01	; 1
     a7e:	6d 81       	ldd	r22, Y+5	; 0x05
     a80:	7e 81       	ldd	r23, Y+6	; 0x06
     a82:	8f 81       	ldd	r24, Y+7	; 0x07
     a84:	98 85       	ldd	r25, Y+8	; 0x08
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	4f e7       	ldi	r20, 0x7F	; 127
     a8c:	53 e4       	ldi	r21, 0x43	; 67
     a8e:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     a92:	18 16       	cp	r1, r24
     a94:	0c f0       	brlt	.+2      	; 0xa98 <__vector_14+0xda>
     a96:	10 e0       	ldi	r17, 0x00	; 0
     a98:	11 23       	and	r17, r17
     a9a:	09 f4       	brne	.+2      	; 0xa9e <__vector_14+0xe0>
     a9c:	89 c0       	rjmp	.+274    	; 0xbb0 <__vector_14+0x1f2>
	{
		_delay_ms(__us / 1000.0);
     a9e:	69 81       	ldd	r22, Y+1	; 0x01
     aa0:	7a 81       	ldd	r23, Y+2	; 0x02
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	4a e7       	ldi	r20, 0x7A	; 122
     aac:	54 e4       	ldi	r21, 0x44	; 68
     aae:	0e 94 2f 08 	call	0x105e	; 0x105e <__divsf3>
     ab2:	dc 01       	movw	r26, r24
     ab4:	cb 01       	movw	r24, r22
     ab6:	8a 87       	std	Y+10, r24	; 0x0a
     ab8:	9b 87       	std	Y+11, r25	; 0x0b
     aba:	ac 87       	std	Y+12, r26	; 0x0c
     abc:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     abe:	6a 85       	ldd	r22, Y+10	; 0x0a
     ac0:	7b 85       	ldd	r23, Y+11	; 0x0b
     ac2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ac4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	4a e7       	ldi	r20, 0x7A	; 122
     acc:	55 e4       	ldi	r21, 0x45	; 69
     ace:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	8e 87       	std	Y+14, r24	; 0x0e
     ad8:	9f 87       	std	Y+15, r25	; 0x0f
     ada:	a8 8b       	std	Y+16, r26	; 0x10
     adc:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     ade:	11 e0       	ldi	r17, 0x01	; 1
     ae0:	6e 85       	ldd	r22, Y+14	; 0x0e
     ae2:	7f 85       	ldd	r23, Y+15	; 0x0f
     ae4:	88 89       	ldd	r24, Y+16	; 0x10
     ae6:	99 89       	ldd	r25, Y+17	; 0x11
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e8       	ldi	r20, 0x80	; 128
     aee:	5f e3       	ldi	r21, 0x3F	; 63
     af0:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     af4:	88 23       	and	r24, r24
     af6:	0c f0       	brlt	.+2      	; 0xafa <__vector_14+0x13c>
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	11 23       	and	r17, r17
     afc:	29 f0       	breq	.+10     	; 0xb08 <__vector_14+0x14a>
		__ticks = 1;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	9b 8b       	std	Y+19, r25	; 0x13
     b04:	8a 8b       	std	Y+18, r24	; 0x12
     b06:	46 c0       	rjmp	.+140    	; 0xb94 <__vector_14+0x1d6>
	else if (__tmp > 65535)
     b08:	11 e0       	ldi	r17, 0x01	; 1
     b0a:	6e 85       	ldd	r22, Y+14	; 0x0e
     b0c:	7f 85       	ldd	r23, Y+15	; 0x0f
     b0e:	88 89       	ldd	r24, Y+16	; 0x10
     b10:	99 89       	ldd	r25, Y+17	; 0x11
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	3f ef       	ldi	r19, 0xFF	; 255
     b16:	4f e7       	ldi	r20, 0x7F	; 127
     b18:	57 e4       	ldi	r21, 0x47	; 71
     b1a:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     b1e:	18 16       	cp	r1, r24
     b20:	0c f0       	brlt	.+2      	; 0xb24 <__vector_14+0x166>
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	11 23       	and	r17, r17
     b26:	61 f1       	breq	.+88     	; 0xb80 <__vector_14+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b28:	6a 85       	ldd	r22, Y+10	; 0x0a
     b2a:	7b 85       	ldd	r23, Y+11	; 0x0b
     b2c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b2e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e2       	ldi	r20, 0x20	; 32
     b36:	51 e4       	ldi	r21, 0x41	; 65
     b38:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     b3c:	dc 01       	movw	r26, r24
     b3e:	cb 01       	movw	r24, r22
     b40:	bc 01       	movw	r22, r24
     b42:	cd 01       	movw	r24, r26
     b44:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	9b 8b       	std	Y+19, r25	; 0x13
     b4e:	8a 8b       	std	Y+18, r24	; 0x12
     b50:	12 c0       	rjmp	.+36     	; 0xb76 <__vector_14+0x1b8>
     b52:	80 e9       	ldi	r24, 0x90	; 144
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	9d 8b       	std	Y+21, r25	; 0x15
     b58:	8c 8b       	std	Y+20, r24	; 0x14
     b5a:	8c 89       	ldd	r24, Y+20	; 0x14
     b5c:	9d 89       	ldd	r25, Y+21	; 0x15
     b5e:	8c 01       	movw	r16, r24
     b60:	c8 01       	movw	r24, r16
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <__vector_14+0x1a4>
     b66:	8c 01       	movw	r16, r24
     b68:	1d 8b       	std	Y+21, r17	; 0x15
     b6a:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6c:	8a 89       	ldd	r24, Y+18	; 0x12
     b6e:	9b 89       	ldd	r25, Y+19	; 0x13
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	9b 8b       	std	Y+19, r25	; 0x13
     b74:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b76:	8a 89       	ldd	r24, Y+18	; 0x12
     b78:	9b 89       	ldd	r25, Y+19	; 0x13
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	51 f7       	brne	.-44     	; 0xb52 <__vector_14+0x194>
     b7e:	28 c0       	rjmp	.+80     	; 0xbd0 <__vector_14+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b80:	6e 85       	ldd	r22, Y+14	; 0x0e
     b82:	7f 85       	ldd	r23, Y+15	; 0x0f
     b84:	88 89       	ldd	r24, Y+16	; 0x10
     b86:	99 89       	ldd	r25, Y+17	; 0x11
     b88:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	9b 8b       	std	Y+19, r25	; 0x13
     b92:	8a 8b       	std	Y+18, r24	; 0x12
     b94:	8a 89       	ldd	r24, Y+18	; 0x12
     b96:	9b 89       	ldd	r25, Y+19	; 0x13
     b98:	9f 8b       	std	Y+23, r25	; 0x17
     b9a:	8e 8b       	std	Y+22, r24	; 0x16
     b9c:	8e 89       	ldd	r24, Y+22	; 0x16
     b9e:	9f 89       	ldd	r25, Y+23	; 0x17
     ba0:	8c 01       	movw	r16, r24
     ba2:	f8 01       	movw	r30, r16
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <__vector_14+0x1e6>
     ba8:	8f 01       	movw	r16, r30
     baa:	1f 8b       	std	Y+23, r17	; 0x17
     bac:	0e 8b       	std	Y+22, r16	; 0x16
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__vector_14+0x212>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bb0:	6d 81       	ldd	r22, Y+5	; 0x05
     bb2:	7e 81       	ldd	r23, Y+6	; 0x06
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	98 85       	ldd	r25, Y+8	; 0x08
     bb8:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	89 87       	std	Y+9, r24	; 0x09
     bc2:	89 85       	ldd	r24, Y+9	; 0x09
     bc4:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bc6:	88 8d       	ldd	r24, Y+24	; 0x18
     bc8:	18 2f       	mov	r17, r24
     bca:	1a 95       	dec	r17
     bcc:	f1 f7       	brne	.-4      	; 0xbca <__vector_14+0x20c>
     bce:	18 8f       	std	Y+24, r17	; 0x18
			//PORTB |= (1 << PORTB0);
			_delay_us( 5 );
			PORTD &= ~(1 << PORTD6);
     bd0:	8b e2       	ldi	r24, 0x2B	; 43
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	2b e2       	ldi	r18, 0x2B	; 43
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	f9 01       	movw	r30, r18
     bda:	20 81       	ld	r18, Z
     bdc:	2f 7b       	andi	r18, 0xBF	; 191
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
			//PORTB &= ~(1 << PORTB0);
			count = 0;
     be2:	10 92 13 01 	sts	0x0113, r1
     be6:	10 92 12 01 	sts	0x0112, r1
			zerocross = 0;
     bea:	10 92 02 01 	sts	0x0102, r1
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <__vector_14+0x24c>
		}
		else
		{
			print("Got Here");
     bf0:	88 e0       	ldi	r24, 0x08	; 8
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 ae 04 	call	0x95c	; 0x95c <print>
			count = count + 1;
     bf8:	80 91 12 01 	lds	r24, 0x0112
     bfc:	90 91 13 01 	lds	r25, 0x0113
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	90 93 13 01 	sts	0x0113, r25
     c06:	80 93 12 01 	sts	0x0112, r24
		}
	}
	
}
     c0a:	68 96       	adiw	r28, 0x18	; 24
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_1>:
	freqCounter = 0;
}
 **********************************/

ISR(INT0_vect)
{
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	8f 93       	push	r24
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	zerocross = 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 02 01 	sts	0x0102, r24
}
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	8f 91       	pop	r24
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <__vector_18>:

ISR(USART_RX_vect)
{
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSR0A  & (1 << RXC0)) )
     c7e:	00 00       	nop
     c80:	80 ec       	ldi	r24, 0xC0	; 192
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z
     c88:	88 23       	and	r24, r24
     c8a:	d4 f7       	brge	.-12     	; 0xc80 <__vector_18+0x1c>
	;
	/* Get and return received data from buffer */
	//dim = UDR0;
	rxflag = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	80 93 14 01 	sts	0x0114, r24
}
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_3>:

//PIR Sensor
ISR(PCINT0_vect)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	6c 97       	sbiw	r28, 0x1c	; 28
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	cd bf       	out	0x3d, r28	; 61
	if( !(PINB & (1 << PORTB0)) )
     cdc:	83 e2       	ldi	r24, 0x23	; 35
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	fc 01       	movw	r30, r24
     ce2:	80 81       	ld	r24, Z
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	81 70       	andi	r24, 0x01	; 1
     cea:	90 70       	andi	r25, 0x00	; 0
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	09 f0       	breq	.+2      	; 0xcf2 <__vector_3+0x4a>
     cf0:	8a c0       	rjmp	.+276    	; 0xe06 <__vector_3+0x15e>
	{
		//SOMETHING WAS SENSED
		
		//openWindow(SERVO_REV, 3000);
		//_delay_ms(1000);
		PORTC |= (1 << PORTC0);
     cf2:	88 e2       	ldi	r24, 0x28	; 40
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	28 e2       	ldi	r18, 0x28	; 40
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	f9 01       	movw	r30, r18
     cfc:	20 81       	ld	r18, Z
     cfe:	21 60       	ori	r18, 0x01	; 1
     d00:	fc 01       	movw	r30, r24
     d02:	20 83       	st	Z, r18
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	aa e7       	ldi	r26, 0x7A	; 122
     d0a:	b4 e4       	ldi	r27, 0x44	; 68
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	ab 83       	std	Y+3, r26	; 0x03
     d12:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     d14:	69 81       	ldd	r22, Y+1	; 0x01
     d16:	7a 81       	ldd	r23, Y+2	; 0x02
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	4a e7       	ldi	r20, 0x7A	; 122
     d22:	55 e4       	ldi	r21, 0x45	; 69
     d24:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	8d 83       	std	Y+5, r24	; 0x05
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	af 83       	std	Y+7, r26	; 0x07
     d32:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d34:	11 e0       	ldi	r17, 0x01	; 1
     d36:	6d 81       	ldd	r22, Y+5	; 0x05
     d38:	7e 81       	ldd	r23, Y+6	; 0x06
     d3a:	8f 81       	ldd	r24, Y+7	; 0x07
     d3c:	98 85       	ldd	r25, Y+8	; 0x08
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e8       	ldi	r20, 0x80	; 128
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     d4a:	88 23       	and	r24, r24
     d4c:	0c f0       	brlt	.+2      	; 0xd50 <__vector_3+0xa8>
     d4e:	10 e0       	ldi	r17, 0x00	; 0
     d50:	11 23       	and	r17, r17
     d52:	29 f0       	breq	.+10     	; 0xd5e <__vector_3+0xb6>
		__ticks = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9a 87       	std	Y+10, r25	; 0x0a
     d5a:	89 87       	std	Y+9, r24	; 0x09
     d5c:	46 c0       	rjmp	.+140    	; 0xdea <__vector_3+0x142>
	else if (__tmp > 65535)
     d5e:	11 e0       	ldi	r17, 0x01	; 1
     d60:	6d 81       	ldd	r22, Y+5	; 0x05
     d62:	7e 81       	ldd	r23, Y+6	; 0x06
     d64:	8f 81       	ldd	r24, Y+7	; 0x07
     d66:	98 85       	ldd	r25, Y+8	; 0x08
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	3f ef       	ldi	r19, 0xFF	; 255
     d6c:	4f e7       	ldi	r20, 0x7F	; 127
     d6e:	57 e4       	ldi	r21, 0x47	; 71
     d70:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     d74:	18 16       	cp	r1, r24
     d76:	0c f0       	brlt	.+2      	; 0xd7a <__vector_3+0xd2>
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	11 23       	and	r17, r17
     d7c:	61 f1       	breq	.+88     	; 0xdd6 <__vector_3+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7e:	69 81       	ldd	r22, Y+1	; 0x01
     d80:	7a 81       	ldd	r23, Y+2	; 0x02
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e2       	ldi	r20, 0x20	; 32
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	bc 01       	movw	r22, r24
     d98:	cd 01       	movw	r24, r26
     d9a:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	9a 87       	std	Y+10, r25	; 0x0a
     da4:	89 87       	std	Y+9, r24	; 0x09
     da6:	12 c0       	rjmp	.+36     	; 0xdcc <__vector_3+0x124>
     da8:	80 e9       	ldi	r24, 0x90	; 144
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	9c 87       	std	Y+12, r25	; 0x0c
     dae:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db0:	8b 85       	ldd	r24, Y+11	; 0x0b
     db2:	9c 85       	ldd	r25, Y+12	; 0x0c
     db4:	8c 01       	movw	r16, r24
     db6:	c8 01       	movw	r24, r16
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <__vector_3+0x110>
     dbc:	8c 01       	movw	r16, r24
     dbe:	1c 87       	std	Y+12, r17	; 0x0c
     dc0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	89 85       	ldd	r24, Y+9	; 0x09
     dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9a 87       	std	Y+10, r25	; 0x0a
     dca:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	51 f7       	brne	.-44     	; 0xda8 <__vector_3+0x100>
     dd4:	a1 c0       	rjmp	.+322    	; 0xf18 <__vector_3+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6d 81       	ldd	r22, Y+5	; 0x05
     dd8:	7e 81       	ldd	r23, Y+6	; 0x06
     dda:	8f 81       	ldd	r24, Y+7	; 0x07
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9a 87       	std	Y+10, r25	; 0x0a
     de8:	89 87       	std	Y+9, r24	; 0x09
     dea:	89 85       	ldd	r24, Y+9	; 0x09
     dec:	9a 85       	ldd	r25, Y+10	; 0x0a
     dee:	9e 87       	std	Y+14, r25	; 0x0e
     df0:	8d 87       	std	Y+13, r24	; 0x0d
     df2:	8d 85       	ldd	r24, Y+13	; 0x0d
     df4:	9e 85       	ldd	r25, Y+14	; 0x0e
     df6:	8c 01       	movw	r16, r24
     df8:	f8 01       	movw	r30, r16
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <__vector_3+0x152>
     dfe:	8f 01       	movw	r16, r30
     e00:	1e 87       	std	Y+14, r17	; 0x0e
     e02:	0d 87       	std	Y+13, r16	; 0x0d
     e04:	89 c0       	rjmp	.+274    	; 0xf18 <__vector_3+0x270>
		
	}
	else
	{
		;//Do Nothing
		PORTC &= ~(1 << PORTC0);
     e06:	88 e2       	ldi	r24, 0x28	; 40
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	28 e2       	ldi	r18, 0x28	; 40
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	f9 01       	movw	r30, r18
     e10:	20 81       	ld	r18, Z
     e12:	2e 7f       	andi	r18, 0xFE	; 254
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	aa e7       	ldi	r26, 0x7A	; 122
     e1e:	b4 e4       	ldi	r27, 0x44	; 68
     e20:	8f 87       	std	Y+15, r24	; 0x0f
     e22:	98 8b       	std	Y+16, r25	; 0x10
     e24:	a9 8b       	std	Y+17, r26	; 0x11
     e26:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     e28:	6f 85       	ldd	r22, Y+15	; 0x0f
     e2a:	78 89       	ldd	r23, Y+16	; 0x10
     e2c:	89 89       	ldd	r24, Y+17	; 0x11
     e2e:	9a 89       	ldd	r25, Y+18	; 0x12
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	4a e7       	ldi	r20, 0x7A	; 122
     e36:	55 e4       	ldi	r21, 0x45	; 69
     e38:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	8b 8b       	std	Y+19, r24	; 0x13
     e42:	9c 8b       	std	Y+20, r25	; 0x14
     e44:	ad 8b       	std	Y+21, r26	; 0x15
     e46:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     e48:	11 e0       	ldi	r17, 0x01	; 1
     e4a:	6b 89       	ldd	r22, Y+19	; 0x13
     e4c:	7c 89       	ldd	r23, Y+20	; 0x14
     e4e:	8d 89       	ldd	r24, Y+21	; 0x15
     e50:	9e 89       	ldd	r25, Y+22	; 0x16
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e8       	ldi	r20, 0x80	; 128
     e58:	5f e3       	ldi	r21, 0x3F	; 63
     e5a:	0e 94 2b 08 	call	0x1056	; 0x1056 <__cmpsf2>
     e5e:	88 23       	and	r24, r24
     e60:	0c f0       	brlt	.+2      	; 0xe64 <__vector_3+0x1bc>
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	11 23       	and	r17, r17
     e66:	29 f0       	breq	.+10     	; 0xe72 <__vector_3+0x1ca>
		__ticks = 1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	98 8f       	std	Y+24, r25	; 0x18
     e6e:	8f 8b       	std	Y+23, r24	; 0x17
     e70:	46 c0       	rjmp	.+140    	; 0xefe <__vector_3+0x256>
	else if (__tmp > 65535)
     e72:	11 e0       	ldi	r17, 0x01	; 1
     e74:	6b 89       	ldd	r22, Y+19	; 0x13
     e76:	7c 89       	ldd	r23, Y+20	; 0x14
     e78:	8d 89       	ldd	r24, Y+21	; 0x15
     e7a:	9e 89       	ldd	r25, Y+22	; 0x16
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	57 e4       	ldi	r21, 0x47	; 71
     e84:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     e88:	18 16       	cp	r1, r24
     e8a:	0c f0       	brlt	.+2      	; 0xe8e <__vector_3+0x1e6>
     e8c:	10 e0       	ldi	r17, 0x00	; 0
     e8e:	11 23       	and	r17, r17
     e90:	61 f1       	breq	.+88     	; 0xeea <__vector_3+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e92:	6f 85       	ldd	r22, Y+15	; 0x0f
     e94:	78 89       	ldd	r23, Y+16	; 0x10
     e96:	89 89       	ldd	r24, Y+17	; 0x11
     e98:	9a 89       	ldd	r25, Y+18	; 0x12
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e2       	ldi	r20, 0x20	; 32
     ea0:	51 e4       	ldi	r21, 0x41	; 65
     ea2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	98 8f       	std	Y+24, r25	; 0x18
     eb8:	8f 8b       	std	Y+23, r24	; 0x17
     eba:	12 c0       	rjmp	.+36     	; 0xee0 <__vector_3+0x238>
     ebc:	80 e9       	ldi	r24, 0x90	; 144
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	9a 8f       	std	Y+26, r25	; 0x1a
     ec2:	89 8f       	std	Y+25, r24	; 0x19
     ec4:	89 8d       	ldd	r24, Y+25	; 0x19
     ec6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ec8:	8c 01       	movw	r16, r24
     eca:	c8 01       	movw	r24, r16
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <__vector_3+0x224>
     ed0:	8c 01       	movw	r16, r24
     ed2:	1a 8f       	std	Y+26, r17	; 0x1a
     ed4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	8f 89       	ldd	r24, Y+23	; 0x17
     ed8:	98 8d       	ldd	r25, Y+24	; 0x18
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	98 8f       	std	Y+24, r25	; 0x18
     ede:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	8f 89       	ldd	r24, Y+23	; 0x17
     ee2:	98 8d       	ldd	r25, Y+24	; 0x18
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	51 f7       	brne	.-44     	; 0xebc <__vector_3+0x214>
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <__vector_3+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6b 89       	ldd	r22, Y+19	; 0x13
     eec:	7c 89       	ldd	r23, Y+20	; 0x14
     eee:	8d 89       	ldd	r24, Y+21	; 0x15
     ef0:	9e 89       	ldd	r25, Y+22	; 0x16
     ef2:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	98 8f       	std	Y+24, r25	; 0x18
     efc:	8f 8b       	std	Y+23, r24	; 0x17
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	9c 8f       	std	Y+28, r25	; 0x1c
     f04:	8b 8f       	std	Y+27, r24	; 0x1b
     f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0a:	8c 01       	movw	r16, r24
     f0c:	f8 01       	movw	r30, r16
     f0e:	31 97       	sbiw	r30, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <__vector_3+0x266>
     f12:	8f 01       	movw	r16, r30
     f14:	1c 8f       	std	Y+28, r17	; 0x1c
     f16:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(1000);
	}
	
}
     f18:	6c 96       	adiw	r28, 0x1c	; 28
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <__vector_5>:

//Frequency Counter
ISR(PCINT2_vect)
{
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	if(PIND & (1 << PORTD3))
     f66:	89 e2       	ldi	r24, 0x29	; 41
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	fc 01       	movw	r30, r24
     f6c:	80 81       	ld	r24, Z
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	88 70       	andi	r24, 0x08	; 8
     f74:	90 70       	andi	r25, 0x00	; 0
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	99 f0       	breq	.+38     	; 0xfa0 <__vector_5+0x58>
	{
		freqCounter++;
     f7a:	80 91 16 01 	lds	r24, 0x0116
     f7e:	90 91 17 01 	lds	r25, 0x0117
     f82:	a0 91 18 01 	lds	r26, 0x0118
     f86:	b0 91 19 01 	lds	r27, 0x0119
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	a1 1d       	adc	r26, r1
     f8e:	b1 1d       	adc	r27, r1
     f90:	80 93 16 01 	sts	0x0116, r24
     f94:	90 93 17 01 	sts	0x0117, r25
     f98:	a0 93 18 01 	sts	0x0118, r26
     f9c:	b0 93 19 01 	sts	0x0119, r27
	}
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <USART_Init>:

#include<avr/io.h> 
#include"USART.h"

void USART_Init( unsigned int ubrr)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <USART_Init+0x6>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
	DDRD |= (1 << PORTD1) | (1 << PORTD0);
     fc8:	8a e2       	ldi	r24, 0x2A	; 42
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	2a e2       	ldi	r18, 0x2A	; 42
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	f9 01       	movw	r30, r18
     fd2:	20 81       	ld	r18, Z
     fd4:	23 60       	ori	r18, 0x03	; 3
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 83       	st	Z, r18
    UBRR0H = (ubrr >> 8);
     fda:	85 ec       	ldi	r24, 0xC5	; 197
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	29 81       	ldd	r18, Y+1	; 0x01
     fe0:	3a 81       	ldd	r19, Y+2	; 0x02
     fe2:	23 2f       	mov	r18, r19
     fe4:	33 27       	eor	r19, r19
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
    UBRR0L = ubrr;
     fea:	84 ec       	ldi	r24, 0xC4	; 196
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	29 81       	ldd	r18, Y+1	; 0x01
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
    
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);      // Enable receiver and transmitter and interrupt receive
     ff4:	81 ec       	ldi	r24, 0xC1	; 193
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	28 e9       	ldi	r18, 0x98	; 152
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
     ffe:	82 ec       	ldi	r24, 0xC2	; 194
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	26 e0       	ldi	r18, 0x06	; 6
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
    while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
    101e:	00 00       	nop
    1020:	80 ec       	ldi	r24, 0xC0	; 192
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	fc 01       	movw	r30, r24
    1026:	80 81       	ld	r24, Z
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	80 72       	andi	r24, 0x20	; 32
    102e:	90 70       	andi	r25, 0x00	; 0
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	b1 f3       	breq	.-20     	; 0x1020 <USART_Transmit+0xe>

	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1034:	86 ec       	ldi	r24, 0xC6	; 198
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	29 81       	ldd	r18, Y+1	; 0x01
    103a:	fc 01       	movw	r30, r24
    103c:	20 83       	st	Z, r18
}
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <USART_Receive>:


unsigned char USART_Receive( void )
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
	return '\0';
    104e:	80 e0       	ldi	r24, 0x00	; 0
}
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <__cmpsf2>:
    1056:	97 d0       	rcall	.+302    	; 0x1186 <__fp_cmp>
    1058:	08 f4       	brcc	.+2      	; 0x105c <__cmpsf2+0x6>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	08 95       	ret

0000105e <__divsf3>:
    105e:	0c d0       	rcall	.+24     	; 0x1078 <__divsf3x>
    1060:	cd c0       	rjmp	.+410    	; 0x11fc <__fp_round>
    1062:	c5 d0       	rcall	.+394    	; 0x11ee <__fp_pscB>
    1064:	40 f0       	brcs	.+16     	; 0x1076 <__divsf3+0x18>
    1066:	bc d0       	rcall	.+376    	; 0x11e0 <__fp_pscA>
    1068:	30 f0       	brcs	.+12     	; 0x1076 <__divsf3+0x18>
    106a:	21 f4       	brne	.+8      	; 0x1074 <__divsf3+0x16>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	19 f0       	breq	.+6      	; 0x1076 <__divsf3+0x18>
    1070:	ae c0       	rjmp	.+348    	; 0x11ce <__fp_inf>
    1072:	51 11       	cpse	r21, r1
    1074:	f7 c0       	rjmp	.+494    	; 0x1264 <__fp_szero>
    1076:	b1 c0       	rjmp	.+354    	; 0x11da <__fp_nan>

00001078 <__divsf3x>:
    1078:	d2 d0       	rcall	.+420    	; 0x121e <__fp_split3>
    107a:	98 f3       	brcs	.-26     	; 0x1062 <__divsf3+0x4>

0000107c <__divsf3_pse>:
    107c:	99 23       	and	r25, r25
    107e:	c9 f3       	breq	.-14     	; 0x1072 <__divsf3+0x14>
    1080:	55 23       	and	r21, r21
    1082:	b1 f3       	breq	.-20     	; 0x1070 <__divsf3+0x12>
    1084:	95 1b       	sub	r25, r21
    1086:	55 0b       	sbc	r21, r21
    1088:	bb 27       	eor	r27, r27
    108a:	aa 27       	eor	r26, r26
    108c:	62 17       	cp	r22, r18
    108e:	73 07       	cpc	r23, r19
    1090:	84 07       	cpc	r24, r20
    1092:	38 f0       	brcs	.+14     	; 0x10a2 <__divsf3_pse+0x26>
    1094:	9f 5f       	subi	r25, 0xFF	; 255
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	22 0f       	add	r18, r18
    109a:	33 1f       	adc	r19, r19
    109c:	44 1f       	adc	r20, r20
    109e:	aa 1f       	adc	r26, r26
    10a0:	a9 f3       	breq	.-22     	; 0x108c <__divsf3_pse+0x10>
    10a2:	33 d0       	rcall	.+102    	; 0x110a <__divsf3_pse+0x8e>
    10a4:	0e 2e       	mov	r0, r30
    10a6:	3a f0       	brmi	.+14     	; 0x10b6 <__divsf3_pse+0x3a>
    10a8:	e0 e8       	ldi	r30, 0x80	; 128
    10aa:	30 d0       	rcall	.+96     	; 0x110c <__divsf3_pse+0x90>
    10ac:	91 50       	subi	r25, 0x01	; 1
    10ae:	50 40       	sbci	r21, 0x00	; 0
    10b0:	e6 95       	lsr	r30
    10b2:	00 1c       	adc	r0, r0
    10b4:	ca f7       	brpl	.-14     	; 0x10a8 <__divsf3_pse+0x2c>
    10b6:	29 d0       	rcall	.+82     	; 0x110a <__divsf3_pse+0x8e>
    10b8:	fe 2f       	mov	r31, r30
    10ba:	27 d0       	rcall	.+78     	; 0x110a <__divsf3_pse+0x8e>
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	bb 1f       	adc	r27, r27
    10c4:	26 17       	cp	r18, r22
    10c6:	37 07       	cpc	r19, r23
    10c8:	48 07       	cpc	r20, r24
    10ca:	ab 07       	cpc	r26, r27
    10cc:	b0 e8       	ldi	r27, 0x80	; 128
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__divsf3_pse+0x56>
    10d0:	bb 0b       	sbc	r27, r27
    10d2:	80 2d       	mov	r24, r0
    10d4:	bf 01       	movw	r22, r30
    10d6:	ff 27       	eor	r31, r31
    10d8:	93 58       	subi	r25, 0x83	; 131
    10da:	5f 4f       	sbci	r21, 0xFF	; 255
    10dc:	2a f0       	brmi	.+10     	; 0x10e8 <__divsf3_pse+0x6c>
    10de:	9e 3f       	cpi	r25, 0xFE	; 254
    10e0:	51 05       	cpc	r21, r1
    10e2:	68 f0       	brcs	.+26     	; 0x10fe <__divsf3_pse+0x82>
    10e4:	74 c0       	rjmp	.+232    	; 0x11ce <__fp_inf>
    10e6:	be c0       	rjmp	.+380    	; 0x1264 <__fp_szero>
    10e8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ea:	ec f3       	brlt	.-6      	; 0x10e6 <__divsf3_pse+0x6a>
    10ec:	98 3e       	cpi	r25, 0xE8	; 232
    10ee:	dc f3       	brlt	.-10     	; 0x10e6 <__divsf3_pse+0x6a>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b7 95       	ror	r27
    10f8:	f7 95       	ror	r31
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	c9 f7       	brne	.-14     	; 0x10f0 <__divsf3_pse+0x74>
    10fe:	88 0f       	add	r24, r24
    1100:	91 1d       	adc	r25, r1
    1102:	96 95       	lsr	r25
    1104:	87 95       	ror	r24
    1106:	97 f9       	bld	r25, 7
    1108:	08 95       	ret
    110a:	e1 e0       	ldi	r30, 0x01	; 1
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	bb 1f       	adc	r27, r27
    1114:	62 17       	cp	r22, r18
    1116:	73 07       	cpc	r23, r19
    1118:	84 07       	cpc	r24, r20
    111a:	ba 07       	cpc	r27, r26
    111c:	20 f0       	brcs	.+8      	; 0x1126 <__divsf3_pse+0xaa>
    111e:	62 1b       	sub	r22, r18
    1120:	73 0b       	sbc	r23, r19
    1122:	84 0b       	sbc	r24, r20
    1124:	ba 0b       	sbc	r27, r26
    1126:	ee 1f       	adc	r30, r30
    1128:	88 f7       	brcc	.-30     	; 0x110c <__divsf3_pse+0x90>
    112a:	e0 95       	com	r30
    112c:	08 95       	ret

0000112e <__fixunssfsi>:
    112e:	7f d0       	rcall	.+254    	; 0x122e <__fp_splitA>
    1130:	88 f0       	brcs	.+34     	; 0x1154 <__fixunssfsi+0x26>
    1132:	9f 57       	subi	r25, 0x7F	; 127
    1134:	90 f0       	brcs	.+36     	; 0x115a <__fixunssfsi+0x2c>
    1136:	b9 2f       	mov	r27, r25
    1138:	99 27       	eor	r25, r25
    113a:	b7 51       	subi	r27, 0x17	; 23
    113c:	a0 f0       	brcs	.+40     	; 0x1166 <__fixunssfsi+0x38>
    113e:	d1 f0       	breq	.+52     	; 0x1174 <__fixunssfsi+0x46>
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	1a f0       	brmi	.+6      	; 0x1150 <__fixunssfsi+0x22>
    114a:	ba 95       	dec	r27
    114c:	c9 f7       	brne	.-14     	; 0x1140 <__fixunssfsi+0x12>
    114e:	12 c0       	rjmp	.+36     	; 0x1174 <__fixunssfsi+0x46>
    1150:	b1 30       	cpi	r27, 0x01	; 1
    1152:	81 f0       	breq	.+32     	; 0x1174 <__fixunssfsi+0x46>
    1154:	86 d0       	rcall	.+268    	; 0x1262 <__fp_zero>
    1156:	b1 e0       	ldi	r27, 0x01	; 1
    1158:	08 95       	ret
    115a:	83 c0       	rjmp	.+262    	; 0x1262 <__fp_zero>
    115c:	67 2f       	mov	r22, r23
    115e:	78 2f       	mov	r23, r24
    1160:	88 27       	eor	r24, r24
    1162:	b8 5f       	subi	r27, 0xF8	; 248
    1164:	39 f0       	breq	.+14     	; 0x1174 <__fixunssfsi+0x46>
    1166:	b9 3f       	cpi	r27, 0xF9	; 249
    1168:	cc f3       	brlt	.-14     	; 0x115c <__fixunssfsi+0x2e>
    116a:	86 95       	lsr	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b3 95       	inc	r27
    1172:	d9 f7       	brne	.-10     	; 0x116a <__fixunssfsi+0x3c>
    1174:	3e f4       	brtc	.+14     	; 0x1184 <__fixunssfsi+0x56>
    1176:	90 95       	com	r25
    1178:	80 95       	com	r24
    117a:	70 95       	com	r23
    117c:	61 95       	neg	r22
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__fp_cmp>:
    1186:	99 0f       	add	r25, r25
    1188:	00 08       	sbc	r0, r0
    118a:	55 0f       	add	r21, r21
    118c:	aa 0b       	sbc	r26, r26
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	fe ef       	ldi	r31, 0xFE	; 254
    1192:	16 16       	cp	r1, r22
    1194:	17 06       	cpc	r1, r23
    1196:	e8 07       	cpc	r30, r24
    1198:	f9 07       	cpc	r31, r25
    119a:	c0 f0       	brcs	.+48     	; 0x11cc <__fp_cmp+0x46>
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	e4 07       	cpc	r30, r20
    11a2:	f5 07       	cpc	r31, r21
    11a4:	98 f0       	brcs	.+38     	; 0x11cc <__fp_cmp+0x46>
    11a6:	62 1b       	sub	r22, r18
    11a8:	73 0b       	sbc	r23, r19
    11aa:	84 0b       	sbc	r24, r20
    11ac:	95 0b       	sbc	r25, r21
    11ae:	39 f4       	brne	.+14     	; 0x11be <__fp_cmp+0x38>
    11b0:	0a 26       	eor	r0, r26
    11b2:	61 f0       	breq	.+24     	; 0x11cc <__fp_cmp+0x46>
    11b4:	23 2b       	or	r18, r19
    11b6:	24 2b       	or	r18, r20
    11b8:	25 2b       	or	r18, r21
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <__fp_cmp+0x3e>
    11bc:	08 95       	ret
    11be:	0a 26       	eor	r0, r26
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__fp_cmp+0x3e>
    11c2:	a1 40       	sbci	r26, 0x01	; 1
    11c4:	a6 95       	lsr	r26
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	81 1d       	adc	r24, r1
    11ca:	81 1d       	adc	r24, r1
    11cc:	08 95       	ret

000011ce <__fp_inf>:
    11ce:	97 f9       	bld	r25, 7
    11d0:	9f 67       	ori	r25, 0x7F	; 127
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	08 95       	ret

000011da <__fp_nan>:
    11da:	9f ef       	ldi	r25, 0xFF	; 255
    11dc:	80 ec       	ldi	r24, 0xC0	; 192
    11de:	08 95       	ret

000011e0 <__fp_pscA>:
    11e0:	00 24       	eor	r0, r0
    11e2:	0a 94       	dec	r0
    11e4:	16 16       	cp	r1, r22
    11e6:	17 06       	cpc	r1, r23
    11e8:	18 06       	cpc	r1, r24
    11ea:	09 06       	cpc	r0, r25
    11ec:	08 95       	ret

000011ee <__fp_pscB>:
    11ee:	00 24       	eor	r0, r0
    11f0:	0a 94       	dec	r0
    11f2:	12 16       	cp	r1, r18
    11f4:	13 06       	cpc	r1, r19
    11f6:	14 06       	cpc	r1, r20
    11f8:	05 06       	cpc	r0, r21
    11fa:	08 95       	ret

000011fc <__fp_round>:
    11fc:	09 2e       	mov	r0, r25
    11fe:	03 94       	inc	r0
    1200:	00 0c       	add	r0, r0
    1202:	11 f4       	brne	.+4      	; 0x1208 <__fp_round+0xc>
    1204:	88 23       	and	r24, r24
    1206:	52 f0       	brmi	.+20     	; 0x121c <__fp_round+0x20>
    1208:	bb 0f       	add	r27, r27
    120a:	40 f4       	brcc	.+16     	; 0x121c <__fp_round+0x20>
    120c:	bf 2b       	or	r27, r31
    120e:	11 f4       	brne	.+4      	; 0x1214 <__fp_round+0x18>
    1210:	60 ff       	sbrs	r22, 0
    1212:	04 c0       	rjmp	.+8      	; 0x121c <__fp_round+0x20>
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	8f 4f       	sbci	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	08 95       	ret

0000121e <__fp_split3>:
    121e:	57 fd       	sbrc	r21, 7
    1220:	90 58       	subi	r25, 0x80	; 128
    1222:	44 0f       	add	r20, r20
    1224:	55 1f       	adc	r21, r21
    1226:	59 f0       	breq	.+22     	; 0x123e <__fp_splitA+0x10>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	71 f0       	breq	.+28     	; 0x1248 <__fp_splitA+0x1a>
    122c:	47 95       	ror	r20

0000122e <__fp_splitA>:
    122e:	88 0f       	add	r24, r24
    1230:	97 fb       	bst	r25, 7
    1232:	99 1f       	adc	r25, r25
    1234:	61 f0       	breq	.+24     	; 0x124e <__fp_splitA+0x20>
    1236:	9f 3f       	cpi	r25, 0xFF	; 255
    1238:	79 f0       	breq	.+30     	; 0x1258 <__fp_splitA+0x2a>
    123a:	87 95       	ror	r24
    123c:	08 95       	ret
    123e:	12 16       	cp	r1, r18
    1240:	13 06       	cpc	r1, r19
    1242:	14 06       	cpc	r1, r20
    1244:	55 1f       	adc	r21, r21
    1246:	f2 cf       	rjmp	.-28     	; 0x122c <__fp_split3+0xe>
    1248:	46 95       	lsr	r20
    124a:	f1 df       	rcall	.-30     	; 0x122e <__fp_splitA>
    124c:	08 c0       	rjmp	.+16     	; 0x125e <__fp_splitA+0x30>
    124e:	16 16       	cp	r1, r22
    1250:	17 06       	cpc	r1, r23
    1252:	18 06       	cpc	r1, r24
    1254:	99 1f       	adc	r25, r25
    1256:	f1 cf       	rjmp	.-30     	; 0x123a <__fp_splitA+0xc>
    1258:	86 95       	lsr	r24
    125a:	71 05       	cpc	r23, r1
    125c:	61 05       	cpc	r22, r1
    125e:	08 94       	sec
    1260:	08 95       	ret

00001262 <__fp_zero>:
    1262:	e8 94       	clt

00001264 <__fp_szero>:
    1264:	bb 27       	eor	r27, r27
    1266:	66 27       	eor	r22, r22
    1268:	77 27       	eor	r23, r23
    126a:	cb 01       	movw	r24, r22
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__gesf2>:
    1270:	8a df       	rcall	.-236    	; 0x1186 <__fp_cmp>
    1272:	08 f4       	brcc	.+2      	; 0x1276 <__gesf2+0x6>
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	08 95       	ret

00001278 <__mulsf3>:
    1278:	0b d0       	rcall	.+22     	; 0x1290 <__mulsf3x>
    127a:	c0 cf       	rjmp	.-128    	; 0x11fc <__fp_round>
    127c:	b1 df       	rcall	.-158    	; 0x11e0 <__fp_pscA>
    127e:	28 f0       	brcs	.+10     	; 0x128a <__mulsf3+0x12>
    1280:	b6 df       	rcall	.-148    	; 0x11ee <__fp_pscB>
    1282:	18 f0       	brcs	.+6      	; 0x128a <__mulsf3+0x12>
    1284:	95 23       	and	r25, r21
    1286:	09 f0       	breq	.+2      	; 0x128a <__mulsf3+0x12>
    1288:	a2 cf       	rjmp	.-188    	; 0x11ce <__fp_inf>
    128a:	a7 cf       	rjmp	.-178    	; 0x11da <__fp_nan>
    128c:	11 24       	eor	r1, r1
    128e:	ea cf       	rjmp	.-44     	; 0x1264 <__fp_szero>

00001290 <__mulsf3x>:
    1290:	c6 df       	rcall	.-116    	; 0x121e <__fp_split3>
    1292:	a0 f3       	brcs	.-24     	; 0x127c <__mulsf3+0x4>

00001294 <__mulsf3_pse>:
    1294:	95 9f       	mul	r25, r21
    1296:	d1 f3       	breq	.-12     	; 0x128c <__mulsf3+0x14>
    1298:	95 0f       	add	r25, r21
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	55 1f       	adc	r21, r21
    129e:	62 9f       	mul	r22, r18
    12a0:	f0 01       	movw	r30, r0
    12a2:	72 9f       	mul	r23, r18
    12a4:	bb 27       	eor	r27, r27
    12a6:	f0 0d       	add	r31, r0
    12a8:	b1 1d       	adc	r27, r1
    12aa:	63 9f       	mul	r22, r19
    12ac:	aa 27       	eor	r26, r26
    12ae:	f0 0d       	add	r31, r0
    12b0:	b1 1d       	adc	r27, r1
    12b2:	aa 1f       	adc	r26, r26
    12b4:	64 9f       	mul	r22, r20
    12b6:	66 27       	eor	r22, r22
    12b8:	b0 0d       	add	r27, r0
    12ba:	a1 1d       	adc	r26, r1
    12bc:	66 1f       	adc	r22, r22
    12be:	82 9f       	mul	r24, r18
    12c0:	22 27       	eor	r18, r18
    12c2:	b0 0d       	add	r27, r0
    12c4:	a1 1d       	adc	r26, r1
    12c6:	62 1f       	adc	r22, r18
    12c8:	73 9f       	mul	r23, r19
    12ca:	b0 0d       	add	r27, r0
    12cc:	a1 1d       	adc	r26, r1
    12ce:	62 1f       	adc	r22, r18
    12d0:	83 9f       	mul	r24, r19
    12d2:	a0 0d       	add	r26, r0
    12d4:	61 1d       	adc	r22, r1
    12d6:	22 1f       	adc	r18, r18
    12d8:	74 9f       	mul	r23, r20
    12da:	33 27       	eor	r19, r19
    12dc:	a0 0d       	add	r26, r0
    12de:	61 1d       	adc	r22, r1
    12e0:	23 1f       	adc	r18, r19
    12e2:	84 9f       	mul	r24, r20
    12e4:	60 0d       	add	r22, r0
    12e6:	21 1d       	adc	r18, r1
    12e8:	82 2f       	mov	r24, r18
    12ea:	76 2f       	mov	r23, r22
    12ec:	6a 2f       	mov	r22, r26
    12ee:	11 24       	eor	r1, r1
    12f0:	9f 57       	subi	r25, 0x7F	; 127
    12f2:	50 40       	sbci	r21, 0x00	; 0
    12f4:	8a f0       	brmi	.+34     	; 0x1318 <__mulsf3_pse+0x84>
    12f6:	e1 f0       	breq	.+56     	; 0x1330 <__mulsf3_pse+0x9c>
    12f8:	88 23       	and	r24, r24
    12fa:	4a f0       	brmi	.+18     	; 0x130e <__mulsf3_pse+0x7a>
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	bb 1f       	adc	r27, r27
    1302:	66 1f       	adc	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	a9 f7       	brne	.-22     	; 0x12f8 <__mulsf3_pse+0x64>
    130e:	9e 3f       	cpi	r25, 0xFE	; 254
    1310:	51 05       	cpc	r21, r1
    1312:	70 f0       	brcs	.+28     	; 0x1330 <__mulsf3_pse+0x9c>
    1314:	5c cf       	rjmp	.-328    	; 0x11ce <__fp_inf>
    1316:	a6 cf       	rjmp	.-180    	; 0x1264 <__fp_szero>
    1318:	5f 3f       	cpi	r21, 0xFF	; 255
    131a:	ec f3       	brlt	.-6      	; 0x1316 <__mulsf3_pse+0x82>
    131c:	98 3e       	cpi	r25, 0xE8	; 232
    131e:	dc f3       	brlt	.-10     	; 0x1316 <__mulsf3_pse+0x82>
    1320:	86 95       	lsr	r24
    1322:	77 95       	ror	r23
    1324:	67 95       	ror	r22
    1326:	b7 95       	ror	r27
    1328:	f7 95       	ror	r31
    132a:	e7 95       	ror	r30
    132c:	9f 5f       	subi	r25, 0xFF	; 255
    132e:	c1 f7       	brne	.-16     	; 0x1320 <__mulsf3_pse+0x8c>
    1330:	fe 2b       	or	r31, r30
    1332:	88 0f       	add	r24, r24
    1334:	91 1d       	adc	r25, r1
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	97 f9       	bld	r25, 7
    133c:	08 95       	ret

0000133e <strlen>:
    133e:	fc 01       	movw	r30, r24
    1340:	01 90       	ld	r0, Z+
    1342:	00 20       	and	r0, r0
    1344:	e9 f7       	brne	.-6      	; 0x1340 <strlen+0x2>
    1346:	80 95       	com	r24
    1348:	90 95       	com	r25
    134a:	8e 0f       	add	r24, r30
    134c:	9f 1f       	adc	r25, r31
    134e:	08 95       	ret

00001350 <_exit>:
    1350:	f8 94       	cli

00001352 <__stop_program>:
    1352:	ff cf       	rjmp	.-2      	; 0x1352 <__stop_program>
