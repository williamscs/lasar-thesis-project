
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001b8e  00001c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800122  00800122  00001c44  2**0
                  ALLOC
  3 .stab         00000f60  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000339  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00002edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000035d  00000000  00000000  000030fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a32  00000000  00000000  0000345a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001542  00000000  00000000  00005e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002407  00000000  00000000  000073ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000340  00000000  00000000  000097d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000070c  00000000  00000000  00009b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011c2  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000006d2  00000000  00000000  0000b3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  0000bab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e8       	ldi	r30, 0x8E	; 142
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 32       	cpi	r26, 0x22	; 34
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e2       	ldi	r26, 0x22	; 34
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3f       	cpi	r26, 0xF6	; 246
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 85 00 	call	0x10a	; 0x10a <main>
      9e:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_default>

000000a6 <initPIR>:
#include<string.h>

#include "USART\USART.h"

void initPIR()
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	PORTB |= (1 << PORTB0);
      ae:	85 e2       	ldi	r24, 0x25	; 37
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	25 e2       	ldi	r18, 0x25	; 37
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	21 60       	ori	r18, 0x01	; 1
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
	//Timer
	TCCR1A |= (1 << COM1A0);
      c0:	80 e8       	ldi	r24, 0x80	; 128
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	20 e8       	ldi	r18, 0x80	; 128
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	20 64       	ori	r18, 0x40	; 64
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12) | (1 << CS12);
      d2:	81 e8       	ldi	r24, 0x81	; 129
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	21 e8       	ldi	r18, 0x81	; 129
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	2c 60       	ori	r18, 0x0C	; 12
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
	TIMSK1 |= (1 << OCIE1A);
      e4:	8f e6       	ldi	r24, 0x6F	; 111
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2f e6       	ldi	r18, 0x6F	; 111
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	22 60       	ori	r18, 0x02	; 2
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
	OCR1A = 0xF423;
      f6:	88 e8       	ldi	r24, 0x88	; 136
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	23 e2       	ldi	r18, 0x23	; 35
      fc:	34 ef       	ldi	r19, 0xF4	; 244
      fe:	fc 01       	movw	r30, r24
     100:	31 83       	std	Z+1, r19	; 0x01
     102:	20 83       	st	Z, r18
	
	//Interrupt
	//PCICR |= (1 << PCIE0);
	//PCMSK0 |= (1 << PCINT0);
}
     104:	cf 91       	pop	r28
     106:	df 91       	pop	r29
     108:	08 95       	ret

0000010a <main>:

volatile char command[15];
volatile uint8_t set = 1;

int main(void)
{
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	df 93       	push	r29
     110:	cf 93       	push	r28
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	a0 97       	sbiw	r28, 0x20	; 32
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
	uint8_t hours;
	uint8_t min;
	uint8_t dim;
	uint8_t i = 0;
     122:	19 82       	std	Y+1, r1	; 0x01
	char cmd[15];
	PCICR |= (1 << PCIE1);
     124:	88 e6       	ldi	r24, 0x68	; 104
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	28 e6       	ldi	r18, 0x68	; 104
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	22 60       	ori	r18, 0x02	; 2
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
	PCMSK1 |= (1 << PCINT9);
     136:	8c e6       	ldi	r24, 0x6C	; 108
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	2c e6       	ldi	r18, 0x6C	; 108
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	22 60       	ori	r18, 0x02	; 2
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
	command[0] = '\0';
     148:	10 92 e7 01 	sts	0x01E7, r1
	initPIR();
     14c:	0e 94 53 00 	call	0xa6	; 0xa6 <initPIR>
	USART_Init(MYUBRR);
     150:	89 e1       	ldi	r24, 0x19	; 25
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 ca 04 	call	0x994	; 0x994 <USART_Init>
	sei();
     158:	78 94       	sei
	print("Start");
     15a:	00 d0       	rcall	.+0      	; 0x15c <main+0x52>
     15c:	8d b7       	in	r24, 0x3d	; 61
     15e:	9e b7       	in	r25, 0x3e	; 62
     160:	01 96       	adiw	r24, 0x01	; 1
     162:	21 e0       	ldi	r18, 0x01	; 1
     164:	31 e0       	ldi	r19, 0x01	; 1
     166:	fc 01       	movw	r30, r24
     168:	31 83       	std	Z+1, r19	; 0x01
     16a:	20 83       	st	Z, r18
     16c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <print>
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
	while(1)
	{
		if(!set)
     174:	80 91 00 01 	lds	r24, 0x0100
     178:	88 23       	and	r24, r24
     17a:	09 f0       	breq	.+2      	; 0x17e <main+0x74>
     17c:	9c c0       	rjmp	.+312    	; 0x2b6 <main+0x1ac>
		{
			strcpy(cmd, command);
     17e:	ce 01       	movw	r24, r28
     180:	42 96       	adiw	r24, 0x12	; 18
     182:	27 ee       	ldi	r18, 0xE7	; 231
     184:	31 e0       	ldi	r19, 0x01	; 1
     186:	b9 01       	movw	r22, r18
     188:	0e 94 0a 0b 	call	0x1614	; 0x1614 <strcpy>
			for(i = 0; i < strlen(cmd); ++i)
     18c:	19 82       	std	Y+1, r1	; 0x01
     18e:	85 c0       	rjmp	.+266    	; 0x29a <main+0x190>
			{
				switch (cmd[i])
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	88 2f       	mov	r24, r24
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	9e 01       	movw	r18, r28
     198:	2e 5e       	subi	r18, 0xEE	; 238
     19a:	3f 4f       	sbci	r19, 0xFF	; 255
     19c:	82 0f       	add	r24, r18
     19e:	93 1f       	adc	r25, r19
     1a0:	fc 01       	movw	r30, r24
     1a2:	80 81       	ld	r24, Z
     1a4:	88 2f       	mov	r24, r24
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	83 34       	cpi	r24, 0x43	; 67
     1aa:	91 05       	cpc	r25, r1
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <main+0xa6>
     1ae:	71 c0       	rjmp	.+226    	; 0x292 <main+0x188>
				{
					print("%c %c %c %c %c", cmd[0], cmd[2], cmd[3], cmd[5], cmd[6]);
					case 'C':
						hours = atoi(cmd[i+2])*10 + atoi(cmd[i+3]);
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	88 2f       	mov	r24, r24
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	02 96       	adiw	r24, 0x02	; 2
     1b8:	9e 01       	movw	r18, r28
     1ba:	2e 5e       	subi	r18, 0xEE	; 238
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	82 0f       	add	r24, r18
     1c0:	93 1f       	adc	r25, r19
     1c2:	fc 01       	movw	r30, r24
     1c4:	80 81       	ld	r24, Z
     1c6:	88 2f       	mov	r24, r24
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <atoi>
     1ce:	88 0f       	add	r24, r24
     1d0:	98 2f       	mov	r25, r24
     1d2:	99 0f       	add	r25, r25
     1d4:	99 0f       	add	r25, r25
     1d6:	18 2f       	mov	r17, r24
     1d8:	19 0f       	add	r17, r25
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	03 96       	adiw	r24, 0x03	; 3
     1e2:	9e 01       	movw	r18, r28
     1e4:	2e 5e       	subi	r18, 0xEE	; 238
     1e6:	3f 4f       	sbci	r19, 0xFF	; 255
     1e8:	82 0f       	add	r24, r18
     1ea:	93 1f       	adc	r25, r19
     1ec:	fc 01       	movw	r30, r24
     1ee:	80 81       	ld	r24, Z
     1f0:	88 2f       	mov	r24, r24
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <atoi>
     1f8:	81 0f       	add	r24, r17
     1fa:	8a 83       	std	Y+2, r24	; 0x02
						min = atoi(cmd[i+5])*10 + atoi(cmd[i+6]);
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	88 2f       	mov	r24, r24
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	05 96       	adiw	r24, 0x05	; 5
     204:	9e 01       	movw	r18, r28
     206:	2e 5e       	subi	r18, 0xEE	; 238
     208:	3f 4f       	sbci	r19, 0xFF	; 255
     20a:	82 0f       	add	r24, r18
     20c:	93 1f       	adc	r25, r19
     20e:	fc 01       	movw	r30, r24
     210:	80 81       	ld	r24, Z
     212:	88 2f       	mov	r24, r24
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <atoi>
     21a:	88 0f       	add	r24, r24
     21c:	98 2f       	mov	r25, r24
     21e:	99 0f       	add	r25, r25
     220:	99 0f       	add	r25, r25
     222:	18 2f       	mov	r17, r24
     224:	19 0f       	add	r17, r25
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	06 96       	adiw	r24, 0x06	; 6
     22e:	9e 01       	movw	r18, r28
     230:	2e 5e       	subi	r18, 0xEE	; 238
     232:	3f 4f       	sbci	r19, 0xFF	; 255
     234:	82 0f       	add	r24, r18
     236:	93 1f       	adc	r25, r19
     238:	fc 01       	movw	r30, r24
     23a:	80 81       	ld	r24, Z
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <atoi>
     244:	81 0f       	add	r24, r17
     246:	8b 83       	std	Y+3, r24	; 0x03
						print("Clock set to %d:%d", hours, min );
     248:	8a 81       	ldd	r24, Y+2	; 0x02
     24a:	48 2f       	mov	r20, r24
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	00 d0       	rcall	.+0      	; 0x256 <main+0x14c>
     256:	00 d0       	rcall	.+0      	; 0x258 <main+0x14e>
     258:	00 d0       	rcall	.+0      	; 0x25a <main+0x150>
     25a:	8d b7       	in	r24, 0x3d	; 61
     25c:	9e b7       	in	r25, 0x3e	; 62
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	67 e0       	ldi	r22, 0x07	; 7
     262:	71 e0       	ldi	r23, 0x01	; 1
     264:	fc 01       	movw	r30, r24
     266:	71 83       	std	Z+1, r23	; 0x01
     268:	60 83       	st	Z, r22
     26a:	fc 01       	movw	r30, r24
     26c:	53 83       	std	Z+3, r21	; 0x03
     26e:	42 83       	std	Z+2, r20	; 0x02
     270:	fc 01       	movw	r30, r24
     272:	35 83       	std	Z+5, r19	; 0x05
     274:	24 83       	std	Z+4, r18	; 0x04
     276:	0e 94 4f 05 	call	0xa9e	; 0xa9e <print>
     27a:	8d b7       	in	r24, 0x3d	; 61
     27c:	9e b7       	in	r25, 0x3e	; 62
     27e:	06 96       	adiw	r24, 0x06	; 6
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	9e bf       	out	0x3e, r25	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	8d bf       	out	0x3d, r24	; 61
						i = i + 6;
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	8a 5f       	subi	r24, 0xFA	; 250
     28e:	89 83       	std	Y+1, r24	; 0x01
						break;
     290:	01 c0       	rjmp	.+2      	; 0x294 <main+0x18a>
					default:
						break;//do nothing
     292:	00 00       	nop
	while(1)
	{
		if(!set)
		{
			strcpy(cmd, command);
			for(i = 0; i < strlen(cmd); ++i)
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	8f 5f       	subi	r24, 0xFF	; 255
     298:	89 83       	std	Y+1, r24	; 0x01
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	08 2f       	mov	r16, r24
     29e:	10 e0       	ldi	r17, 0x00	; 0
     2a0:	ce 01       	movw	r24, r28
     2a2:	42 96       	adiw	r24, 0x12	; 18
     2a4:	0e 94 11 0b 	call	0x1622	; 0x1622 <strlen>
     2a8:	08 17       	cp	r16, r24
     2aa:	19 07       	cpc	r17, r25
     2ac:	08 f4       	brcc	.+2      	; 0x2b0 <main+0x1a6>
     2ae:	70 cf       	rjmp	.-288    	; 0x190 <main+0x86>
						break;
					default:
						break;//do nothing
				}
			}
			set = 1;		
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 00 01 	sts	0x0100, r24
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	aa e7       	ldi	r26, 0x7A	; 122
     2bc:	b4 e4       	ldi	r27, 0x44	; 68
     2be:	8c 83       	std	Y+4, r24	; 0x04
     2c0:	9d 83       	std	Y+5, r25	; 0x05
     2c2:	ae 83       	std	Y+6, r26	; 0x06
     2c4:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     2c6:	6c 81       	ldd	r22, Y+4	; 0x04
     2c8:	7d 81       	ldd	r23, Y+5	; 0x05
     2ca:	8e 81       	ldd	r24, Y+6	; 0x06
     2cc:	9f 81       	ldd	r25, Y+7	; 0x07
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	4a e7       	ldi	r20, 0x7A	; 122
     2d4:	55 e4       	ldi	r21, 0x45	; 69
     2d6:	0e 94 49 07 	call	0xe92	; 0xe92 <__mulsf3>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	88 87       	std	Y+8, r24	; 0x08
     2e0:	99 87       	std	Y+9, r25	; 0x09
     2e2:	aa 87       	std	Y+10, r26	; 0x0a
     2e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     2e6:	11 e0       	ldi	r17, 0x01	; 1
     2e8:	68 85       	ldd	r22, Y+8	; 0x08
     2ea:	79 85       	ldd	r23, Y+9	; 0x09
     2ec:	8a 85       	ldd	r24, Y+10	; 0x0a
     2ee:	9b 85       	ldd	r25, Y+11	; 0x0b
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e8       	ldi	r20, 0x80	; 128
     2f6:	5f e3       	ldi	r21, 0x3F	; 63
     2f8:	0e 94 a3 08 	call	0x1146	; 0x1146 <__ltsf2>
     2fc:	88 23       	and	r24, r24
     2fe:	0c f0       	brlt	.+2      	; 0x302 <main+0x1f8>
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	11 23       	and	r17, r17
     304:	29 f0       	breq	.+10     	; 0x310 <main+0x206>
		__ticks = 1;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	9d 87       	std	Y+13, r25	; 0x0d
     30c:	8c 87       	std	Y+12, r24	; 0x0c
     30e:	46 c0       	rjmp	.+140    	; 0x39c <main+0x292>
	else if (__tmp > 65535)
     310:	11 e0       	ldi	r17, 0x01	; 1
     312:	68 85       	ldd	r22, Y+8	; 0x08
     314:	79 85       	ldd	r23, Y+9	; 0x09
     316:	8a 85       	ldd	r24, Y+10	; 0x0a
     318:	9b 85       	ldd	r25, Y+11	; 0x0b
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	3f ef       	ldi	r19, 0xFF	; 255
     31e:	4f e7       	ldi	r20, 0x7F	; 127
     320:	57 e4       	ldi	r21, 0x47	; 71
     322:	0e 94 43 08 	call	0x1086	; 0x1086 <__gtsf2>
     326:	18 16       	cp	r1, r24
     328:	0c f0       	brlt	.+2      	; 0x32c <main+0x222>
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	11 23       	and	r17, r17
     32e:	61 f1       	breq	.+88     	; 0x388 <main+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     330:	6c 81       	ldd	r22, Y+4	; 0x04
     332:	7d 81       	ldd	r23, Y+5	; 0x05
     334:	8e 81       	ldd	r24, Y+6	; 0x06
     336:	9f 81       	ldd	r25, Y+7	; 0x07
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e2       	ldi	r20, 0x20	; 32
     33e:	51 e4       	ldi	r21, 0x41	; 65
     340:	0e 94 49 07 	call	0xe92	; 0xe92 <__mulsf3>
     344:	dc 01       	movw	r26, r24
     346:	cb 01       	movw	r24, r22
     348:	bc 01       	movw	r22, r24
     34a:	cd 01       	movw	r24, r26
     34c:	0e 94 75 05 	call	0xaea	; 0xaea <__fixunssfsi>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	9d 87       	std	Y+13, r25	; 0x0d
     356:	8c 87       	std	Y+12, r24	; 0x0c
     358:	12 c0       	rjmp	.+36     	; 0x37e <main+0x274>
     35a:	80 e9       	ldi	r24, 0x90	; 144
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	9f 87       	std	Y+15, r25	; 0x0f
     360:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     362:	8e 85       	ldd	r24, Y+14	; 0x0e
     364:	9f 85       	ldd	r25, Y+15	; 0x0f
     366:	8c 01       	movw	r16, r24
     368:	f8 01       	movw	r30, r16
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x260>
     36e:	8f 01       	movw	r16, r30
     370:	1f 87       	std	Y+15, r17	; 0x0f
     372:	0e 87       	std	Y+14, r16	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     374:	8c 85       	ldd	r24, Y+12	; 0x0c
     376:	9d 85       	ldd	r25, Y+13	; 0x0d
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	9d 87       	std	Y+13, r25	; 0x0d
     37c:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     37e:	8c 85       	ldd	r24, Y+12	; 0x0c
     380:	9d 85       	ldd	r25, Y+13	; 0x0d
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	51 f7       	brne	.-44     	; 0x35a <main+0x250>
		}		
		_delay_ms(1000);
	}
     386:	f6 ce       	rjmp	.-532    	; 0x174 <main+0x6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     388:	68 85       	ldd	r22, Y+8	; 0x08
     38a:	79 85       	ldd	r23, Y+9	; 0x09
     38c:	8a 85       	ldd	r24, Y+10	; 0x0a
     38e:	9b 85       	ldd	r25, Y+11	; 0x0b
     390:	0e 94 75 05 	call	0xaea	; 0xaea <__fixunssfsi>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	9d 87       	std	Y+13, r25	; 0x0d
     39a:	8c 87       	std	Y+12, r24	; 0x0c
     39c:	8c 85       	ldd	r24, Y+12	; 0x0c
     39e:	9d 85       	ldd	r25, Y+13	; 0x0d
     3a0:	99 8b       	std	Y+17, r25	; 0x11
     3a2:	88 8b       	std	Y+16, r24	; 0x10
     3a4:	88 89       	ldd	r24, Y+16	; 0x10
     3a6:	99 89       	ldd	r25, Y+17	; 0x11
     3a8:	8c 01       	movw	r16, r24
     3aa:	c8 01       	movw	r24, r16
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x2a2>
     3b0:	8c 01       	movw	r16, r24
     3b2:	19 8b       	std	Y+17, r17	; 0x11
     3b4:	08 8b       	std	Y+16, r16	; 0x10
     3b6:	de ce       	rjmp	.-580    	; 0x174 <main+0x6a>

000003b8 <__vector_18>:
}



ISR(USART_RX_vect)
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <__vector_18+0x28>
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	/* Get and return received data from buffer */
	
	uint8_t i = 0;
     3e4:	19 82       	std	Y+1, r1	; 0x01
	unsigned char received = 0;
     3e6:	1a 82       	std	Y+2, r1	; 0x02
	while ( !(UCSR0A & (1<<RXC0)) );
     3e8:	00 00       	nop
     3ea:	80 ec       	ldi	r24, 0xC0	; 192
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	fc 01       	movw	r30, r24
     3f0:	80 81       	ld	r24, Z
     3f2:	88 23       	and	r24, r24
     3f4:	d4 f7       	brge	.-12     	; 0x3ea <__vector_18+0x32>
	received = UDR0;
     3f6:	86 ec       	ldi	r24, 0xC6	; 198
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	80 81       	ld	r24, Z
     3fe:	8a 83       	std	Y+2, r24	; 0x02
	while(received != ';')
     400:	1a c0       	rjmp	.+52     	; 0x436 <__vector_18+0x7e>
	{
		//print("!");
		if( received != 10)
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	8a 30       	cpi	r24, 0x0A	; 10
     406:	b9 f0       	breq	.+46     	; 0x436 <__vector_18+0x7e>
		{
			//print(" %c at %d", received, i);
			command[i] = received;			
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	88 2f       	mov	r24, r24
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	89 51       	subi	r24, 0x19	; 25
     410:	9e 4f       	sbci	r25, 0xFE	; 254
     412:	2a 81       	ldd	r18, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
			i++;
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	89 83       	std	Y+1, r24	; 0x01
			while ( !(UCSR0A & (1<<RXC0)) );
     41e:	00 00       	nop
     420:	80 ec       	ldi	r24, 0xC0	; 192
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	80 81       	ld	r24, Z
     428:	88 23       	and	r24, r24
     42a:	d4 f7       	brge	.-12     	; 0x420 <__vector_18+0x68>
			received = UDR0;
     42c:	86 ec       	ldi	r24, 0xC6	; 198
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t i = 0;
	unsigned char received = 0;
	while ( !(UCSR0A & (1<<RXC0)) );
	received = UDR0;
	while(received != ';')
     436:	8a 81       	ldd	r24, Y+2	; 0x02
     438:	8b 33       	cpi	r24, 0x3B	; 59
     43a:	19 f7       	brne	.-58     	; 0x402 <__vector_18+0x4a>
			i++;
			while ( !(UCSR0A & (1<<RXC0)) );
			received = UDR0;
		}
	}
	command[i] = '\0';
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	89 51       	subi	r24, 0x19	; 25
     444:	9e 4f       	sbci	r25, 0xFE	; 254
     446:	fc 01       	movw	r30, r24
     448:	10 82       	st	Z, r1
	set = 0;
     44a:	10 92 00 01 	sts	0x0100, r1
	print(command);
     44e:	00 d0       	rcall	.+0      	; 0x450 <__vector_18+0x98>
     450:	8d b7       	in	r24, 0x3d	; 61
     452:	9e b7       	in	r25, 0x3e	; 62
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	27 ee       	ldi	r18, 0xE7	; 231
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	fc 01       	movw	r30, r24
     45c:	31 83       	std	Z+1, r19	; 0x01
     45e:	20 83       	st	Z, r18
     460:	0e 94 4f 05 	call	0xa9e	; 0xa9e <print>
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
} 
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	ff 91       	pop	r31
     472:	ef 91       	pop	r30
     474:	bf 91       	pop	r27
     476:	af 91       	pop	r26
     478:	9f 91       	pop	r25
     47a:	8f 91       	pop	r24
     47c:	7f 91       	pop	r23
     47e:	6f 91       	pop	r22
     480:	5f 91       	pop	r21
     482:	4f 91       	pop	r20
     484:	3f 91       	pop	r19
     486:	2f 91       	pop	r18
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0
     48e:	1f 90       	pop	r1
     490:	18 95       	reti

00000492 <__vector_default>:


     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	cf 91       	pop	r28
     4a6:	df 91       	pop	r29
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <setup_spi>:
#endif

#include "../USART/USART.h"

void setup_spi(uint8_t mode, int dord, int interrupt, uint8_t clock)
{
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <setup_spi+0x6>
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <setup_spi+0x8>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <setup_spi+0xa>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	7b 83       	std	Y+3, r23	; 0x03
     4c4:	6a 83       	std	Y+2, r22	; 0x02
     4c6:	5d 83       	std	Y+5, r21	; 0x05
     4c8:	4c 83       	std	Y+4, r20	; 0x04
     4ca:	2e 83       	std	Y+6, r18	; 0x06
  // specify pin directions for SPI pins on port B
	if (clock == SPI_SLAVE) // if slave SS and SCK is input
     4cc:	8e 81       	ldd	r24, Y+6	; 0x06
     4ce:	80 3f       	cpi	r24, 0xF0	; 240
     4d0:	29 f5       	brne	.+74     	; 0x51c <setup_spi+0x6a>
	{ 
		DDRB &= ~(1<<SPI_MOSI_PIN); // input
     4d2:	84 e2       	ldi	r24, 0x24	; 36
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	24 e2       	ldi	r18, 0x24	; 36
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	f9 01       	movw	r30, r18
     4dc:	20 81       	ld	r18, Z
     4de:	27 7f       	andi	r18, 0xF7	; 247
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
		DDRB |= (1<<SPI_MISO_PIN); // output
     4e4:	84 e2       	ldi	r24, 0x24	; 36
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	24 e2       	ldi	r18, 0x24	; 36
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	f9 01       	movw	r30, r18
     4ee:	20 81       	ld	r18, Z
     4f0:	20 61       	ori	r18, 0x10	; 16
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 83       	st	Z, r18
		DDRD &= ~(1<<SPI_SS_PIN); // input
     4f6:	8a e2       	ldi	r24, 0x2A	; 42
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2a e2       	ldi	r18, 0x2A	; 42
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	2f 7d       	andi	r18, 0xDF	; 223
     504:	fc 01       	movw	r30, r24
     506:	20 83       	st	Z, r18
		DDRB &= ~(1<<SPI_SCK_PIN);// input
     508:	84 e2       	ldi	r24, 0x24	; 36
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	24 e2       	ldi	r18, 0x24	; 36
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	2f 7d       	andi	r18, 0xDF	; 223
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
     51a:	24 c0       	rjmp	.+72     	; 0x564 <setup_spi+0xb2>
	} 
	else 
	{
		DDRB |= (1<<SPI_MOSI_PIN); // output
     51c:	84 e2       	ldi	r24, 0x24	; 36
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	24 e2       	ldi	r18, 0x24	; 36
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	f9 01       	movw	r30, r18
     526:	20 81       	ld	r18, Z
     528:	28 60       	ori	r18, 0x08	; 8
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
		DDRB &= ~(1<<SPI_MISO_PIN); // input
     52e:	84 e2       	ldi	r24, 0x24	; 36
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	24 e2       	ldi	r18, 0x24	; 36
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	20 81       	ld	r18, Z
     53a:	2f 7e       	andi	r18, 0xEF	; 239
     53c:	fc 01       	movw	r30, r24
     53e:	20 83       	st	Z, r18
		DDRB |= (1<<SPI_SCK_PIN);// output
     540:	84 e2       	ldi	r24, 0x24	; 36
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	24 e2       	ldi	r18, 0x24	; 36
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	20 62       	ori	r18, 0x20	; 32
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
		DDRD |= (1<<SPI_SS_PIN);// output
     552:	8a e2       	ldi	r24, 0x2A	; 42
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	2a e2       	ldi	r18, 0x2A	; 42
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	f9 01       	movw	r30, r18
     55c:	20 81       	ld	r18, Z
     55e:	20 62       	ori	r18, 0x20	; 32
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     564:	8c e4       	ldi	r24, 0x4C	; 76
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	2c 81       	ldd	r18, Y+4	; 0x04
     56a:	3d 81       	ldd	r19, Y+5	; 0x05
     56c:	21 15       	cp	r18, r1
     56e:	31 05       	cpc	r19, r1
     570:	11 f0       	breq	.+4      	; 0x576 <setup_spi+0xc4>
     572:	40 ec       	ldi	r20, 0xC0	; 192
     574:	01 c0       	rjmp	.+2      	; 0x578 <setup_spi+0xc6>
     576:	40 e4       	ldi	r20, 0x40	; 64
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
     578:	2a 81       	ldd	r18, Y+2	; 0x02
     57a:	3b 81       	ldd	r19, Y+3	; 0x03
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	22 95       	swap	r18
     582:	32 95       	swap	r19
     584:	30 7f       	andi	r19, 0xF0	; 240
     586:	32 27       	eor	r19, r18
     588:	20 7f       	andi	r18, 0xF0	; 240
     58a:	32 27       	eor	r19, r18
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     58c:	34 2f       	mov	r19, r20
     58e:	32 2b       	or	r19, r18
     590:	2e 81       	ldd	r18, Y+6	; 0x06
     592:	20 3f       	cpi	r18, 0xF0	; 240
     594:	11 f0       	breq	.+4      	; 0x59a <setup_spi+0xe8>
     596:	20 e1       	ldi	r18, 0x10	; 16
     598:	01 c0       	rjmp	.+2      	; 0x59c <setup_spi+0xea>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	43 2f       	mov	r20, r19
     59e:	42 2b       	or	r20, r18
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
     5a0:	29 81       	ldd	r18, Y+1	; 0x01
     5a2:	22 2f       	mov	r18, r18
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	22 70       	andi	r18, 0x02	; 2
     5a8:	30 70       	andi	r19, 0x00	; 0
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     5aa:	21 15       	cp	r18, r1
     5ac:	31 05       	cpc	r19, r1
     5ae:	11 f0       	breq	.+4      	; 0x5b4 <setup_spi+0x102>
     5b0:	28 e0       	ldi	r18, 0x08	; 8
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <setup_spi+0x104>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	42 2b       	or	r20, r18
		| (1<<SPE) // enable SPI
		| (dord<<DORD) // LSB or MSB
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
		| (((mode & 0x01)) << CPHA) // clock timing mode CPHA
     5b8:	29 81       	ldd	r18, Y+1	; 0x01
     5ba:	22 2f       	mov	r18, r18
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	21 70       	andi	r18, 0x01	; 1
     5c0:	30 70       	andi	r19, 0x00	; 0
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	22 0f       	add	r18, r18
     5c8:	33 1f       	adc	r19, r19
		DDRB |= (1<<SPI_MOSI_PIN); // output
		DDRB &= ~(1<<SPI_MISO_PIN); // input
		DDRB |= (1<<SPI_SCK_PIN);// output
		DDRD |= (1<<SPI_SS_PIN);// output
	}
	SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     5ca:	34 2f       	mov	r19, r20
     5cc:	32 2b       	or	r19, r18
     5ce:	2e 81       	ldd	r18, Y+6	; 0x06
     5d0:	22 70       	andi	r18, 0x02	; 2
     5d2:	32 2b       	or	r19, r18
     5d4:	2e 81       	ldd	r18, Y+6	; 0x06
     5d6:	21 70       	andi	r18, 0x01	; 1
     5d8:	23 2b       	or	r18, r19
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
		| (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
		| (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
		| (((mode & 0x01)) << CPHA) // clock timing mode CPHA
		| (((clock & 0x02) == 2) << SPR1) // cpu clock divisor SPR1
		| ((clock & 0x01) << SPR0); // cpu clock divisor SPR0
	SPSR = (((clock & 0x04) == 4) << SPI2X); // clock divisor SPI2X
     5de:	8d e4       	ldi	r24, 0x4D	; 77
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	2e 81       	ldd	r18, Y+6	; 0x06
     5e4:	22 2f       	mov	r18, r18
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	24 70       	andi	r18, 0x04	; 4
     5ea:	30 70       	andi	r19, 0x00	; 0
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	21 15       	cp	r18, r1
     5f0:	31 05       	cpc	r19, r1
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <setup_spi+0x144>
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	40 83       	st	Z, r20
}
     5fa:	26 96       	adiw	r28, 0x06	; 6
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	cf 91       	pop	r28
     608:	df 91       	pop	r29
     60a:	08 95       	ret

0000060c <disable_spi>:

void disable_spi()
{
     60c:	df 93       	push	r29
     60e:	cf 93       	push	r28
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
	SPCR = 0;
     614:	8c e4       	ldi	r24, 0x4C	; 76
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	10 82       	st	Z, r1
}
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <send_spi>:

uint8_t send_spi(uint8_t out)
{
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	0f 92       	push	r0
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	89 83       	std	Y+1, r24	; 0x01
	//print(" sending");
	
	PORTD &= ~(1 << PORTD5);
     62e:	8b e2       	ldi	r24, 0x2B	; 43
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	2b e2       	ldi	r18, 0x2B	; 43
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	f9 01       	movw	r30, r18
     638:	20 81       	ld	r18, Z
     63a:	2f 7d       	andi	r18, 0xDF	; 223
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18
	SPDR = out;
     640:	8e e4       	ldi	r24, 0x4E	; 78
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	29 81       	ldd	r18, Y+1	; 0x01
     646:	fc 01       	movw	r30, r24
     648:	20 83       	st	Z, r18
	while (!(SPSR & (1<<SPIF)));
     64a:	00 00       	nop
     64c:	8d e4       	ldi	r24, 0x4D	; 77
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	80 81       	ld	r24, Z
     654:	88 23       	and	r24, r24
     656:	d4 f7       	brge	.-12     	; 0x64c <send_spi+0x2a>
	PORTD |= (1 << PORTD5);
     658:	8b e2       	ldi	r24, 0x2B	; 43
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	2b e2       	ldi	r18, 0x2B	; 43
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	f9 01       	movw	r30, r18
     662:	20 81       	ld	r18, Z
     664:	20 62       	ori	r18, 0x20	; 32
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
	//print(" done sending");
	return SPDR;
     66a:	8e e4       	ldi	r24, 0x4E	; 78
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
  
}
     672:	0f 90       	pop	r0
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <received_from_spi>:

uint8_t received_from_spi(uint8_t data)
{
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	0f 92       	push	r0
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	89 83       	std	Y+1, r24	; 0x01
	PORTD &= ~(1 << PORTD5);
     686:	8b e2       	ldi	r24, 0x2B	; 43
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	2b e2       	ldi	r18, 0x2B	; 43
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	2f 7d       	andi	r18, 0xDF	; 223
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
	SPDR = data;
     698:	8e e4       	ldi	r24, 0x4E	; 78
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	29 81       	ldd	r18, Y+1	; 0x01
     69e:	fc 01       	movw	r30, r24
     6a0:	20 83       	st	Z, r18
	while(!(SPSR & (1 << SPIF)));
     6a2:	00 00       	nop
     6a4:	8d e4       	ldi	r24, 0x4D	; 77
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	fc 01       	movw	r30, r24
     6aa:	80 81       	ld	r24, Z
     6ac:	88 23       	and	r24, r24
     6ae:	d4 f7       	brge	.-12     	; 0x6a4 <received_from_spi+0x2a>
	PORTD |= (1 << PORTD5);
     6b0:	8b e2       	ldi	r24, 0x2B	; 43
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	2b e2       	ldi	r18, 0x2B	; 43
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	20 81       	ld	r18, Z
     6bc:	20 62       	ori	r18, 0x20	; 32
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
	
	return SPDR;
     6c2:	8e e4       	ldi	r24, 0x4E	; 78
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	80 81       	ld	r24, Z
}
     6ca:	0f 90       	pop	r0
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <SIG_USART_RECV>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     6d2:	1f 92       	push	r1
     6d4:	0f 92       	push	r0
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	0f 92       	push	r0
     6da:	11 24       	eor	r1, r1
     6dc:	2f 93       	push	r18
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <SIG_USART_RECV+0x1a>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <SIG_USART_RECV+0x1c>
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     6f2:	80 ec       	ldi	r24, 0xC0	; 192
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	fc 01       	movw	r30, r24
     6f8:	80 81       	ld	r24, Z
     6fa:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
     6fc:	86 ec       	ldi	r24, 0xC6	; 198
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	fc 01       	movw	r30, r24
     702:	80 81       	ld	r24, Z
     704:	8b 83       	std	Y+3, r24	; 0x03
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	88 71       	andi	r24, 0x18	; 24
     70a:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     70c:	80 91 64 01 	lds	r24, 0x0164
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	8f 71       	andi	r24, 0x1F	; 31
     714:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
     716:	80 91 65 01 	lds	r24, 0x0165
     71a:	9c 81       	ldd	r25, Y+4	; 0x04
     71c:	98 17       	cp	r25, r24
     71e:	19 f4       	brne	.+6      	; 0x726 <SIG_USART_RECV+0x54>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	0b c0       	rjmp	.+22     	; 0x73c <SIG_USART_RECV+0x6a>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     726:	8c 81       	ldd	r24, Y+4	; 0x04
     728:	80 93 64 01 	sts	0x0164, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     72c:	8c 81       	ldd	r24, Y+4	; 0x04
     72e:	88 2f       	mov	r24, r24
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	8e 5b       	subi	r24, 0xBE	; 190
     734:	9e 4f       	sbci	r25, 0xFE	; 254
     736:	2b 81       	ldd	r18, Y+3	; 0x03
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	80 93 66 01 	sts	0x0166, r24
}
     742:	24 96       	adiw	r28, 0x04	; 4
     744:	de bf       	out	0x3e, r29	; 62
     746:	cd bf       	out	0x3d, r28	; 61
     748:	cf 91       	pop	r28
     74a:	df 91       	pop	r29
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	9f 91       	pop	r25
     752:	8f 91       	pop	r24
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <SIG_USART_DATA>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	ef 93       	push	r30
     774:	ff 93       	push	r31
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	0f 92       	push	r0
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     780:	90 91 62 01 	lds	r25, 0x0162
     784:	80 91 63 01 	lds	r24, 0x0163
     788:	98 17       	cp	r25, r24
     78a:	a1 f0       	breq	.+40     	; 0x7b4 <SIG_USART_DATA+0x54>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     78c:	80 91 63 01 	lds	r24, 0x0163
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	8f 71       	andi	r24, 0x1F	; 31
     794:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	80 93 63 01 	sts	0x0163, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     79c:	86 ec       	ldi	r24, 0xC6	; 198
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	29 81       	ldd	r18, Y+1	; 0x01
     7a2:	22 2f       	mov	r18, r18
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	2e 5d       	subi	r18, 0xDE	; 222
     7a8:	3e 4f       	sbci	r19, 0xFE	; 254
     7aa:	f9 01       	movw	r30, r18
     7ac:	20 81       	ld	r18, Z
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
     7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <SIG_USART_DATA+0x66>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     7b4:	81 ec       	ldi	r24, 0xC1	; 193
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	21 ec       	ldi	r18, 0xC1	; 193
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	2f 7d       	andi	r18, 0xDF	; 223
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
    }
}
     7c6:	0f 90       	pop	r0
     7c8:	cf 91       	pop	r28
     7ca:	df 91       	pop	r29
     7cc:	ff 91       	pop	r31
     7ce:	ef 91       	pop	r30
     7d0:	9f 91       	pop	r25
     7d2:	8f 91       	pop	r24
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <uart_init+0x6>
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
     7f0:	10 92 62 01 	sts	0x0162, r1
    UART_TxTail = 0;
     7f4:	10 92 63 01 	sts	0x0163, r1
    UART_RxHead = 0;
     7f8:	10 92 64 01 	sts	0x0164, r1
    UART_RxTail = 0;
     7fc:	10 92 65 01 	sts	0x0165, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	99 23       	and	r25, r25
     806:	54 f4       	brge	.+20     	; 0x81c <uart_init+0x3a>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     808:	80 ec       	ldi	r24, 0xC0	; 192
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	22 e0       	ldi	r18, 0x02	; 2
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
   		baudrate &= ~0x8000;
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	9f 77       	andi	r25, 0x7F	; 127
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     81c:	85 ec       	ldi	r24, 0xC5	; 197
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	29 81       	ldd	r18, Y+1	; 0x01
     822:	3a 81       	ldd	r19, Y+2	; 0x02
     824:	23 2f       	mov	r18, r19
     826:	33 27       	eor	r19, r19
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
    UBRR0L = (unsigned char) baudrate;
     82c:	84 ec       	ldi	r24, 0xC4	; 196
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	29 81       	ldd	r18, Y+1	; 0x01
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     836:	81 ec       	ldi	r24, 0xC1	; 193
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	28 e9       	ldi	r18, 0x98	; 152
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
     840:	82 ec       	ldi	r24, 0xC2	; 194
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	26 e0       	ldi	r18, 0x06	; 6
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	08 95       	ret

00000854 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	00 d0       	rcall	.+0      	; 0x85a <uart_getc+0x6>
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     85e:	90 91 64 01 	lds	r25, 0x0164
     862:	80 91 65 01 	lds	r24, 0x0165
     866:	98 17       	cp	r25, r24
     868:	19 f4       	brne	.+6      	; 0x870 <uart_getc+0x1c>
        return UART_NO_DATA;   /* no data available */
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	1b c0       	rjmp	.+54     	; 0x8a6 <uart_getc+0x52>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     870:	80 91 65 01 	lds	r24, 0x0165
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	8f 71       	andi	r24, 0x1F	; 31
     878:	89 83       	std	Y+1, r24	; 0x01
    UART_RxTail = tmptail; 
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	80 93 65 01 	sts	0x0165, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	88 2f       	mov	r24, r24
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	8e 5b       	subi	r24, 0xBE	; 190
     888:	9e 4f       	sbci	r25, 0xFE	; 254
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	8a 83       	std	Y+2, r24	; 0x02
    
    return (UART_LastRxError << 8) + data;
     890:	80 91 66 01 	lds	r24, 0x0166
     894:	88 2f       	mov	r24, r24
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	38 2f       	mov	r19, r24
     89a:	22 27       	eor	r18, r18
     89c:	8a 81       	ldd	r24, Y+2	; 0x02
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	82 0f       	add	r24, r18
     8a4:	93 1f       	adc	r25, r19

}/* uart_getc */
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	cf 91       	pop	r28
     8ac:	df 91       	pop	r29
     8ae:	08 95       	ret

000008b0 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     8b0:	df 93       	push	r29
     8b2:	cf 93       	push	r28
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <uart_putc+0x6>
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     8bc:	80 91 62 01 	lds	r24, 0x0162
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	8f 71       	andi	r24, 0x1F	; 31
     8c4:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
     8c6:	00 00       	nop
     8c8:	80 91 63 01 	lds	r24, 0x0163
     8cc:	99 81       	ldd	r25, Y+1	; 0x01
     8ce:	98 17       	cp	r25, r24
     8d0:	d9 f3       	breq	.-10     	; 0x8c8 <uart_putc+0x18>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	88 2f       	mov	r24, r24
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	8e 5d       	subi	r24, 0xDE	; 222
     8da:	9e 4f       	sbci	r25, 0xFE	; 254
     8dc:	2a 81       	ldd	r18, Y+2	; 0x02
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	80 93 62 01 	sts	0x0162, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     8e8:	81 ec       	ldi	r24, 0xC1	; 193
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	21 ec       	ldi	r18, 0xC1	; 193
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	f9 01       	movw	r30, r18
     8f2:	20 81       	ld	r18, Z
     8f4:	20 62       	ori	r18, 0x20	; 32
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 83       	st	Z, r18

}/* uart_putc */
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	cf 91       	pop	r28
     900:	df 91       	pop	r29
     902:	08 95       	ret

00000904 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     904:	df 93       	push	r29
     906:	cf 93       	push	r28
     908:	00 d0       	rcall	.+0      	; 0x90a <uart_puts+0x6>
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	9a 83       	std	Y+2, r25	; 0x02
     910:	89 83       	std	Y+1, r24	; 0x01
    while (*s) 
     912:	0c c0       	rjmp	.+24     	; 0x92c <uart_puts+0x28>
      uart_putc(*s++);
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	9a 81       	ldd	r25, Y+2	; 0x02
     918:	fc 01       	movw	r30, r24
     91a:	20 81       	ld	r18, Z
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	9a 83       	std	Y+2, r25	; 0x02
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	82 2f       	mov	r24, r18
     928:	0e 94 58 04 	call	0x8b0	; 0x8b0 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	fc 01       	movw	r30, r24
     932:	80 81       	ld	r24, Z
     934:	88 23       	and	r24, r24
     936:	71 f7       	brne	.-36     	; 0x914 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	cf 91       	pop	r28
     93e:	df 91       	pop	r29
     940:	08 95       	ret

00000942 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     942:	1f 93       	push	r17
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	00 d0       	rcall	.+0      	; 0x94a <uart_puts_p+0x8>
     94a:	00 d0       	rcall	.+0      	; 0x94c <uart_puts_p+0xa>
     94c:	0f 92       	push	r0
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	9d 83       	std	Y+5, r25	; 0x05
     954:	8c 83       	std	Y+4, r24	; 0x04
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     956:	03 c0       	rjmp	.+6      	; 0x95e <uart_puts_p+0x1c>
      uart_putc(c);
     958:	81 2f       	mov	r24, r17
     95a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     95e:	8c 81       	ldd	r24, Y+4	; 0x04
     960:	9d 81       	ldd	r25, Y+5	; 0x05
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8c 81       	ldd	r24, Y+4	; 0x04
     968:	9d 81       	ldd	r25, Y+5	; 0x05
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	9d 83       	std	Y+5, r25	; 0x05
     96e:	8c 83       	std	Y+4, r24	; 0x04
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	fc 01       	movw	r30, r24
     976:	14 91       	lpm	r17, Z+
     978:	1b 83       	std	Y+3, r17	; 0x03
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	18 2f       	mov	r17, r24
     97e:	11 23       	and	r17, r17
     980:	59 f7       	brne	.-42     	; 0x958 <uart_puts_p+0x16>
      uart_putc(c);

}/* uart_puts_p */
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	1f 91       	pop	r17
     992:	08 95       	ret

00000994 <USART_Init>:
#include <stdarg.h>
#include <string.h> 
#include"USART.h"

void USART_Init( unsigned int ubrr)
{
     994:	df 93       	push	r29
     996:	cf 93       	push	r28
     998:	00 d0       	rcall	.+0      	; 0x99a <USART_Init+0x6>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
/*Set baud rate */
	DDRD |= (1 << PORTD1);
     9a2:	8a e2       	ldi	r24, 0x2A	; 42
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	2a e2       	ldi	r18, 0x2A	; 42
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	22 60       	ori	r18, 0x02	; 2
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
    UBRR0H = (ubrr >> 8);
     9b4:	85 ec       	ldi	r24, 0xC5	; 197
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	29 81       	ldd	r18, Y+1	; 0x01
     9ba:	3a 81       	ldd	r19, Y+2	; 0x02
     9bc:	23 2f       	mov	r18, r19
     9be:	33 27       	eor	r19, r19
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
    UBRR0L = ubrr;
     9c4:	84 ec       	ldi	r24, 0xC4	; 196
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	fc 01       	movw	r30, r24
     9cc:	20 83       	st	Z, r18
    
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);      // Enable receiver and transmitter and interrupt receive
     9ce:	81 ec       	ldi	r24, 0xC1	; 193
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	28 e9       	ldi	r18, 0x98	; 152
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
     9d8:	82 ec       	ldi	r24, 0xC2	; 194
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	26 e0       	ldi	r18, 0x06	; 6
     9de:	fc 01       	movw	r30, r24
     9e0:	20 83       	st	Z, r18
}
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	cf 91       	pop	r28
     9e8:	df 91       	pop	r29
     9ea:	08 95       	ret

000009ec <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	0f 92       	push	r0
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for empty transmit buffer */
    while ( !(UCSR0A & (1 << UDRE0)) ) // Wait until buffer is empty
     9f8:	00 00       	nop
     9fa:	80 ec       	ldi	r24, 0xC0	; 192
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	fc 01       	movw	r30, r24
     a00:	80 81       	ld	r24, Z
     a02:	88 2f       	mov	r24, r24
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	80 72       	andi	r24, 0x20	; 32
     a08:	90 70       	andi	r25, 0x00	; 0
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	b1 f3       	breq	.-20     	; 0x9fa <USART_Transmit+0xe>

	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     a0e:	86 ec       	ldi	r24, 0xC6	; 198
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	29 81       	ldd	r18, Y+1	; 0x01
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18
}
     a18:	0f 90       	pop	r0
     a1a:	cf 91       	pop	r28
     a1c:	df 91       	pop	r29
     a1e:	08 95       	ret

00000a20 <USART_Receive>:


unsigned char USART_Receive( void )
{
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */ 
	while ( !(UCSR0A & (1<<RXC0)) ); 
     a28:	00 00       	nop
     a2a:	80 ec       	ldi	r24, 0xC0	; 192
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	fc 01       	movw	r30, r24
     a30:	80 81       	ld	r24, Z
     a32:	88 23       	and	r24, r24
     a34:	d4 f7       	brge	.-12     	; 0xa2a <USART_Receive+0xa>
	/* Get and return received data from buffer */ 
	return UDR0;
     a36:	86 ec       	ldi	r24, 0xC6	; 198
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	fc 01       	movw	r30, r24
     a3c:	80 81       	ld	r24, Z
}
     a3e:	cf 91       	pop	r28
     a40:	df 91       	pop	r29
     a42:	08 95       	ret

00000a44 <USART_Print>:


void USART_Print(char * input, int n)
{
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	00 d0       	rcall	.+0      	; 0xa4a <USART_Print+0x6>
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <USART_Print+0x8>
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <USART_Print+0xa>
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	8b 83       	std	Y+3, r24	; 0x03
     a56:	7e 83       	std	Y+6, r23	; 0x06
     a58:	6d 83       	std	Y+5, r22	; 0x05
	
	for(int i = 0; i < n; ++i)
     a5a:	1a 82       	std	Y+2, r1	; 0x02
     a5c:	19 82       	std	Y+1, r1	; 0x01
     a5e:	0f c0       	rjmp	.+30     	; 0xa7e <USART_Print+0x3a>
	{
		USART_Transmit(input[i]);
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	2b 81       	ldd	r18, Y+3	; 0x03
     a66:	3c 81       	ldd	r19, Y+4	; 0x04
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	0e 94 f6 04 	call	0x9ec	; 0x9ec <USART_Transmit>


void USART_Print(char * input, int n)
{
	
	for(int i = 0; i < n; ++i)
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	9a 81       	ldd	r25, Y+2	; 0x02
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	29 81       	ldd	r18, Y+1	; 0x01
     a80:	3a 81       	ldd	r19, Y+2	; 0x02
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	9e 81       	ldd	r25, Y+6	; 0x06
     a86:	28 17       	cp	r18, r24
     a88:	39 07       	cpc	r19, r25
     a8a:	54 f3       	brlt	.-44     	; 0xa60 <USART_Print+0x1c>
	{
		USART_Transmit(input[i]);
	}
	
}
     a8c:	26 96       	adiw	r28, 0x06	; 6
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	cf 91       	pop	r28
     a9a:	df 91       	pop	r29
     a9c:	08 95       	ret

00000a9e <print>:


int print(char *format, ...)
{
     a9e:	df 93       	push	r29
     aa0:	cf 93       	push	r28
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <print+0x6>
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <print+0x8>
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
	static char buf[128];
	va_list va;
	int n;
	va_start(va, format);
     aaa:	ce 01       	movw	r24, r28
     aac:	0b 96       	adiw	r24, 0x0b	; 11
     aae:	9c 83       	std	Y+4, r25	; 0x04
     ab0:	8b 83       	std	Y+3, r24	; 0x03
	n = vsprintf(buf, format, va);
     ab2:	2b 81       	ldd	r18, Y+3	; 0x03
     ab4:	3c 81       	ldd	r19, Y+4	; 0x04
     ab6:	87 e6       	ldi	r24, 0x67	; 103
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	49 85       	ldd	r20, Y+9	; 0x09
     abc:	5a 85       	ldd	r21, Y+10	; 0x0a
     abe:	ba 01       	movw	r22, r20
     ac0:	a9 01       	movw	r20, r18
     ac2:	0e 94 22 0b 	call	0x1644	; 0x1644 <vsprintf>
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
	USART_Print(buf, n);
     aca:	87 e6       	ldi	r24, 0x67	; 103
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	29 81       	ldd	r18, Y+1	; 0x01
     ad0:	3a 81       	ldd	r19, Y+2	; 0x02
     ad2:	b9 01       	movw	r22, r18
     ad4:	0e 94 22 05 	call	0xa44	; 0xa44 <USART_Print>
	va_end(va);
	return n;
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	9a 81       	ldd	r25, Y+2	; 0x02
	
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	cf 91       	pop	r28
     ae6:	df 91       	pop	r29
     ae8:	08 95       	ret

00000aea <__fixunssfsi>:
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	7b 01       	movw	r14, r22
     af4:	8c 01       	movw	r16, r24
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	5f e4       	ldi	r21, 0x4F	; 79
     afe:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__gesf2>
     b02:	87 fd       	sbrc	r24, 7
     b04:	11 c0       	rjmp	.+34     	; 0xb28 <__fixunssfsi+0x3e>
     b06:	c8 01       	movw	r24, r16
     b08:	b7 01       	movw	r22, r14
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	5f e4       	ldi	r21, 0x4F	; 79
     b12:	0e 94 18 07 	call	0xe30	; 0xe30 <__subsf3>
     b16:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fixsfsi>
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	20 50       	subi	r18, 0x00	; 0
     b20:	30 40       	sbci	r19, 0x00	; 0
     b22:	40 40       	sbci	r20, 0x00	; 0
     b24:	50 48       	sbci	r21, 0x80	; 128
     b26:	06 c0       	rjmp	.+12     	; 0xb34 <__fixunssfsi+0x4a>
     b28:	c8 01       	movw	r24, r16
     b2a:	b7 01       	movw	r22, r14
     b2c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fixsfsi>
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	b9 01       	movw	r22, r18
     b36:	ca 01       	movw	r24, r20
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <_fpadd_parts>:
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e7 ea       	ldi	r30, 0xA7	; 167
     b48:	f5 e0       	ldi	r31, 0x05	; 5
     b4a:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__prologue_saves__+0x8>
     b4e:	fc 01       	movw	r30, r24
     b50:	ea 01       	movw	r28, r20
     b52:	80 81       	ld	r24, Z
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	08 f4       	brcc	.+2      	; 0xb5a <_fpadd_parts+0x18>
     b58:	38 c1       	rjmp	.+624    	; 0xdca <_fpadd_parts+0x288>
     b5a:	db 01       	movw	r26, r22
     b5c:	9c 91       	ld	r25, X
     b5e:	92 30       	cpi	r25, 0x02	; 2
     b60:	08 f4       	brcc	.+2      	; 0xb64 <_fpadd_parts+0x22>
     b62:	30 c1       	rjmp	.+608    	; 0xdc4 <_fpadd_parts+0x282>
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	59 f4       	brne	.+22     	; 0xb7e <_fpadd_parts+0x3c>
     b68:	94 30       	cpi	r25, 0x04	; 4
     b6a:	09 f0       	breq	.+2      	; 0xb6e <_fpadd_parts+0x2c>
     b6c:	2e c1       	rjmp	.+604    	; 0xdca <_fpadd_parts+0x288>
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	8c 91       	ld	r24, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	98 17       	cp	r25, r24
     b78:	09 f0       	breq	.+2      	; 0xb7c <_fpadd_parts+0x3a>
     b7a:	21 c1       	rjmp	.+578    	; 0xdbe <_fpadd_parts+0x27c>
     b7c:	26 c1       	rjmp	.+588    	; 0xdca <_fpadd_parts+0x288>
     b7e:	94 30       	cpi	r25, 0x04	; 4
     b80:	09 f4       	brne	.+2      	; 0xb84 <_fpadd_parts+0x42>
     b82:	20 c1       	rjmp	.+576    	; 0xdc4 <_fpadd_parts+0x282>
     b84:	92 30       	cpi	r25, 0x02	; 2
     b86:	b1 f4       	brne	.+44     	; 0xbb4 <_fpadd_parts+0x72>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	09 f0       	breq	.+2      	; 0xb8e <_fpadd_parts+0x4c>
     b8c:	1e c1       	rjmp	.+572    	; 0xdca <_fpadd_parts+0x288>
     b8e:	ca 01       	movw	r24, r20
     b90:	af 01       	movw	r20, r30
     b92:	28 e0       	ldi	r18, 0x08	; 8
     b94:	da 01       	movw	r26, r20
     b96:	0d 90       	ld	r0, X+
     b98:	ad 01       	movw	r20, r26
     b9a:	dc 01       	movw	r26, r24
     b9c:	0d 92       	st	X+, r0
     b9e:	cd 01       	movw	r24, r26
     ba0:	21 50       	subi	r18, 0x01	; 1
     ba2:	c1 f7       	brne	.-16     	; 0xb94 <_fpadd_parts+0x52>
     ba4:	db 01       	movw	r26, r22
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	8c 91       	ld	r24, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	91 81       	ldd	r25, Z+1	; 0x01
     bae:	89 23       	and	r24, r25
     bb0:	89 83       	std	Y+1, r24	; 0x01
     bb2:	0a c1       	rjmp	.+532    	; 0xdc8 <_fpadd_parts+0x286>
     bb4:	82 30       	cpi	r24, 0x02	; 2
     bb6:	09 f4       	brne	.+2      	; 0xbba <_fpadd_parts+0x78>
     bb8:	05 c1       	rjmp	.+522    	; 0xdc4 <_fpadd_parts+0x282>
     bba:	c2 80       	ldd	r12, Z+2	; 0x02
     bbc:	d3 80       	ldd	r13, Z+3	; 0x03
     bbe:	db 01       	movw	r26, r22
     bc0:	12 96       	adiw	r26, 0x02	; 2
     bc2:	6d 90       	ld	r6, X+
     bc4:	7c 90       	ld	r7, X
     bc6:	13 97       	sbiw	r26, 0x03	; 3
     bc8:	24 81       	ldd	r18, Z+4	; 0x04
     bca:	35 81       	ldd	r19, Z+5	; 0x05
     bcc:	46 81       	ldd	r20, Z+6	; 0x06
     bce:	57 81       	ldd	r21, Z+7	; 0x07
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	ed 90       	ld	r14, X+
     bd4:	fd 90       	ld	r15, X+
     bd6:	0d 91       	ld	r16, X+
     bd8:	1c 91       	ld	r17, X
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	c6 01       	movw	r24, r12
     bde:	86 19       	sub	r24, r6
     be0:	97 09       	sbc	r25, r7
     be2:	5c 01       	movw	r10, r24
     be4:	97 ff       	sbrs	r25, 7
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <_fpadd_parts+0xae>
     be8:	aa 24       	eor	r10, r10
     bea:	bb 24       	eor	r11, r11
     bec:	a8 1a       	sub	r10, r24
     bee:	b9 0a       	sbc	r11, r25
     bf0:	b0 e2       	ldi	r27, 0x20	; 32
     bf2:	ab 16       	cp	r10, r27
     bf4:	b1 04       	cpc	r11, r1
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <_fpadd_parts+0xb8>
     bf8:	61 c0       	rjmp	.+194    	; 0xcbc <_fpadd_parts+0x17a>
     bfa:	18 16       	cp	r1, r24
     bfc:	19 06       	cpc	r1, r25
     bfe:	6c f5       	brge	.+90     	; 0xc5a <_fpadd_parts+0x118>
     c00:	37 01       	movw	r6, r14
     c02:	48 01       	movw	r8, r16
     c04:	0a 2c       	mov	r0, r10
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <_fpadd_parts+0xce>
     c08:	96 94       	lsr	r9
     c0a:	87 94       	ror	r8
     c0c:	77 94       	ror	r7
     c0e:	67 94       	ror	r6
     c10:	0a 94       	dec	r0
     c12:	d2 f7       	brpl	.-12     	; 0xc08 <_fpadd_parts+0xc6>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	0a 2c       	mov	r0, r10
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <_fpadd_parts+0xe6>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	aa 1f       	adc	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <_fpadd_parts+0xde>
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	a1 09       	sbc	r26, r1
     c30:	b1 09       	sbc	r27, r1
     c32:	8e 21       	and	r24, r14
     c34:	9f 21       	and	r25, r15
     c36:	a0 23       	and	r26, r16
     c38:	b1 23       	and	r27, r17
     c3a:	ee 24       	eor	r14, r14
     c3c:	ff 24       	eor	r15, r15
     c3e:	87 01       	movw	r16, r14
     c40:	e3 94       	inc	r14
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	a1 05       	cpc	r26, r1
     c46:	b1 05       	cpc	r27, r1
     c48:	19 f4       	brne	.+6      	; 0xc50 <_fpadd_parts+0x10e>
     c4a:	ee 24       	eor	r14, r14
     c4c:	ff 24       	eor	r15, r15
     c4e:	87 01       	movw	r16, r14
     c50:	e6 28       	or	r14, r6
     c52:	f7 28       	or	r15, r7
     c54:	08 29       	or	r16, r8
     c56:	19 29       	or	r17, r9
     c58:	3c c0       	rjmp	.+120    	; 0xcd2 <_fpadd_parts+0x190>
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	d1 f1       	breq	.+116    	; 0xcd2 <_fpadd_parts+0x190>
     c5e:	ca 0c       	add	r12, r10
     c60:	db 1c       	adc	r13, r11
     c62:	39 01       	movw	r6, r18
     c64:	4a 01       	movw	r8, r20
     c66:	0a 2c       	mov	r0, r10
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <_fpadd_parts+0x130>
     c6a:	96 94       	lsr	r9
     c6c:	87 94       	ror	r8
     c6e:	77 94       	ror	r7
     c70:	67 94       	ror	r6
     c72:	0a 94       	dec	r0
     c74:	d2 f7       	brpl	.-12     	; 0xc6a <_fpadd_parts+0x128>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	0a 2c       	mov	r0, r10
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <_fpadd_parts+0x148>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	aa 1f       	adc	r26, r26
     c88:	bb 1f       	adc	r27, r27
     c8a:	0a 94       	dec	r0
     c8c:	d2 f7       	brpl	.-12     	; 0xc82 <_fpadd_parts+0x140>
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	a1 09       	sbc	r26, r1
     c92:	b1 09       	sbc	r27, r1
     c94:	82 23       	and	r24, r18
     c96:	93 23       	and	r25, r19
     c98:	a4 23       	and	r26, r20
     c9a:	b5 23       	and	r27, r21
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	a1 05       	cpc	r26, r1
     ca8:	b1 05       	cpc	r27, r1
     caa:	19 f4       	brne	.+6      	; 0xcb2 <_fpadd_parts+0x170>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	a9 01       	movw	r20, r18
     cb2:	26 29       	or	r18, r6
     cb4:	37 29       	or	r19, r7
     cb6:	48 29       	or	r20, r8
     cb8:	59 29       	or	r21, r9
     cba:	0b c0       	rjmp	.+22     	; 0xcd2 <_fpadd_parts+0x190>
     cbc:	6c 14       	cp	r6, r12
     cbe:	7d 04       	cpc	r7, r13
     cc0:	24 f4       	brge	.+8      	; 0xcca <_fpadd_parts+0x188>
     cc2:	ee 24       	eor	r14, r14
     cc4:	ff 24       	eor	r15, r15
     cc6:	87 01       	movw	r16, r14
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <_fpadd_parts+0x190>
     cca:	63 01       	movw	r12, r6
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	a9 01       	movw	r20, r18
     cd2:	81 81       	ldd	r24, Z+1	; 0x01
     cd4:	fb 01       	movw	r30, r22
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	89 17       	cp	r24, r25
     cda:	09 f4       	brne	.+2      	; 0xcde <_fpadd_parts+0x19c>
     cdc:	45 c0       	rjmp	.+138    	; 0xd68 <_fpadd_parts+0x226>
     cde:	88 23       	and	r24, r24
     ce0:	49 f0       	breq	.+18     	; 0xcf4 <_fpadd_parts+0x1b2>
     ce2:	d8 01       	movw	r26, r16
     ce4:	c7 01       	movw	r24, r14
     ce6:	82 1b       	sub	r24, r18
     ce8:	93 0b       	sbc	r25, r19
     cea:	a4 0b       	sbc	r26, r20
     cec:	b5 0b       	sbc	r27, r21
     cee:	9c 01       	movw	r18, r24
     cf0:	ad 01       	movw	r20, r26
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <_fpadd_parts+0x1ba>
     cf4:	2e 19       	sub	r18, r14
     cf6:	3f 09       	sbc	r19, r15
     cf8:	40 0b       	sbc	r20, r16
     cfa:	51 0b       	sbc	r21, r17
     cfc:	57 fd       	sbrc	r21, 7
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <_fpadd_parts+0x1c6>
     d00:	19 82       	std	Y+1, r1	; 0x01
     d02:	db 82       	std	Y+3, r13	; 0x03
     d04:	ca 82       	std	Y+2, r12	; 0x02
     d06:	0b c0       	rjmp	.+22     	; 0xd1e <_fpadd_parts+0x1dc>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	db 82       	std	Y+3, r13	; 0x03
     d0e:	ca 82       	std	Y+2, r12	; 0x02
     d10:	50 95       	com	r21
     d12:	40 95       	com	r20
     d14:	30 95       	com	r19
     d16:	21 95       	neg	r18
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	4f 4f       	sbci	r20, 0xFF	; 255
     d1c:	5f 4f       	sbci	r21, 0xFF	; 255
     d1e:	2c 83       	std	Y+4, r18	; 0x04
     d20:	3d 83       	std	Y+5, r19	; 0x05
     d22:	4e 83       	std	Y+6, r20	; 0x06
     d24:	5f 83       	std	Y+7, r21	; 0x07
     d26:	0d c0       	rjmp	.+26     	; 0xd42 <_fpadd_parts+0x200>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	aa 1f       	adc	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	8c 83       	std	Y+4, r24	; 0x04
     d32:	9d 83       	std	Y+5, r25	; 0x05
     d34:	ae 83       	std	Y+6, r26	; 0x06
     d36:	bf 83       	std	Y+7, r27	; 0x07
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	9b 83       	std	Y+3, r25	; 0x03
     d40:	8a 83       	std	Y+2, r24	; 0x02
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	ae 81       	ldd	r26, Y+6	; 0x06
     d48:	bf 81       	ldd	r27, Y+7	; 0x07
     d4a:	9c 01       	movw	r18, r24
     d4c:	ad 01       	movw	r20, r26
     d4e:	21 50       	subi	r18, 0x01	; 1
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	40 40       	sbci	r20, 0x00	; 0
     d54:	50 40       	sbci	r21, 0x00	; 0
     d56:	2f 3f       	cpi	r18, 0xFF	; 255
     d58:	ef ef       	ldi	r30, 0xFF	; 255
     d5a:	3e 07       	cpc	r19, r30
     d5c:	ef ef       	ldi	r30, 0xFF	; 255
     d5e:	4e 07       	cpc	r20, r30
     d60:	ef e3       	ldi	r30, 0x3F	; 63
     d62:	5e 07       	cpc	r21, r30
     d64:	08 f3       	brcs	.-62     	; 0xd28 <_fpadd_parts+0x1e6>
     d66:	0b c0       	rjmp	.+22     	; 0xd7e <_fpadd_parts+0x23c>
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	db 82       	std	Y+3, r13	; 0x03
     d6c:	ca 82       	std	Y+2, r12	; 0x02
     d6e:	2e 0d       	add	r18, r14
     d70:	3f 1d       	adc	r19, r15
     d72:	40 1f       	adc	r20, r16
     d74:	51 1f       	adc	r21, r17
     d76:	2c 83       	std	Y+4, r18	; 0x04
     d78:	3d 83       	std	Y+5, r19	; 0x05
     d7a:	4e 83       	std	Y+6, r20	; 0x06
     d7c:	5f 83       	std	Y+7, r21	; 0x07
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	88 83       	st	Y, r24
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	4e 81       	ldd	r20, Y+6	; 0x06
     d88:	5f 81       	ldd	r21, Y+7	; 0x07
     d8a:	57 ff       	sbrs	r21, 7
     d8c:	1d c0       	rjmp	.+58     	; 0xdc8 <_fpadd_parts+0x286>
     d8e:	da 01       	movw	r26, r20
     d90:	c9 01       	movw	r24, r18
     d92:	81 70       	andi	r24, 0x01	; 1
     d94:	90 70       	andi	r25, 0x00	; 0
     d96:	a0 70       	andi	r26, 0x00	; 0
     d98:	b0 70       	andi	r27, 0x00	; 0
     d9a:	56 95       	lsr	r21
     d9c:	47 95       	ror	r20
     d9e:	37 95       	ror	r19
     da0:	27 95       	ror	r18
     da2:	82 2b       	or	r24, r18
     da4:	93 2b       	or	r25, r19
     da6:	a4 2b       	or	r26, r20
     da8:	b5 2b       	or	r27, r21
     daa:	8c 83       	std	Y+4, r24	; 0x04
     dac:	9d 83       	std	Y+5, r25	; 0x05
     dae:	ae 83       	std	Y+6, r26	; 0x06
     db0:	bf 83       	std	Y+7, r27	; 0x07
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	9b 81       	ldd	r25, Y+3	; 0x03
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	9b 83       	std	Y+3, r25	; 0x03
     dba:	8a 83       	std	Y+2, r24	; 0x02
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <_fpadd_parts+0x286>
     dbe:	ea e1       	ldi	r30, 0x1A	; 26
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <_fpadd_parts+0x288>
     dc4:	fb 01       	movw	r30, r22
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <_fpadd_parts+0x288>
     dc8:	fe 01       	movw	r30, r28
     dca:	cf 01       	movw	r24, r30
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	ee e0       	ldi	r30, 0x0E	; 14
     dd2:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__epilogue_restores__+0x8>

00000dd6 <__addsf3>:
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e1 ef       	ldi	r30, 0xF1	; 241
     ddc:	f6 e0       	ldi	r31, 0x06	; 6
     dde:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__prologue_saves__+0x18>
     de2:	69 83       	std	Y+1, r22	; 0x01
     de4:	7a 83       	std	Y+2, r23	; 0x02
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	2d 83       	std	Y+5, r18	; 0x05
     dec:	3e 83       	std	Y+6, r19	; 0x06
     dee:	4f 83       	std	Y+7, r20	; 0x07
     df0:	58 87       	std	Y+8, r21	; 0x08
     df2:	89 e0       	ldi	r24, 0x09	; 9
     df4:	e8 2e       	mov	r14, r24
     df6:	f1 2c       	mov	r15, r1
     df8:	ec 0e       	add	r14, r28
     dfa:	fd 1e       	adc	r15, r29
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	b7 01       	movw	r22, r14
     e02:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
     e06:	8e 01       	movw	r16, r28
     e08:	0f 5e       	subi	r16, 0xEF	; 239
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	ce 01       	movw	r24, r28
     e0e:	05 96       	adiw	r24, 0x05	; 5
     e10:	b8 01       	movw	r22, r16
     e12:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
     e16:	c7 01       	movw	r24, r14
     e18:	b8 01       	movw	r22, r16
     e1a:	ae 01       	movw	r20, r28
     e1c:	47 5e       	subi	r20, 0xE7	; 231
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	0e 94 a1 05 	call	0xb42	; 0xb42 <_fpadd_parts>
     e24:	0e 94 25 09 	call	0x124a	; 0x124a <__pack_f>
     e28:	a0 96       	adiw	r28, 0x20	; 32
     e2a:	e6 e0       	ldi	r30, 0x06	; 6
     e2c:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__epilogue_restores__+0x18>

00000e30 <__subsf3>:
     e30:	a0 e2       	ldi	r26, 0x20	; 32
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ee e1       	ldi	r30, 0x1E	; 30
     e36:	f7 e0       	ldi	r31, 0x07	; 7
     e38:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__prologue_saves__+0x18>
     e3c:	69 83       	std	Y+1, r22	; 0x01
     e3e:	7a 83       	std	Y+2, r23	; 0x02
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	2d 83       	std	Y+5, r18	; 0x05
     e46:	3e 83       	std	Y+6, r19	; 0x06
     e48:	4f 83       	std	Y+7, r20	; 0x07
     e4a:	58 87       	std	Y+8, r21	; 0x08
     e4c:	8e 01       	movw	r16, r28
     e4e:	07 5f       	subi	r16, 0xF7	; 247
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	b8 01       	movw	r22, r16
     e58:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
     e5c:	91 e1       	ldi	r25, 0x11	; 17
     e5e:	e9 2e       	mov	r14, r25
     e60:	f1 2c       	mov	r15, r1
     e62:	ec 0e       	add	r14, r28
     e64:	fd 1e       	adc	r15, r29
     e66:	ce 01       	movw	r24, r28
     e68:	05 96       	adiw	r24, 0x05	; 5
     e6a:	b7 01       	movw	r22, r14
     e6c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
     e70:	8a 89       	ldd	r24, Y+18	; 0x12
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	89 27       	eor	r24, r25
     e76:	8a 8b       	std	Y+18, r24	; 0x12
     e78:	c8 01       	movw	r24, r16
     e7a:	b7 01       	movw	r22, r14
     e7c:	ae 01       	movw	r20, r28
     e7e:	47 5e       	subi	r20, 0xE7	; 231
     e80:	5f 4f       	sbci	r21, 0xFF	; 255
     e82:	0e 94 a1 05 	call	0xb42	; 0xb42 <_fpadd_parts>
     e86:	0e 94 25 09 	call	0x124a	; 0x124a <__pack_f>
     e8a:	a0 96       	adiw	r28, 0x20	; 32
     e8c:	e6 e0       	ldi	r30, 0x06	; 6
     e8e:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__epilogue_restores__+0x18>

00000e92 <__mulsf3>:
     e92:	a0 e2       	ldi	r26, 0x20	; 32
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ef e4       	ldi	r30, 0x4F	; 79
     e98:	f7 e0       	ldi	r31, 0x07	; 7
     e9a:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__>
     e9e:	69 83       	std	Y+1, r22	; 0x01
     ea0:	7a 83       	std	Y+2, r23	; 0x02
     ea2:	8b 83       	std	Y+3, r24	; 0x03
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	2d 83       	std	Y+5, r18	; 0x05
     ea8:	3e 83       	std	Y+6, r19	; 0x06
     eaa:	4f 83       	std	Y+7, r20	; 0x07
     eac:	58 87       	std	Y+8, r21	; 0x08
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	be 01       	movw	r22, r28
     eb4:	67 5f       	subi	r22, 0xF7	; 247
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
     ebc:	ce 01       	movw	r24, r28
     ebe:	05 96       	adiw	r24, 0x05	; 5
     ec0:	be 01       	movw	r22, r28
     ec2:	6f 5e       	subi	r22, 0xEF	; 239
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
     eca:	99 85       	ldd	r25, Y+9	; 0x09
     ecc:	92 30       	cpi	r25, 0x02	; 2
     ece:	78 f0       	brcs	.+30     	; 0xeee <__mulsf3+0x5c>
     ed0:	89 89       	ldd	r24, Y+17	; 0x11
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	c0 f0       	brcs	.+48     	; 0xf06 <__mulsf3+0x74>
     ed6:	94 30       	cpi	r25, 0x04	; 4
     ed8:	19 f4       	brne	.+6      	; 0xee0 <__mulsf3+0x4e>
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	41 f4       	brne	.+16     	; 0xeee <__mulsf3+0x5c>
     ede:	cb c0       	rjmp	.+406    	; 0x1076 <__mulsf3+0x1e4>
     ee0:	84 30       	cpi	r24, 0x04	; 4
     ee2:	19 f4       	brne	.+6      	; 0xeea <__mulsf3+0x58>
     ee4:	92 30       	cpi	r25, 0x02	; 2
     ee6:	79 f4       	brne	.+30     	; 0xf06 <__mulsf3+0x74>
     ee8:	c6 c0       	rjmp	.+396    	; 0x1076 <__mulsf3+0x1e4>
     eea:	92 30       	cpi	r25, 0x02	; 2
     eec:	51 f4       	brne	.+20     	; 0xf02 <__mulsf3+0x70>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	2a 85       	ldd	r18, Y+10	; 0x0a
     ef2:	9a 89       	ldd	r25, Y+18	; 0x12
     ef4:	29 17       	cp	r18, r25
     ef6:	09 f4       	brne	.+2      	; 0xefa <__mulsf3+0x68>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	8a 87       	std	Y+10, r24	; 0x0a
     efc:	ce 01       	movw	r24, r28
     efe:	09 96       	adiw	r24, 0x09	; 9
     f00:	bc c0       	rjmp	.+376    	; 0x107a <__mulsf3+0x1e8>
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	51 f4       	brne	.+20     	; 0xf1a <__mulsf3+0x88>
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	2a 85       	ldd	r18, Y+10	; 0x0a
     f0a:	9a 89       	ldd	r25, Y+18	; 0x12
     f0c:	29 17       	cp	r18, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__mulsf3+0x80>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	8a 8b       	std	Y+18, r24	; 0x12
     f14:	ce 01       	movw	r24, r28
     f16:	41 96       	adiw	r24, 0x11	; 17
     f18:	b0 c0       	rjmp	.+352    	; 0x107a <__mulsf3+0x1e8>
     f1a:	6d 84       	ldd	r6, Y+13	; 0x0d
     f1c:	7e 84       	ldd	r7, Y+14	; 0x0e
     f1e:	8f 84       	ldd	r8, Y+15	; 0x0f
     f20:	98 88       	ldd	r9, Y+16	; 0x10
     f22:	ed 88       	ldd	r14, Y+21	; 0x15
     f24:	fe 88       	ldd	r15, Y+22	; 0x16
     f26:	0f 89       	ldd	r16, Y+23	; 0x17
     f28:	18 8d       	ldd	r17, Y+24	; 0x18
     f2a:	e0 e2       	ldi	r30, 0x20	; 32
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	dc 01       	movw	r26, r24
     f34:	aa 24       	eor	r10, r10
     f36:	bb 24       	eor	r11, r11
     f38:	65 01       	movw	r12, r10
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	a9 01       	movw	r20, r18
     f40:	b3 01       	movw	r22, r6
     f42:	61 70       	andi	r22, 0x01	; 1
     f44:	70 70       	andi	r23, 0x00	; 0
     f46:	61 15       	cp	r22, r1
     f48:	71 05       	cpc	r23, r1
     f4a:	d1 f0       	breq	.+52     	; 0xf80 <__mulsf3+0xee>
     f4c:	2e 0d       	add	r18, r14
     f4e:	3f 1d       	adc	r19, r15
     f50:	40 1f       	adc	r20, r16
     f52:	51 1f       	adc	r21, r17
     f54:	15 01       	movw	r2, r10
     f56:	26 01       	movw	r4, r12
     f58:	28 0e       	add	r2, r24
     f5a:	39 1e       	adc	r3, r25
     f5c:	4a 1e       	adc	r4, r26
     f5e:	5b 1e       	adc	r5, r27
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	2e 15       	cp	r18, r14
     f6a:	3f 05       	cpc	r19, r15
     f6c:	40 07       	cpc	r20, r16
     f6e:	51 07       	cpc	r21, r17
     f70:	18 f0       	brcs	.+6      	; 0xf78 <__mulsf3+0xe6>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	dc 01       	movw	r26, r24
     f78:	82 0d       	add	r24, r2
     f7a:	93 1d       	adc	r25, r3
     f7c:	a4 1d       	adc	r26, r4
     f7e:	b5 1d       	adc	r27, r5
     f80:	aa 0c       	add	r10, r10
     f82:	bb 1c       	adc	r11, r11
     f84:	cc 1c       	adc	r12, r12
     f86:	dd 1c       	adc	r13, r13
     f88:	17 ff       	sbrs	r17, 7
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <__mulsf3+0x10c>
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	26 2e       	mov	r2, r22
     f90:	31 2c       	mov	r3, r1
     f92:	41 2c       	mov	r4, r1
     f94:	51 2c       	mov	r5, r1
     f96:	a2 28       	or	r10, r2
     f98:	b3 28       	or	r11, r3
     f9a:	c4 28       	or	r12, r4
     f9c:	d5 28       	or	r13, r5
     f9e:	31 97       	sbiw	r30, 0x01	; 1
     fa0:	49 f0       	breq	.+18     	; 0xfb4 <__mulsf3+0x122>
     fa2:	ee 0c       	add	r14, r14
     fa4:	ff 1c       	adc	r15, r15
     fa6:	00 1f       	adc	r16, r16
     fa8:	11 1f       	adc	r17, r17
     faa:	96 94       	lsr	r9
     fac:	87 94       	ror	r8
     fae:	77 94       	ror	r7
     fb0:	67 94       	ror	r6
     fb2:	c6 cf       	rjmp	.-116    	; 0xf40 <__mulsf3+0xae>
     fb4:	6b 89       	ldd	r22, Y+19	; 0x13
     fb6:	7c 89       	ldd	r23, Y+20	; 0x14
     fb8:	eb 85       	ldd	r30, Y+11	; 0x0b
     fba:	fc 85       	ldd	r31, Y+12	; 0x0c
     fbc:	6e 0f       	add	r22, r30
     fbe:	7f 1f       	adc	r23, r31
     fc0:	6e 5f       	subi	r22, 0xFE	; 254
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	7c 8f       	std	Y+28, r23	; 0x1c
     fc6:	6b 8f       	std	Y+27, r22	; 0x1b
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	ea 85       	ldd	r30, Y+10	; 0x0a
     fcc:	7a 89       	ldd	r23, Y+18	; 0x12
     fce:	e7 17       	cp	r30, r23
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <__mulsf3+0x142>
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	6a 8f       	std	Y+26, r22	; 0x1a
     fd6:	6b 8d       	ldd	r22, Y+27	; 0x1b
     fd8:	7c 8d       	ldd	r23, Y+28	; 0x1c
     fda:	10 c0       	rjmp	.+32     	; 0xffc <__mulsf3+0x16a>
     fdc:	fc 01       	movw	r30, r24
     fde:	e1 70       	andi	r30, 0x01	; 1
     fe0:	f0 70       	andi	r31, 0x00	; 0
     fe2:	30 97       	sbiw	r30, 0x00	; 0
     fe4:	29 f0       	breq	.+10     	; 0xff0 <__mulsf3+0x15e>
     fe6:	56 95       	lsr	r21
     fe8:	47 95       	ror	r20
     fea:	37 95       	ror	r19
     fec:	27 95       	ror	r18
     fee:	50 68       	ori	r21, 0x80	; 128
     ff0:	b6 95       	lsr	r27
     ff2:	a7 95       	ror	r26
     ff4:	97 95       	ror	r25
     ff6:	87 95       	ror	r24
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	b7 fd       	sbrc	r27, 7
     ffe:	ee cf       	rjmp	.-36     	; 0xfdc <__mulsf3+0x14a>
    1000:	0c c0       	rjmp	.+24     	; 0x101a <__mulsf3+0x188>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	aa 1f       	adc	r26, r26
    1008:	bb 1f       	adc	r27, r27
    100a:	57 fd       	sbrc	r21, 7
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	44 1f       	adc	r20, r20
    1014:	55 1f       	adc	r21, r21
    1016:	61 50       	subi	r22, 0x01	; 1
    1018:	70 40       	sbci	r23, 0x00	; 0
    101a:	80 30       	cpi	r24, 0x00	; 0
    101c:	e0 e0       	ldi	r30, 0x00	; 0
    101e:	9e 07       	cpc	r25, r30
    1020:	e0 e0       	ldi	r30, 0x00	; 0
    1022:	ae 07       	cpc	r26, r30
    1024:	e0 e4       	ldi	r30, 0x40	; 64
    1026:	be 07       	cpc	r27, r30
    1028:	60 f3       	brcs	.-40     	; 0x1002 <__mulsf3+0x170>
    102a:	6b 8f       	std	Y+27, r22	; 0x1b
    102c:	7c 8f       	std	Y+28, r23	; 0x1c
    102e:	6f e7       	ldi	r22, 0x7F	; 127
    1030:	e6 2e       	mov	r14, r22
    1032:	f1 2c       	mov	r15, r1
    1034:	01 2d       	mov	r16, r1
    1036:	11 2d       	mov	r17, r1
    1038:	e8 22       	and	r14, r24
    103a:	f9 22       	and	r15, r25
    103c:	0a 23       	and	r16, r26
    103e:	1b 23       	and	r17, r27
    1040:	60 e4       	ldi	r22, 0x40	; 64
    1042:	e6 16       	cp	r14, r22
    1044:	f1 04       	cpc	r15, r1
    1046:	01 05       	cpc	r16, r1
    1048:	11 05       	cpc	r17, r1
    104a:	61 f4       	brne	.+24     	; 0x1064 <__mulsf3+0x1d2>
    104c:	87 fd       	sbrc	r24, 7
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <__mulsf3+0x1d2>
    1050:	21 15       	cp	r18, r1
    1052:	31 05       	cpc	r19, r1
    1054:	41 05       	cpc	r20, r1
    1056:	51 05       	cpc	r21, r1
    1058:	29 f0       	breq	.+10     	; 0x1064 <__mulsf3+0x1d2>
    105a:	80 5c       	subi	r24, 0xC0	; 192
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	af 4f       	sbci	r26, 0xFF	; 255
    1060:	bf 4f       	sbci	r27, 0xFF	; 255
    1062:	80 78       	andi	r24, 0x80	; 128
    1064:	8d 8f       	std	Y+29, r24	; 0x1d
    1066:	9e 8f       	std	Y+30, r25	; 0x1e
    1068:	af 8f       	std	Y+31, r26	; 0x1f
    106a:	b8 a3       	std	Y+32, r27	; 0x20
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	89 8f       	std	Y+25, r24	; 0x19
    1070:	ce 01       	movw	r24, r28
    1072:	49 96       	adiw	r24, 0x19	; 25
    1074:	02 c0       	rjmp	.+4      	; 0x107a <__mulsf3+0x1e8>
    1076:	8a e1       	ldi	r24, 0x1A	; 26
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	0e 94 25 09 	call	0x124a	; 0x124a <__pack_f>
    107e:	a0 96       	adiw	r28, 0x20	; 32
    1080:	e2 e1       	ldi	r30, 0x12	; 18
    1082:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__>

00001086 <__gtsf2>:
    1086:	a8 e1       	ldi	r26, 0x18	; 24
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e9 e4       	ldi	r30, 0x49	; 73
    108c:	f8 e0       	ldi	r31, 0x08	; 8
    108e:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__prologue_saves__+0x18>
    1092:	69 83       	std	Y+1, r22	; 0x01
    1094:	7a 83       	std	Y+2, r23	; 0x02
    1096:	8b 83       	std	Y+3, r24	; 0x03
    1098:	9c 83       	std	Y+4, r25	; 0x04
    109a:	2d 83       	std	Y+5, r18	; 0x05
    109c:	3e 83       	std	Y+6, r19	; 0x06
    109e:	4f 83       	std	Y+7, r20	; 0x07
    10a0:	58 87       	std	Y+8, r21	; 0x08
    10a2:	8e 01       	movw	r16, r28
    10a4:	07 5f       	subi	r16, 0xF7	; 247
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	b8 01       	movw	r22, r16
    10ae:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
    10b2:	81 e1       	ldi	r24, 0x11	; 17
    10b4:	e8 2e       	mov	r14, r24
    10b6:	f1 2c       	mov	r15, r1
    10b8:	ec 0e       	add	r14, r28
    10ba:	fd 1e       	adc	r15, r29
    10bc:	ce 01       	movw	r24, r28
    10be:	05 96       	adiw	r24, 0x05	; 5
    10c0:	b7 01       	movw	r22, r14
    10c2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
    10c6:	89 85       	ldd	r24, Y+9	; 0x09
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	40 f0       	brcs	.+16     	; 0x10dc <__gtsf2+0x56>
    10cc:	89 89       	ldd	r24, Y+17	; 0x11
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	28 f0       	brcs	.+10     	; 0x10dc <__gtsf2+0x56>
    10d2:	c8 01       	movw	r24, r16
    10d4:	b7 01       	movw	r22, r14
    10d6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fpcmp_parts_f>
    10da:	01 c0       	rjmp	.+2      	; 0x10de <__gtsf2+0x58>
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
    10de:	68 96       	adiw	r28, 0x18	; 24
    10e0:	e6 e0       	ldi	r30, 0x06	; 6
    10e2:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__epilogue_restores__+0x18>

000010e6 <__gesf2>:
    10e6:	a8 e1       	ldi	r26, 0x18	; 24
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e9 e7       	ldi	r30, 0x79	; 121
    10ec:	f8 e0       	ldi	r31, 0x08	; 8
    10ee:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__prologue_saves__+0x18>
    10f2:	69 83       	std	Y+1, r22	; 0x01
    10f4:	7a 83       	std	Y+2, r23	; 0x02
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	2d 83       	std	Y+5, r18	; 0x05
    10fc:	3e 83       	std	Y+6, r19	; 0x06
    10fe:	4f 83       	std	Y+7, r20	; 0x07
    1100:	58 87       	std	Y+8, r21	; 0x08
    1102:	8e 01       	movw	r16, r28
    1104:	07 5f       	subi	r16, 0xF7	; 247
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	ce 01       	movw	r24, r28
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	b8 01       	movw	r22, r16
    110e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
    1112:	81 e1       	ldi	r24, 0x11	; 17
    1114:	e8 2e       	mov	r14, r24
    1116:	f1 2c       	mov	r15, r1
    1118:	ec 0e       	add	r14, r28
    111a:	fd 1e       	adc	r15, r29
    111c:	ce 01       	movw	r24, r28
    111e:	05 96       	adiw	r24, 0x05	; 5
    1120:	b7 01       	movw	r22, r14
    1122:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
    1126:	89 85       	ldd	r24, Y+9	; 0x09
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	40 f0       	brcs	.+16     	; 0x113c <__gesf2+0x56>
    112c:	89 89       	ldd	r24, Y+17	; 0x11
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	28 f0       	brcs	.+10     	; 0x113c <__gesf2+0x56>
    1132:	c8 01       	movw	r24, r16
    1134:	b7 01       	movw	r22, r14
    1136:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fpcmp_parts_f>
    113a:	01 c0       	rjmp	.+2      	; 0x113e <__gesf2+0x58>
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	68 96       	adiw	r28, 0x18	; 24
    1140:	e6 e0       	ldi	r30, 0x06	; 6
    1142:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__epilogue_restores__+0x18>

00001146 <__ltsf2>:
    1146:	a8 e1       	ldi	r26, 0x18	; 24
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e9 ea       	ldi	r30, 0xA9	; 169
    114c:	f8 e0       	ldi	r31, 0x08	; 8
    114e:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__prologue_saves__+0x18>
    1152:	69 83       	std	Y+1, r22	; 0x01
    1154:	7a 83       	std	Y+2, r23	; 0x02
    1156:	8b 83       	std	Y+3, r24	; 0x03
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	2d 83       	std	Y+5, r18	; 0x05
    115c:	3e 83       	std	Y+6, r19	; 0x06
    115e:	4f 83       	std	Y+7, r20	; 0x07
    1160:	58 87       	std	Y+8, r21	; 0x08
    1162:	8e 01       	movw	r16, r28
    1164:	07 5f       	subi	r16, 0xF7	; 247
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	b8 01       	movw	r22, r16
    116e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
    1172:	81 e1       	ldi	r24, 0x11	; 17
    1174:	e8 2e       	mov	r14, r24
    1176:	f1 2c       	mov	r15, r1
    1178:	ec 0e       	add	r14, r28
    117a:	fd 1e       	adc	r15, r29
    117c:	ce 01       	movw	r24, r28
    117e:	05 96       	adiw	r24, 0x05	; 5
    1180:	b7 01       	movw	r22, r14
    1182:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	82 30       	cpi	r24, 0x02	; 2
    118a:	40 f0       	brcs	.+16     	; 0x119c <__ltsf2+0x56>
    118c:	89 89       	ldd	r24, Y+17	; 0x11
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	28 f0       	brcs	.+10     	; 0x119c <__ltsf2+0x56>
    1192:	c8 01       	movw	r24, r16
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fpcmp_parts_f>
    119a:	01 c0       	rjmp	.+2      	; 0x119e <__ltsf2+0x58>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	68 96       	adiw	r28, 0x18	; 24
    11a0:	e6 e0       	ldi	r30, 0x06	; 6
    11a2:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__epilogue_restores__+0x18>

000011a6 <__fixsfsi>:
    11a6:	ac e0       	ldi	r26, 0x0C	; 12
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e9 ed       	ldi	r30, 0xD9	; 217
    11ac:	f8 e0       	ldi	r31, 0x08	; 8
    11ae:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__prologue_saves__+0x20>
    11b2:	69 83       	std	Y+1, r22	; 0x01
    11b4:	7a 83       	std	Y+2, r23	; 0x02
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	9c 83       	std	Y+4, r25	; 0x04
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	be 01       	movw	r22, r28
    11c0:	6b 5f       	subi	r22, 0xFB	; 251
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__unpack_f>
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	81 f1       	breq	.+96     	; 0x122e <__fixsfsi+0x88>
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	70 f1       	brcs	.+92     	; 0x122e <__fixsfsi+0x88>
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	21 f4       	brne	.+8      	; 0x11de <__fixsfsi+0x38>
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	88 23       	and	r24, r24
    11da:	69 f1       	breq	.+90     	; 0x1236 <__fixsfsi+0x90>
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <__fixsfsi+0x4c>
    11de:	2f 81       	ldd	r18, Y+7	; 0x07
    11e0:	38 85       	ldd	r19, Y+8	; 0x08
    11e2:	37 fd       	sbrc	r19, 7
    11e4:	24 c0       	rjmp	.+72     	; 0x122e <__fixsfsi+0x88>
    11e6:	6e 81       	ldd	r22, Y+6	; 0x06
    11e8:	2f 31       	cpi	r18, 0x1F	; 31
    11ea:	31 05       	cpc	r19, r1
    11ec:	3c f0       	brlt	.+14     	; 0x11fc <__fixsfsi+0x56>
    11ee:	66 23       	and	r22, r22
    11f0:	11 f1       	breq	.+68     	; 0x1236 <__fixsfsi+0x90>
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e8       	ldi	r21, 0x80	; 128
    11fa:	21 c0       	rjmp	.+66     	; 0x123e <__fixsfsi+0x98>
    11fc:	8e e1       	ldi	r24, 0x1E	; 30
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	82 1b       	sub	r24, r18
    1202:	93 0b       	sbc	r25, r19
    1204:	29 85       	ldd	r18, Y+9	; 0x09
    1206:	3a 85       	ldd	r19, Y+10	; 0x0a
    1208:	4b 85       	ldd	r20, Y+11	; 0x0b
    120a:	5c 85       	ldd	r21, Y+12	; 0x0c
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <__fixsfsi+0x70>
    120e:	56 95       	lsr	r21
    1210:	47 95       	ror	r20
    1212:	37 95       	ror	r19
    1214:	27 95       	ror	r18
    1216:	8a 95       	dec	r24
    1218:	d2 f7       	brpl	.-12     	; 0x120e <__fixsfsi+0x68>
    121a:	66 23       	and	r22, r22
    121c:	81 f0       	breq	.+32     	; 0x123e <__fixsfsi+0x98>
    121e:	50 95       	com	r21
    1220:	40 95       	com	r20
    1222:	30 95       	com	r19
    1224:	21 95       	neg	r18
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	4f 4f       	sbci	r20, 0xFF	; 255
    122a:	5f 4f       	sbci	r21, 0xFF	; 255
    122c:	08 c0       	rjmp	.+16     	; 0x123e <__fixsfsi+0x98>
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	a9 01       	movw	r20, r18
    1234:	04 c0       	rjmp	.+8      	; 0x123e <__fixsfsi+0x98>
    1236:	2f ef       	ldi	r18, 0xFF	; 255
    1238:	3f ef       	ldi	r19, 0xFF	; 255
    123a:	4f ef       	ldi	r20, 0xFF	; 255
    123c:	5f e7       	ldi	r21, 0x7F	; 127
    123e:	b9 01       	movw	r22, r18
    1240:	ca 01       	movw	r24, r20
    1242:	2c 96       	adiw	r28, 0x0c	; 12
    1244:	e2 e0       	ldi	r30, 0x02	; 2
    1246:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__epilogue_restores__+0x20>

0000124a <__pack_f>:
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	fc 01       	movw	r30, r24
    1258:	24 81       	ldd	r18, Z+4	; 0x04
    125a:	35 81       	ldd	r19, Z+5	; 0x05
    125c:	46 81       	ldd	r20, Z+6	; 0x06
    125e:	57 81       	ldd	r21, Z+7	; 0x07
    1260:	61 81       	ldd	r22, Z+1	; 0x01
    1262:	80 81       	ld	r24, Z
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	20 f4       	brcc	.+8      	; 0x1270 <__pack_f+0x26>
    1268:	40 61       	ori	r20, 0x10	; 16
    126a:	ef ef       	ldi	r30, 0xFF	; 255
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	a3 c0       	rjmp	.+326    	; 0x13b6 <__pack_f+0x16c>
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	09 f4       	brne	.+2      	; 0x1276 <__pack_f+0x2c>
    1274:	9b c0       	rjmp	.+310    	; 0x13ac <__pack_f+0x162>
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	09 f4       	brne	.+2      	; 0x127c <__pack_f+0x32>
    127a:	92 c0       	rjmp	.+292    	; 0x13a0 <__pack_f+0x156>
    127c:	21 15       	cp	r18, r1
    127e:	31 05       	cpc	r19, r1
    1280:	41 05       	cpc	r20, r1
    1282:	51 05       	cpc	r21, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <__pack_f+0x3e>
    1286:	8f c0       	rjmp	.+286    	; 0x13a6 <__pack_f+0x15c>
    1288:	02 80       	ldd	r0, Z+2	; 0x02
    128a:	f3 81       	ldd	r31, Z+3	; 0x03
    128c:	e0 2d       	mov	r30, r0
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	e2 38       	cpi	r30, 0x82	; 130
    1292:	f8 07       	cpc	r31, r24
    1294:	0c f0       	brlt	.+2      	; 0x1298 <__pack_f+0x4e>
    1296:	5a c0       	rjmp	.+180    	; 0x134c <__pack_f+0x102>
    1298:	c2 e8       	ldi	r28, 0x82	; 130
    129a:	df ef       	ldi	r29, 0xFF	; 255
    129c:	ce 1b       	sub	r28, r30
    129e:	df 0b       	sbc	r29, r31
    12a0:	ca 31       	cpi	r28, 0x1A	; 26
    12a2:	d1 05       	cpc	r29, r1
    12a4:	6c f5       	brge	.+90     	; 0x1300 <__pack_f+0xb6>
    12a6:	79 01       	movw	r14, r18
    12a8:	8a 01       	movw	r16, r20
    12aa:	0c 2e       	mov	r0, r28
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <__pack_f+0x6c>
    12ae:	16 95       	lsr	r17
    12b0:	07 95       	ror	r16
    12b2:	f7 94       	ror	r15
    12b4:	e7 94       	ror	r14
    12b6:	0a 94       	dec	r0
    12b8:	d2 f7       	brpl	.-12     	; 0x12ae <__pack_f+0x64>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	0c 2e       	mov	r0, r28
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <__pack_f+0x84>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	aa 1f       	adc	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	0a 94       	dec	r0
    12d0:	d2 f7       	brpl	.-12     	; 0x12c6 <__pack_f+0x7c>
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	a1 09       	sbc	r26, r1
    12d6:	b1 09       	sbc	r27, r1
    12d8:	82 23       	and	r24, r18
    12da:	93 23       	and	r25, r19
    12dc:	a4 23       	and	r26, r20
    12de:	b5 23       	and	r27, r21
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	a1 05       	cpc	r26, r1
    12ec:	b1 05       	cpc	r27, r1
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <__pack_f+0xac>
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	2e 29       	or	r18, r14
    12f8:	3f 29       	or	r19, r15
    12fa:	40 2b       	or	r20, r16
    12fc:	51 2b       	or	r21, r17
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <__pack_f+0xbc>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	a9 01       	movw	r20, r18
    1306:	da 01       	movw	r26, r20
    1308:	c9 01       	movw	r24, r18
    130a:	8f 77       	andi	r24, 0x7F	; 127
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	a0 70       	andi	r26, 0x00	; 0
    1310:	b0 70       	andi	r27, 0x00	; 0
    1312:	80 34       	cpi	r24, 0x40	; 64
    1314:	91 05       	cpc	r25, r1
    1316:	a1 05       	cpc	r26, r1
    1318:	b1 05       	cpc	r27, r1
    131a:	39 f4       	brne	.+14     	; 0x132a <__pack_f+0xe0>
    131c:	27 ff       	sbrs	r18, 7
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <__pack_f+0xe8>
    1320:	20 5c       	subi	r18, 0xC0	; 192
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	4f 4f       	sbci	r20, 0xFF	; 255
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <__pack_f+0xe8>
    132a:	21 5c       	subi	r18, 0xC1	; 193
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	4f 4f       	sbci	r20, 0xFF	; 255
    1330:	5f 4f       	sbci	r21, 0xFF	; 255
    1332:	e1 e0       	ldi	r30, 0x01	; 1
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	20 30       	cpi	r18, 0x00	; 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	38 07       	cpc	r19, r24
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	48 07       	cpc	r20, r24
    1340:	80 e4       	ldi	r24, 0x40	; 64
    1342:	58 07       	cpc	r21, r24
    1344:	28 f5       	brcc	.+74     	; 0x1390 <__pack_f+0x146>
    1346:	e0 e0       	ldi	r30, 0x00	; 0
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	22 c0       	rjmp	.+68     	; 0x1390 <__pack_f+0x146>
    134c:	e0 38       	cpi	r30, 0x80	; 128
    134e:	f1 05       	cpc	r31, r1
    1350:	6c f5       	brge	.+90     	; 0x13ac <__pack_f+0x162>
    1352:	e1 58       	subi	r30, 0x81	; 129
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	da 01       	movw	r26, r20
    1358:	c9 01       	movw	r24, r18
    135a:	8f 77       	andi	r24, 0x7F	; 127
    135c:	90 70       	andi	r25, 0x00	; 0
    135e:	a0 70       	andi	r26, 0x00	; 0
    1360:	b0 70       	andi	r27, 0x00	; 0
    1362:	80 34       	cpi	r24, 0x40	; 64
    1364:	91 05       	cpc	r25, r1
    1366:	a1 05       	cpc	r26, r1
    1368:	b1 05       	cpc	r27, r1
    136a:	39 f4       	brne	.+14     	; 0x137a <__pack_f+0x130>
    136c:	27 ff       	sbrs	r18, 7
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <__pack_f+0x138>
    1370:	20 5c       	subi	r18, 0xC0	; 192
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	4f 4f       	sbci	r20, 0xFF	; 255
    1376:	5f 4f       	sbci	r21, 0xFF	; 255
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <__pack_f+0x138>
    137a:	21 5c       	subi	r18, 0xC1	; 193
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	4f 4f       	sbci	r20, 0xFF	; 255
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	57 ff       	sbrs	r21, 7
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <__pack_f+0x146>
    1386:	56 95       	lsr	r21
    1388:	47 95       	ror	r20
    138a:	37 95       	ror	r19
    138c:	27 95       	ror	r18
    138e:	31 96       	adiw	r30, 0x01	; 1
    1390:	87 e0       	ldi	r24, 0x07	; 7
    1392:	56 95       	lsr	r21
    1394:	47 95       	ror	r20
    1396:	37 95       	ror	r19
    1398:	27 95       	ror	r18
    139a:	8a 95       	dec	r24
    139c:	d1 f7       	brne	.-12     	; 0x1392 <__pack_f+0x148>
    139e:	0b c0       	rjmp	.+22     	; 0x13b6 <__pack_f+0x16c>
    13a0:	e0 e0       	ldi	r30, 0x00	; 0
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <__pack_f+0x166>
    13a6:	e0 e0       	ldi	r30, 0x00	; 0
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <__pack_f+0x16c>
    13ac:	ef ef       	ldi	r30, 0xFF	; 255
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	8e 2f       	mov	r24, r30
    13b8:	87 95       	ror	r24
    13ba:	88 27       	eor	r24, r24
    13bc:	87 95       	ror	r24
    13be:	94 2f       	mov	r25, r20
    13c0:	9f 77       	andi	r25, 0x7F	; 127
    13c2:	67 95       	ror	r22
    13c4:	66 27       	eor	r22, r22
    13c6:	67 95       	ror	r22
    13c8:	e6 95       	lsr	r30
    13ca:	e2 2e       	mov	r14, r18
    13cc:	a9 2f       	mov	r26, r25
    13ce:	a8 2b       	or	r26, r24
    13d0:	fe 2f       	mov	r31, r30
    13d2:	f6 2b       	or	r31, r22
    13d4:	62 2f       	mov	r22, r18
    13d6:	73 2f       	mov	r23, r19
    13d8:	8a 2f       	mov	r24, r26
    13da:	9f 2f       	mov	r25, r31
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	e6 e0       	ldi	r30, 0x06	; 6
    13e2:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__epilogue_restores__+0x18>

000013e6 <__unpack_f>:
    13e6:	dc 01       	movw	r26, r24
    13e8:	fb 01       	movw	r30, r22
    13ea:	2c 91       	ld	r18, X
    13ec:	11 96       	adiw	r26, 0x01	; 1
    13ee:	3c 91       	ld	r19, X
    13f0:	11 97       	sbiw	r26, 0x01	; 1
    13f2:	12 96       	adiw	r26, 0x02	; 2
    13f4:	8c 91       	ld	r24, X
    13f6:	12 97       	sbiw	r26, 0x02	; 2
    13f8:	48 2f       	mov	r20, r24
    13fa:	4f 77       	andi	r20, 0x7F	; 127
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	98 2f       	mov	r25, r24
    1400:	99 1f       	adc	r25, r25
    1402:	99 27       	eor	r25, r25
    1404:	99 1f       	adc	r25, r25
    1406:	13 96       	adiw	r26, 0x03	; 3
    1408:	6c 91       	ld	r22, X
    140a:	13 97       	sbiw	r26, 0x03	; 3
    140c:	86 2f       	mov	r24, r22
    140e:	88 0f       	add	r24, r24
    1410:	89 2b       	or	r24, r25
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	66 1f       	adc	r22, r22
    1416:	66 27       	eor	r22, r22
    1418:	66 1f       	adc	r22, r22
    141a:	61 83       	std	Z+1, r22	; 0x01
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	39 f5       	brne	.+78     	; 0x146e <__unpack_f+0x88>
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	41 05       	cpc	r20, r1
    1426:	51 05       	cpc	r21, r1
    1428:	11 f4       	brne	.+4      	; 0x142e <__unpack_f+0x48>
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	29 c0       	rjmp	.+82     	; 0x1480 <__unpack_f+0x9a>
    142e:	82 e8       	ldi	r24, 0x82	; 130
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	93 83       	std	Z+3, r25	; 0x03
    1434:	82 83       	std	Z+2, r24	; 0x02
    1436:	67 e0       	ldi	r22, 0x07	; 7
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	44 1f       	adc	r20, r20
    143e:	55 1f       	adc	r21, r21
    1440:	6a 95       	dec	r22
    1442:	d1 f7       	brne	.-12     	; 0x1438 <__unpack_f+0x52>
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	80 83       	st	Z, r24
    1448:	09 c0       	rjmp	.+18     	; 0x145c <__unpack_f+0x76>
    144a:	22 0f       	add	r18, r18
    144c:	33 1f       	adc	r19, r19
    144e:	44 1f       	adc	r20, r20
    1450:	55 1f       	adc	r21, r21
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	93 83       	std	Z+3, r25	; 0x03
    145a:	82 83       	std	Z+2, r24	; 0x02
    145c:	20 30       	cpi	r18, 0x00	; 0
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	38 07       	cpc	r19, r24
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	48 07       	cpc	r20, r24
    1466:	80 e4       	ldi	r24, 0x40	; 64
    1468:	58 07       	cpc	r21, r24
    146a:	78 f3       	brcs	.-34     	; 0x144a <__unpack_f+0x64>
    146c:	20 c0       	rjmp	.+64     	; 0x14ae <__unpack_f+0xc8>
    146e:	8f 3f       	cpi	r24, 0xFF	; 255
    1470:	91 05       	cpc	r25, r1
    1472:	79 f4       	brne	.+30     	; 0x1492 <__unpack_f+0xac>
    1474:	21 15       	cp	r18, r1
    1476:	31 05       	cpc	r19, r1
    1478:	41 05       	cpc	r20, r1
    147a:	51 05       	cpc	r21, r1
    147c:	19 f4       	brne	.+6      	; 0x1484 <__unpack_f+0x9e>
    147e:	84 e0       	ldi	r24, 0x04	; 4
    1480:	80 83       	st	Z, r24
    1482:	08 95       	ret
    1484:	44 ff       	sbrs	r20, 4
    1486:	03 c0       	rjmp	.+6      	; 0x148e <__unpack_f+0xa8>
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 83       	st	Z, r24
    148c:	10 c0       	rjmp	.+32     	; 0x14ae <__unpack_f+0xc8>
    148e:	10 82       	st	Z, r1
    1490:	0e c0       	rjmp	.+28     	; 0x14ae <__unpack_f+0xc8>
    1492:	8f 57       	subi	r24, 0x7F	; 127
    1494:	90 40       	sbci	r25, 0x00	; 0
    1496:	93 83       	std	Z+3, r25	; 0x03
    1498:	82 83       	std	Z+2, r24	; 0x02
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	80 83       	st	Z, r24
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	44 1f       	adc	r20, r20
    14a6:	55 1f       	adc	r21, r21
    14a8:	8a 95       	dec	r24
    14aa:	d1 f7       	brne	.-12     	; 0x14a0 <__unpack_f+0xba>
    14ac:	50 64       	ori	r21, 0x40	; 64
    14ae:	24 83       	std	Z+4, r18	; 0x04
    14b0:	35 83       	std	Z+5, r19	; 0x05
    14b2:	46 83       	std	Z+6, r20	; 0x06
    14b4:	57 83       	std	Z+7, r21	; 0x07
    14b6:	08 95       	ret

000014b8 <__fpcmp_parts_f>:
    14b8:	fc 01       	movw	r30, r24
    14ba:	db 01       	movw	r26, r22
    14bc:	90 81       	ld	r25, Z
    14be:	92 30       	cpi	r25, 0x02	; 2
    14c0:	08 f4       	brcc	.+2      	; 0x14c4 <__fpcmp_parts_f+0xc>
    14c2:	49 c0       	rjmp	.+146    	; 0x1556 <__fpcmp_parts_f+0x9e>
    14c4:	8c 91       	ld	r24, X
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	08 f4       	brcc	.+2      	; 0x14cc <__fpcmp_parts_f+0x14>
    14ca:	45 c0       	rjmp	.+138    	; 0x1556 <__fpcmp_parts_f+0x9e>
    14cc:	94 30       	cpi	r25, 0x04	; 4
    14ce:	51 f4       	brne	.+20     	; 0x14e4 <__fpcmp_parts_f+0x2c>
    14d0:	61 81       	ldd	r22, Z+1	; 0x01
    14d2:	84 30       	cpi	r24, 0x04	; 4
    14d4:	b1 f5       	brne	.+108    	; 0x1542 <__fpcmp_parts_f+0x8a>
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	2c 91       	ld	r18, X
    14da:	11 97       	sbiw	r26, 0x01	; 1
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	26 1b       	sub	r18, r22
    14e0:	31 09       	sbc	r19, r1
    14e2:	41 c0       	rjmp	.+130    	; 0x1566 <__fpcmp_parts_f+0xae>
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	21 f0       	breq	.+8      	; 0x14f0 <__fpcmp_parts_f+0x38>
    14e8:	92 30       	cpi	r25, 0x02	; 2
    14ea:	41 f4       	brne	.+16     	; 0x14fc <__fpcmp_parts_f+0x44>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	b1 f1       	breq	.+108    	; 0x155c <__fpcmp_parts_f+0xa4>
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	8c 91       	ld	r24, X
    14f4:	11 97       	sbiw	r26, 0x01	; 1
    14f6:	88 23       	and	r24, r24
    14f8:	a1 f1       	breq	.+104    	; 0x1562 <__fpcmp_parts_f+0xaa>
    14fa:	2d c0       	rjmp	.+90     	; 0x1556 <__fpcmp_parts_f+0x9e>
    14fc:	61 81       	ldd	r22, Z+1	; 0x01
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	01 f1       	breq	.+64     	; 0x1542 <__fpcmp_parts_f+0x8a>
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	8c 91       	ld	r24, X
    1506:	11 97       	sbiw	r26, 0x01	; 1
    1508:	68 17       	cp	r22, r24
    150a:	d9 f4       	brne	.+54     	; 0x1542 <__fpcmp_parts_f+0x8a>
    150c:	22 81       	ldd	r18, Z+2	; 0x02
    150e:	33 81       	ldd	r19, Z+3	; 0x03
    1510:	12 96       	adiw	r26, 0x02	; 2
    1512:	8d 91       	ld	r24, X+
    1514:	9c 91       	ld	r25, X
    1516:	13 97       	sbiw	r26, 0x03	; 3
    1518:	82 17       	cp	r24, r18
    151a:	93 07       	cpc	r25, r19
    151c:	94 f0       	brlt	.+36     	; 0x1542 <__fpcmp_parts_f+0x8a>
    151e:	28 17       	cp	r18, r24
    1520:	39 07       	cpc	r19, r25
    1522:	bc f0       	brlt	.+46     	; 0x1552 <__fpcmp_parts_f+0x9a>
    1524:	24 81       	ldd	r18, Z+4	; 0x04
    1526:	35 81       	ldd	r19, Z+5	; 0x05
    1528:	46 81       	ldd	r20, Z+6	; 0x06
    152a:	57 81       	ldd	r21, Z+7	; 0x07
    152c:	14 96       	adiw	r26, 0x04	; 4
    152e:	8d 91       	ld	r24, X+
    1530:	9d 91       	ld	r25, X+
    1532:	0d 90       	ld	r0, X+
    1534:	bc 91       	ld	r27, X
    1536:	a0 2d       	mov	r26, r0
    1538:	82 17       	cp	r24, r18
    153a:	93 07       	cpc	r25, r19
    153c:	a4 07       	cpc	r26, r20
    153e:	b5 07       	cpc	r27, r21
    1540:	18 f4       	brcc	.+6      	; 0x1548 <__fpcmp_parts_f+0x90>
    1542:	66 23       	and	r22, r22
    1544:	41 f0       	breq	.+16     	; 0x1556 <__fpcmp_parts_f+0x9e>
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <__fpcmp_parts_f+0xaa>
    1548:	28 17       	cp	r18, r24
    154a:	39 07       	cpc	r19, r25
    154c:	4a 07       	cpc	r20, r26
    154e:	5b 07       	cpc	r21, r27
    1550:	28 f4       	brcc	.+10     	; 0x155c <__fpcmp_parts_f+0xa4>
    1552:	66 23       	and	r22, r22
    1554:	31 f0       	breq	.+12     	; 0x1562 <__fpcmp_parts_f+0xaa>
    1556:	21 e0       	ldi	r18, 0x01	; 1
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <__fpcmp_parts_f+0xae>
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <__fpcmp_parts_f+0xae>
    1562:	2f ef       	ldi	r18, 0xFF	; 255
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	c9 01       	movw	r24, r18
    1568:	08 95       	ret

0000156a <__prologue_saves__>:
    156a:	2f 92       	push	r2
    156c:	3f 92       	push	r3
    156e:	4f 92       	push	r4
    1570:	5f 92       	push	r5
    1572:	6f 92       	push	r6
    1574:	7f 92       	push	r7
    1576:	8f 92       	push	r8
    1578:	9f 92       	push	r9
    157a:	af 92       	push	r10
    157c:	bf 92       	push	r11
    157e:	cf 92       	push	r12
    1580:	df 92       	push	r13
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	ca 1b       	sub	r28, r26
    1594:	db 0b       	sbc	r29, r27
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	09 94       	ijmp

000015a2 <__epilogue_restores__>:
    15a2:	2a 88       	ldd	r2, Y+18	; 0x12
    15a4:	39 88       	ldd	r3, Y+17	; 0x11
    15a6:	48 88       	ldd	r4, Y+16	; 0x10
    15a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    15aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    15ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    15ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    15b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    15b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    15b4:	b9 84       	ldd	r11, Y+9	; 0x09
    15b6:	c8 84       	ldd	r12, Y+8	; 0x08
    15b8:	df 80       	ldd	r13, Y+7	; 0x07
    15ba:	ee 80       	ldd	r14, Y+6	; 0x06
    15bc:	fd 80       	ldd	r15, Y+5	; 0x05
    15be:	0c 81       	ldd	r16, Y+4	; 0x04
    15c0:	1b 81       	ldd	r17, Y+3	; 0x03
    15c2:	aa 81       	ldd	r26, Y+2	; 0x02
    15c4:	b9 81       	ldd	r27, Y+1	; 0x01
    15c6:	ce 0f       	add	r28, r30
    15c8:	d1 1d       	adc	r29, r1
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	ed 01       	movw	r28, r26
    15d6:	08 95       	ret

000015d8 <atoi>:
    15d8:	fc 01       	movw	r30, r24
    15da:	88 27       	eor	r24, r24
    15dc:	99 27       	eor	r25, r25
    15de:	e8 94       	clt
    15e0:	21 91       	ld	r18, Z+
    15e2:	20 32       	cpi	r18, 0x20	; 32
    15e4:	e9 f3       	breq	.-6      	; 0x15e0 <atoi+0x8>
    15e6:	29 30       	cpi	r18, 0x09	; 9
    15e8:	10 f0       	brcs	.+4      	; 0x15ee <atoi+0x16>
    15ea:	2e 30       	cpi	r18, 0x0E	; 14
    15ec:	c8 f3       	brcs	.-14     	; 0x15e0 <atoi+0x8>
    15ee:	2b 32       	cpi	r18, 0x2B	; 43
    15f0:	41 f0       	breq	.+16     	; 0x1602 <atoi+0x2a>
    15f2:	2d 32       	cpi	r18, 0x2D	; 45
    15f4:	39 f4       	brne	.+14     	; 0x1604 <atoi+0x2c>
    15f6:	68 94       	set
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <atoi+0x2a>
    15fa:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__mulhi_const_10>
    15fe:	82 0f       	add	r24, r18
    1600:	91 1d       	adc	r25, r1
    1602:	21 91       	ld	r18, Z+
    1604:	20 53       	subi	r18, 0x30	; 48
    1606:	2a 30       	cpi	r18, 0x0A	; 10
    1608:	c0 f3       	brcs	.-16     	; 0x15fa <atoi+0x22>
    160a:	1e f4       	brtc	.+6      	; 0x1612 <atoi+0x3a>
    160c:	90 95       	com	r25
    160e:	81 95       	neg	r24
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	08 95       	ret

00001614 <strcpy>:
    1614:	fb 01       	movw	r30, r22
    1616:	dc 01       	movw	r26, r24
    1618:	01 90       	ld	r0, Z+
    161a:	0d 92       	st	X+, r0
    161c:	00 20       	and	r0, r0
    161e:	e1 f7       	brne	.-8      	; 0x1618 <strcpy+0x4>
    1620:	08 95       	ret

00001622 <strlen>:
    1622:	fc 01       	movw	r30, r24
    1624:	01 90       	ld	r0, Z+
    1626:	00 20       	and	r0, r0
    1628:	e9 f7       	brne	.-6      	; 0x1624 <strlen+0x2>
    162a:	80 95       	com	r24
    162c:	90 95       	com	r25
    162e:	8e 0f       	add	r24, r30
    1630:	9f 1f       	adc	r25, r31
    1632:	08 95       	ret

00001634 <__mulhi_const_10>:
    1634:	7a e0       	ldi	r23, 0x0A	; 10
    1636:	97 9f       	mul	r25, r23
    1638:	90 2d       	mov	r25, r0
    163a:	87 9f       	mul	r24, r23
    163c:	80 2d       	mov	r24, r0
    163e:	91 0d       	add	r25, r1
    1640:	11 24       	eor	r1, r1
    1642:	08 95       	ret

00001644 <vsprintf>:
    1644:	ae e0       	ldi	r26, 0x0E	; 14
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e8 e2       	ldi	r30, 0x28	; 40
    164a:	fb e0       	ldi	r31, 0x0B	; 11
    164c:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__prologue_saves__+0x1c>
    1650:	8c 01       	movw	r16, r24
    1652:	86 e0       	ldi	r24, 0x06	; 6
    1654:	8c 83       	std	Y+4, r24	; 0x04
    1656:	1a 83       	std	Y+2, r17	; 0x02
    1658:	09 83       	std	Y+1, r16	; 0x01
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	9f e7       	ldi	r25, 0x7F	; 127
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	ce 01       	movw	r24, r28
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	0e 94 3e 0b 	call	0x167c	; 0x167c <vfprintf>
    166a:	ef 81       	ldd	r30, Y+7	; 0x07
    166c:	f8 85       	ldd	r31, Y+8	; 0x08
    166e:	e0 0f       	add	r30, r16
    1670:	f1 1f       	adc	r31, r17
    1672:	10 82       	st	Z, r1
    1674:	2e 96       	adiw	r28, 0x0e	; 14
    1676:	e4 e0       	ldi	r30, 0x04	; 4
    1678:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__epilogue_restores__+0x1c>

0000167c <vfprintf>:
    167c:	ac e0       	ldi	r26, 0x0C	; 12
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e4 e4       	ldi	r30, 0x44	; 68
    1682:	fb e0       	ldi	r31, 0x0B	; 11
    1684:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__>
    1688:	6c 01       	movw	r12, r24
    168a:	1b 01       	movw	r2, r22
    168c:	8a 01       	movw	r16, r20
    168e:	fc 01       	movw	r30, r24
    1690:	17 82       	std	Z+7, r1	; 0x07
    1692:	16 82       	std	Z+6, r1	; 0x06
    1694:	83 81       	ldd	r24, Z+3	; 0x03
    1696:	81 ff       	sbrs	r24, 1
    1698:	d1 c1       	rjmp	.+930    	; 0x1a3c <vfprintf+0x3c0>
    169a:	2e 01       	movw	r4, r28
    169c:	08 94       	sec
    169e:	41 1c       	adc	r4, r1
    16a0:	51 1c       	adc	r5, r1
    16a2:	f6 01       	movw	r30, r12
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	f1 01       	movw	r30, r2
    16a8:	93 fd       	sbrc	r25, 3
    16aa:	85 91       	lpm	r24, Z+
    16ac:	93 ff       	sbrs	r25, 3
    16ae:	81 91       	ld	r24, Z+
    16b0:	1f 01       	movw	r2, r30
    16b2:	88 23       	and	r24, r24
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <vfprintf+0x3c>
    16b6:	be c1       	rjmp	.+892    	; 0x1a34 <vfprintf+0x3b8>
    16b8:	85 32       	cpi	r24, 0x25	; 37
    16ba:	39 f4       	brne	.+14     	; 0x16ca <vfprintf+0x4e>
    16bc:	93 fd       	sbrc	r25, 3
    16be:	85 91       	lpm	r24, Z+
    16c0:	93 ff       	sbrs	r25, 3
    16c2:	81 91       	ld	r24, Z+
    16c4:	1f 01       	movw	r2, r30
    16c6:	85 32       	cpi	r24, 0x25	; 37
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <vfprintf+0x58>
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b6 01       	movw	r22, r12
    16ce:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    16d2:	e7 cf       	rjmp	.-50     	; 0x16a2 <vfprintf+0x26>
    16d4:	ee 24       	eor	r14, r14
    16d6:	ff 24       	eor	r15, r15
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	20 32       	cpi	r18, 0x20	; 32
    16dc:	b0 f4       	brcc	.+44     	; 0x170a <vfprintf+0x8e>
    16de:	8b 32       	cpi	r24, 0x2B	; 43
    16e0:	69 f0       	breq	.+26     	; 0x16fc <vfprintf+0x80>
    16e2:	8c 32       	cpi	r24, 0x2C	; 44
    16e4:	28 f4       	brcc	.+10     	; 0x16f0 <vfprintf+0x74>
    16e6:	80 32       	cpi	r24, 0x20	; 32
    16e8:	51 f0       	breq	.+20     	; 0x16fe <vfprintf+0x82>
    16ea:	83 32       	cpi	r24, 0x23	; 35
    16ec:	71 f4       	brne	.+28     	; 0x170a <vfprintf+0x8e>
    16ee:	0b c0       	rjmp	.+22     	; 0x1706 <vfprintf+0x8a>
    16f0:	8d 32       	cpi	r24, 0x2D	; 45
    16f2:	39 f0       	breq	.+14     	; 0x1702 <vfprintf+0x86>
    16f4:	80 33       	cpi	r24, 0x30	; 48
    16f6:	49 f4       	brne	.+18     	; 0x170a <vfprintf+0x8e>
    16f8:	21 60       	ori	r18, 0x01	; 1
    16fa:	2c c0       	rjmp	.+88     	; 0x1754 <vfprintf+0xd8>
    16fc:	22 60       	ori	r18, 0x02	; 2
    16fe:	24 60       	ori	r18, 0x04	; 4
    1700:	29 c0       	rjmp	.+82     	; 0x1754 <vfprintf+0xd8>
    1702:	28 60       	ori	r18, 0x08	; 8
    1704:	27 c0       	rjmp	.+78     	; 0x1754 <vfprintf+0xd8>
    1706:	20 61       	ori	r18, 0x10	; 16
    1708:	25 c0       	rjmp	.+74     	; 0x1754 <vfprintf+0xd8>
    170a:	27 fd       	sbrc	r18, 7
    170c:	2c c0       	rjmp	.+88     	; 0x1766 <vfprintf+0xea>
    170e:	38 2f       	mov	r19, r24
    1710:	30 53       	subi	r19, 0x30	; 48
    1712:	3a 30       	cpi	r19, 0x0A	; 10
    1714:	98 f4       	brcc	.+38     	; 0x173c <vfprintf+0xc0>
    1716:	26 ff       	sbrs	r18, 6
    1718:	08 c0       	rjmp	.+16     	; 0x172a <vfprintf+0xae>
    171a:	8e 2d       	mov	r24, r14
    171c:	88 0f       	add	r24, r24
    171e:	e8 2e       	mov	r14, r24
    1720:	ee 0c       	add	r14, r14
    1722:	ee 0c       	add	r14, r14
    1724:	e8 0e       	add	r14, r24
    1726:	e3 0e       	add	r14, r19
    1728:	15 c0       	rjmp	.+42     	; 0x1754 <vfprintf+0xd8>
    172a:	8f 2d       	mov	r24, r15
    172c:	88 0f       	add	r24, r24
    172e:	f8 2e       	mov	r15, r24
    1730:	ff 0c       	add	r15, r15
    1732:	ff 0c       	add	r15, r15
    1734:	f8 0e       	add	r15, r24
    1736:	f3 0e       	add	r15, r19
    1738:	20 62       	ori	r18, 0x20	; 32
    173a:	0c c0       	rjmp	.+24     	; 0x1754 <vfprintf+0xd8>
    173c:	8e 32       	cpi	r24, 0x2E	; 46
    173e:	21 f4       	brne	.+8      	; 0x1748 <vfprintf+0xcc>
    1740:	26 fd       	sbrc	r18, 6
    1742:	78 c1       	rjmp	.+752    	; 0x1a34 <vfprintf+0x3b8>
    1744:	20 64       	ori	r18, 0x40	; 64
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <vfprintf+0xd8>
    1748:	8c 36       	cpi	r24, 0x6C	; 108
    174a:	11 f4       	brne	.+4      	; 0x1750 <vfprintf+0xd4>
    174c:	20 68       	ori	r18, 0x80	; 128
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0xd8>
    1750:	88 36       	cpi	r24, 0x68	; 104
    1752:	49 f4       	brne	.+18     	; 0x1766 <vfprintf+0xea>
    1754:	f1 01       	movw	r30, r2
    1756:	93 fd       	sbrc	r25, 3
    1758:	85 91       	lpm	r24, Z+
    175a:	93 ff       	sbrs	r25, 3
    175c:	81 91       	ld	r24, Z+
    175e:	1f 01       	movw	r2, r30
    1760:	88 23       	and	r24, r24
    1762:	09 f0       	breq	.+2      	; 0x1766 <vfprintf+0xea>
    1764:	ba cf       	rjmp	.-140    	; 0x16da <vfprintf+0x5e>
    1766:	98 2f       	mov	r25, r24
    1768:	95 54       	subi	r25, 0x45	; 69
    176a:	93 30       	cpi	r25, 0x03	; 3
    176c:	18 f0       	brcs	.+6      	; 0x1774 <vfprintf+0xf8>
    176e:	90 52       	subi	r25, 0x20	; 32
    1770:	93 30       	cpi	r25, 0x03	; 3
    1772:	28 f4       	brcc	.+10     	; 0x177e <vfprintf+0x102>
    1774:	0c 5f       	subi	r16, 0xFC	; 252
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	ff e3       	ldi	r31, 0x3F	; 63
    177a:	f9 83       	std	Y+1, r31	; 0x01
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <vfprintf+0x11c>
    177e:	83 36       	cpi	r24, 0x63	; 99
    1780:	31 f0       	breq	.+12     	; 0x178e <vfprintf+0x112>
    1782:	83 37       	cpi	r24, 0x73	; 115
    1784:	71 f0       	breq	.+28     	; 0x17a2 <vfprintf+0x126>
    1786:	83 35       	cpi	r24, 0x53	; 83
    1788:	09 f0       	breq	.+2      	; 0x178c <vfprintf+0x110>
    178a:	60 c0       	rjmp	.+192    	; 0x184c <vfprintf+0x1d0>
    178c:	22 c0       	rjmp	.+68     	; 0x17d2 <vfprintf+0x156>
    178e:	f8 01       	movw	r30, r16
    1790:	80 81       	ld	r24, Z
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	0e 5f       	subi	r16, 0xFE	; 254
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	42 01       	movw	r8, r4
    179a:	71 e0       	ldi	r23, 0x01	; 1
    179c:	a7 2e       	mov	r10, r23
    179e:	b1 2c       	mov	r11, r1
    17a0:	16 c0       	rjmp	.+44     	; 0x17ce <vfprintf+0x152>
    17a2:	62 e0       	ldi	r22, 0x02	; 2
    17a4:	66 2e       	mov	r6, r22
    17a6:	71 2c       	mov	r7, r1
    17a8:	60 0e       	add	r6, r16
    17aa:	71 1e       	adc	r7, r17
    17ac:	f8 01       	movw	r30, r16
    17ae:	80 80       	ld	r8, Z
    17b0:	91 80       	ldd	r9, Z+1	; 0x01
    17b2:	26 ff       	sbrs	r18, 6
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <vfprintf+0x140>
    17b6:	6e 2d       	mov	r22, r14
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <vfprintf+0x144>
    17bc:	6f ef       	ldi	r22, 0xFF	; 255
    17be:	7f ef       	ldi	r23, 0xFF	; 255
    17c0:	c4 01       	movw	r24, r8
    17c2:	2c 87       	std	Y+12, r18	; 0x0c
    17c4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <strnlen>
    17c8:	5c 01       	movw	r10, r24
    17ca:	83 01       	movw	r16, r6
    17cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ce:	2f 77       	andi	r18, 0x7F	; 127
    17d0:	17 c0       	rjmp	.+46     	; 0x1800 <vfprintf+0x184>
    17d2:	52 e0       	ldi	r21, 0x02	; 2
    17d4:	65 2e       	mov	r6, r21
    17d6:	71 2c       	mov	r7, r1
    17d8:	60 0e       	add	r6, r16
    17da:	71 1e       	adc	r7, r17
    17dc:	f8 01       	movw	r30, r16
    17de:	80 80       	ld	r8, Z
    17e0:	91 80       	ldd	r9, Z+1	; 0x01
    17e2:	26 ff       	sbrs	r18, 6
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <vfprintf+0x170>
    17e6:	6e 2d       	mov	r22, r14
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x174>
    17ec:	6f ef       	ldi	r22, 0xFF	; 255
    17ee:	7f ef       	ldi	r23, 0xFF	; 255
    17f0:	c4 01       	movw	r24, r8
    17f2:	2c 87       	std	Y+12, r18	; 0x0c
    17f4:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <strnlen_P>
    17f8:	5c 01       	movw	r10, r24
    17fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    17fc:	20 68       	ori	r18, 0x80	; 128
    17fe:	83 01       	movw	r16, r6
    1800:	23 fd       	sbrc	r18, 3
    1802:	20 c0       	rjmp	.+64     	; 0x1844 <vfprintf+0x1c8>
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <vfprintf+0x19a>
    1806:	80 e2       	ldi	r24, 0x20	; 32
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	b6 01       	movw	r22, r12
    180c:	2c 87       	std	Y+12, r18	; 0x0c
    180e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1812:	fa 94       	dec	r15
    1814:	2c 85       	ldd	r18, Y+12	; 0x0c
    1816:	8f 2d       	mov	r24, r15
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a8 16       	cp	r10, r24
    181c:	b9 06       	cpc	r11, r25
    181e:	98 f3       	brcs	.-26     	; 0x1806 <vfprintf+0x18a>
    1820:	11 c0       	rjmp	.+34     	; 0x1844 <vfprintf+0x1c8>
    1822:	f4 01       	movw	r30, r8
    1824:	27 fd       	sbrc	r18, 7
    1826:	85 91       	lpm	r24, Z+
    1828:	27 ff       	sbrs	r18, 7
    182a:	81 91       	ld	r24, Z+
    182c:	4f 01       	movw	r8, r30
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	b6 01       	movw	r22, r12
    1832:	2c 87       	std	Y+12, r18	; 0x0c
    1834:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1838:	2c 85       	ldd	r18, Y+12	; 0x0c
    183a:	f1 10       	cpse	r15, r1
    183c:	fa 94       	dec	r15
    183e:	08 94       	sec
    1840:	a1 08       	sbc	r10, r1
    1842:	b1 08       	sbc	r11, r1
    1844:	a1 14       	cp	r10, r1
    1846:	b1 04       	cpc	r11, r1
    1848:	61 f7       	brne	.-40     	; 0x1822 <vfprintf+0x1a6>
    184a:	f1 c0       	rjmp	.+482    	; 0x1a2e <vfprintf+0x3b2>
    184c:	84 36       	cpi	r24, 0x64	; 100
    184e:	11 f0       	breq	.+4      	; 0x1854 <vfprintf+0x1d8>
    1850:	89 36       	cpi	r24, 0x69	; 105
    1852:	49 f5       	brne	.+82     	; 0x18a6 <vfprintf+0x22a>
    1854:	27 ff       	sbrs	r18, 7
    1856:	08 c0       	rjmp	.+16     	; 0x1868 <vfprintf+0x1ec>
    1858:	f8 01       	movw	r30, r16
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	0c 5f       	subi	r16, 0xFC	; 252
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	09 c0       	rjmp	.+18     	; 0x187a <vfprintf+0x1fe>
    1868:	f8 01       	movw	r30, r16
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	88 27       	eor	r24, r24
    1870:	77 fd       	sbrc	r23, 7
    1872:	80 95       	com	r24
    1874:	98 2f       	mov	r25, r24
    1876:	0e 5f       	subi	r16, 0xFE	; 254
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	4f e6       	ldi	r20, 0x6F	; 111
    187c:	b4 2e       	mov	r11, r20
    187e:	b2 22       	and	r11, r18
    1880:	97 ff       	sbrs	r25, 7
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <vfprintf+0x21a>
    1884:	90 95       	com	r25
    1886:	80 95       	com	r24
    1888:	70 95       	com	r23
    188a:	61 95       	neg	r22
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	f0 e8       	ldi	r31, 0x80	; 128
    1894:	bf 2a       	or	r11, r31
    1896:	a2 01       	movw	r20, r4
    1898:	2a e0       	ldi	r18, 0x0A	; 10
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__ultoa_invert>
    18a0:	78 2e       	mov	r7, r24
    18a2:	74 18       	sub	r7, r4
    18a4:	45 c0       	rjmp	.+138    	; 0x1930 <vfprintf+0x2b4>
    18a6:	85 37       	cpi	r24, 0x75	; 117
    18a8:	31 f4       	brne	.+12     	; 0x18b6 <vfprintf+0x23a>
    18aa:	3f ee       	ldi	r19, 0xEF	; 239
    18ac:	b3 2e       	mov	r11, r19
    18ae:	b2 22       	and	r11, r18
    18b0:	2a e0       	ldi	r18, 0x0A	; 10
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	25 c0       	rjmp	.+74     	; 0x1900 <vfprintf+0x284>
    18b6:	99 ef       	ldi	r25, 0xF9	; 249
    18b8:	b9 2e       	mov	r11, r25
    18ba:	b2 22       	and	r11, r18
    18bc:	8f 36       	cpi	r24, 0x6F	; 111
    18be:	c1 f0       	breq	.+48     	; 0x18f0 <vfprintf+0x274>
    18c0:	80 37       	cpi	r24, 0x70	; 112
    18c2:	20 f4       	brcc	.+8      	; 0x18cc <vfprintf+0x250>
    18c4:	88 35       	cpi	r24, 0x58	; 88
    18c6:	09 f0       	breq	.+2      	; 0x18ca <vfprintf+0x24e>
    18c8:	b5 c0       	rjmp	.+362    	; 0x1a34 <vfprintf+0x3b8>
    18ca:	0d c0       	rjmp	.+26     	; 0x18e6 <vfprintf+0x26a>
    18cc:	80 37       	cpi	r24, 0x70	; 112
    18ce:	21 f0       	breq	.+8      	; 0x18d8 <vfprintf+0x25c>
    18d0:	88 37       	cpi	r24, 0x78	; 120
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <vfprintf+0x25a>
    18d4:	af c0       	rjmp	.+350    	; 0x1a34 <vfprintf+0x3b8>
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0x260>
    18d8:	20 e1       	ldi	r18, 0x10	; 16
    18da:	b2 2a       	or	r11, r18
    18dc:	b4 fe       	sbrs	r11, 4
    18de:	0b c0       	rjmp	.+22     	; 0x18f6 <vfprintf+0x27a>
    18e0:	84 e0       	ldi	r24, 0x04	; 4
    18e2:	b8 2a       	or	r11, r24
    18e4:	08 c0       	rjmp	.+16     	; 0x18f6 <vfprintf+0x27a>
    18e6:	b4 fe       	sbrs	r11, 4
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <vfprintf+0x280>
    18ea:	e6 e0       	ldi	r30, 0x06	; 6
    18ec:	be 2a       	or	r11, r30
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <vfprintf+0x280>
    18f0:	28 e0       	ldi	r18, 0x08	; 8
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	05 c0       	rjmp	.+10     	; 0x1900 <vfprintf+0x284>
    18f6:	20 e1       	ldi	r18, 0x10	; 16
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <vfprintf+0x284>
    18fc:	20 e1       	ldi	r18, 0x10	; 16
    18fe:	32 e0       	ldi	r19, 0x02	; 2
    1900:	b7 fe       	sbrs	r11, 7
    1902:	08 c0       	rjmp	.+16     	; 0x1914 <vfprintf+0x298>
    1904:	f8 01       	movw	r30, r16
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	0c 5f       	subi	r16, 0xFC	; 252
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <vfprintf+0x2a6>
    1914:	f8 01       	movw	r30, r16
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 5f       	subi	r16, 0xFE	; 254
    1920:	1f 4f       	sbci	r17, 0xFF	; 255
    1922:	a2 01       	movw	r20, r4
    1924:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__ultoa_invert>
    1928:	78 2e       	mov	r7, r24
    192a:	74 18       	sub	r7, r4
    192c:	ff e7       	ldi	r31, 0x7F	; 127
    192e:	bf 22       	and	r11, r31
    1930:	b6 fe       	sbrs	r11, 6
    1932:	0b c0       	rjmp	.+22     	; 0x194a <vfprintf+0x2ce>
    1934:	2e ef       	ldi	r18, 0xFE	; 254
    1936:	b2 22       	and	r11, r18
    1938:	7e 14       	cp	r7, r14
    193a:	38 f4       	brcc	.+14     	; 0x194a <vfprintf+0x2ce>
    193c:	b4 fe       	sbrs	r11, 4
    193e:	07 c0       	rjmp	.+14     	; 0x194e <vfprintf+0x2d2>
    1940:	b2 fc       	sbrc	r11, 2
    1942:	05 c0       	rjmp	.+10     	; 0x194e <vfprintf+0x2d2>
    1944:	8f ee       	ldi	r24, 0xEF	; 239
    1946:	b8 22       	and	r11, r24
    1948:	02 c0       	rjmp	.+4      	; 0x194e <vfprintf+0x2d2>
    194a:	a7 2c       	mov	r10, r7
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <vfprintf+0x2d4>
    194e:	ae 2c       	mov	r10, r14
    1950:	8b 2d       	mov	r24, r11
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	b4 fe       	sbrs	r11, 4
    1956:	0d c0       	rjmp	.+26     	; 0x1972 <vfprintf+0x2f6>
    1958:	fe 01       	movw	r30, r28
    195a:	e7 0d       	add	r30, r7
    195c:	f1 1d       	adc	r31, r1
    195e:	20 81       	ld	r18, Z
    1960:	20 33       	cpi	r18, 0x30	; 48
    1962:	19 f4       	brne	.+6      	; 0x196a <vfprintf+0x2ee>
    1964:	e9 ee       	ldi	r30, 0xE9	; 233
    1966:	be 22       	and	r11, r30
    1968:	09 c0       	rjmp	.+18     	; 0x197c <vfprintf+0x300>
    196a:	a3 94       	inc	r10
    196c:	b2 fe       	sbrs	r11, 2
    196e:	06 c0       	rjmp	.+12     	; 0x197c <vfprintf+0x300>
    1970:	04 c0       	rjmp	.+8      	; 0x197a <vfprintf+0x2fe>
    1972:	86 78       	andi	r24, 0x86	; 134
    1974:	90 70       	andi	r25, 0x00	; 0
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	09 f0       	breq	.+2      	; 0x197c <vfprintf+0x300>
    197a:	a3 94       	inc	r10
    197c:	8b 2c       	mov	r8, r11
    197e:	99 24       	eor	r9, r9
    1980:	b3 fc       	sbrc	r11, 3
    1982:	14 c0       	rjmp	.+40     	; 0x19ac <vfprintf+0x330>
    1984:	b0 fe       	sbrs	r11, 0
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <vfprintf+0x32a>
    1988:	af 14       	cp	r10, r15
    198a:	28 f4       	brcc	.+10     	; 0x1996 <vfprintf+0x31a>
    198c:	e7 2c       	mov	r14, r7
    198e:	ef 0c       	add	r14, r15
    1990:	ea 18       	sub	r14, r10
    1992:	af 2c       	mov	r10, r15
    1994:	08 c0       	rjmp	.+16     	; 0x19a6 <vfprintf+0x32a>
    1996:	e7 2c       	mov	r14, r7
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <vfprintf+0x32a>
    199a:	80 e2       	ldi	r24, 0x20	; 32
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	b6 01       	movw	r22, r12
    19a0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    19a4:	a3 94       	inc	r10
    19a6:	af 14       	cp	r10, r15
    19a8:	c0 f3       	brcs	.-16     	; 0x199a <vfprintf+0x31e>
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <vfprintf+0x338>
    19ac:	af 14       	cp	r10, r15
    19ae:	10 f4       	brcc	.+4      	; 0x19b4 <vfprintf+0x338>
    19b0:	fa 18       	sub	r15, r10
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <vfprintf+0x33a>
    19b4:	ff 24       	eor	r15, r15
    19b6:	84 fe       	sbrs	r8, 4
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <vfprintf+0x35c>
    19ba:	80 e3       	ldi	r24, 0x30	; 48
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	b6 01       	movw	r22, r12
    19c0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    19c4:	82 fe       	sbrs	r8, 2
    19c6:	1f c0       	rjmp	.+62     	; 0x1a06 <vfprintf+0x38a>
    19c8:	81 fe       	sbrs	r8, 1
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <vfprintf+0x356>
    19cc:	88 e5       	ldi	r24, 0x58	; 88
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	10 c0       	rjmp	.+32     	; 0x19f2 <vfprintf+0x376>
    19d2:	88 e7       	ldi	r24, 0x78	; 120
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0d c0       	rjmp	.+26     	; 0x19f2 <vfprintf+0x376>
    19d8:	c4 01       	movw	r24, r8
    19da:	86 78       	andi	r24, 0x86	; 134
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	91 f0       	breq	.+36     	; 0x1a06 <vfprintf+0x38a>
    19e2:	81 fc       	sbrc	r8, 1
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <vfprintf+0x36e>
    19e6:	80 e2       	ldi	r24, 0x20	; 32
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <vfprintf+0x370>
    19ea:	8b e2       	ldi	r24, 0x2B	; 43
    19ec:	b7 fc       	sbrc	r11, 7
    19ee:	8d e2       	ldi	r24, 0x2D	; 45
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	b6 01       	movw	r22, r12
    19f4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    19f8:	06 c0       	rjmp	.+12     	; 0x1a06 <vfprintf+0x38a>
    19fa:	80 e3       	ldi	r24, 0x30	; 48
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	b6 01       	movw	r22, r12
    1a00:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1a04:	ea 94       	dec	r14
    1a06:	7e 14       	cp	r7, r14
    1a08:	c0 f3       	brcs	.-16     	; 0x19fa <vfprintf+0x37e>
    1a0a:	7a 94       	dec	r7
    1a0c:	f2 01       	movw	r30, r4
    1a0e:	e7 0d       	add	r30, r7
    1a10:	f1 1d       	adc	r31, r1
    1a12:	80 81       	ld	r24, Z
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	b6 01       	movw	r22, r12
    1a18:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1a1c:	77 20       	and	r7, r7
    1a1e:	a9 f7       	brne	.-22     	; 0x1a0a <vfprintf+0x38e>
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <vfprintf+0x3b2>
    1a22:	80 e2       	ldi	r24, 0x20	; 32
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	b6 01       	movw	r22, r12
    1a28:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1a2c:	fa 94       	dec	r15
    1a2e:	ff 20       	and	r15, r15
    1a30:	c1 f7       	brne	.-16     	; 0x1a22 <vfprintf+0x3a6>
    1a32:	37 ce       	rjmp	.-914    	; 0x16a2 <vfprintf+0x26>
    1a34:	f6 01       	movw	r30, r12
    1a36:	26 81       	ldd	r18, Z+6	; 0x06
    1a38:	37 81       	ldd	r19, Z+7	; 0x07
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <vfprintf+0x3c4>
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	c9 01       	movw	r24, r18
    1a42:	2c 96       	adiw	r28, 0x0c	; 12
    1a44:	e2 e1       	ldi	r30, 0x12	; 18
    1a46:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__>

00001a4a <strnlen_P>:
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	05 90       	lpm	r0, Z+
    1a4e:	61 50       	subi	r22, 0x01	; 1
    1a50:	70 40       	sbci	r23, 0x00	; 0
    1a52:	01 10       	cpse	r0, r1
    1a54:	d8 f7       	brcc	.-10     	; 0x1a4c <strnlen_P+0x2>
    1a56:	80 95       	com	r24
    1a58:	90 95       	com	r25
    1a5a:	8e 0f       	add	r24, r30
    1a5c:	9f 1f       	adc	r25, r31
    1a5e:	08 95       	ret

00001a60 <strnlen>:
    1a60:	fc 01       	movw	r30, r24
    1a62:	61 50       	subi	r22, 0x01	; 1
    1a64:	70 40       	sbci	r23, 0x00	; 0
    1a66:	01 90       	ld	r0, Z+
    1a68:	01 10       	cpse	r0, r1
    1a6a:	d8 f7       	brcc	.-10     	; 0x1a62 <strnlen+0x2>
    1a6c:	80 95       	com	r24
    1a6e:	90 95       	com	r25
    1a70:	8e 0f       	add	r24, r30
    1a72:	9f 1f       	adc	r25, r31
    1a74:	08 95       	ret

00001a76 <fputc>:
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	8c 01       	movw	r16, r24
    1a80:	eb 01       	movw	r28, r22
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	81 ff       	sbrs	r24, 1
    1a86:	1b c0       	rjmp	.+54     	; 0x1abe <fputc+0x48>
    1a88:	82 ff       	sbrs	r24, 2
    1a8a:	0d c0       	rjmp	.+26     	; 0x1aa6 <fputc+0x30>
    1a8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	9d 81       	ldd	r25, Y+5	; 0x05
    1a94:	28 17       	cp	r18, r24
    1a96:	39 07       	cpc	r19, r25
    1a98:	64 f4       	brge	.+24     	; 0x1ab2 <fputc+0x3c>
    1a9a:	e8 81       	ld	r30, Y
    1a9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a9e:	01 93       	st	Z+, r16
    1aa0:	f9 83       	std	Y+1, r31	; 0x01
    1aa2:	e8 83       	st	Y, r30
    1aa4:	06 c0       	rjmp	.+12     	; 0x1ab2 <fputc+0x3c>
    1aa6:	e8 85       	ldd	r30, Y+8	; 0x08
    1aa8:	f9 85       	ldd	r31, Y+9	; 0x09
    1aaa:	80 2f       	mov	r24, r16
    1aac:	09 95       	icall
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	31 f4       	brne	.+12     	; 0x1abe <fputc+0x48>
    1ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	9f 83       	std	Y+7, r25	; 0x07
    1aba:	8e 83       	std	Y+6, r24	; 0x06
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <fputc+0x4c>
    1abe:	0f ef       	ldi	r16, 0xFF	; 255
    1ac0:	1f ef       	ldi	r17, 0xFF	; 255
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret

00001ace <__ultoa_invert>:
    1ace:	fa 01       	movw	r30, r20
    1ad0:	aa 27       	eor	r26, r26
    1ad2:	28 30       	cpi	r18, 0x08	; 8
    1ad4:	51 f1       	breq	.+84     	; 0x1b2a <__ultoa_invert+0x5c>
    1ad6:	20 31       	cpi	r18, 0x10	; 16
    1ad8:	81 f1       	breq	.+96     	; 0x1b3a <__ultoa_invert+0x6c>
    1ada:	e8 94       	clt
    1adc:	6f 93       	push	r22
    1ade:	6e 7f       	andi	r22, 0xFE	; 254
    1ae0:	6e 5f       	subi	r22, 0xFE	; 254
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	af 4f       	sbci	r26, 0xFF	; 255
    1aea:	b1 e0       	ldi	r27, 0x01	; 1
    1aec:	3e d0       	rcall	.+124    	; 0x1b6a <__ultoa_invert+0x9c>
    1aee:	b4 e0       	ldi	r27, 0x04	; 4
    1af0:	3c d0       	rcall	.+120    	; 0x1b6a <__ultoa_invert+0x9c>
    1af2:	67 0f       	add	r22, r23
    1af4:	78 1f       	adc	r23, r24
    1af6:	89 1f       	adc	r24, r25
    1af8:	9a 1f       	adc	r25, r26
    1afa:	a1 1d       	adc	r26, r1
    1afc:	68 0f       	add	r22, r24
    1afe:	79 1f       	adc	r23, r25
    1b00:	8a 1f       	adc	r24, r26
    1b02:	91 1d       	adc	r25, r1
    1b04:	a1 1d       	adc	r26, r1
    1b06:	6a 0f       	add	r22, r26
    1b08:	71 1d       	adc	r23, r1
    1b0a:	81 1d       	adc	r24, r1
    1b0c:	91 1d       	adc	r25, r1
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	20 d0       	rcall	.+64     	; 0x1b52 <__ultoa_invert+0x84>
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <__ultoa_invert+0x48>
    1b14:	68 94       	set
    1b16:	3f 91       	pop	r19
    1b18:	2a e0       	ldi	r18, 0x0A	; 10
    1b1a:	26 9f       	mul	r18, r22
    1b1c:	11 24       	eor	r1, r1
    1b1e:	30 19       	sub	r19, r0
    1b20:	30 5d       	subi	r19, 0xD0	; 208
    1b22:	31 93       	st	Z+, r19
    1b24:	de f6       	brtc	.-74     	; 0x1adc <__ultoa_invert+0xe>
    1b26:	cf 01       	movw	r24, r30
    1b28:	08 95       	ret
    1b2a:	46 2f       	mov	r20, r22
    1b2c:	47 70       	andi	r20, 0x07	; 7
    1b2e:	40 5d       	subi	r20, 0xD0	; 208
    1b30:	41 93       	st	Z+, r20
    1b32:	b3 e0       	ldi	r27, 0x03	; 3
    1b34:	0f d0       	rcall	.+30     	; 0x1b54 <__ultoa_invert+0x86>
    1b36:	c9 f7       	brne	.-14     	; 0x1b2a <__ultoa_invert+0x5c>
    1b38:	f6 cf       	rjmp	.-20     	; 0x1b26 <__ultoa_invert+0x58>
    1b3a:	46 2f       	mov	r20, r22
    1b3c:	4f 70       	andi	r20, 0x0F	; 15
    1b3e:	40 5d       	subi	r20, 0xD0	; 208
    1b40:	4a 33       	cpi	r20, 0x3A	; 58
    1b42:	18 f0       	brcs	.+6      	; 0x1b4a <__ultoa_invert+0x7c>
    1b44:	49 5d       	subi	r20, 0xD9	; 217
    1b46:	31 fd       	sbrc	r19, 1
    1b48:	40 52       	subi	r20, 0x20	; 32
    1b4a:	41 93       	st	Z+, r20
    1b4c:	02 d0       	rcall	.+4      	; 0x1b52 <__ultoa_invert+0x84>
    1b4e:	a9 f7       	brne	.-22     	; 0x1b3a <__ultoa_invert+0x6c>
    1b50:	ea cf       	rjmp	.-44     	; 0x1b26 <__ultoa_invert+0x58>
    1b52:	b4 e0       	ldi	r27, 0x04	; 4
    1b54:	a6 95       	lsr	r26
    1b56:	97 95       	ror	r25
    1b58:	87 95       	ror	r24
    1b5a:	77 95       	ror	r23
    1b5c:	67 95       	ror	r22
    1b5e:	ba 95       	dec	r27
    1b60:	c9 f7       	brne	.-14     	; 0x1b54 <__ultoa_invert+0x86>
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	61 05       	cpc	r22, r1
    1b66:	71 05       	cpc	r23, r1
    1b68:	08 95       	ret
    1b6a:	9b 01       	movw	r18, r22
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	0a 2e       	mov	r0, r26
    1b70:	06 94       	lsr	r0
    1b72:	57 95       	ror	r21
    1b74:	47 95       	ror	r20
    1b76:	37 95       	ror	r19
    1b78:	27 95       	ror	r18
    1b7a:	ba 95       	dec	r27
    1b7c:	c9 f7       	brne	.-14     	; 0x1b70 <__ultoa_invert+0xa2>
    1b7e:	62 0f       	add	r22, r18
    1b80:	73 1f       	adc	r23, r19
    1b82:	84 1f       	adc	r24, r20
    1b84:	95 1f       	adc	r25, r21
    1b86:	a0 1d       	adc	r26, r0
    1b88:	08 95       	ret

00001b8a <_exit>:
    1b8a:	f8 94       	cli

00001b8c <__stop_program>:
    1b8c:	ff cf       	rjmp	.-2      	; 0x1b8c <__stop_program>
